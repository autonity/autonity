engineVersion: 3.0.1
playbook:
  name: "Example playbook of E2E testing of Autonity consensus."
  stop: false  # true to stop this playbook, false to keep this playbook be run by test engine.
  testcases:
    - name: "TC-1: Happy case, send 10 token per TX last for 1 minutes."
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario: [] # leave it empty for no disaster happens.
      input:
        duration: 60 # num of seconds the transaction sending duration.
        senderNode: 0  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address will be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-2: 1 node crashed, and recover it again, not on-holding."
      condition:
        crashNodes: [2] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2] # select candidates from crashNodes.
      input:
        duration: 60 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-3: With 2 node crashed, N = 6, Q = ceil(2xN/3) = 4, not on-holding."
      re-deploy: true
      condition:
        crashNodes: [0, 1] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # re-deploy the network with new chain life cycle.
            action: "re-deploy"
          - delay: 60
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          - delay: 70 # stop the node after test running for 5 seconds.
            action: "stop"
            target: [0, 1] # select candidates from crashNodes.
      input:
        startAt: 70
        duration: 60 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-4: With 2 node crashed, 1 node back, after the back, consensus should not on-holding."
      re-deploy: true
      condition:
        crashNodes: [0, 1] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # redeploy the network.
            action: "re-deploy"
          - delay: 60
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          - delay: 70 # stop the node after test running for 65 seconds.
            action: "stop"
            target: [0, 1] # select candidates from crashNodes.
          - delay: 90 # start the node after test running for 60 seconds.
            action: "start"
            target: [0] # select candidates from crashNodes.
      input:
        startAt: 70
        duration: 120 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-5: With 2 node crashed, 2 node back, after the back, consensus should not on-holding."
      re-deploy: true
      condition:
        crashNodes: [0, 1] # contain the node domain name we want to crash.
        scenario:
          - delay: 1
            action: "re-deploy" # redeploy the network
          - delay: 60
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          - delay: 70 # stop the node after test running for 5 seconds.
            action: "stop"
            target: [0, 1] # select candidates from crashNodes.
          - delay: 90 # start the node after test running for 60 seconds.
            action: "start"
            target: [0, 1] # select candidates from crashNodes.
      input:
        startAt: 70
        duration: 120 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-6: With 3 node crashed, 3 of 6 crashed, system on-hold."
      re-deploy: true
      condition:
        crashNodes: [0, 1, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 1
            action: "re-deploy" # redeploy the network.
          - delay: 60
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          - delay: 70 # stop the node after test running for 5 seconds.
            action: "stop"
            target: [0, 1, 4] # select candidates from crashNodes.
      input:
        startAt: 120
        duration: 60 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: false # false means consensus engine should on-hold.

    - name: "TC-7: With 3 node crashed, 1 node recover, consensus engine should not on-hold."
      re-deploy: true
      condition:
        crashNodes: [0, 1, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 1
            action: "re-deploy" # redeploy the network.
          - delay: 60
            action: "start"
            target: [ 0, 1, 2, 3, 4, 5 ]
          - delay: 70 # stop the node after test running for seconds.
            action: "stop"
            target: [0, 1, 4] # select candidates from crashNodes.
          - delay: 80 # start the node after test running for 45 seconds.
            action: "start"
            target: [0] # select candidates from crashNodes.
      input:
        startAt: 120
        duration: 120 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-8: With 3 node crashed, 2 node recover, consensus engine should not on-hold."
      re-deploy: true
      condition:
        crashNodes: [0, 1, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 1
            action: "re-deploy"
          - delay: 60
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          - delay: 70 # stop the node after test running for 2 seconds.
            action: "stop"
            target: [0, 1, 4] # select candidates from crashNodes.
          - delay: 80 # start the node after test running for 30 seconds.
            action: "start"
            target: [0, 1] # select candidates from crashNodes.
      input:
        startAt: 90
        duration: 120 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-9: With 3 node crashed, 3 node recover again, consensus engine should not on-hold."
      re-deploy: true
      condition:
        crashNodes: [0, 1, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 1
            action: "re-deploy"
          - delay: 60
            action: "start"
            target: [ 0, 1, 2, 3, 4, 5 ]
          - delay: 65 # stop the node after test running for 5 seconds.
            action: "stop"
            target: [0, 1, 4] # select candidates from crashNodes.
          - delay: 90 # seconds
            action: "start"
            target: [0, 1, 4] # stop the specific node within 40s after test case start.
      input:
        startAt: 90
        duration: 90 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.


    ###################################bootstrap tests########################
    - name: "TC-10: Bootstrap from scratch, 2 by 2 on 5 seconds interval"
      re-deploy: true
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # cold re-deploy the network from scratch after 1 seconds of test case running.
            action: "re-deploy"
          - delay: 60 # seconds
            action: "start"
            target: [0, 1] # start the specific node within 30s after test case start.
          - delay: 65 # seconds
            action: "start"
            target: [2, 3] # start the specific node within 30s after test case start.
          - delay: 70 # seconds
            action: "start"
            target: [4, 5] # start the specific node within 30s after test case start.
      input:
        startAt: 70  # start the TX issuing from 180th seconds.
        duration: 90 # num of seconds the transaction sending duration.
        senderNode: 0  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    ###################################partitioning tests#####################
    - name: "TC-11: Network partition. 6 break into 2 slices with 3 node each slice, engine should on-hold."
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario:
          - delay: 2 # on the 5th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [3, 0], [3, 1], [3, 2]]
      input:
        duration: 60 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: false # false means consensus engine should on-hold.

    - name: "TC-12: Network partition. 6 break into 3 and 3, then the two slices recovers, engine recovers too."
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario:
          - delay: 2 # on the 10th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [3, 0], [3, 1], [3, 2]]
          - delay: 45 # on the 30th second, connect peers.
            action: "connect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [3, 0], [3, 1], [3, 2]]
      input:
        duration: 120 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-13: Network partition. 6 break into 4 and 2, main party(4 validator) should not on-hold."
      condition:
        crashNodes: [1, 2] # contain the nodes which leave the main party.
        scenario:
          - delay: 2 # on the 5th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[1, 0], [1, 4], [1, 5], [1,3], [2, 0], [2, 4], [2, 5], [2,3]]
      input:
        duration: 180 # num of seconds the transaction sending duration.
        senderNode: 0  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    #################special topologies#######################################
    - name: "TC-14: 6 nodes in Ring network topology, should not on-hold."
      re-deploy: true
      condition:
        crashNodes: [] # contain the nodes which leave the main party.
        scenario:
          - delay: 1
            action: "re-deploy"
          - delay: 60
            action: "start"
            target: [ 0, 1, 2, 3, 4, 5 ]
          - delay: 65 # on the 65th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[2, 0], [2, 4], [2, 5], [1, 4], [1, 5], [1, 3], [0, 5], [0, 3], [4,3]]
      input:
        startAt: 60
        duration: 60 # num of seconds the transaction sending duration.
        senderNode: 0  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-15: 6 nodes in bus line network topology, should not on-hold."
      condition:
        crashNodes: [] # contain the nodes which leave the main party.
        scenario:
          - delay: 2 # on the 5th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[2, 0], [2, 4], [2, 5], [1, 4], [1, 5], [1,3], [0, 5], [0,3], [4,3], [4, 0]]
      input:
        duration: 90 # num of seconds the transaction sending duration.
        senderNode: 0  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-16: 6 nodes in star network topology, should not on-hold."
      condition:
        crashNodes: [] # contain the nodes which leave the main party.
        scenario:
          - delay: 2 # on the 5th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4,3], [4, 5], [4,2], [4,1], [5, 1], [5, 2], [5,3], [3, 1], [3,2], [2, 1]]
      input:
        duration: 90 # num of seconds the transaction sending duration.
        senderNode: 0  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    #############################traffic quality and latency tests############################
    - name: "TC-17: network traffic control with package delay, loss, duplication, reordering, corruption."
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario:
          - delay: 2 # on the 5th second, the step will be executed.
            action: "delay" # apply network delay on ethernet interface for host, both up-link and down-link
            target: [0, 1]
            latency:
              - host: 0
                uplink:  # out-coming message
                  delay: 200 # apply 500s delay to host's p-link
                  lossRate: 1 # 1% loss rate of up-link package
                  duplicateRate: 1 # 1% duplicate rate of up-link package
                  reorderRate: 1 # 1% reorder rate of up-link.
                  corruptRate: 1 # 1% corrupt rate of up-link.
                downlink:  # in-coming message
                  delay: 200 # apply 1000ms delay to host's down-link
                  lossRate: 1 # 1% loss rate of down-link package
                  duplicateRate: 1 # 1% duplicate rate of down-link package
                  reorderRate: 1 # 1% reorder rate of down-link.
                  corruptRate: 1 # 1% corrupt rate of down-link.
              - host: 1
                uplink:  # out-coming message
                  delay: 300 # apply 1000s delay to host's p-link
                  lossRate: 1 # 1% loss rate of up-link package
                  duplicateRate: 1 # 1% duplicate rate of up-link package
                  reorderRate: 1 # 1% reorder rate of up-link.
                  corruptRate: 1 # 1% corrupt rate of up-link.
                downlink:  # in-coming message
                  delay: 300 # apply 600ms delay to host's down-link
                  lossRate: 1 # 1% loss rate of down-link package
                  duplicateRate: 1 # 1% duplicate rate of down-link package
                  reorderRate: 1 # 1% reorder rate of down-link.
                  corruptRate: 1 # 1% corrupt rate of down-link.
          - delay: 30 # on the 10th second, the step will be executed.
            action: "un-delay" # recover the traffic delay applied for target nodes.
            target: [0, 1]
      input:
        duration: 90 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 4  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    ########################bootstrap test#######################################
    - name: "TC-18: Bootstrap from scratch, with all node start in the same time."
      re-deploy: true
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # cold re-deploy the network from scratch after 1 seconds of test case running.
            action: "re-deploy"
          - delay: 60 # start all node in 120s later than start time.
            action: "start"
            target: [0, 1, 2, 3, 5, 4]
      input:
        startAt: 90  # start the TX issuing from 180th seconds.
        duration: 90 # num of seconds the transaction sending duration.
        senderNode: 0  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-19: Bootstrap from scratch with 1 node crashed and recover later during the bootstrap."
      re-deploy: true
      condition:
        crashNodes: [0] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # cold re-deploy the network from scratch after 1 seconds of test case running.
            action: "re-deploy"
          - delay: 30 # seconds
            action: "start"
            target: [0] # start the specific node within 30s after test case start.
          - delay: 90 # seconds
            action: "start"
            target: [1, 2] # start the specific node within 90s after test case start.
          - delay: 95 # seconds
            action: "stop"
            target: [0] # start the specific node within 120s after test case start.
          - delay: 100 # seconds
            action: "start"
            target: [3] # start the specific node within 150s after test case start.
          - delay: 130 # seconds
            action: "start"
            target: [0, 5, 4] # start the specific node within 30s after test case start.
      input:
        startAt: 130  # start the TX issuing from 180th seconds.
        duration: 300 # once we have WAL, this duration could be reduced to 200.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-20: Bootstrap from scratch with 2 nodes crashed and 2 nodes recover later during the bootstrap."
      re-deploy: true
      condition:
        crashNodes: [0, 1] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # cold re-deploy the network from scratch after 1 seconds of test case running.
            action: "re-deploy"
          - delay: 60 # seconds
            action: "start"
            target: [0, 1, 2] # start the specific node within 30s after test case start.
          - delay: 90 # seconds
            action: "stop"
            target: [0, 1] # start the specific node within 120s after test case start.
          - delay: 120 # seconds
            action: "start"
            target: [3, 0, 5] # start the specific node within 150s after test case start.
          - delay: 150 # seconds
            action: "start"
            target: [4, 1] # start the specific node within 210s after test case start. action: "start"
      input:
        startAt: 150  # start the TX issuing from 180th seconds.
        duration:  120 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-21: Bootstrap from scratch with 3 node crashed and 1 node recover later during the bootstrap. Consensus should not no-hold."
      re-deploy: true
      condition:
        crashNodes: [0, 1, 2] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # cold re-deploy the network from scratch after 1 seconds of test case running.
            action: "re-deploy"
          - delay: 60 # seconds
            action: "start"
            target: [0, 1, 2, 3, 5, 4] # start the specific node within 30s after test case start.
          - delay: 70 # seconds
            action: "stop"
            target: [0, 1, 2] # start the specific node within 90s after test case start.
          - delay: 80 # seconds
            action: "start"
            target: [2] # start the specific node within 120s after test case start.
      input:
        startAt: 90 # start the TX issuing from 180th seconds.
        duration: 90 # num of seconds the transaction sending duration.
        senderNode: 5  # node coin_base address will be used as default sender address.
        receiverNode: 4  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-22: Bootstrap from scratch, start n1 to n4 for mining, shutdown all then to start n3,n4,n5,n6. Overlapped n3, n4 like: <<n1, n2, {{n3, n4>> , n5, n6}}"
      re-deploy: true
      condition:
        crashNodes: [0, 1, 2, 3] # contain the node domain name we want to crash.
        scenario:
          - delay: 1 # cold re-deploy the network from scratch after 1 seconds of test case running.
            action: "re-deploy"
          - delay: 60 # seconds
            action: "start"
            target: [0, 1, 2, 3] # start the specific nodes within 30s after test case start.
          - delay: 70 # seconds
            action: "stop"
            target: [0, 1, 2, 3] # stop the specific node within 90s after test case start.
          - delay: 80 # seconds
            action: "start"
            target: [2, 3, 5, 4] # start the specific node within 120s after test case start.
      input:
        startAt: 80  # start the TX issuing from 180th seconds.
        duration: 120 # num of seconds the transaction sending duration.
        senderNode: 4  # node coin_base address will be used as default sender address.
        receiverNode: 5  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    ######################reset within star topology###################################3
    - name: "TC-23: 6 nodes in star network topology, restart the central node, should not on-hold."
      re-deploy: true
      condition:
        crashNodes: [0] # contain the nodes which leave the main party.
        scenario:
          - delay: 1
            action: "re-deploy"
          - delay: 60
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          - delay: 70 # on the 10th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4,3], [4, 5], [4,2], [4,1], [5, 1], [5, 2], [5,3], [3, 1], [3,2], [2, 1]]
          - delay: 90 # on the 30th second, stop central node.
            action: "stop" # it apply p2p connection by managing ip-tables in linux kernel.
            target: [0]
          - delay: 100 # on the 150th second, start central node.
            action: "start" # it apply p2p connection by managing ip-tables in linux kernel.
            target: [0]
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    ####################reset and traffic control over star topology################################
    - name: "TC-24: 6 nodes in star network topology, restart the central node with 1s traffic control should not on-hold."
      condition:
        crashNodes: [0] # contain the nodes which leave the main party.
        scenario:
          - delay: 5 # on the 10th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4,3], [4, 5], [4,2], [4,1], [5, 1], [5, 2], [5,3], [3, 1], [3,2], [2, 1]]
          - delay: 30 # on the 30th second, stop central node.
            action: "stop" # it apply p2p connection by managing ip-tables in linux kernel.
            target: [0]
          - delay: 40 # on the 150th second, start central node.
            action: "start" # it apply p2p connection by managing ip-tables in linux kernel.
            target: [0]
          - delay: 60 # on the 60th second, apply traffic control to central node.
            action: "delay" # apply network delay on ethernet interface for host, both up-link and down-link
            target: [0]
            latency:
              - host: 0
                uplink:  # out-coming message
                  delay: 1000 # apply 1000ms delay to host's p-link
                  lossRate: 1 # 1% loss rate of up-link package
                  duplicateRate: 1 # 1% duplicate rate of up-link package
                  reorderRate: 1 # 1% reorder rate of up-link.
                  corruptRate: 1 # 1% corrupt rate of up-link.
                downlink:  # in-coming message
                  delay: 1000 # apply 1000ms delay to host's down-link
                  lossRate: 1 # 1% loss rate of down-link package
                  duplicateRate: 1 # 1% duplicate rate of down-link package
                  reorderRate: 1 # 1% reorder rate of down-link.
                  corruptRate: 1 # 1% corrupt rate of down-link.
          - delay: 90 # on the 360h second, the step will be executed.
            action: "un-delay" # recover the traffic delay applied for target nodes.
            target: [0]
      input:
        duration: 180 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    ################## keep quorum nodes, however applied with traffic control #################
    - name: "TC-25: N = 6, Q = 4, let only 4 validators running with one of them be applied with heavy traffic control."
      condition:
        crashNodes: [5, 4] # contain the nodes which leave the main party.
        scenario:
          - delay: 5
            action: "stop"
            target: [5, 4]
          - delay: 45 # on the 45th second, apply traffic control to central node.
            action: "delay" # apply network delay on ethernet interface for host, both up-link and down-link
            target: [0]
            latency:
              - host: 0
                uplink:  # out-coming message
                  delay: 1000 # apply 1000ms delay to host's p-link
                  lossRate: 1 # 1% loss rate of up-link package
                  duplicateRate: 1 # 1% duplicate rate of up-link package
                  reorderRate: 1 # 1% reorder rate of up-link.
                  corruptRate: 1 # 1% corrupt rate of up-link.
                downlink:  # in-coming message
                  delay: 1000 # apply 1000ms delay to host's down-link
                  lossRate: 1 # 1% loss rate of down-link package
                  duplicateRate: 1 # 1% duplicate rate of down-link package
                  reorderRate: 1 # 1% reorder rate of down-link.
                  corruptRate: 1 # 1% corrupt rate of down-link.
          - delay: 90 # on the 360h second, the step will be executed.
            action: "un-delay" # recover the traffic delay applied for target nodes.
            target: [0]
      input:
        duration: 180 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 3  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    ##################### bridging in between two partition######################
    - name: "TC-26: Network partition. 6 break into 3 and 3, then the two slices connected by bridge, engine recovers too."
      re-deploy: true
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario:
          - delay: 1
            action: "re-deploy"
          - delay: 60
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          - delay: 65 # on the 10th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [3, 0], [3, 1], [3, 2]]
          - delay: 150 # on the 90th second, connect peers.
            action: "connect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4, 0]]
      input:
        duration: 260 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.

    - name: "TC-27: Network partition. 6 break to 3 full mesh plus 1 node, and 2 nodes of bus line, recover with 3 nodes of full mesh plus a 3 nodes of bus line."
      re-deploy: true
      condition:
        crashNodes: [] # contain the node domain name we want to crash.
        scenario:
          - delay: 1
            action: "re-deploy"
          - delay: 2
            action: "start"
            target: [0, 1, 2, 3, 4, 5]
          # 6 break to 3 + 3 in full mesh, then break one of the 3 into 1 + 2.
          - delay: 65 # on the 10th second, disconnect peers.
            action: "disconnect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [3, 0], [3, 1], [3, 2], [0, 1], [0, 2]]
          # 3 + 1 alone, producing blocks.
          - delay: 85 # on the 25th second, connect peers. 3 + 1, start producing block.
            action: "connect" # it apply p2p disconnection by managing ip-tables in linux kernel.
            peers: [[4, 0]]
          # break the alone node from 3 full mesh,
          - delay: 125 # on the 65th second, disconnect peers, on-hold.
            action: "disconnect" # turn to 3 + 1 + 2
            peers: [[4, 0]]
          # connect the left node in bus line 65.198-----79.95-----85.250
          - delay: 185 # on the 125th second, turn to 6 with 3 node in full mesh + 3 node in bus line.
            action: "connect" # it apply p2p connection by managing ip-tables in linux kernel.
            peers: [[0, 1], [4, 0]]
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 2  # node coin_base address will be used as default sender address.
        receiverNode: 1  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
