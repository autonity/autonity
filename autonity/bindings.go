// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package autonity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/autonity/autonity"
	"github.com/autonity/autonity/accounts/abi"
	"github.com/autonity/autonity/accounts/abi/bind"
	"github.com/autonity/autonity/common"
	"github.com/autonity/autonity/core/types"
	"github.com/autonity/autonity/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccountabilityConfig is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityConfig struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}

// AccountabilityEvent is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityEvent struct {
	Chunks         uint8
	ChunkId        uint8
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}

// AutonityCommitteeMember is an auto generated low-level Go binding around an user-defined struct.
type AutonityCommitteeMember struct {
	Addr         common.Address
	VotingPower  *big.Int
	ConsensusKey []byte
}

// AutonityConfig is an auto generated low-level Go binding around an user-defined struct.
type AutonityConfig struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}

// AutonityContracts is an auto generated low-level Go binding around an user-defined struct.
type AutonityContracts struct {
	AccountabilityContract      common.Address
	OracleContract              common.Address
	AcuContract                 common.Address
	SupplyControlContract       common.Address
	StabilizationContract       common.Address
	UpgradeManagerContract      common.Address
	InflationControllerContract common.Address
	NonStakableVestingContract  common.Address
}

// AutonityPolicy is an auto generated low-level Go binding around an user-defined struct.
type AutonityPolicy struct {
	TreasuryFee             *big.Int
	MinBaseFee              *big.Int
	DelegationRate          *big.Int
	UnbondingPeriod         *big.Int
	InitialInflationReserve *big.Int
	TreasuryAccount         common.Address
}

// AutonityProtocol is an auto generated low-level Go binding around an user-defined struct.
type AutonityProtocol struct {
	OperatorAccount common.Address
	EpochPeriod     *big.Int
	BlockPeriod     *big.Int
	CommitteeSize   *big.Int
}

// AutonityValidator is an auto generated low-level Go binding around an user-defined struct.
type AutonityValidator struct {
	Treasury                 common.Address
	NodeAddress              common.Address
	OracleAddress            common.Address
	Enode                    string
	CommissionRate           *big.Int
	BondedStake              *big.Int
	UnbondingStake           *big.Int
	UnbondingShares          *big.Int
	SelfBondedStake          *big.Int
	SelfUnbondingStake       *big.Int
	SelfUnbondingShares      *big.Int
	SelfUnbondingStakeLocked *big.Int
	LiquidStateContract      common.Address
	LiquidSupply             *big.Int
	RegistrationBlock        *big.Int
	TotalSlashed             *big.Int
	JailReleaseBlock         *big.Int
	ProvableFaultCount       *big.Int
	ConsensusKey             []byte
	State                    uint8
}

// ContractBaseContract is an auto generated low-level Go binding around an user-defined struct.
type ContractBaseContract struct {
	CurrentNTNAmount *big.Int
	WithdrawnValue   *big.Int
	Start            *big.Int
	CliffDuration    *big.Int
	TotalDuration    *big.Int
	CanStake         bool
}

// IOracleRoundData is an auto generated low-level Go binding around an user-defined struct.
type IOracleRoundData struct {
	Round     *big.Int
	Price     *big.Int
	Timestamp *big.Int
	Success   bool
}

// InflationControllerParams is an auto generated low-level Go binding around an user-defined struct.
type InflationControllerParams struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}

// NonStakableVestingSchedule is an auto generated low-level Go binding around an user-defined struct.
type NonStakableVestingSchedule struct {
	Start                     *big.Int
	CliffDuration             *big.Int
	TotalDuration             *big.Int
	Amount                    *big.Int
	UnsubscribedAmount        *big.Int
	TotalUnlocked             *big.Int
	TotalUnlockedUnsubscribed *big.Int
	LastUnlockTime            *big.Int
}

// StabilizationConfig is an auto generated low-level Go binding around an user-defined struct.
type StabilizationConfig struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}

// ACUMetaData contains all meta data concerning the ACU contract.
var ACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidBasket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoACUValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"BasketModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"}],\"name\":\"modifyBasket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"44b4708a": "modifyBasket(string[],uint256[],uint256)",
		"d54d2799": "quantities()",
		"146ca531": "round()",
		"f51e181a": "scale()",
		"683dd191": "scaleFactor()",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"07039ff9": "symbols()",
		"a2e62045": "update()",
		"3fa4f245": "value()",
	},
	Bin: "",
}

// ACUABI is the input ABI used to generate the binding from.
// Deprecated: Use ACUMetaData.ABI instead.
var ACUABI = ACUMetaData.ABI

// Deprecated: Use ACUMetaData.Sigs instead.
// ACUFuncSigs maps the 4-byte function signature to its string representation.
var ACUFuncSigs = ACUMetaData.Sigs

// ACUBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ACUMetaData.Bin instead.
var ACUBin = ACUMetaData.Bin

// DeployACU deploys a new Ethereum contract, binding an instance of ACU to it.
func DeployACU(auth *bind.TransactOpts, backend bind.ContractBackend, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int, autonity common.Address, operator common.Address, oracle common.Address) (common.Address, *types.Transaction, *ACU, error) {
	parsed, err := ACUMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ACUBin), backend, symbols_, quantities_, scale_, autonity, operator, oracle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ACU{ACUCaller: ACUCaller{contract: contract}, ACUTransactor: ACUTransactor{contract: contract}, ACUFilterer: ACUFilterer{contract: contract}}, nil
}

// ACU is an auto generated Go binding around an Ethereum contract.
type ACU struct {
	ACUCaller     // Read-only binding to the contract
	ACUTransactor // Write-only binding to the contract
	ACUFilterer   // Log filterer for contract events
}

// ACUCaller is an auto generated read-only Go binding around an Ethereum contract.
type ACUCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ACUTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ACUTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ACUFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ACUFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ACUSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ACUSession struct {
	Contract     *ACU              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ACUCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ACUCallerSession struct {
	Contract *ACUCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ACUTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ACUTransactorSession struct {
	Contract     *ACUTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ACURaw is an auto generated low-level Go binding around an Ethereum contract.
type ACURaw struct {
	Contract *ACU // Generic contract binding to access the raw methods on
}

// ACUCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ACUCallerRaw struct {
	Contract *ACUCaller // Generic read-only contract binding to access the raw methods on
}

// ACUTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ACUTransactorRaw struct {
	Contract *ACUTransactor // Generic write-only contract binding to access the raw methods on
}

// NewACU creates a new instance of ACU, bound to a specific deployed contract.
func NewACU(address common.Address, backend bind.ContractBackend) (*ACU, error) {
	contract, err := bindACU(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ACU{ACUCaller: ACUCaller{contract: contract}, ACUTransactor: ACUTransactor{contract: contract}, ACUFilterer: ACUFilterer{contract: contract}}, nil
}

// NewACUCaller creates a new read-only instance of ACU, bound to a specific deployed contract.
func NewACUCaller(address common.Address, caller bind.ContractCaller) (*ACUCaller, error) {
	contract, err := bindACU(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ACUCaller{contract: contract}, nil
}

// NewACUTransactor creates a new write-only instance of ACU, bound to a specific deployed contract.
func NewACUTransactor(address common.Address, transactor bind.ContractTransactor) (*ACUTransactor, error) {
	contract, err := bindACU(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ACUTransactor{contract: contract}, nil
}

// NewACUFilterer creates a new log filterer instance of ACU, bound to a specific deployed contract.
func NewACUFilterer(address common.Address, filterer bind.ContractFilterer) (*ACUFilterer, error) {
	contract, err := bindACU(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ACUFilterer{contract: contract}, nil
}

// bindACU binds a generic wrapper to an already deployed contract.
func bindACU(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ACUABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ACU *ACURaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ACU.Contract.ACUCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ACU *ACURaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ACU.Contract.ACUTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ACU *ACURaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ACU.Contract.ACUTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ACU *ACUCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ACU.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ACU *ACUTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ACU.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ACU *ACUTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ACU.Contract.contract.Transact(opts, method, params...)
}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACUCaller) Quantities(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "quantities")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACUSession) Quantities() ([]*big.Int, error) {
	return _ACU.Contract.Quantities(&_ACU.CallOpts)
}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACUCallerSession) Quantities() ([]*big.Int, error) {
	return _ACU.Contract.Quantities(&_ACU.CallOpts)
}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACUCaller) Round(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "round")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACUSession) Round() (*big.Int, error) {
	return _ACU.Contract.Round(&_ACU.CallOpts)
}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACUCallerSession) Round() (*big.Int, error) {
	return _ACU.Contract.Round(&_ACU.CallOpts)
}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACUCaller) Scale(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "scale")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACUSession) Scale() (*big.Int, error) {
	return _ACU.Contract.Scale(&_ACU.CallOpts)
}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACUCallerSession) Scale() (*big.Int, error) {
	return _ACU.Contract.Scale(&_ACU.CallOpts)
}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACUCaller) ScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "scaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACUSession) ScaleFactor() (*big.Int, error) {
	return _ACU.Contract.ScaleFactor(&_ACU.CallOpts)
}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACUCallerSession) ScaleFactor() (*big.Int, error) {
	return _ACU.Contract.ScaleFactor(&_ACU.CallOpts)
}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACUCaller) Symbols(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "symbols")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACUSession) Symbols() ([]string, error) {
	return _ACU.Contract.Symbols(&_ACU.CallOpts)
}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACUCallerSession) Symbols() ([]string, error) {
	return _ACU.Contract.Symbols(&_ACU.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACUCaller) Value(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "value")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACUSession) Value() (*big.Int, error) {
	return _ACU.Contract.Value(&_ACU.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACUCallerSession) Value() (*big.Int, error) {
	return _ACU.Contract.Value(&_ACU.CallOpts)
}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACUTransactor) ModifyBasket(opts *bind.TransactOpts, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "modifyBasket", symbols_, quantities_, scale_)
}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACUSession) ModifyBasket(symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (*types.Transaction, error) {
	return _ACU.Contract.ModifyBasket(&_ACU.TransactOpts, symbols_, quantities_, scale_)
}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACUTransactorSession) ModifyBasket(symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (*types.Transaction, error) {
	return _ACU.Contract.ModifyBasket(&_ACU.TransactOpts, symbols_, quantities_, scale_)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACUTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACUSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOperator(&_ACU.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACUTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOperator(&_ACU.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACUTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACUSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOracle(&_ACU.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACUTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOracle(&_ACU.TransactOpts, oracle)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACUTransactor) Update(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "update")
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACUSession) Update() (*types.Transaction, error) {
	return _ACU.Contract.Update(&_ACU.TransactOpts)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACUTransactorSession) Update() (*types.Transaction, error) {
	return _ACU.Contract.Update(&_ACU.TransactOpts)
}

// ACUBasketModifiedIterator is returned from FilterBasketModified and is used to iterate over the raw logs and unpacked data for BasketModified events raised by the ACU contract.
type ACUBasketModifiedIterator struct {
	Event *ACUBasketModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ACUBasketModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ACUBasketModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ACUBasketModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ACUBasketModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ACUBasketModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ACUBasketModified represents a BasketModified event raised by the ACU contract.
type ACUBasketModified struct {
	Symbols    []string
	Quantities []*big.Int
	Scale      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBasketModified is a free log retrieval operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
//
// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
func (_ACU *ACUFilterer) FilterBasketModified(opts *bind.FilterOpts) (*ACUBasketModifiedIterator, error) {

	logs, sub, err := _ACU.contract.FilterLogs(opts, "BasketModified")
	if err != nil {
		return nil, err
	}
	return &ACUBasketModifiedIterator{contract: _ACU.contract, event: "BasketModified", logs: logs, sub: sub}, nil
}

// WatchBasketModified is a free log subscription operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
//
// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
func (_ACU *ACUFilterer) WatchBasketModified(opts *bind.WatchOpts, sink chan<- *ACUBasketModified) (event.Subscription, error) {

	logs, sub, err := _ACU.contract.WatchLogs(opts, "BasketModified")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ACUBasketModified)
				if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBasketModified is a log parse operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
//
// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
func (_ACU *ACUFilterer) ParseBasketModified(log types.Log) (*ACUBasketModified, error) {
	event := new(ACUBasketModified)
	if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ACUUpdatedIterator is returned from FilterUpdated and is used to iterate over the raw logs and unpacked data for Updated events raised by the ACU contract.
type ACUUpdatedIterator struct {
	Event *ACUUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ACUUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ACUUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ACUUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ACUUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ACUUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ACUUpdated represents a Updated event raised by the ACU contract.
type ACUUpdated struct {
	Height    *big.Int
	Timestamp *big.Int
	Round     *big.Int
	Value     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUpdated is a free log retrieval operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
//
// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
func (_ACU *ACUFilterer) FilterUpdated(opts *bind.FilterOpts) (*ACUUpdatedIterator, error) {

	logs, sub, err := _ACU.contract.FilterLogs(opts, "Updated")
	if err != nil {
		return nil, err
	}
	return &ACUUpdatedIterator{contract: _ACU.contract, event: "Updated", logs: logs, sub: sub}, nil
}

// WatchUpdated is a free log subscription operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
//
// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
func (_ACU *ACUFilterer) WatchUpdated(opts *bind.WatchOpts, sink chan<- *ACUUpdated) (event.Subscription, error) {

	logs, sub, err := _ACU.contract.WatchLogs(opts, "Updated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ACUUpdated)
				if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdated is a log parse operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
//
// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
func (_ACU *ACUFilterer) ParseUpdated(log types.Log) (*ACUUpdated, error) {
	event := new(ACUUpdated)
	if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityMetaData contains all meta data concerning the Accountability contract.
var AccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"b5b7a184": "epochPeriod()",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"c50d21f0": "handleEvent((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"6b5f444c": "setEpochPeriod(uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "0x608060405260006011553480156200001657600080fd5b5060405162003e2d38038062003e2d8339810160408190526200003991620000f7565b600180546001600160a01b0319166001600160a01b03841690811790915560408051636fd8d26960e11b8152905163dfb1a4d2916004808201926020929091908290030181865afa15801562000093573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b99190620001bf565b6000558051600355602081015160045560408101516005556060810151600655608081015160075560a081015160085560c0015160095550620001d9565b6000808284036101008112156200010d57600080fd5b83516001600160a01b03811681146200012557600080fd5b925060e0601f19820112156200013a57600080fd5b5060405160e081016001600160401b03811182821017156200016c57634e487b7160e01b600052604160045260246000fd5b80604052506020840151815260408401516020820152606084015160408201526080840151606082015260a0840151608082015260c084015160a082015260e084015160c0820152809150509250929050565b600060208284031215620001d257600080fd5b5051919050565b613c4480620001e96000396000f3fe6080604052600436106100c25760003560e01c80637ccecadd1161007f578063b5b7a18411610059578063b5b7a1841461029f578063bebaa8fc146102c3578063c50d21f0146102f0578063e7bb0b521461031057600080fd5b80637ccecadd146102285780639cb22b061461025f578063a8031a1d1461028c57600080fd5b806301567739146100c75780630b7914301461011a5780634108a95a146101525780636b5f444c146101825780636c9789b0146101a457806379502c55146101c4575b600080fd5b3480156100d357600080fd5b506100fd6100e2366004612ff6565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012657600080fd5b5061013a61013536600461301a565b610348565b6040516101119c9b9a999897969594939291906130bd565b34801561015e57600080fd5b5061017261016d366004613158565b61045b565b6040519015158152602001610111565b34801561018e57600080fd5b506101a261019d36600461301a565b61050b565b005b3480156101b057600080fd5b506101a26101bf3660046131a4565b610543565b3480156101d057600080fd5b506003546004546005546006546007546008546009546101f39695949392919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610111565b34801561023457600080fd5b50610248610243366004613158565b610586565b604080519215158352602083019190915201610111565b34801561026b57600080fd5b5061027f61027a366004612ff6565b6106db565b6040516101119190613297565b6101a261029a3660046132aa565b610902565b3480156102ab57600080fd5b506102b560005481565b604051908152602001610111565b3480156102cf57600080fd5b506102e36102de366004612ff6565b610b80565b60405161011191906132d6565b3480156102fc57600080fd5b506101a261030b36600461346b565b610e1f565b34801561031c57600080fd5b506102b561032b3660046132aa565b600e60209081526000928352604080842090915290825290205481565b6002818154811061035857600080fd5b600091825260209091206008909102018054600182015460028301805460ff8085169650610100850481169562010000860482169563010000008104909216946001600160a01b03600160201b9093048316949216929091906103ba90613577565b80601f01602080910402602001604051908101604052809291908181526020018280546103e690613577565b80156104335780601f1061040857610100808354040283529160200191610433565b820191906000526020600020905b81548152906001019060200180831161041657829003601f168201915b505050505090806003015490806004015490806005015490806006015490806007015490508c565b6000806104678461118c565b6001546040516396b477cb60e01b8152600481018690529192506000916001600160a01b03909116906396b477cb90602401602060405180830381865afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da91906135b1565b6001600160a01b0387166000908152600e602090815260408083209383529290522054919091109150509392505050565b6001546001600160a01b0316331461053e5760405162461bcd60e51b8152600401610535906135ca565b60405180910390fd5b600055565b6001546001600160a01b0316331461056d5760405162461bcd60e51b8152600401610535906135ca565b6105756111f7565b80156105835761058361154f565b50565b60008060006105948561118c565b6001546040516396b477cb60e01b8152600481018790529192506000916001600160a01b03909116906396b477cb90602401602060405180830381865afa1580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060791906135b1565b6001600160a01b0388166000908152600e6020908152604080832084845290915290205490915082116106415760009350600092506106d1565b6001600160a01b0387166000908152600c6020526040902054156106c8576001600160a01b0387166000908152600c602052604081205460029061068790600190613624565b8154811061069757610697613637565b906000526020600020906008020190506000945060036000015481600401546106c0919061364d565b9350506106d1565b60019350600092505b5050935093915050565b6106e3612f09565b6001600160a01b0382166000908152600c60205260409020546107385760405162461bcd60e51b815260206004820152600d60248201526c37379030b1b1bab9b0ba34b7b760991b6044820152606401610535565b6001600160a01b0382166000908152600c602052604090205460029061076090600190613624565b8154811061077057610770613637565b600091825260209182902060408051610180810182526008909302909101805460ff8082168552610100820481169585019590955292939092918401916201000090041660028111156107c5576107c5613033565b60028111156107d6576107d6613033565b815281546020909101906301000000900460ff1660098111156107fb576107fb613033565b600981111561080c5761080c613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161084790613577565b80601f016020809104026020016040519081016040528092919081815260200182805461087390613577565b80156108c05780601f10610895576101008083540402835291602001916108c0565b820191906000526020600020905b8154815290600101906020018083116108a357829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b6001546001600160a01b0316331461092c5760405162461bcd60e51b8152600401610535906135ca565b6001546001600160a01b038381166000908152600a6020526040808220549051630c825d9760e11b8152908316600482015290929190911690631904bb2e90602401600060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b391908101906136c7565b5160015460405163a9059cbb60e01b81526001600160a01b0380841660048301526024820186905292935091169063a9059cbb906044016020604051808303816000875af1925050508015610a25575060408051601f3d908101601f19168201909252610a2291810190613845565b60015b15610a2c57505b6000816001600160a01b0316346108fc90604051600060405180830381858888f193505050503d8060008114610a7e576040519150601f19603f3d011682016040523d82523d6000602084013e610a83565b606091505b5050905080610b5657600160009054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190613862565b6001600160a01b03163460405160006040518083038185875af1925050503d8060008114610b4d576040519150601f19603f3d011682016040523d82523d6000602084013e610b52565b606091505b5050505b5050506001600160a01b03166000908152600a6020526040902080546001600160a01b0319169055565b6001600160a01b0381166000908152600b60205260408120546060919067ffffffffffffffff811115610bb557610bb5613338565b604051908082528060200260200182016040528015610bee57816020015b610bdb612f09565b815260200190600190039081610bd35790505b50905060005b6001600160a01b0384166000908152600b6020526040902054811015610e18576001600160a01b0384166000908152600b6020526040902080546002919083908110610c4257610c42613637565b906000526020600020015481548110610c5d57610c5d613637565b600091825260209182902060408051610180810182526008909302909101805460ff808216855261010082048116958501959095529293909291840191620100009004166002811115610cb257610cb2613033565b6002811115610cc357610cc3613033565b815281546020909101906301000000900460ff166009811115610ce857610ce8613033565b6009811115610cf957610cf9613033565b815281546001600160a01b03600160201b909104811660208301526001830154166040820152600282018054606090920191610d3490613577565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6090613577565b8015610dad5780601f10610d8257610100808354040283529160200191610dad565b820191906000526020600020905b815481529060010190602001808311610d9057829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050828281518110610dfa57610dfa613637565b60200260200101819052508080610e109061387f565b915050610bf4565b5092915050565b600154604051630c825d9760e11b81523360048201526000916001600160a01b031690631904bb2e90602401600060405180830381865afa158015610e68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e9091908101906136c7565b60208101519091506001600160a01b03163314610f055760405162461bcd60e51b815260206004820152602d60248201527f66756e6374696f6e207265737472696374656420746f2061207265676973746560448201526c3932b2103b30b634b230ba37b960991b6064820152608401610535565b60808201516001600160a01b03163314610f615760405162461bcd60e51b815260206004820152601d60248201527f6576656e74207265706f72746572206d7573742062652063616c6c65720000006044820152606401610535565b6001826000015160ff161115611116576000610f7c83611831565b905080610f8857505050565b336000908152600d6020908152604091829020825161018081018452815460ff80821683526101008204811694830194909452909391929184019162010000909104166002811115610fdc57610fdc613033565b6002811115610fed57610fed613033565b815281546020909101906301000000900460ff16600981111561101257611012613033565b600981111561102357611023613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161105e90613577565b80601f016020809104026020016040519081016040528092919081815260200182805461108a90613577565b80156110d75780601f106110ac576101008083540402835291602001916110d7565b820191906000526020600020905b8154815290600101906020018083116110ba57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509250505b60008260400151600281111561112e5761112e613033565b036111405761113c82611a6a565b5050565b60018260400151600281111561115857611158613033565b036111665761113c82611c70565b60028260400151600281111561117e5761117e613033565b0361113c5761113c82611ddf565b600060098260098111156111a2576111a2613033565b036111b05760025b92915050565b60008260098111156111c4576111c4613033565b036111d05760026111aa565b60018260098111156111e4576111e4613033565b036111f05760026111aa565b60026111aa565b6011545b60105481101561154a5760006010828154811061121a5761121a613637565b90600052602060002001549050806000036112355750611538565b611240600182613624565b905060006002828154811061125757611257613637565b600091825260209182902060408051610180810182526008909302909101805460ff8082168552610100820481169585019590955292939092918401916201000090041660028111156112ac576112ac613033565b60028111156112bd576112bd613033565b815281546020909101906301000000900460ff1660098111156112e2576112e2613033565b60098111156112f3576112f3613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161132e90613577565b80601f016020809104026020016040519081016040528092919081815260200182805461135a90613577565b80156113a75780601f1061137c576101008083540402835291602001916113a7565b820191906000526020600020905b81548152906001019060200180831161138a57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050436003600001548261014001516113fb919061364d565b1115611408575050601155565b60a08101516001600160a01b03166000908152600c6020526040812081905560608201516114359061118c565b60a08301516001600160a01b03166000908152600e602090815260408083206101208701518452909152902054909150811161147357505050611538565b60a0820180516001600160a01b039081166000908152600e6020908152604080832061012088015184528252808320869055845184168352600b825280832080546001808201835591855283852001899055600f805491820181559093527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290920187905592518151858152938401879052909116917f6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f910160405180910390a25050505b806115428161387f565b9150506111fb565b601155565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663c9d97af46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c991906135b1565b905060005b600f5481101561164057816002600f83815481106115ee576115ee613637565b90600052602060002001548154811061160957611609613637565b9060005260206000209060080201600501540361162e5761162b60018461364d565b92505b806116388161387f565b9150506115ce565b5060005b600f54811015611824576118126002600f838154811061166657611666613637565b90600052602060002001548154811061168157611681613637565b600091825260209182902060408051610180810182526008909302909101805460ff8082168552610100820481169585019590955292939092918401916201000090041660028111156116d6576116d6613033565b60028111156116e7576116e7613033565b815281546020909101906301000000900460ff16600981111561170c5761170c613033565b600981111561171d5761171d613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161175890613577565b80601f016020809104026020016040519081016040528092919081815260200182805461178490613577565b80156117d15780601f106117a6576101008083540402835291602001916117d1565b820191906000526020600020905b8154815290600101906020018083116117b457829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505084611f1f565b8061181c8161387f565b915050611644565b5061113c600f6000612f7c565b6000816020015160ff1660000361196657336000908152600d6020908152604091829020845181549286015160ff9081166101000261ffff1990941691161791909117808255918401518492829062ff000019166201000083600281111561189b5761189b613033565b021790555060608201518154829063ff000000191663010000008360098111156118c7576118c7613033565b021790555060808201518154640100000000600160c01b031916600160201b6001600160a01b039283160217825560a08301516001830180546001600160a01b0319169190921617905560c0820151600282019061192590826138e3565b5060e0820151600382015561010082015160048201556101208201516005820155610140820151600682015561016090910151600790910155506000919050565b602080830151336000908152600d90925260409091205460ff918216916119949161010090041660016139a3565b60ff16146119e45760405162461bcd60e51b815260206004820152601960248201527f6368756e6b73206d75737420626520636f6e746967756f7573000000000000006044820152606401610535565b336000908152600d6020526040902060c0830151611a0591600201906124b9565b336000908152600d602052604090208054600191908290611a2f908290610100900460ff166139a3565b92506101000a81548160ff021916908360ff160217905550816000015160ff1682602001516001611a6091906139a3565b60ff161492915050565b6000806000806000611a8160fe8760c00151612603565b9450945094509450945084611ad85760405162461bcd60e51b815260206004820152601960248201527f6661696c65642070726f6f6620766572696669636174696f6e000000000000006044820152606401610535565b8560a001516001600160a01b0316846001600160a01b031614611b0d5760405162461bcd60e51b8152600401610535906139bc565b85606001516009811115611b2357611b23613033565b8314611b415760405162461bcd60e51b8152600401610535906139e7565b438210611b895760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b6044820152606401610535565b60008211611bcf5760405162461bcd60e51b815260206004820152601360248201527263616e27742062652061742067656e6573697360681b6044820152606401610535565b6001546040516396b477cb60e01b8152600481018490526000916001600160a01b0316906396b477cb90602401602060405180830381865afa158015611c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3d91906135b1565b610100880184905261012088018190524361014089015261016088018390529050611c678761266a565b50505050505050565b6000806000806000611c8760fc8760c00151612603565b9450945094509450945084611cde5760405162461bcd60e51b815260206004820152601e60248201527f6661696c65642061636375736174696f6e20766572696669636174696f6e00006044820152606401610535565b8560a001516001600160a01b0316846001600160a01b031614611d135760405162461bcd60e51b8152600401610535906139bc565b85606001516009811115611d2957611d29613033565b8314611d475760405162461bcd60e51b8152600401610535906139e7565b6001546040516396b477cb60e01b8152600481018490526000916001600160a01b0316906396b477cb90602401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906135b1565b610100880184905261012088018190524361014089015261016088018390529050611c67876128ee565b6000806000806000611df660fd8760c00151612603565b9450945094509450945084611e4d5760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420696e6e6f63656e636520766572696669636174696f6e0000006044820152606401610535565b8560a001516001600160a01b0316846001600160a01b031614611e825760405162461bcd60e51b8152600401610535906139bc565b85606001516009811115611e9857611e98613033565b8314611eb65760405162461bcd60e51b8152600401610535906139e7565b438210611efe5760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b6044820152606401610535565b61010086018290526101608601819052611f1786612ba5565b505050505050565b60015460a0830151604051630c825d9760e11b81526001600160a01b0391821660048201526000929190911690631904bb2e90602401600060405180830381865afa158015611f72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f9a91908101906136c7565b608084015160a08501516001600160a01b039081166000908152600a6020526040902080546001600160a01b03191691909216179055905060038161026001516003811115611feb57611feb613033565b03611ff557505050565b600061200c612007856060015161118c565b612eb0565b610220830151600754919250906000906120269083613a11565b6006546120339087613a11565b61203d908561364d565b612047919061364d565b60095490915081111561205957506009545b60008461012001518560c001518660a00151612075919061364d565b61207f919061364d565b6009549091506000906120928385613a11565b61209c9190613a28565b90506000811180156120ad57508181145b156121dd57600060a087018190526101008701819052610120870181905260c08701526101e0860180518291906120e590839061364d565b90525061022086018051600191906120fe90839061364d565b905250600361026087015260006102008701526001546040516301adf0b760e51b81526001600160a01b03909116906335be16e090612141908990600401613a5a565b600060405180830381600087803b15801561215b57600080fd5b505af115801561216f573d6000803e3d6000fd5b5050505060208681015160e08a0151604080516001600160a01b03909316835292820184905260008284015260016060830152608082015290517f6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f99181900360a00190a15050505050505050565b6101208601518190811161220a578087610120018181516121fe9190613624565b90525060009050612225565b61012087015161221a9082613624565b600061012089015290505b80156122a257808761010001511061226d5780876101000181815161224a9190613624565b90525060a087018051829190612261908390613624565b905250600090506122a2565b61010087015161227d9082613624565b90508661010001518760a0018181516122969190613624565b90525060006101008801525b6000811180156122c5575060008760a001518860c001516122c3919061364d565b115b156123715760008760a001518860c001516122e0919061364d565b60c08901516122ef9084613a11565b6122f99190613a28565b905060008860a001518960c00151612311919061364d565b60a08a01516123209085613a11565b61232a9190613a28565b9050818960c00181815161233e9190613624565b90525060a089018051829190612355908390613624565b905250612362818361364d565b61236c9084613624565b925050505b61237b8183613624565b915081876101e001818151612390919061364d565b90525061022087018051600191906123a990839061364d565b9052506000546102208801516008546123c29190613a11565b6123cc9190613a11565b6123d6904361364d565b61020088015260026102608801526001546040516301adf0b760e51b81526001600160a01b03909116906335be16e090612414908a90600401613a5a565b600060405180830381600087803b15801561242e57600080fd5b505af1158015612442573d6000803e3d6000fd5b5050506020808901516102008a015160e08d0151604080516001600160a01b039094168452938301879052928201526000606082015260808101919091527f6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9915060a00160405180910390a1505050505050505050565b8154600260018083161561010002038216048251808201602081106020841001600281146125635760018114612588578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b8082101561254d5781518455600184019350602082019150612530565b815191036101000a908190040290915550611c67565b60028302826020036101000a846020036101000a602089015104020185018755611c67565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b808210156125e957815184556001840193506020820191506125cc565b815191036101000a90819004029091555050505050505050565b6000806000806000808651602061261a919061364d565b9050612624612f9a565b60a081838a8c5afa61263557600080fd5b805160010361264357600196505b602081015160408201516060830151608090930151989b919a509850909695509350505050565b6000612679826060015161118c565b60a08301516001600160a01b03166000908152600e60209081526040808320610120870151845290915290205490915081116126c75760405162461bcd60e51b815260040161053590613bca565b6002805460e084018190526001810182556000829052835160089091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054602086015160ff9081166101000261ffff1990921693169290921791909117808255604085015185939091839162ff000019909116906201000090849081111561275457612754613033565b021790555060608201518154829063ff0000001916630100000083600981111561278057612780613033565b021790555060808201518154640100000000600160c01b031916600160201b6001600160a01b039283160217825560a08301516001830180546001600160a01b0319169190921617905560c082015160028201906127de90826138e3565b5060e0828101516003830155610100830151600483015561012080840151600584015561014084015160068401556101609093015160079092019190915560a0840180516001600160a01b039081166000908152600b602090815260408083209589018051875460018181018a5598865284862001558051600f8054988901815585527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290970196909655845184168352600e82528083209689015183529590528490208590559051915192519116917f6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f916128e291858252602082015260400190565b60405180910390a25050565b60a08101516001600160a01b03166000908152600c6020526040902054156129585760405162461bcd60e51b815260206004820181905260248201527f616c72656164792070726f63657373696e6720616e2061636375736174696f6e6044820152606401610535565b6000612967826060015161118c565b60a08301516001600160a01b03166000908152600e60209081526040808320610120870151845290915290205490915081116129b55760405162461bcd60e51b815260040161053590613bca565b6002805460e084018190526001810182556000829052835160089091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054602086015160ff9081166101000261ffff1990921693169290921791909117808255604085015185939091839162ff0000199091169062010000908490811115612a4257612a42613033565b021790555060608201518154829063ff00000019166301000000836009811115612a6e57612a6e613033565b021790555060808201518154640100000000600160c01b031916600160201b6001600160a01b039283160217825560a08301516001830180546001600160a01b0319169190921617905560c08201516002820190612acc90826138e3565b5060e082810151600383015561010083015160048301556101208301516005830155610140830151600683015561016090920151600790910155820151612b1490600161364d565b60a08301516001600160a01b03166000908152600c602052604090205560e0820151601090612b4490600161364d565b81546001810183556000928352602092839020015560a083015160e084015160408051858152938401919091526001600160a01b03909116917f2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba4035191016128e2565b60a08101516001600160a01b03166000908152600c602052604081205490819003612c125760405162461bcd60e51b815260206004820152601860248201527f6e6f206173736f6369617465642061636375736174696f6e00000000000000006044820152606401610535565b81606001516009811115612c2857612c28613033565b6002612c35600184613624565b81548110612c4557612c45613637565b60009182526020909120600890910201546301000000900460ff166009811115612c7157612c71613033565b14612cce5760405162461bcd60e51b815260206004820152602760248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152661c9d5b19481a5960ca1b6064820152608401610535565b6101008201516002612ce1600184613624565b81548110612cf157612cf1613637565b90600052602060002090600802016004015414612d5e5760405162461bcd60e51b815260206004820152602560248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e20604482015264626c6f636b60d81b6064820152608401610535565b6101608201516002612d71600184613624565b81548110612d8157612d81613637565b90600052602060002090600802016007015414612dec5760405162461bcd60e51b8152602060048201526024808201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152630d0c2e6d60e31b6064820152608401610535565b6011545b601054811015612e56578160108281548110612e0e57612e0e613637565b906000526020600020015403612e4457600060108281548110612e3357612e33613637565b600091825260209091200155612e56565b80612e4e8161387f565b915050612df0565b5060a0820180516001600160a01b039081166000908152600c602090815260408083208390559351935191825292909116917f1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f91016128e2565b600081612ebf57505060055490565b60018203612ecf57505060055490565b60028203612edf57505060055490565b60038203612eef57505060055490565b60048203612f005750612710919050565b50612710919050565b6040805161018081018252600080825260208201819052909182019081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b50805460008255906000526020600020908101906105839190612fb8565b6040518060a001604052806005906020820280368337509192915050565b5b80821115612fcd5760008155600101612fb9565b5090565b6001600160a01b038116811461058357600080fd5b8035612ff181612fd1565b919050565b60006020828403121561300857600080fd5b813561301381612fd1565b9392505050565b60006020828403121561302c57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061305957613059613033565b9052565b600a811061305957613059613033565b60005b83811015613088578181015183820152602001613070565b50506000910152565b600081518084526130a981602086016020860161306d565b601f01601f19169290920160200192915050565b600061018060ff8f16835260ff8e1660208401526130de604084018e613049565b6130eb606084018d61305d565b6001600160a01b038b811660808501528a1660a084015260c083018190526131158184018a613091565b60e0840198909852505061010081019490945261012084019290925261014083015261016090910152979650505050505050565b8035600a8110612ff157600080fd5b60008060006060848603121561316d57600080fd5b833561317881612fd1565b925061318660208501613149565b9150604084013590509250925092565b801515811461058357600080fd5b6000602082840312156131b657600080fd5b813561301381613196565b805160ff168252600061018060208301516131e1602086018260ff169052565b5060408301516131f46040860182613049565b506060830151613207606086018261305d565b50608083015161322260808601826001600160a01b03169052565b5060a083015161323d60a08601826001600160a01b03169052565b5060c08301518160c086015261325582860182613091565b60e08581015190870152610100808601519087015261012080860151908701526101408086015190870152610160948501519490950193909352509192915050565b60208152600061301360208301846131c1565b600080604083850312156132bd57600080fd5b82356132c881612fd1565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561332b57603f198886030184526133198583516131c1565b945092850192908501906001016132fd565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561337257613372613338565b60405290565b604051610280810167ffffffffffffffff8111828210171561337257613372613338565b604051601f8201601f1916810167ffffffffffffffff811182821017156133c5576133c5613338565b604052919050565b803560ff81168114612ff157600080fd5b803560038110612ff157600080fd5b600067ffffffffffffffff82111561340757613407613338565b50601f01601f191660200190565b600082601f83011261342657600080fd5b8135613439613434826133ed565b61339c565b81815284602083860101111561344e57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561347d57600080fd5b813567ffffffffffffffff8082111561349557600080fd5b9083019061018082860312156134aa57600080fd5b6134b261334e565b6134bb836133cd565b81526134c9602084016133cd565b60208201526134da604084016133de565b60408201526134eb60608401613149565b60608201526134fc60808401612fe6565b608082015261350d60a08401612fe6565b60a082015260c08301358281111561352457600080fd5b61353087828601613415565b60c08301525060e083810135908201526101008084013590820152610120808401359082015261014080840135908201526101609283013592810192909252509392505050565b600181811c9082168061358b57607f821691505b6020821081036135ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156135c357600080fd5b5051919050565b60208082526024908201527f66756e6374696f6e207265737472696374656420746f207468652076616c696460408201526330ba37b960e11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b818103818111156111aa576111aa61360e565b634e487b7160e01b600052603260045260246000fd5b808201808211156111aa576111aa61360e565b8051612ff181612fd1565b600082601f83011261367c57600080fd5b815161368a613434826133ed565b81815284602083860101111561369f57600080fd5b6136b082602083016020870161306d565b949350505050565b805160048110612ff157600080fd5b6000602082840312156136d957600080fd5b815167ffffffffffffffff808211156136f157600080fd5b90830190610280828603121561370657600080fd5b61370e613378565b61371783613660565b815261372560208401613660565b602082015261373660408401613660565b604082015260608301518281111561374d57600080fd5b6137598782860161366b565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152506101806137c5818501613660565b908201526101a083810151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240808401518381111561381457600080fd5b6138208882870161366b565b82840152505061026091506138368284016136b8565b91810191909152949350505050565b60006020828403121561385757600080fd5b815161301381613196565b60006020828403121561387457600080fd5b815161301381612fd1565b6000600182016138915761389161360e565b5060010190565b601f8211156138de57600081815260208120601f850160051c810160208610156138bf5750805b601f850160051c820191505b81811015611f17578281556001016138cb565b505050565b815167ffffffffffffffff8111156138fd576138fd613338565b6139118161390b8454613577565b84613898565b602080601f831160018114613946576000841561392e5750858301515b600019600386901b1c1916600185901b178555611f17565b600085815260208120601f198616915b8281101561397557888601518255948401946001909101908401613956565b50858210156139935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff81811683821601908111156111aa576111aa61360e565b6020808252601190820152700decccccadcc8cae440dad2e6dac2e8c6d607b1b604082015260600190565b60208082526010908201526f0e4ead8ca40d2c840dad2e6dac2e8c6d60831b604082015260600190565b80820281158282048414176111aa576111aa61360e565b600082613a4557634e487b7160e01b600052601260045260246000fd5b500490565b6004811061305957613059613033565b60208152613a746020820183516001600160a01b03169052565b60006020830151613a9060408401826001600160a01b03169052565b5060408301516001600160a01b0381166060840152506060830151610280806080850152613ac26102a0850183613091565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a0613b49818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f190161026080880191909152909150613bab8483613091565b935080870151915050613bc082860182613a4a565b5090949350505050565b60208082526024908201527f616c726561647920736c6173686564206174207468652070726f6f66277320656040820152630e0dec6d60e31b60608201526080019056fea26469706673582212203a1a62b26b7c78ae9bf09c28eb3f0d042605481c4a4e4b8819d7e5fb2f3c736e64736f6c63430008150033",
}

// AccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityMetaData.ABI instead.
var AccountabilityABI = AccountabilityMetaData.ABI

// Deprecated: Use AccountabilityMetaData.Sigs instead.
// AccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityFuncSigs = AccountabilityMetaData.Sigs

// AccountabilityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityMetaData.Bin instead.
var AccountabilityBin = AccountabilityMetaData.Bin

// DeployAccountability deploys a new Ethereum contract, binding an instance of Accountability to it.
func DeployAccountability(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _config AccountabilityConfig) (common.Address, *types.Transaction, *Accountability, error) {
	parsed, err := AccountabilityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccountabilityBin), backend, _autonity, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accountability{AccountabilityCaller: AccountabilityCaller{contract: contract}, AccountabilityTransactor: AccountabilityTransactor{contract: contract}, AccountabilityFilterer: AccountabilityFilterer{contract: contract}}, nil
}

// Accountability is an auto generated Go binding around an Ethereum contract.
type Accountability struct {
	AccountabilityCaller     // Read-only binding to the contract
	AccountabilityTransactor // Write-only binding to the contract
	AccountabilityFilterer   // Log filterer for contract events
}

// AccountabilityCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountabilityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountabilityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountabilityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountabilitySession struct {
	Contract     *Accountability   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccountabilityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountabilityCallerSession struct {
	Contract *AccountabilityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// AccountabilityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountabilityTransactorSession struct {
	Contract     *AccountabilityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// AccountabilityRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountabilityRaw struct {
	Contract *Accountability // Generic contract binding to access the raw methods on
}

// AccountabilityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountabilityCallerRaw struct {
	Contract *AccountabilityCaller // Generic read-only contract binding to access the raw methods on
}

// AccountabilityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountabilityTransactorRaw struct {
	Contract *AccountabilityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccountability creates a new instance of Accountability, bound to a specific deployed contract.
func NewAccountability(address common.Address, backend bind.ContractBackend) (*Accountability, error) {
	contract, err := bindAccountability(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accountability{AccountabilityCaller: AccountabilityCaller{contract: contract}, AccountabilityTransactor: AccountabilityTransactor{contract: contract}, AccountabilityFilterer: AccountabilityFilterer{contract: contract}}, nil
}

// NewAccountabilityCaller creates a new read-only instance of Accountability, bound to a specific deployed contract.
func NewAccountabilityCaller(address common.Address, caller bind.ContractCaller) (*AccountabilityCaller, error) {
	contract, err := bindAccountability(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountabilityCaller{contract: contract}, nil
}

// NewAccountabilityTransactor creates a new write-only instance of Accountability, bound to a specific deployed contract.
func NewAccountabilityTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountabilityTransactor, error) {
	contract, err := bindAccountability(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTransactor{contract: contract}, nil
}

// NewAccountabilityFilterer creates a new log filterer instance of Accountability, bound to a specific deployed contract.
func NewAccountabilityFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountabilityFilterer, error) {
	contract, err := bindAccountability(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountabilityFilterer{contract: contract}, nil
}

// bindAccountability binds a generic wrapper to an already deployed contract.
func bindAccountability(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountabilityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accountability *AccountabilityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accountability.Contract.AccountabilityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accountability *AccountabilityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accountability.Contract.AccountabilityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accountability *AccountabilityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accountability.Contract.AccountabilityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accountability *AccountabilityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accountability.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accountability *AccountabilityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accountability.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accountability *AccountabilityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accountability.Contract.contract.Transact(opts, method, params...)
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *AccountabilityCaller) Beneficiaries(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *AccountabilitySession) Beneficiaries(arg0 common.Address) (common.Address, error) {
	return _Accountability.Contract.Beneficiaries(&_Accountability.CallOpts, arg0)
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *AccountabilityCallerSession) Beneficiaries(arg0 common.Address) (common.Address, error) {
	return _Accountability.Contract.Beneficiaries(&_Accountability.CallOpts, arg0)
}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *AccountabilityCaller) CanAccuse(opts *bind.CallOpts, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *AccountabilitySession) CanAccuse(_offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	return _Accountability.Contract.CanAccuse(&_Accountability.CallOpts, _offender, _rule, _block)
}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *AccountabilityCallerSession) CanAccuse(_offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	return _Accountability.Contract.CanAccuse(&_Accountability.CallOpts, _offender, _rule, _block)
}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *AccountabilityCaller) CanSlash(opts *bind.CallOpts, _offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *AccountabilitySession) CanSlash(_offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	return _Accountability.Contract.CanSlash(&_Accountability.CallOpts, _offender, _rule, _block)
}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *AccountabilityCallerSession) CanSlash(_offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	return _Accountability.Contract.CanSlash(&_Accountability.CallOpts, _offender, _rule, _block)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor, uint256 slashingRatePrecision)
func (_Accountability *AccountabilityCaller) Config(opts *bind.CallOpts) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRateLow            *big.Int
		BaseSlashingRateMid            *big.Int
		CollusionFactor                *big.Int
		HistoryFactor                  *big.Int
		JailFactor                     *big.Int
		SlashingRatePrecision          *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateLow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateMid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CollusionFactor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.HistoryFactor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.JailFactor = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.SlashingRatePrecision = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor, uint256 slashingRatePrecision)
func (_Accountability *AccountabilitySession) Config() (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}, error) {
	return _Accountability.Contract.Config(&_Accountability.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor, uint256 slashingRatePrecision)
func (_Accountability *AccountabilityCallerSession) Config() (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}, error) {
	return _Accountability.Contract.Config(&_Accountability.CallOpts)
}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_Accountability *AccountabilityCaller) EpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "epochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_Accountability *AccountabilitySession) EpochPeriod() (*big.Int, error) {
	return _Accountability.Contract.EpochPeriod(&_Accountability.CallOpts)
}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_Accountability *AccountabilityCallerSession) EpochPeriod() (*big.Int, error) {
	return _Accountability.Contract.EpochPeriod(&_Accountability.CallOpts)
}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 chunks, uint8 chunkId, uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *AccountabilityCaller) Events(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Chunks         uint8
	ChunkId        uint8
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "events", arg0)

	outstruct := new(struct {
		Chunks         uint8
		ChunkId        uint8
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Chunks = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.ChunkId = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.EventType = *abi.ConvertType(out[2], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[3], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[6], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[10], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[11], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 chunks, uint8 chunkId, uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *AccountabilitySession) Events(arg0 *big.Int) (struct {
	Chunks         uint8
	ChunkId        uint8
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	return _Accountability.Contract.Events(&_Accountability.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 chunks, uint8 chunkId, uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *AccountabilityCallerSession) Events(arg0 *big.Int) (struct {
	Chunks         uint8
	ChunkId        uint8
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	return _Accountability.Contract.Events(&_Accountability.CallOpts, arg0)
}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *AccountabilityCaller) GetValidatorAccusation(opts *bind.CallOpts, _val common.Address) (AccountabilityEvent, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)

	return out0, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *AccountabilitySession) GetValidatorAccusation(_val common.Address) (AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorAccusation(&_Accountability.CallOpts, _val)
}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *AccountabilityCallerSession) GetValidatorAccusation(_val common.Address) (AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorAccusation(&_Accountability.CallOpts, _val)
}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *AccountabilityCaller) GetValidatorFaults(opts *bind.CallOpts, _val common.Address) ([]AccountabilityEvent, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)

	return out0, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *AccountabilitySession) GetValidatorFaults(_val common.Address) ([]AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorFaults(&_Accountability.CallOpts, _val)
}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *AccountabilityCallerSession) GetValidatorFaults(_val common.Address) ([]AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorFaults(&_Accountability.CallOpts, _val)
}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *AccountabilityCaller) SlashingHistory(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *AccountabilitySession) SlashingHistory(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Accountability.Contract.SlashingHistory(&_Accountability.CallOpts, arg0, arg1)
}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *AccountabilityCallerSession) SlashingHistory(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Accountability.Contract.SlashingHistory(&_Accountability.CallOpts, arg0, arg1)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *AccountabilityTransactor) DistributeRewards(opts *bind.TransactOpts, _validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "distributeRewards", _validator, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *AccountabilitySession) DistributeRewards(_validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.DistributeRewards(&_Accountability.TransactOpts, _validator, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *AccountabilityTransactorSession) DistributeRewards(_validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.DistributeRewards(&_Accountability.TransactOpts, _validator, _ntnReward)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *AccountabilityTransactor) Finalize(opts *bind.TransactOpts, _epochEnd bool) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "finalize", _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *AccountabilitySession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _Accountability.Contract.Finalize(&_Accountability.TransactOpts, _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *AccountabilityTransactorSession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _Accountability.Contract.Finalize(&_Accountability.TransactOpts, _epochEnd)
}

// HandleEvent is a paid mutator transaction binding the contract method 0xc50d21f0.
//
// Solidity: function handleEvent((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactor) HandleEvent(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "handleEvent", _event)
}

// HandleEvent is a paid mutator transaction binding the contract method 0xc50d21f0.
//
// Solidity: function handleEvent((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilitySession) HandleEvent(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleEvent(&_Accountability.TransactOpts, _event)
}

// HandleEvent is a paid mutator transaction binding the contract method 0xc50d21f0.
//
// Solidity: function handleEvent((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactorSession) HandleEvent(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleEvent(&_Accountability.TransactOpts, _event)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *AccountabilityTransactor) SetEpochPeriod(opts *bind.TransactOpts, _newPeriod *big.Int) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "setEpochPeriod", _newPeriod)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *AccountabilitySession) SetEpochPeriod(_newPeriod *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.SetEpochPeriod(&_Accountability.TransactOpts, _newPeriod)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *AccountabilityTransactorSession) SetEpochPeriod(_newPeriod *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.SetEpochPeriod(&_Accountability.TransactOpts, _newPeriod)
}

// AccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the Accountability contract.
type AccountabilityInnocenceProvenIterator struct {
	Event *AccountabilityInnocenceProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityInnocenceProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityInnocenceProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityInnocenceProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityInnocenceProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityInnocenceProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityInnocenceProven represents a InnocenceProven event raised by the Accountability contract.
type AccountabilityInnocenceProven struct {
	Offender common.Address
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_Accountability *AccountabilityFilterer) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityInnocenceProvenIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityInnocenceProvenIterator{contract: _Accountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
}

// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_Accountability *AccountabilityFilterer) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityInnocenceProven)
				if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_Accountability *AccountabilityFilterer) ParseInnocenceProven(log types.Log) (*AccountabilityInnocenceProven, error) {
	event := new(AccountabilityInnocenceProven)
	if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the Accountability contract.
type AccountabilityNewAccusationIterator struct {
	Event *AccountabilityNewAccusation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityNewAccusationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityNewAccusation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityNewAccusation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityNewAccusationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityNewAccusationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityNewAccusation represents a NewAccusation event raised by the Accountability contract.
type AccountabilityNewAccusation struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewAccusationIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityNewAccusationIterator{contract: _Accountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
}

// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityNewAccusation)
				if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) ParseNewAccusation(log types.Log) (*AccountabilityNewAccusation, error) {
	event := new(AccountabilityNewAccusation)
	if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the Accountability contract.
type AccountabilityNewFaultProofIterator struct {
	Event *AccountabilityNewFaultProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityNewFaultProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityNewFaultProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityNewFaultProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityNewFaultProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityNewFaultProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityNewFaultProof represents a NewFaultProof event raised by the Accountability contract.
type AccountabilityNewFaultProof struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewFaultProofIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityNewFaultProofIterator{contract: _Accountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
}

// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityNewFaultProof)
				if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) ParseNewFaultProof(log types.Log) (*AccountabilityNewFaultProof, error) {
	event := new(AccountabilityNewFaultProof)
	if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the Accountability contract.
type AccountabilitySlashingEventIterator struct {
	Event *AccountabilitySlashingEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilitySlashingEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilitySlashingEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilitySlashingEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilitySlashingEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilitySlashingEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilitySlashingEvent represents a SlashingEvent event raised by the Accountability contract.
type AccountabilitySlashingEvent struct {
	Validator    common.Address
	Amount       *big.Int
	ReleaseBlock *big.Int
	IsJailbound  bool
	EventId      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_Accountability *AccountabilityFilterer) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilitySlashingEventIterator, error) {

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return &AccountabilitySlashingEventIterator{contract: _Accountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
}

// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_Accountability *AccountabilityFilterer) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilitySlashingEvent) (event.Subscription, error) {

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilitySlashingEvent)
				if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_Accountability *AccountabilityFilterer) ParseSlashingEvent(log types.Log) (*AccountabilitySlashingEvent, error) {
	event := new(AccountabilitySlashingEvent)
	if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityMetaData contains all meta data concerning the Autonity contract.
var AutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator[]\",\"name\":\"_validators\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"nonStakableVestingContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AppliedUnbondingReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BondingReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleasedUnbondingReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnbondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochTime\",\"type\":\"uint256\"}],\"name\":\"UnlockingScheduleFailed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atnTotalRedistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"nonStakableVestingContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getProposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getRevertingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingReleaseState\",\"outputs\":[{\"internalType\":\"enumAutonity.UnbondingReleaseState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBondAppliedGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardsDistributionGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnbondAppliedGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnbondReleasedGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveATN\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxBondAppliedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxRewardsDistributionGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxUnbondAppliedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxUnbondReleasedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNonStakableVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStakingGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"}],\"name\":\"updateValidatorAndTransferSlashedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"e98712b2": "atnTotalRedistributed()",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"d861b0e8": "finalizeInitialization()",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"96b477cb": "getEpochFromBlock(uint256)",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"5f7d3949": "getProposer(uint256,uint256)",
		"b6ef8c67": "getRevertingAmount(uint256)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"a9af1059": "getUnbondingReleaseState(uint256)",
		"1904bb2e": "getValidator(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"c2362dd5": "lastEpochBlock()",
		"89c614b8": "lastEpochTime()",
		"96f18a32": "liquidLogicContract()",
		"cef98450": "maxBondAppliedGas()",
		"5bdedd16": "maxRewardsDistributionGas()",
		"386a827b": "maxUnbondAppliedGas()",
		"71d1bc59": "maxUnbondReleasedGas()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"161605e3": "receiveATN()",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"0fe50109": "setMaxBondAppliedGas(uint256)",
		"7e660ac9": "setMaxRewardsDistributionGas(uint256)",
		"0b21fb1d": "setMaxUnbondAppliedGas(uint256)",
		"ee7ff28d": "setMaxUnbondReleasedGas(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"1a0cf2e5": "setNonStakableVestingContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"6a929cef": "setStakingGasPrice(uint256)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"6bb9cb0e": "stakingGasPrice()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"35be16e0": "updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x608060405261c35060045561c35060055561c350600655614e2060075560006010556000601155633b9aca006035553480156200003b57600080fd5b506040516200df353803806200df358339810160408190526200005e91620010ee565b6024546000036200008757603b80546001600160a01b031916331790556200008782826200008f565b5050620015b5565b80518051601255602080820151601355604080830151601455606080840151601555608080850151601681905560a095860151601780546001600160a01b03199081166001600160a01b03938416179091558689015180516018805484169185169190911790558088015160198054841691851691909117905580870151601a8054841691851691909117905580860151601b8054841691851691909117905593840151601c8054831691841691909117905596830151601d8054891691831691909117905560c0830151601e8054891691831691909117905560e090920151601f8054881691841691909117905583870151805186549097169690921695909517845592830151602155828201516022559182015160235590830151602455603a9190915551620001c19062000d3c565b604051809103906000f080158015620001de573d6000803e3d6000fd5b50603c80546001600160a01b0319166001600160a01b039290921691909117905560005b8251811015620004c55760008382815181106200022357620002236200132b565b602002602001015160a00151905060008483815181106200024857620002486200132b565b60200260200101516101a001818152505060008483815181106200027057620002706200132b565b602002602001015161018001906001600160a01b031690816001600160a01b0316815250506000848381518110620002ac57620002ac6200132b565b602002602001015160a00181815250506000848381518110620002d357620002d36200132b565b60209081029190910101516101c001526014548451859084908110620002fd57620002fd6200132b565b6020026020010151608001818152505060008483815181106200032457620003246200132b565b60200260200101516102600190600381111562000345576200034562001341565b908160038111156200035b576200035b62001341565b8152505060008483815181106200037657620003766200132b565b6020026020010151610160018181525050620003b4848381518110620003a057620003a06200132b565b6020026020010151620004ca60201b60201c565b620003e1848381518110620003cd57620003cd6200132b565b60200260200101516200060560201b60201c565b8060376000868581518110620003fb57620003fb6200132b565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546200043891906200136d565b9250508190555080603960008282546200045391906200136d565b92505081905550620004ad8483815181106200047357620004736200132b565b602002602001015160200151828685815181106200049557620004956200132b565b602002602001015160000151620008b260201b60201c565b50508080620004bc9062001389565b91505062000202565b505050565b6000620004e1826060015162000ac960201b60201c565b6001600160a01b03909116602084015290508015620005355760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064015b60405180910390fd5b6020808301516001600160a01b03908116600090815260389092526040909120600101541615620005a95760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c726561647920726567697374657265640000000060448201526064016200052c565b61271082608001511115620006015760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e207261746500000000000000000060448201526064016200052c565b5050565b6101808101516001600160a01b03166200070457603c546001600160a01b03166200067e5760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b60648201526084016200052c565b6025546000906200068f9062000b17565b905081602001518260000151836080015183603c60009054906101000a90046001600160a01b0316604051620006c59062000d4a565b620006d5959493929190620013a5565b604051809103906000f080158015620006f2573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602580546001808201835560009283527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c90910180546001600160a01b03199081166001600160a01b0395861617909155845184168352603890955260409182902086518154871690851617815593519084018054861691841691909117905584015160028301805490941691161790915560608201518291906003820190620007b690826200148f565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182015561024082015160128201906200088090826200148f565b5061026082015160138201805460ff19166001836003811115620008a857620008a862001341565b0217905550505050565b6000808311620009115760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b60648201526084016200052c565b6001600160a01b0382166000908152603760205260409020548311156200097b5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e6365000000000060448201526064016200052c565b6001600160a01b03821660009081526037602052604081208054859290620009a59084906200155b565b9091555050604080516080810182526001600160a01b03808516825286811660208084019182528385018881524360608601908152600a805460009081526008909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000a348362001389565b90915550506001600160a01b03858116600081815260386020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3833b1562000aae5762000aae848762000c37565b6001600a5462000abf91906200155b565b9695505050505050565b60008062000ad662000d58565b60008060ff9050604083875160208901845afa62000af357600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000b3f5750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000b6f578062000b568162001389565b915062000b679050600a8362001587565b915062000b43565b6000816001600160401b0381111562000b8c5762000b8c62000d76565b6040519080825280601f01601f19166020018201604052801562000bb7576020820181803683370190505b5090505b841562000c2f5762000bcf6001836200155b565b915062000bde600a866200159e565b62000beb9060306200136d565b60f81b81838151811062000c035762000c036200132b565b60200101906001600160f81b031916908160001a90535062000c27600a8662001587565b945062000bbb565b949350505050565b6001600160a01b038216600090815260326020526040812054900362000cb5576001600160a01b03821660008181526032602052604081206001908190556033805491820181559091527f82a75bdeeae8604d839476ae9efd8b0e15aa447e21bfd7f41283bb54e22c9a820180546001600160a01b03191690911790555b6001600160a01b038083166000908152603060209081526040808320938516835292905290812054900362000601576001600160a01b03808316600081815260306020908152604080832094861680845294825280832060019081905593835260318252822080549384018155825290200180546001600160a01b03191690911790555050565b611b64806200b18883390190565b611249806200ccec83390190565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000db15762000db162000d76565b60405290565b60405160c081016001600160401b038111828210171562000db15762000db162000d76565b60405161028081016001600160401b038111828210171562000db15762000db162000d76565b604051601f8201601f191681016001600160401b038111828210171562000e2d5762000e2d62000d76565b604052919050565b6001600160a01b038116811462000e4b57600080fd5b50565b805162000e5b8162000e35565b919050565b60005b8381101562000e7d57818101518382015260200162000e63565b50506000910152565b600082601f83011262000e9857600080fd5b81516001600160401b0381111562000eb45762000eb462000d76565b62000ec9601f8201601f191660200162000e02565b81815284602083860101111562000edf57600080fd5b62000c2f82602083016020870162000e60565b80516004811062000e5b57600080fd5b600061010080838503121562000f1757600080fd5b604051908101906001600160401b038211818310171562000f3c5762000f3c62000d76565b816040528092508351915062000f528262000e35565b81815262000f636020850162000e4e565b602082015262000f766040850162000e4e565b604082015262000f896060850162000e4e565b606082015262000f9c6080850162000e4e565b608082015262000faf60a0850162000e4e565b60a082015262000fc260c0850162000e4e565b60c082015262000fd560e0850162000e4e565b60e0820152505092915050565b60006080828403121562000ff557600080fd5b62000fff62000d8c565b905081516200100e8162000e35565b8082525060208201516020820152604082015160408201526060820151606082015292915050565b60008183036102608112156200104b57600080fd5b6200105562000d8c565b915060c08112156200106657600080fd5b506200107162000db7565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a0830151620010ad8162000e35565b60a08201528152620010c38360c0840162000f02565b6020820152620010d8836101c0840162000fe2565b6040820152610240820151606082015292915050565b6000806102808084860312156200110457600080fd5b83516001600160401b03808211156200111c57600080fd5b818601915086601f8301126200113157600080fd5b815160208282111562001148576200114862000d76565b8160051b6200115982820162000e02565b928352848101820192828101908b8511156200117457600080fd5b83870192505b8483101562001309578251868111156200119357600080fd5b8701808d03601f1901891315620011a957600080fd5b620011b362000ddc565b620011c086830162000e4e565b8152620011d06040830162000e4e565b86820152620011e26060830162000e4e565b6040820152608082015188811115620011fa57600080fd5b6200120a8f888386010162000e86565b60608301525060a0820151608082015260c082015160a082015260e082015160c082015261010082015160e0820152610120820151610100820152610140820151610120820152610160820151610140820152610180820151610160820152620012786101a0830162000e4e565b6101808201526101c08201516101a08201526101e08201516101c08201526102008201516101e082015261022082015161020082015261024082015161022082015261026082015188811115620012ce57600080fd5b620012de8f888386010162000e86565b61024083015250620012f28a830162000ef2565b61026082015283525091830191908301906200117a565b8099505050506200131d89828a0162001036565b955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111562001383576200138362001357565b92915050565b6000600182016200139e576200139e62001357565b5060010190565b600060018060a01b038088168352808716602084015285604084015260a0606084015284518060a0850152620013e38160c086016020890162000e60565b9316608083015250601f91909101601f19160160c001949350505050565b600181811c908216806200141657607f821691505b6020821081036200143757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004c557600081815260208120601f850160051c81016020861015620014665750805b601f850160051c820191505b81811015620014875782815560010162001472565b505050505050565b81516001600160401b03811115620014ab57620014ab62000d76565b620014c381620014bc845462001401565b846200143d565b602080601f831160018114620014fb5760008415620014e25750858301515b600019600386901b1c1916600185901b17855562001487565b600085815260208120601f198616915b828110156200152c578886015182559484019460019091019084016200150b565b50858210156200154b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111562001383576200138362001357565b634e487b7160e01b600052601260045260246000fd5b60008262001599576200159962001571565b500490565b600082620015b057620015b062001571565b500690565b619bc380620015c56000396000f3fe608060405260043610620004cb5760003560e01c8063852c4849116200027b578063b6ef8c671162000153578063d5f3948811620000cb578063e7f43c68116200008d578063e7f43c6814620010d8578063e98712b214620010f8578063ee7ff28d1462001110578063f03b959d1462001135578063f1d592a7146200115a578063f7866ee3146200117f57005b8063d5f394881462001018578063d861b0e8146200103a578063d886f8a21462001052578063dd62ed3e1462001077578063dfb1a4d214620010c157005b8063ceaad4551162000115578063ceaad4551462000f79578063cef984501462000f9e578063cf9c57191462000fb6578063cfd19fb91462000fce578063d372c07e1462000ff357005b8063b6ef8c671462000ee7578063b7ab4db51462000f0c578063c2362dd51462000f24578063c9d97af41462000f3c578063cb696f541462000f5457005b8063a515366a11620001f3578063ab8f6ffe11620001b5578063ab8f6ffe1462000e02578063ae1f5fa01462000e29578063b2ea9adb1462000e50578063b3ecbadd1462000e75578063b46e55201462000e9a578063b66b3e791462000ebf57005b8063a515366a1462000d42578063a5d059ca1462000d59578063a8b2216e1462000d70578063a9059cbb1462000d97578063a9af10591462000dbc57005b806396b477cb116200023d57806396b477cb1462000c9a57806396f18a321462000ccb5780639ac310741462000ced5780639c98e4711462000d055780639dc29fac1462000d1d57005b8063852c48491462000bf2578063872cf0591462000c1757806389c614b81462000c2f5780638bac7dad1462000c4757806395d89b411462000c6c57005b806340c10f1911620003af5780636fd2c80b1162000327578063784304b511620002e9578063784304b5146200098257806379502c5514620009a75780637e660ac91462000b71578063819b64631462000b96578063833b1fce1462000bad57806384467fdb1462000bcd57005b80636fd2c80b14620008dd57806370a0823114620008f457806371d1bc59146200092e578063731b3a03146200094657806377e741c7146200095d57005b80635bdedd1611620003715780635bdedd1614620008255780635f7d3949146200083d5780636a929cef146200087b5780636b5f444c14620008a05780636bb9cb0e14620008c557005b806340c10f19146200077757806343645969146200079c578063496ccd9b14620007b35780634bb278f314620007d8578063520fdbbc146200080057005b8063161605e3116200044357806329070c6d116200040557806329070c6d14620006ed5780632f2c3f2e1462000704578063313ce567146200071c57806335be16e0146200073a578063386a827b146200075f57005b8063161605e314620004d357806318160ddd14620006585780631904bb2e146200066f5780631a0cf2e514620006a357806323b872dd14620006c857005b80630fe50109116200048d5780630fe5010914620005ba5780631122063314620005df578063114eaf5514620005f65780631250a28d146200061b5780631604e416146200064057005b806306fdde0314620004d5578063095ea7b314620005195780630ae65e7a146200054f5780630b21fb1d14620005745780630d8e6e2c146200059957005b36620004d357005b005b348015620004e257600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b60405162000510919062007779565b60405180910390f35b3480156200052657600080fd5b506200053e62000538366004620077ab565b6200119f565b604051901515815260200162000510565b3480156200055c57600080fd5b50620004d36200056e366004620077da565b620011b8565b3480156200058157600080fd5b50620004d362000593366004620077fa565b6200125f565b348015620005a657600080fd5b506024545b60405190815260200162000510565b348015620005c757600080fd5b50620004d3620005d9366004620077fa565b62001291565b348015620005ec57600080fd5b50601354620005ab565b3480156200060357600080fd5b50620004d362000615366004620077fa565b620012c3565b3480156200062857600080fd5b50620004d36200063a366004620077da565b620012f5565b3480156200064d57600080fd5b50620005ab602d5481565b3480156200066557600080fd5b50603954620005ab565b3480156200067c57600080fd5b50620006946200068e366004620077da565b62001346565b60405162000510919062007858565b348015620006b057600080fd5b50620004d3620006c2366004620077da565b620015f4565b348015620006d557600080fd5b506200053e620006e7366004620079d1565b62001643565b348015620006fa57600080fd5b50601254620005ab565b3480156200071157600080fd5b50620005ab61271081565b3480156200072957600080fd5b506040516012815260200162000510565b3480156200074757600080fd5b50620004d36200075936600462007a17565b620016eb565b3480156200076c57600080fd5b50620005ab60055481565b3480156200078457600080fd5b50620004d362000796366004620077ab565b620018c7565b348015620007a957600080fd5b50602254620005ab565b348015620007c057600080fd5b50620004d3620007d2366004620077da565b62001904565b348015620007e557600080fd5b50620007f062001a0e565b6040516200051092919062007ad8565b3480156200080d57600080fd5b50620004d36200081f366004620077da565b62001fa0565b3480156200083257600080fd5b50620005ab60075481565b3480156200084a57600080fd5b50620008626200085c36600462007af5565b6200219b565b6040516001600160a01b03909116815260200162000510565b3480156200088857600080fd5b50620004d36200089a366004620077fa565b620023b2565b348015620008ad57600080fd5b50620004d3620008bf366004620077fa565b620023e4565b348015620008d257600080fd5b50620005ab60355481565b348015620008ea57600080fd5b50601554620005ab565b3480156200090157600080fd5b50620005ab62000913366004620077da565b6001600160a01b031660009081526037602052604090205490565b3480156200093b57600080fd5b50620005ab60065481565b3480156200095357600080fd5b50602854620005ab565b3480156200096a57600080fd5b50620004d36200097c366004620077fa565b6200256a565b3480156200098f57600080fd5b50620004d3620009a136600462007bc3565b6200259c565b348015620009b457600080fd5b506040805160c080820183526012548252601354602080840191909152601454838501526015546060808501919091526016546080808601919091526017546001600160a01b0390811660a08088019190915287516101008101895260185483168152601954831681870152601a548316818a0152601b54831681860152601c54831681850152601d54831691810191909152601e54821695810195909552601f54811660e086015286519182018752835416815260215492810192909252602254948201949094526023549381019390935260245462000a93939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0988901516001600160a01b039081168a8601528851811660c080870191909152848a0151821660e0808801919091528a8801518316610100880152848b01518316610120880152928a015182166101408701529989015181166101608601529888015189166101808501529096015187166101a083015284519096166101c0820152948301516101e08601528201516102008501529101516102208301526102408201526102600162000510565b34801562000b7e57600080fd5b50620004d362000b90366004620077fa565b62002747565b34801562000ba357600080fd5b50602354620005ab565b34801562000bba57600080fd5b506019546001600160a01b031662000862565b34801562000bda57600080fd5b50620004d362000bec36600462007c19565b62002779565b34801562000bff57600080fd5b50620004d362000c11366004620077ab565b620028a8565b34801562000c2457600080fd5b50620004d362002a39565b34801562000c3c57600080fd5b50620005ab60295481565b34801562000c5457600080fd5b50620004d362000c66366004620077fa565b62002a75565b34801562000c7957600080fd5b50604080518082019091526003815262272a2760e91b602082015262000501565b34801562000ca757600080fd5b50620005ab62000cb9366004620077fa565b60009081526027602052604090205490565b34801562000cd857600080fd5b50603c5462000862906001600160a01b031681565b34801562000cfa57600080fd5b50620005ab603a5481565b34801562000d1257600080fd5b50620005ab602a5481565b34801562000d2a57600080fd5b50620004d362000d3c366004620077ab565b62002af9565b620005ab62000d53366004620077ab565b62002c16565b620005ab62000d6a366004620077ab565b62002d33565b34801562000d7d57600080fd5b5062000d8862002e0c565b60405162000510919062007cc2565b34801562000da457600080fd5b506200053e62000db6366004620077ab565b62002eef565b34801562000dc957600080fd5b5062000df362000ddb366004620077fa565b6000908152600b602052604090206006015460ff1690565b60405162000510919062007d28565b34801562000e0f57600080fd5b5062000e1a62002f47565b60405162000510919062007d3d565b34801562000e3657600080fd5b5062000e4162003059565b60405162000510919062007d52565b34801562000e5d57600080fd5b50620004d362000e6f36600462007da1565b6200329f565b34801562000e8257600080fd5b50620004d362000e94366004620077da565b620032e6565b34801562000ea757600080fd5b50620004d362000eb9366004620077da565b62003335565b34801562000ecc57600080fd5b5062000ed762003582565b6040516200051092919062007e02565b34801562000ef457600080fd5b50620005ab62000f06366004620077fa565b620036b9565b34801562000f1957600080fd5b5062000e416200374b565b34801562000f3157600080fd5b50620005ab60285481565b34801562000f4957600080fd5b50620005ab60265481565b34801562000f6157600080fd5b50620004d362000f73366004620077fa565b620037af565b34801562000f8657600080fd5b50620004d362000f98366004620077da565b62003812565b34801562000fab57600080fd5b50620005ab60045481565b34801562000fc357600080fd5b50620004d362003861565b34801562000fdb57600080fd5b50620004d362000fed366004620077da565b620038b6565b3480156200100057600080fd5b50620004d362001012366004620077da565b62003905565b3480156200102557600080fd5b50603b5462000862906001600160a01b031681565b3480156200104757600080fd5b50620004d362003954565b3480156200105f57600080fd5b50620004d362001071366004620077da565b620039ae565b3480156200108457600080fd5b50620005ab6200109636600462007e34565b6001600160a01b039182166000908152602f6020908152604080832093909416825291909152205490565b348015620010ce57600080fd5b50602154620005ab565b348015620010e557600080fd5b506020546001600160a01b031662000862565b3480156200110557600080fd5b50620005ab602c5481565b3480156200111d57600080fd5b50620004d36200112f366004620077fa565b620039fd565b3480156200114257600080fd5b50620004d362001154366004620077da565b62003a2f565b3480156200116757600080fd5b50620004d362001179366004620077da565b62003a7e565b3480156200118c57600080fd5b506017546001600160a01b031662000862565b6000620011ae33848462003acd565b5060015b92915050565b620011c262003bf6565b6001600160a01b03808216600081815260386020526040902060010154909116146200120b5760405162461bcd60e51b8152600401620012029062007e72565b60405180910390fd5b6001600160a01b03818116600090815260386020526040902054163314620012475760405162461bcd60e51b8152600401620012029062007ea9565b620012528162003c45565b6200125c60008055565b50565b6020546001600160a01b031633146200128c5760405162461bcd60e51b8152600401620012029062007ef5565b600555565b6020546001600160a01b03163314620012be5760405162461bcd60e51b8152600401620012029062007ef5565b600455565b6020546001600160a01b03163314620012f05760405162461bcd60e51b8152600401620012029062007ef5565b601555565b6020546001600160a01b03163314620013225760405162461bcd60e51b8152600401620012029062007ef5565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b565b6200135062007532565b6001600160a01b0380831660008181526038602052604090206001015490911614620013905760405162461bcd60e51b8152600401620012029062007f2c565b6001600160a01b038083166000908152603860209081526040918290208251610280810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620013f39062007f63565b80601f0160208091040260200160405190810160405280929190818152602001828054620014219062007f63565b8015620014725780601f10620014465761010080835404028352916020019162001472565b820191906000526020600020905b8154815290600101906020018083116200145457829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a082015260118201546101c08201526012820180546101e0909201916200152e9062007f63565b80601f01602080910402602001604051908101604052809291908181526020018280546200155c9062007f63565b8015620015ad5780601f106200158157610100808354040283529160200191620015ad565b820191906000526020600020905b8154815290600101906020018083116200158f57829003601f168201915b5050509183525050601382015460209091019060ff166003811115620015d757620015d762007814565b6003811115620015eb57620015eb62007814565b90525092915050565b6020546001600160a01b03163314620016215760405162461bcd60e51b8152600401620012029062007ef5565b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006200165284848462003d31565b6001600160a01b0384166000908152602f602090815260408083203384529091528120546200168390849062007fb5565b90506200169285338362003acd565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051620016d891815260200190565b60405180910390a3506001949350505050565b6018546001600160a01b03163314620017535760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f742074686520736c617368696e6720636f6e74726044820152621858dd60ea1b606482015260840162001202565b6000610120820135603882620017706040860160208701620077da565b6001600160a01b03166001600160a01b0316815260200190815260200160002060090154620017a0919062007fb5565b60c083013560386000620017bb6040870160208801620077da565b6001600160a01b03166001600160a01b0316815260200190815260200160002060060154620017eb919062007fb5565b60a084013560386000620018066040880160208901620077da565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015462001836919062007fb5565b62001842919062007fcb565b6200184e919062007fcb565b6017546001600160a01b03166000908152603760205260408120805492935083929091906200187f90849062007fcb565b90915550829050603860006200189c6040840160208501620077da565b6001600160a01b031681526020810191909152604001600020620018c18282620081b9565b50505050565b6020546001600160a01b03163314620018f45760405162461bcd60e51b8152600401620012029062007ef5565b62001900828262003df7565b5050565b6020546001600160a01b03163314620019315760405162461bcd60e51b8152600401620012029062007ef5565b601980546001600160a01b0319166001600160a01b03838116918217909255601a54604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b1580156200199057600080fd5b505af1158015620019a5573d6000803e3d6000fd5b5050601c54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b158015620019f257600080fd5b505af115801562001a07573d6000803e3d6000fd5b5050505050565b603b546000906060906001600160a01b0316331462001a415760405162461bcd60e51b815260040162001202906200830f565b62001a4b62003bf6565b6026544360008181526027602052604081209290925560215460285462001a73919062007fcb565b6018546040516306c9789b60e41b8152929091146004830181905292506001600160a01b031690636c9789b090602401600060405180830381600087803b15801562001abe57600080fd5b505af115801562001ad3573d6000803e3d6000fd5b50505050801562001d8157601e54603954603a546029546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562001b46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b6c919062008352565b905080603a54101562001b7e5750603a545b62001b8a308262003df7565b80603a600082825462001b9e919062007fb5565b9091555050601f546040805163f968f49360e01b815281516001600160a01b039093169263f968f4939260048084019391929182900301816000875af192505050801562001c0b575060408051601f3d908101601f1916820190925262001c08918101906200836c565b60015b62001c49576040514281527ff1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c99060200160405180910390a162001c7c565b60175462001c61906001600160a01b03168262003df7565b601f5462001c79906001600160a01b03168362003df7565b50505b62001c88478262003e7d565b62001c9262004432565b62001c9c620046f5565b62001ca6620047e4565b62001cb062004883565b600062001cbc62003059565b60195460405163422811f960e11b81529192506001600160a01b03169063845023f29062001cef90849060040162007d52565b600060405180830381600087803b15801562001d0a57600080fd5b505af115801562001d1f573d6000803e3d6000fd5b505043602855505042602955602680546001919060009062001d4390849062007fcb565b90915550506026546040519081527febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e3359060200160405180910390a150505b60195460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af115801562001dcd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001df3919062008391565b9050801562001e6f57601a546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af192505050801562001e67575060408051601f3d908101601f1916820190925262001e649181019062008391565b60015b1562001e6f57505b600354602b80546040805160208084028201810190925282815260ff9094169391839160009084015b8282101562001f86576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162001eee9062007f63565b80601f016020809104026020016040519081016040528092919081815260200182805462001f1c9062007f63565b801562001f6d5780601f1062001f415761010080835404028352916020019162001f6d565b820191906000526020600020905b81548152906001019060200180831162001f4f57829003601f168201915b5050505050815250508152602001906001019062001e98565b50505050905093509350505062001f9c60008055565b9091565b6020546001600160a01b0316331462001fcd5760405162461bcd60e51b8152600401620012029062007ef5565b602080546001600160a01b0319166001600160a01b0383811691821790925560195460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b1580156200202c57600080fd5b505af115801562002041573d6000803e3d6000fd5b5050601a5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200208d57600080fd5b505af1158015620020a2573d6000803e3d6000fd5b5050601b5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b158015620020ee57600080fd5b505af115801562002103573d6000803e3d6000fd5b5050601c5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200214f57600080fd5b505af115801562002164573d6000803e3d6000fd5b5050601d5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401620019d7565b600080805b602b54811015620021f757602b8181548110620021c157620021c1620083b5565b90600052602060002090600302016001015482620021e0919062007fcb565b915080620021ee81620083cb565b915050620021a0565b50806000036200224a5760405162461bcd60e51b815260206004820152601c60248201527f54686520636f6d6d6974746565206973206e6f74207374616b696e6700000000604482015260640162001202565b6000836200225a606387620083e7565b62002266919062007fcb565b90506000816040516020016200227e91815260200190565b60408051601f19818403018152919052805160209091012090506000620022a6848362008417565b90506000805b602b548110156200235657602b8181548110620022cd57620022cd620083b5565b90600052602060002090600302016001015482620022ec919062007fcb565b9150620022fb60018362007fb5565b83116200234157602b8181548110620023185762002318620083b5565b60009182526020909120600390910201546001600160a01b03169650620011b295505050505050565b806200234d81620083cb565b915050620022ac565b5060405162461bcd60e51b815260206004820152602960248201527f5468657265206973206e6f2076616c696461746f72206c65667420696e20746860448201526865206e6574776f726b60b81b606482015260840162001202565b6020546001600160a01b03163314620023df5760405162461bcd60e51b8152600401620012029062007ef5565b603555565b6020546001600160a01b03163314620024115760405162461bcd60e51b8152600401620012029062007ef5565b602154811015620024c857806028546200242c919062007fcb565b4310620024c85760405162461bcd60e51b815260206004820152605760248201527f63757272656e7420636861696e2068656164206578636565642074686520776960448201527f6e646f773a206c617374426c6f636b45706f6368202b205f6e6577506572696f60648201527f642c2074727920616761696e206c6174746572206f6e2e000000000000000000608482015260a40162001202565b6021819055601854604051631ad7d11360e21b8152600481018390526001600160a01b0390911690636b5f444c90602401600060405180830381600087803b1580156200251457600080fd5b505af115801562002529573d6000803e3d6000fd5b505050507fd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81816040516200255f91815260200190565b60405180910390a150565b6020546001600160a01b03163314620025975760405162461bcd60e51b8152600401620012029062007ef5565b601255565b6001600160a01b038083166000818152603860205260409020600181015490921614620025dd5760405162461bcd60e51b8152600401620012029062007f2c565b80546001600160a01b03163314620026095760405162461bcd60e51b815260040162001202906200842e565b620026148362004a34565b156200266e5760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b606482015260840162001202565b6000806200267c8462004aa5565b925090508115620026be5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001202565b60018301546001600160a01b038281169116146200272f5760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b606482015260840162001202565b600383016200273f85826200847d565b505050505050565b6020546001600160a01b03163314620027745760405162461bcd60e51b8152600401620012029062007ef5565b600755565b6000604051806102800160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160126000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020014381526020016000815260200160008152602001600081526020018481526020016000600381111562002848576200284862007814565b9052905062002858818362004aea565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200289992339289918b9162008546565b60405180910390a15050505050565b6001600160a01b0380831660008181526038602052604090206001015490911614620028e85760405162461bcd60e51b8152600401620012029062007e72565b6001600160a01b03828116600090815260386020526040902054163314620029245760405162461bcd60e51b8152600401620012029062007ea9565b612710811115620029785760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e207261746500604482015260640162001202565b604080516060810182526001600160a01b038481168252436020808401918252838501868152601180546000908152600f909352958220855181546001600160a01b031916951694909417845591516001808501919091559151600290930192909255835492939092909190620029f190849062007fcb565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b6020546001600160a01b0316331462002a665760405162461bcd60e51b8152600401620012029062007ef5565b6003805460ff19166001179055565b6020546001600160a01b0316331462002aa25760405162461bcd60e51b8152600401620012029062007ef5565b6000811162002af45760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e2774206265203000000000000000604482015260640162001202565b602355565b6020546001600160a01b0316331462002b265760405162461bcd60e51b8152600401620012029062007ef5565b6001600160a01b03821660009081526037602052604090205481111562002b895760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b604482015260640162001202565b6001600160a01b0382166000908152603760205260408120805483929062002bb390849062007fb5565b92505081905550806039600082825462002bce919062007fb5565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062002c2262003bf6565b6001600160a01b038084166000818152603860205260409020600101549091161462002c625760405162461bcd60e51b8152600401620012029062007f2c565b6001600160a01b03831660009081526038602052604081206013015460ff16600381111562002c955762002c9562007814565b1462002ce45760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f206265206163746976650000000000604482015260640162001202565b60355462002cf390346200858f565b336000908152603660205260408120805490919062002d1490849062007fcb565b9091555062002d27905083833362004f44565b9050620011b260008055565b600062002d3f62003bf6565b6001600160a01b038084166000818152603860205260409020600101549091161462002d7f5760405162461bcd60e51b8152600401620012029062007f2c565b6000821162002dc95760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b604482015260640162001202565b60355462002dd890346200858f565b336000908152603660205260408120805490919062002df990849062007fcb565b9091555062002d2790508383336200515b565b6060602e805480602002602001604051908101604052809291908181526020016000905b8282101562002ee657838290600052602060002001805462002e529062007f63565b80601f016020809104026020016040519081016040528092919081815260200182805462002e809062007f63565b801562002ed15780601f1062002ea55761010080835404028352916020019162002ed1565b820191906000526020600020905b81548152906001019060200180831162002eb357829003601f168201915b50505050508152602001906001019062002e30565b50505050905090565b600062002efe33848462003d31565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6060602b805480602002602001604051908101604052809291908181526020016000905b8282101562002ee6576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162002fc19062007f63565b80601f016020809104026020016040519081016040528092919081815260200182805462002fef9062007f63565b8015620030405780601f10620030145761010080835404028352916020019162003040565b820191906000526020600020905b8154815290600101906020018083116200302257829003601f168201915b5050505050815250508152602001906001019062002f6b565b603b546060906001600160a01b03163314620030895760405162461bcd60e51b815260040162001202906200830f565b602554620030da5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f72730000000000000000604482015260640162001202565b620030e462007602565b60235460808201526025815260386020820152602b6040820152602a60608201526200311081620055c2565b6200311e602e600062007620565b602b5480620031655760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b604482015260640162001202565b60008167ffffffffffffffff81111562003183576200318362007b18565b604051908082528060200260200182016040528015620031ad578160200160208202803683370190505b50905060005b828110156200329757600060386000602b8481548110620031d857620031d8620083b5565b60009182526020808320600392830201546001600160a01b0316845283019390935260409091018120602e8054600181018255925292507f37fa166cbdbfbb1561ccd9ea985ec0218b5e68502e230525f544285b2bdf3d7e01906200324090830182620085a6565b50600281015483516001600160a01b0390911690849084908110620032695762003269620083b5565b6001600160a01b039092166020928302919091019091015250806200328e81620083cb565b915050620031b3565b509250505090565b6020546001600160a01b03163314620032cc5760405162461bcd60e51b8152600401620012029062007ef5565b620032d9600183620055e2565b62001900600282620055e2565b6020546001600160a01b03163314620033135760405162461bcd60e51b8152600401620012029062007ef5565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6200333f62003bf6565b6001600160a01b03808216600081815260386020526040902060010154909116146200337f5760405162461bcd60e51b8152600401620012029062007e72565b6001600160a01b03808216600090815260386020526040902080549091163314620033be5760405162461bcd60e51b815260040162001202906200842e565b6000601382015460ff166003811115620033dc57620033dc62007814565b036200342b5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c7265616479206163746976650000000000000000604482015260640162001202565b6002601382015460ff16600381111562003449576200344962007814565b1480156200345a5750438160100154115b15620034a95760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c000000000000000000604482015260640162001202565b6003601382015460ff166003811115620034c757620034c762007814565b03620035165760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c7900000000604482015260640162001202565b60138101805460ff1916905580546021546028546001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b59162003566919062007fcb565b60405190815260200160405180910390a3506200125c60008055565b60608060016002818054620035979062007f63565b80601f0160208091040260200160405190810160405280929190818152602001828054620035c59062007f63565b8015620036165780601f10620035ea5761010080835404028352916020019162003616565b820191906000526020600020905b815481529060010190602001808311620035f857829003601f168201915b505050505091508080546200362b9062007f63565b80601f0160208091040260200160405190810160405280929190818152602001828054620036599062007f63565b8015620036aa5780601f106200367e57610100808354040283529160200191620036aa565b820191906000526020600020905b8154815290600101906020018083116200368c57829003601f168201915b50505050509050915091509091565b600060036000838152600b602052604090206006015460ff166003811115620036e657620036e662007814565b14620037355760405162461bcd60e51b815260206004820152601e60248201527f756e626f6e64696e672072656c65617365206e6f742072657665727465640000604482015260640162001202565b506000908152600b602052604090206005015490565b60606025805480602002602001604051908101604052809291908181526020018280548015620037a557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003786575b5050505050905090565b6020546001600160a01b03163314620037dc5760405162461bcd60e51b8152600401620012029062007ef5565b60138190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128906020016200255f565b6020546001600160a01b031633146200383f5760405162461bcd60e51b8152600401620012029062007ef5565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b031633146200388e5760405162461bcd60e51b8152600401620012029062007ef5565b6200389c6001600062007640565b620038aa6002600062007640565b6003805460ff19169055565b6020546001600160a01b03163314620038e35760405162461bcd60e51b8152600401620012029062007ef5565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b03163314620039325760405162461bcd60e51b8152600401620012029062007ef5565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b603b546001600160a01b03163314620039815760405162461bcd60e51b815260040162001202906200830f565b6200398b62003bf6565b62003995620046f5565b6200399f62003059565b50426029556200134460008055565b6020546001600160a01b03163314620039db5760405162461bcd60e51b8152600401620012029062007ef5565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b0316331462003a2a5760405162461bcd60e51b8152600401620012029062007ef5565b600655565b6020546001600160a01b0316331462003a5c5760405162461bcd60e51b8152600401620012029062007ef5565b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b0316331462003aab5760405162461bcd60e51b8152600401620012029062007ef5565b603c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831662003b315760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162001202565b6001600160a01b03821662003b945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162001202565b6001600160a01b038381166000818152602f602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000541562003c3e5760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b604482015260640162001202565b6001600055565b6001600160a01b038116600090815260386020526040812090601382015460ff16600381111562003c7a5762003c7a62007814565b1462003cc95760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d757374206265206163746976650000000000000000604482015260640162001202565b60138101805460ff1916600117905580546021546028546001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c9162003d1c919062007fcb565b60405190815260200160405180910390a35050565b6001600160a01b03831660009081526037602052604090205481111562003d945760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b604482015260640162001202565b6001600160a01b0383166000908152603760205260408120805483929062003dbe90849062007fb5565b90915550506001600160a01b0382166000908152603760205260408120805483929062003ded90849062007fcb565b9091555050505050565b6001600160a01b0382166000908152603760205260408120805483929062003e2190849062007fcb565b92505081905550806039600082825462003e3c919062007fcb565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162002c0a565b8115801562003e8a575080155b1562003e94575050565b601254600090670de0b6b3a76400009062003eb1908590620083e7565b62003ebd91906200858f565b9050801562003f3b576017546040516000916001600160a01b03169083908381818185875af1925050503d806000811462003f15576040519150601f19603f3d011682016040523d82523d6000602084013e62003f1a565b606091505b509091505080151560010362003f395762003f36828562007fb5565b93505b505b82602c600082825462003f4f919062007fcb565b90915550600090505b602b54811015620018c157600060386000602b848154811062003f7f5762003f7f620083b5565b600091825260208083206003909202909101546001600160a01b031683528201929092526040018120602a54602b805492945090918891908690811062003fca5762003fca620083b5565b90600052602060002090600302016001015462003fe89190620083e7565b62003ff491906200858f565b90506000602a5486602b8681548110620040125762004012620083b5565b906000526020600020906003020160010154620040309190620083e7565b6200403c91906200858f565b905060008211806200404e5750600081115b1562004419576002601384015460ff16600381111562004072576200407262007814565b14806200409a57506003601384015460ff16600381111562004098576200409862007814565b145b156200416457601854620040ba9030906001600160a01b03168362003d31565b601854602b80546001600160a01b039092169163a8031a1d91859188908110620040e857620040e8620083b5565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b1580156200414157600080fd5b505af115801562004156573d6000803e3d6000fd5b50505050505050506200441d565b600083600501548385600801546200417d9190620083e7565b6200418991906200858f565b905080156200423a57835460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d8060008114620041e9576040519150601f19603f3d011682016040523d82523d6000602084013e620041ee565b606091505b5090925090508115156000036200423757855460405160008051602062009b6e833981519152916200422e916001600160a01b0390911690849062008684565b60405180910390a15b50505b60008460050154838660080154620042539190620083e7565b6200425f91906200858f565b9050801562004281578454620042819030906001600160a01b03168362003d31565b60006200428f828562007fb5565b905060006200429f848762007fb5565b90506000811180620042b15750600082115b15620043ca57600c870154620042d39030906001600160a01b03168462003d31565b600c870154604051602481018490526000916001600160a01b031690839060440160408051601f198184030181529181526020820180516001600160e01b031663a0ce552d60e01b179052516200432b9190620086b5565b60006040518083038185875af1925050503d80600081146200436a576040519150601f19603f3d011682016040523d82523d6000602084013e6200436f565b606091505b5090915050600181151514620043c85760405162461bcd60e51b815260206004820152601c60248201527f6661696c656420746f2064697374726962757465207265776172647300000000604482015260640162001202565b505b600187015460408051888152602081018890526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a2505050505b5050505b806200442981620083cb565b91505062003f58565b60335460005b818110156200190057600060338281548110620044595762004459620083b5565b60009182526020808320909101546001600160a01b031680835260318252604080842080548251818602810186019093528083529295509092909190830182828015620044d057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620044b1575b5050505050905060005b815181101562004558576001600160a01b03831660009081526030602052604081208351909190849084908110620045165762004516620083b5565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000905580806200454f90620083cb565b915050620044da565b506001600160a01b03821660009081526031602052604081206200457c916200767f565b6001600160a01b0382166000908152603660205260409020548151600754620045a69190620083e7565b811115620045c2578151600754620045bf9190620083e7565b90505b60005a9050836001600160a01b031663d18736ab83856040518363ffffffff1660e01b8152600401620045f6919062007d52565b600060405180830381600088803b1580156200461157600080fd5b5087f19350505050801562004624575060015b6200465a575a62004636908262007fb5565b6001600160a01b03851660009081526034602052604090206001905590506200466a565b5a62004667908262007fb5565b90505b6001600160a01b038416600090815260366020526040902054811015620046c1576001600160a01b03841660009081526036602052604081208054839290620046b590849062007fb5565b90915550620046db9050565b6001600160a01b0384166000908152603660205260408120555b505050508080620046ec90620083cb565b91505062004438565b6009545b600a5481101562004722576200471c816200471481620083cb565b925062005735565b620046f9565b50600a54600955600d54600c54036200473757565b600e545b600d5481101562004764576200475e816200475681620083cb565b925062005a6c565b6200473b565b50600d54600e55600c54805b600d54811015620047de576015546000828152600b602052604090206004015443916200479d9162007fcb565b11620047c357620047ae8162005f17565b620047bb60018362007fcb565b9150620047c9565b620047de565b80620047d581620083cb565b91505062004770565b50600c55565b60335460005b8181101562004874576000603382815481106200480b576200480b620083b5565b60009182526020808320909101546001600160a01b031680835260328252604080842084905560349092529120549091506001036200485e576001600160a01b0381166000908152603460205260408120555b50806200486b81620083cb565b915050620047ea565b506200125c603360006200767f565b601154601054101562001344576010546000908152600f6020526040902060155460018201544391620048b69162007fcb565b1115620048c05750565b600281015481546001600160a01b03908116600090815260386020526040808220600401849055845483168252808220600c01549051602481019490945290928392919091169060440160408051601f198184030181529181526020820180516001600160e01b03166319fac8fd60e01b17905251620049419190620086b5565b6000604051808303816000865af19150503d806000811462004980576040519150601f19603f3d011682016040523d82523d6000602084013e62004985565b606091505b509092509050811515600003620049e25782546001600160a01b0390811660009081526038602052604090819020600c0154905160008051602062009b6e83398151915292620049d99216908490620086d3565b60405180910390a15b601080546000908152600f6020526040812080546001600160a01b03191681556001808201839055600290910182905582549092919062004a2590849062007fcb565b90915550620048839350505050565b6000805b602b5481101562004a9c57602b818154811062004a595762004a59620083b5565b60009182526020909120600390910201546001600160a01b039081169084160362004a875750600192915050565b8062004a9381620083cb565b91505062004a38565b50600092915050565b60008062004ab26200769f565b60008060ff9050604083875160208901845afa62004acf57600080fd5b50508051602090910151600160601b90910494909350915050565b60e281511462004b345760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640162001202565b6030826102400151511462004b8c5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e67746800000000604482015260640162001202565b62004b9782620060c0565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262004bfa920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262004c1a8351620061ed565b8360405160200162004c2f939291906200872a565b60408051601f198184030181528282528051602091820120600280855260608501845290945060009392909183019080368337019050509050600080808062004c87898262004c8160416002620083e7565b6200630e565b9050600062004ca68a62004c9e60416002620083e7565b60606200630e565b905060205b825181101562004d775762004cc1838262006427565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa15801562004d1d573d6000803e3d6000fd5b5050604051601f19015190508762004d376041846200858f565b8151811062004d4a5762004d4a620083b5565b6001600160a01b039092166020928302919091019091015262004d6f60418262007fcb565b905062004cab565b508a602001516001600160a01b03168660008151811062004d9c5762004d9c620083b5565b60200260200101516001600160a01b03161462004e0e5760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b606482015260840162001202565b8a604001516001600160a01b03168660018151811062004e325762004e32620083b5565b60200260200101516001600160a01b03161462004ea65760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b606482015260840162001202565b600162004ebe8c6102400151838e600001516200645e565b1462004f2c5760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b606482015260840162001202565b62004f378b620064cd565b5050505050505050505050565b600080831162004fa35760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162001202565b6001600160a01b0382166000908152603760205260409020548311156200500d5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162001202565b6001600160a01b038216600090815260376020526040812080548592906200503790849062007fb5565b9091555050604080516080810182526001600160a01b03808516825286811660208084019182528385018881524360608601908152600a805460009081526008909452968320865181549087166001600160a01b031991821617825594516001820180549190971695169490941790945551600283015591516003909101558254919290620050c683620083cb565b90915550506001600160a01b03858116600081815260386020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3833b1562005140576200514084876200677a565b6001600a5462005151919062007fb5565b9695505050505050565b6001600160a01b038084166000908152603860205260408120805491929091848216911614806200535557600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa158015620051d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620051fa919062008352565b905085811015620052625760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b606482015260840162001202565b600c8301546040516001600160a01b03878116602483015260448201899052600092169060640160408051601f198184030181529181526020820180516001600160e01b031663282d3fdf60e01b17905251620052c09190620086b5565b6000604051808303816000865af19150503d8060008114620052ff576040519150601f19603f3d011682016040523d82523d6000602084013e62005304565b606091505b50509050806200534d5760405162461bcd60e51b81526020600482015260136024820152722330b4b632b2103a37903637b1b59026272a2760691b604482015260640162001202565b5050620053e8565b8482600b015483600801546200536c919062007fb5565b1015620053cc5760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b606482015260840162001202565b8482600b016000828254620053e2919062007fcb565b90915550505b604051806101200160405280856001600160a01b03168152602001876001600160a01b0316815260200186815260200160008152602001438152602001600081526020016000600381111562005442576200544262007814565b815260006020808301829052841515604093840152600d548252600b815290829020835181546001600160a01b039182166001600160a01b03199182161783559285015160018381018054929093169190941617905591830151600283015560608301516003808401919091556080840151600484015560a0840151600584015560c08401516006840180549193909260ff19909216918490811115620054ed57620054ed62007814565b021790555060e082015160069091018054610100938401511515620100000262ff0000199315159094029290921662ffff001990921691909117919091179055600d80549060006200553f83620083cb565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc8388604051620055959291909115158252602082015260400190565b60405180910390a3833b15620055b157620055b184876200677a565b6001600d5462005151919062007fb5565b60fa60a06000808285855af4620055dd573d6000803e3d6000fd5b505050565b815460026001808316156101000203821604825180820160208110602084100160028114620056915760018114620056b7578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156200567a57815184556001840193506020820191506200565b565b815191036101000a9081900402909155506200572c565b60028302826020036101000a846020036101000a6020890151040201850187556200572c565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b808210156200571a5781518455600184019350602082019150620056fb565b815191036101000a9081900402909155505b50505050505050565b600081815260086020908152604080832060018101546001600160a01b03168452603890925282209091601382015460ff1660038111156200577b576200577b62007814565b141580620057a2575081546001600160a01b03166000908152603460205260409020546001145b156200586257600282015482546001600160a01b031660009081526037602052604081208054909190620057d890849062007fcb565b909155505081546001830154600284015460138401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342926200583692909160ff9091169062008773565b60405180910390a380548254620055dd9185916000916001600160a01b0391821691161460016200687f565b805482546001600160a01b0390811691161462005a1c576000808260080154836005015462005892919062007fb5565b905080600003620058aa5783600201549150620058d0565b80846002015484600d0154620058c19190620083e7565b620058cd91906200858f565b91505b600c83015484546040516001600160a01b039182166024820152604481018590526000928392169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b17905251620059329190620086b5565b6000604051808303816000865af19150503d806000811462005971576040519150601f19603f3d011682016040523d82523d6000602084013e62005976565b606091505b509092509050811515600003620059d157600c85015460405160008051602062009b6e83398151915291620059b9916001600160a01b0390911690849062008792565b60405180910390a16200572c8760008060016200687f565b8385600d016000828254620059e7919062007fcb565b9091555050600286015460058601805460009062005a0790849062007fcb565b909155506200572c905087856000806200687f565b816002015481600801600082825462005a36919062007fcb565b9091555050600282015460058201805460009062005a5690849062007fcb565b90915550620055dd90508360006001816200687f565b6000818152600b6020908152604080832080546001600160a01b0316845260349092529091205460010362005b0e578054600182015460068301546002840154604080516201000090930460ff161515835260208301919091526001600160a01b0393841693909216917fec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866910160405180910390a36200190082600162006a08565b60018101546001600160a01b03166000908152603860205260408120600683015490919062010000900460ff1662005e05576002830154600c83015484546040516001600160a01b039182166024820152604481018490526000928392169060640160408051601f198184030181529181526020820180516001600160e01b0316637eee288d60e01b1790525162005ba79190620086b5565b6000604051808303816000865af19150503d806000811462005be6576040519150601f19603f3d011682016040523d82523d6000602084013e62005beb565b606091505b50909250905081151560000362005c4357600c85015460405160008051602062009b6e8339815191529162005c2e916001600160a01b03909116908490620087e1565b60405180910390a16200572c87600162006a08565b600c85015486546040516001600160a01b0391821660248201526044810186905291169060640160408051601f198184030181529181526020820180516001600160e01b0316632770a7eb60e21b1790525162005ca19190620086b5565b6000604051808303816000865af19150503d806000811462005ce0576040519150601f19603f3d011682016040523d82523d6000602084013e62005ce5565b606091505b50909250905081151560000362005d2857600c85015460405160008051602062009b6e8339815191529162005c2e916001600160a01b0390911690849062008838565b60008560080154866005015462005d40919062007fb5565b600d87015490915062005d548286620083e7565b62005d6091906200858f565b94508386600d01600082825462005d78919062007fb5565b9091555050600686015460000362005d97576003870185905562005dbf565b6006860154600787015462005dad9087620083e7565b62005db991906200858f565b60038801555b8486600601600082825462005dd5919062007fcb565b9091555050600387015460078701805460009062005df590849062007fcb565b9091555062005eda945050505050565b506002820154600882015481111562005e1f575060088101545b816009015460000362005e39576003830181905562005e61565b6009820154600a83015462005e4f9083620083e7565b62005e5b91906200858f565b60038401555b8082600901600082825462005e77919062007fcb565b90915550506003830154600a8301805460009062005e9790849062007fcb565b925050819055508082600801600082825462005eb4919062007fb5565b90915550506002830154600b8301805460009062005ed490849062007fb5565b90915550505b60068301805461ff00191661010017905560058201805482919060009062005f0490849062007fb5565b90915550620018c1905084600062006a08565b6000818152600b602052604090206006810154610100900460ff1662005f555760068101805460ff1916600217905562001900826000600162006b7b565b60068101805460ff19166001179055600381015460000362005f7f57620019008260008062006b7b565b60018101546001600160a01b03166000908152603860205260408120600683015490919062010000900460ff166200601c5781600701548260060154846003015462005fcc9190620083e7565b62005fd891906200858f565b90508082600601600082825462005ff0919062007fb5565b909155505060038301546007830180546000906200601090849062007fb5565b90915550620060819050565b81600a015482600901548460030154620060379190620083e7565b6200604391906200858f565b9050808260090160008282546200605b919062007fb5565b90915550506003830154600a830180546000906200607b90849062007fb5565b90915550505b82546001600160a01b031660009081526037602052604081208054839290620060ac90849062007fcb565b90915550620018c190508482600062006b7b565b6000620060d1826060015162004aa5565b6001600160a01b03909116602084015290508015620061215760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001202565b6020808301516001600160a01b03908116600090815260389092526040909120600101541615620061955760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162001202565b61271082608001511115620019005760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162001202565b606081600003620062155750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200624557806200622c81620083cb565b91506200623d9050600a836200858f565b915062006219565b60008167ffffffffffffffff81111562006263576200626362007b18565b6040519080825280601f01601f1916602001820160405280156200628e576020820181803683370190505b5090505b84156200630657620062a660018362007fb5565b9150620062b5600a8662008417565b620062c290603062007fcb565b60f81b818381518110620062da57620062da620083b5565b60200101906001600160f81b031916908160001a905350620062fe600a866200858f565b945062006292565b949350505050565b6060816200631e81601f62007fcb565b10156200635f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640162001202565b6200636b828462007fcb565b84511015620063b15760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640162001202565b606082158015620063d257604051915060008252602082016040526200641e565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200640d578051835260209283019201620063f3565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b811015620064575762006454601b8262008887565b90505b9250925092565b60006200646a620076bd565b60008585856040516020016200648393929190620088a3565b6040516020818303038152906040529050600060fb9050600082516020620064ac919062007fcb565b90506020848285855afa620064c057600080fd5b5050905195945050505050565b6101808101516001600160a01b0316620065cc57603c546001600160a01b0316620065465760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162001202565b6025546000906200655790620061ed565b905081602001518260000151836080015183603c60009054906101000a90046001600160a01b03166040516200658d90620076db565b6200659d959493929190620088f2565b604051809103906000f080158015620065ba573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602580546001808201835560009283527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c90910180546001600160a01b03199081166001600160a01b03958616179091558451841683526038909552604091829020865181548716908516178155935190840180548616918416919091179055840151600283018054909416911617909155606082015182919060038201906200667e90826200847d565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182015561024082015160128201906200674890826200847d565b5061026082015160138201805460ff1916600183600381111562006770576200677062007814565b0217905550505050565b6001600160a01b0382166000908152603260205260408120549003620067f8576001600160a01b03821660008181526032602052604081206001908190556033805491820181559091527f82a75bdeeae8604d839476ae9efd8b0e15aa447e21bfd7f41283bb54e22c9a820180546001600160a01b03191690911790555b6001600160a01b038083166000908152603060209081526040808320938516835292905290812054900362001900576001600160a01b03808316600081815260306020908152604080832094861680845294825280832060019081905593835260318252822080549384018155825290200180546001600160a01b03191690911790555050565b600084815260086020526040902080546001600160a01b0316803b620068a7575050620018c1565b6001600160a01b038116600090815260366020526040902054600454811115620068d057506004545b60005a6001850154604051634efe8dc760e11b8152600481018b90526001600160a01b039182166024820152604481018a905288151560648201528715156084820152919250841690639dfd1b8e90849060a401600060405180830381600088803b1580156200693f57600080fd5b5087f19350505050801562006952575060015b6200697d575a62006964908262007fb5565b9050846200697757620069778862006ceb565b6200698d565b5a6200698a908262007fb5565b90505b6001600160a01b038316600090815260366020526040902054811015620069e4576001600160a01b03831660009081526036602052604081208054839290620069d890849062007fb5565b90915550620069fe9050565b6001600160a01b0383166000908152603660205260408120555b5050505050505050565b6000828152600b6020526040902080546001600160a01b0316803b62006a2e5750505050565b6001600160a01b03811660009081526036602052604090205460055481111562006a5757506005545b60005a600185015460405163a892024160e01b8152600481018990526001600160a01b039182166024820152871515604482015291925084169063a8920241908490606401600060405180830381600088803b15801562006ab757600080fd5b5087f19350505050801562006aca575060015b62006af5575a62006adc908262007fb5565b90508462006aef5762006aef8662006f46565b62006b05565b5a62006b02908262007fb5565b90505b6001600160a01b03831660009081526036602052604090205481101562006b5c576001600160a01b0383166000908152603660205260408120805483929062006b5090849062007fb5565b909155506200273f9050565b50506001600160a01b0316600090815260366020526040812055505050565b6000838152600b6020526040902080546001600160a01b0316803b62006ba2575050505050565b6001600160a01b03811660009081526036602052604090205460065481111562006bcb57506006545b60005a6040516303c54c2960e41b8152600481018990526024810188905286151560448201529091506001600160a01b03841690633c54c290908490606401600060405180830381600088803b15801562006c2557600080fd5b5087f19350505050801562006c38575060015b62006c64575a62006c4a908262007fb5565b90508462006c5e5762006c5e87876200722d565b62006c74565b5a62006c71908262007fb5565b90505b6001600160a01b03831660009081526036602052604090205481101562006ccb576001600160a01b0383166000908152603660205260408120805483929062006cbf90849062007fb5565b909155506200572c9050565b50506001600160a01b031660009081526036602052604081205550505050565b600081815260086020908152604080832060018101546001600160a01b0390811685526038909352922080548354919291821691161462006e845760008160080154826005015462006d3e919062007fb5565b836002015483600d015462006d549190620083e7565b62006d6091906200858f565b600c83015484546040516001600160a01b039182166024820152604481018490529293506000928392919091169060640160408051601f198184030181529181526020820180516001600160e01b0316632770a7eb60e21b1790525162006dc89190620086b5565b6000604051808303816000865af19150503d806000811462006e07576040519150601f19603f3d011682016040523d82523d6000602084013e62006e0c565b606091505b50909250905081151560000362006e5f57600c84015460405160008051602062009b6e8339815191529162006e4f916001600160a01b0390911690849062008838565b60405180910390a1505050505050565b8284600d01600082825462006e75919062007fb5565b9091555062006ea49350505050565b816002015481600801600082825462006e9e919062007fb5565b90915550505b600282015482546001600160a01b03166000908152603760205260408120805490919062006ed490849062007fcb565b9091555050600282015460058201805460009062006ef490849062007fb5565b90915550508154600183015460028401546040519081526001600160a01b0392831692909116907f2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d909060200162003be9565b6000818152600b6020908152604080832060018101546001600160a01b031684526038909252822060068201549192909162010000900460ff166200710d576002830154600c83015484546040516001600160a01b039182166024820152604481018490526000928392169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b1790525162006fec9190620086b5565b6000604051808303816000865af19150503d80600081146200702b576040519150601f19603f3d011682016040523d82523d6000602084013e62007030565b606091505b5090925090508115156000036200708457600c85015460405160008051602062009b6e8339815191529162007073916001600160a01b0390911690849062008792565b60405180910390a150505050505050565b8285600d0160008282546200709a919062007fcb565b9091555050600785015460068601546003880154620070ba9190620083e7565b620070c691906200858f565b935083856006016000828254620070de919062007fb5565b90915550506003860154600786018054600090620070fe90849062007fb5565b909155506200718f9350505050565b81600a015482600901548460030154620071289190620083e7565b6200713491906200858f565b9050808260090160008282546200714c919062007fb5565b90915550506003830154600a830180546000906200716c90849062007fb5565b925050819055508082600801600082825462007189919062007fcb565b90915550505b60006003840181905560068401805461ff0019169055600583018054839290620071bb90849062007fcb565b90915550508254600184015460068501546002860154604080516201000090930460ff161515835260208301919091526001600160a01b0393841693909216917f52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c91015b60405180910390a350505050565b6000828152600b6020526040812090829003620072b157600681018054600360ff19909116179081905581546001830154604080516201000090940460ff1615158452602084018690526001600160a01b039283169392909116917f0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc910162003be9565b60018101546001600160a01b03166000908152603860205260409020600682015462010000900460ff16620074535760008082600801548360050154620072f9919062007fb5565b9050806000036200730d578491506200732f565b808584600d0154620073209190620083e7565b6200732c91906200858f565b91505b600c83015484546040516001600160a01b039182166024820152604481018590526000928392169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b17905251620073919190620086b5565b6000604051808303816000865af19150503d8060008114620073d0576040519150601f19603f3d011682016040523d82523d6000602084013e620073d5565b606091505b5090925090508115156000036200742a57600c85015460405160008051602062009b6e8339815191529162007418916001600160a01b0390911690849062008792565b60405180910390a15050505050505050565b8385600d01600082825462007440919062007fcb565b9091555050505050600583015562007478565b8282600501819055508281600801600082825462007472919062007fcb565b90915550505b60068201805460ff1916600317905581546001600160a01b031660009081526037602052604081208054859290620074b290849062007fb5565b9250508190555082816005016000828254620074cf919062007fcb565b9091555050815460018301546006840154604080516201000090920460ff1615158252602082018790526001600160a01b0393841693909216917f0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc91016200721f565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160006003811115620075fd57620075fd62007814565b905290565b6040518060a001604052806005906020820280368337509192915050565b50805460008255906000526020600020908101906200125c9190620076e9565b5080546200764e9062007f63565b6000825580601f106200765f575050565b601f0160209004906000526020600020908101906200125c91906200770e565b50805460008255906000526020600020908101906200125c91906200770e565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b611249806200892583390190565b808211156200770a57600062007700828262007640565b50600101620076e9565b5090565b5b808211156200770a57600081556001016200770f565b60005b838110156200774257818101518382015260200162007728565b50506000910152565b600081518084526200776581602086016020860162007725565b601f01601f19169290920160200192915050565b6020815260006200778e60208301846200774b565b9392505050565b6001600160a01b03811681146200125c57600080fd5b60008060408385031215620077bf57600080fd5b8235620077cc8162007795565b946020939093013593505050565b600060208284031215620077ed57600080fd5b81356200778e8162007795565b6000602082840312156200780d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600481106200125c57634e487b7160e01b600052602160045260246000fd5b62007854816200782a565b9052565b60208152620078736020820183516001600160a01b03169052565b600060208301516200789060408401826001600160a01b03169052565b5060408301516001600160a01b0381166060840152506060830151610280806080850152620078c46102a08501836200774b565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a06200794c818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f190161026080880191909152909150620079b084836200774b565b935080870151915050620079c78286018262007849565b5090949350505050565b600080600060608486031215620079e757600080fd5b8335620079f48162007795565b9250602084013562007a068162007795565b929592945050506040919091013590565b60006020828403121562007a2a57600080fd5b813567ffffffffffffffff81111562007a4257600080fd5b820161028081850312156200778e57600080fd5b600081518084526020808501808196508360051b8101915082860160005b8581101562007acb578284038952815180516001600160a01b03168552858101518686015260409081015160609186018290529062007ab6818701836200774b565b9a87019a955050509084019060010162007a74565b5091979650505050505050565b821515815260406020820152600062006306604083018462007a56565b6000806040838503121562007b0957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262007b4057600080fd5b813567ffffffffffffffff8082111562007b5e5762007b5e62007b18565b604051601f8301601f19908116603f0116810190828211818310171562007b895762007b8962007b18565b8160405283815286602085880101111562007ba357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121562007bd757600080fd5b823562007be48162007795565b9150602083013567ffffffffffffffff81111562007c0157600080fd5b62007c0f8582860162007b2e565b9150509250929050565b6000806000806080858703121562007c3057600080fd5b843567ffffffffffffffff8082111562007c4957600080fd5b62007c578883890162007b2e565b95506020870135915062007c6b8262007795565b9093506040860135908082111562007c8257600080fd5b62007c908883890162007b2e565b9350606087013591508082111562007ca757600080fd5b5062007cb68782880162007b2e565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562007d1b57603f1988860301845262007d088583516200774b565b9450928501929085019060010162007ce9565b5092979650505050505050565b6020810162007d37836200782a565b91905290565b6020815260006200778e602083018462007a56565b6020808252825182820181905260009190848201906040850190845b8181101562007d955783516001600160a01b03168352928401929184019160010162007d6e565b50909695505050505050565b6000806040838503121562007db557600080fd5b823567ffffffffffffffff8082111562007dce57600080fd5b62007ddc8683870162007b2e565b9350602085013591508082111562007df357600080fd5b5062007c0f8582860162007b2e565b60408152600062007e1760408301856200774b565b828103602084015262007e2b81856200774b565b95945050505050565b6000806040838503121562007e4857600080fd5b823562007e558162007795565b9150602083013562007e678162007795565b809150509250929050565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b600181811c9082168062007f7857607f821691505b60208210810362007f9957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115620011b257620011b262007f9f565b80820180821115620011b257620011b262007f9f565b60008135620011b28162007795565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808335601e198436030181126200802857600080fd5b83018035915067ffffffffffffffff8211156200804457600080fd5b6020019150368190038213156200805a57600080fd5b9250929050565b601f821115620055dd57600081815260208120601f850160051c810160208610156200808a5750805b601f850160051c820191505b818110156200273f5782815560010162008096565b600019600383901b1c191660019190911b1790565b67ffffffffffffffff831115620080db57620080db62007b18565b620080f383620080ec835462007f63565b8362008061565b6000601f841160018114620081265760008515620081115750838201355b6200811d8682620080ab565b84555062001a07565b600083815260209020601f19861690835b8281101562008159578685013582556020948501946001909201910162008137565b5086821015620081775760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000813560048110620011b257600080fd5b620081a6826200782a565b60ff1981541660ff831681178255505050565b620081cf620081c88362007fe1565b8262007ff0565b620081eb620081e16020840162007fe1565b6001830162007ff0565b62008207620081fd6040840162007fe1565b6002830162007ff0565b62008216606083018362008010565b62008226818360038601620080c0565b50506080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610160820135600b820155620082996200828f610180840162007fe1565b600c830162007ff0565b6101a0820135600d8201556101c0820135600e8201556101e0820135600f82015561020082013560108201556102208201356011820155620082e061024083018362008010565b620082f0818360128601620080c0565b50506200190062008305610260840162008189565b601383016200819b565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b6000602082840312156200836557600080fd5b5051919050565b600080604083850312156200838057600080fd5b505080516020909101519092909150565b600060208284031215620083a457600080fd5b815180151581146200778e57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201620083e057620083e062007f9f565b5060010190565b8082028115828204841417620011b257620011b262007f9f565b634e487b7160e01b600052601260045260246000fd5b60008262008429576200842962008401565b500690565b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b815167ffffffffffffffff8111156200849a576200849a62007b18565b620084b281620084ab845462007f63565b8462008061565b602080601f831160018114620084e65760008415620084d15750858301515b620084dd8582620080ab565b8655506200273f565b600085815260208120601f198616915b828110156200851757888601518255948401946001909101908401620084f6565b5085821015620085365787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018060a01b0380881683528087166020840152808616604084015260a060608401526200857a60a08401866200774b565b91508084166080840152509695505050505050565b600082620085a157620085a162008401565b500490565b818103620085b2575050565b620085be825462007f63565b67ffffffffffffffff811115620085d957620085d962007b18565b620085ea81620084ab845462007f63565b6000601f8211600181146200861d5760008315620086085750848201545b620086148482620080ab565b85555062001a07565b600085815260209020601f19841690600086815260209020845b8381101562008659578286015482556001958601959091019060200162008637565b5085831015620085365793015460001960f8600387901b161c19169092555050600190811b01905550565b60018060a01b038316815260606020820152600060608201526080604082015260006200630660808301846200774b565b60008251620086c981846020870162007725565b9190910192915050565b60018060a01b038316815260606020820152601a60608201527f736574436f6d6d697373696f6e526174652875696e7432353629000000000000608082015260a0604082015260006200630660a08301846200774b565b600084516200873e81846020890162007725565b8451908301906200875481836020890162007725565b84519101906200876981836020880162007725565b0195945050505050565b8281526040810162008785836200782a565b8260208301529392505050565b60018060a01b03831681526060602082015260156060820152746d696e7428616464726573732c75696e743235362960581b608082015260a0604082015260006200630660a08301846200774b565b60018060a01b038316815260606020820152601760608201527f756e6c6f636b28616464726573732c75696e7432353629000000000000000000608082015260a0604082015260006200630660a08301846200774b565b60018060a01b03831681526060602082015260156060820152746275726e28616464726573732c75696e743235362960581b608082015260a0604082015260006200630660a08301846200774b565b60ff8181168382160190811115620011b257620011b262007f9f565b60008451620088b781846020890162007725565b845190830190620088cd81836020890162007725565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a060608401526200857a60a08401866200774b56fe60806040523480156200001157600080fd5b5060405162001249380380620012498339810160408190526200003491620001c6565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000999190620002c8565b831115620000a657600080fd5b600f80546001600160a01b038088166001600160a01b03199283161790925560108054928716929091169190911790556011839055604051620000ee908390602001620002e2565b604051602081830303815290604052600d90816200010d9190620003a0565b5081604051602001620001219190620002e2565b604051602081830303815290604052600e9081620001409190620003a0565b5050601380546001600160a01b03191633179055506200046c92505050565b6001600160a01b03811681146200017557600080fd5b50565b805162000185816200015f565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001bd578181015183820152602001620001a3565b50506000910152565b600080600080600060a08688031215620001df57600080fd5b8551620001ec816200015f565b6020870151909550620001ff816200015f565b6040870151606088015191955093506001600160401b03808211156200022457600080fd5b818801915088601f8301126200023957600080fd5b8151818111156200024e576200024e6200018a565b604051601f8201601f19908116603f011681019083821181831017156200027957620002796200018a565b816040528281528b60208487010111156200029357600080fd5b620002a6836020830160208801620001a0565b8096505050505050620002bc6080870162000178565b90509295509295909350565b600060208284031215620002db57600080fd5b5051919050565b644c4e544e2d60d81b81526000825162000304816005850160208701620001a0565b9190910160050192915050565b600181811c908216806200032657607f821691505b6020821081036200034757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039b57600081815260208120601f850160051c81016020861015620003765750805b601f850160051c820191505b81811015620003975782815560010162000382565b5050505b505050565b81516001600160401b03811115620003bc57620003bc6200018a565b620003d481620003cd845462000311565b846200034d565b602080601f8311600181146200040c5760008415620003f35750858301515b600019600386901b1c1916600185901b17855562000397565b600085815260208120601f198616915b828110156200043d578886015182559484019460019091019084016200041c565b50858210156200045c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dcd806200047c6000396000f3fe60806040526004361061010d5760003560e01c806384955c881161009557806396f18a321161006457806396f18a321461030e578063b2ea9adb14610323578063b66b3e7914610343578063cf9c571914610366578063dd62ed3e1461037b57610124565b806384955c8814610285578063872cf059146102a5578063949813b8146102c457806395d89b41146102f957610124565b80633a5381b5116100dc5780633a5381b5146101ab57806359355736146101e35780635ea1d6f81461021957806361d027b31461022f57806370a082311461024f57610124565b806306fdde031461012f57806318160ddd1461015a5780632d80430814610179578063313ce5671461018f57610124565b366101245761012261011d6103c1565b61049d565b005b61012261011d6103c1565b34801561013b57600080fd5b506101446104c0565b6040516101519190610b11565b60405180910390f35b34801561016657600080fd5b506006545b604051908152602001610151565b34801561018557600080fd5b5061016b60125481565b34801561019b57600080fd5b5060405160128152602001610151565b3480156101b757600080fd5b50600f546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b3480156101ef57600080fd5b5061016b6101fe366004610b40565b6001600160a01b031660009081526004602052604090205490565b34801561022557600080fd5b5061016b60115481565b34801561023b57600080fd5b506010546101cb906001600160a01b031681565b34801561025b57600080fd5b5061016b61026a366004610b40565b6001600160a01b031660009081526003602052604090205490565b34801561029157600080fd5b5061016b6102a0366004610b40565b61054e565b3480156102b157600080fd5b506101226002805460ff19166001179055565b3480156102d057600080fd5b506102e46102df366004610b40565b610582565b60408051928352602083019190915201610151565b34801561030557600080fd5b50610144610703565b34801561031a57600080fd5b506101cb6103c1565b34801561032f57600080fd5b5061012261033e366004610be9565b610710565b34801561034f57600080fd5b5061035861072a565b604051610151929190610c78565b34801561037257600080fd5b50610122610851565b34801561038757600080fd5b5061016b610396366004610ca6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600080601360009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610cdf565b90506001600160a01b0381166104985760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f742073657400000060448201526064015b60405180910390fd5b919050565b3660008037600080366000845af43d6000803e806104ba573d6000fd5b503d6000f35b600d80546104cd90610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990610cfc565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050505081565b6001600160a01b038116600090815260046020908152604080832054600390925282205461057c9190610d36565b92915050565b60008060006106436105926103c1565b6001600160a01b0386166000908152600360209081526040808320546007835281842054600a8452828520546008855283862054600b9095529483902054600954600c549451610614979496939590602401968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60408051601f198184030181529190526020810180516001600160e01b031663b05cd6c960e01b179052610874565b90506040815110156106905760405162461bcd60e51b81526020600482015260166024820152756e6f7420656e6f7567682072657475726e206461746160501b604482015260640161048f565b6040805160208082528183019092526000916020820181803683375050604080516020808252818301909252929350600092915080820181803683375050506020848101518482015260408501519082015290506106ed82610d57565b94506106f881610d57565b949694955050505050565b600e80546104cd90610cfc565b61071b600083610920565b610726600182610920565b5050565b6060806000600181805461073d90610cfc565b80601f016020809104026020016040519081016040528092919081815260200182805461076990610cfc565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b505050505091508080546107c990610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546107f590610cfc565b80156108425780601f1061081757610100808354040283529160200191610842565b820191906000526020600020905b81548152906001019060200180831161082557829003601f168201915b50505050509050915091509091565b61085c600080610a6b565b61086860016000610a6b565b6002805460ff19169055565b6060600080846001600160a01b0316846040516108919190610d7b565b600060405180830381855afa9150503d80600081146108cc576040519150601f19603f3d011682016040523d82523d6000602084013e6108d1565b606091505b5091509150816109185760405162461bcd60e51b81526020600482015260126024820152711cdd185d1a58c818d85b1b0819985a5b195960721b604482015260640161048f565b949350505050565b8154600260018083161561010002038216048251808201602081106020841001600281146109ca57600181146109ef578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156109b45781518455600184019350602082019150610997565b815191036101000a908190040290915550610a62565b60028302826020036101000a846020036101000a602089015104020185018755610a62565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015610a505781518455600184019350602082019150610a33565b815191036101000a9081900402909155505b50505050505050565b508054610a7790610cfc565b6000825580601f10610a87575050565b601f016020900490600052602060002090810190610aa59190610aa8565b50565b5b80821115610abd5760008155600101610aa9565b5090565b60005b83811015610adc578181015183820152602001610ac4565b50506000910152565b60008151808452610afd816020860160208601610ac1565b601f01601f19169290920160200192915050565b602081526000610b246020830184610ae5565b9392505050565b6001600160a01b0381168114610aa557600080fd5b600060208284031215610b5257600080fd5b8135610b2481610b2b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610b8e57610b8e610b5d565b604051601f8501601f19908116603f01168101908282118183101715610bb657610bb6610b5d565b81604052809350858152868686011115610bcf57600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215610bfc57600080fd5b823567ffffffffffffffff80821115610c1457600080fd5b818501915085601f830112610c2857600080fd5b610c3786833560208501610b73565b93506020850135915080821115610c4d57600080fd5b508301601f81018513610c5f57600080fd5b610c6e85823560208401610b73565b9150509250929050565b604081526000610c8b6040830185610ae5565b8281036020840152610c9d8185610ae5565b95945050505050565b60008060408385031215610cb957600080fd5b8235610cc481610b2b565b91506020830135610cd481610b2b565b809150509250929050565b600060208284031215610cf157600080fd5b8151610b2481610b2b565b600181811c90821680610d1057607f821691505b602082108103610d3057634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561057c57634e487b7160e01b600052601160045260246000fd5b80516020808301519190811015610d305760001960209190910360031b1b16919050565b60008251610d8d818460208701610ac1565b919091019291505056fea26469706673582212204655df825ebed0467409cfc6336a0b45df1b65321bdd2f6445a07381250c11c864736f6c634300081500331137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352a26469706673582212200437b58b351e3d2f553f56c59dd856b2706a2b9a6ac7edc0d66c5436a436187964736f6c63430008150033608060405234801561001057600080fd5b50601380546001600160a01b03191633179055611b32806100326000396000f3fe6080604052600436106101a05760003560e01c806361d027b3116100ec578063a9059cbb1161008a578063b66b3e7911610064578063b66b3e79146104fa578063bd96102f1461051d578063cf9c571914610532578063dd62ed3e14610547576101a7565b8063a9059cbb1461049a578063b05cd6c9146104ba578063b2ea9adb146104da576101a7565b8063872cf059116100c6578063872cf0591461041e57806395d89b411461043d5780639dc29fac14610452578063a0ce552d14610472576101a7565b806361d027b3146103a857806370a08231146103c85780637eee288d146103fe576101a7565b8063282d3fdf11610159578063372500ab11610133578063372500ab146103255780633a5381b51461033a57806340c10f19146103725780635ea1d6f814610392576101a7565b8063282d3fdf146102d95780632d804308146102f95780632f2c3f2e1461030f576101a7565b806306fdde0314610205578063095ea7b31461023057806318160ddd14610260578063187cf4d71461027f57806319fac8fd1461029757806323b872dd146102b9576101a7565b366101a757005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b34801561021157600080fd5b5061021a61058d565b6040516102279190611732565b60405180910390f35b34801561023c57600080fd5b5061025061024b366004611761565b61061b565b6040519015158152602001610227565b34801561026c57600080fd5b506006545b604051908152602001610227565b34801561028b57600080fd5b50610271633b9aca0081565b3480156102a357600080fd5b506102b76102b236600461178b565b610632565b005b3480156102c557600080fd5b506102506102d43660046117a4565b610661565b3480156102e557600080fd5b506102b76102f4366004611761565b610756565b34801561030557600080fd5b5061027160125481565b34801561031b57600080fd5b5061027161271081565b34801561033157600080fd5b506102b761083b565b34801561034657600080fd5b50600f5461035a906001600160a01b031681565b6040516001600160a01b039091168152602001610227565b34801561037e57600080fd5b506102b761038d366004611761565b610a1c565b34801561039e57600080fd5b5061027160115481565b3480156103b457600080fd5b5060105461035a906001600160a01b031681565b3480156103d457600080fd5b506102716103e33660046117e0565b6001600160a01b031660009081526003602052604090205490565b34801561040a57600080fd5b506102b7610419366004611761565b610a84565b34801561042a57600080fd5b506102b76002805460ff19166001179055565b34801561044957600080fd5b5061021a610b4a565b34801561045e57600080fd5b506102b761046d366004611761565b610b57565b61048561048036600461178b565b610bb7565b60408051928352602083019190915201610227565b3480156104a657600080fd5b506102506104b5366004611761565b610eab565b3480156104c657600080fd5b506104856104d53660046117fb565b610ef8565b3480156104e657600080fd5b506102b76104f53660046118d3565b610f3f565b34801561050657600080fd5b5061050f610f59565b604051610227929190611962565b34801561052957600080fd5b506102b7611080565b34801561053e57600080fd5b506102b7611187565b34801561055357600080fd5b50610271610562366004611990565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600d805461059a906119c3565b80601f01602080910402602001604051908101604052809291908181526020018280546105c6906119c3565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b505050505081565b60006106283384846111aa565b5060015b92915050565b6013546001600160a01b0316331461065c5760405162461bcd60e51b81526004016101fc906119fd565b601155565b6001600160a01b0383166000908152600560209081526040808320338452909152812054828110156106e65760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101fc565b6106fa85336106f58685611a5b565b6111aa565b61070485846112ce565b61070e84846113c4565b836001600160a01b0316856001600160a01b0316600080516020611add8339815191528560405161074191815260200190565b60405180910390a360019150505b9392505050565b6013546001600160a01b031633146107805760405162461bcd60e51b81526004016101fc906119fd565b6001600160a01b03821660009081526004602090815260408083205460039092529091205482916107b091611a5b565b101561080a5760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101fc565b6001600160a01b03821660009081526004602052604081208054839290610832908490611a6e565b90915550505050565b60008061084733611410565b336000908152600760209081526040808320839055600a90915281208190559193509150811561092a5760135460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190611a81565b90508061092a5760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101fc565b333b1561098a57336001600160a01b031663161605e3846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561096c57600080fd5b505af1158015610980573d6000803e3d6000fd5b5050505050505050565b60405133908490600081818185875af1925050503d80600081146109ca576040519150601f19603f3d011682016040523d82523d6000602084013e6109cf565b606091505b50508091505080610a175760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b505050565b6013546001600160a01b03163314610a465760405162461bcd60e51b81526004016101fc906119fd565b610a5082826113c4565b6040518181526001600160a01b03831690600090600080516020611add833981519152906020015b60405180910390a35050565b6013546001600160a01b03163314610aae5760405162461bcd60e51b81526004016101fc906119fd565b6001600160a01b038216600090815260046020526040902054811115610b225760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101fc565b6001600160a01b03821660009081526004602052604081208054839290610832908490611a5b565b600e805461059a906119c3565b6013546001600160a01b03163314610b815760405162461bcd60e51b81526004016101fc906119fd565b610b8b82826112ce565b6040518181526000906001600160a01b03841690600080516020611add83398151915290602001610a78565b60135460009081906001600160a01b03163314610be65760405162461bcd60e51b81526004016101fc906119fd565b601154349060009061271090610bfc9084611aa3565b610c069190611aba565b905081811115610c585760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610c628183611a5b565b6010546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610cb9576040519150601f19603f3d011682016040523d82523d6000602084013e610cbe565b606091505b5090915050801515600003610ce5578160126000828254610cdf9190611a6e565b90915550505b600061271060115488610cf89190611aa3565b610d029190611aba565b905086811115610d545760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610d5e8188611a5b565b96508015610de15760135460105460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf9190611a81565b505b600654600090610df5633b9aca0087611aa3565b610dff9190611aba565b905080600954610e0f9190611a6e565b600955600654600090610e26633b9aca008b611aa3565b610e309190611aba565b905080600c54610e409190611a6e565b600c55600654600090633b9aca0090610e599085611aa3565b610e639190611aba565b90506000633b9aca0060065484610e7a9190611aa3565b610e849190611aba565b9050610e908288611a6e565b610e9a8287611a6e565b995099505050505050505050915091565b6000610eb733836112ce565b610ec183836113c4565b6040518281526001600160a01b038416903390600080516020611add8339815191529060200160405180910390a350600192915050565b6000806000610f088a868961150d565b9050610f14818a611a6e565b92506000610f238b868961150d565b9050610f2f818a611a6e565b9250505097509795505050505050565b610f4a60008361154b565b610f5560018261154b565b5050565b60608060006001818054610f6c906119c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f98906119c3565b8015610fe55780601f10610fba57610100808354040283529160200191610fe5565b820191906000526020600020905b815481529060010190602001808311610fc857829003601f168201915b50505050509150808054610ff8906119c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611024906119c3565b80156110715780601f1061104657610100808354040283529160200191611071565b820191906000526020600020905b81548152906001019060200180831161105457829003601f168201915b50505050509050915091509091565b6010546001600160a01b031633146110e55760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101fc565b6010546012546040516000926001600160a01b031691908381818185875af1925050503d8060008114611134576040519150601f19603f3d011682016040523d82523d6000602084013e611139565b606091505b505090508061117f5760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b506000601255565b611192600080611696565b61119e60016000611696565b6002805460ff19169055565b6001600160a01b03831661120c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101fc565b6001600160a01b03821661126d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101fc565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6112d782611410565b50506001600160a01b0382166000908152600360209081526040808320546004909252909120546113089082611a5b565b8211156113575760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101fc565b6113618282611a5b565b6001600160a01b0384166000908152600360205260409020558082036113a8576001600160a01b0383166000908152600860209081526040808320839055600b9091528120555b81600660008282546113ba9190611a5b565b9091555050505050565b6113cd82611410565b50506001600160a01b038216600090815260036020526040812080548392906113f7908490611a6e565b9250508190555080600660008282546108329190611a6e565b6001600160a01b0381166000908152600360209081526040808320546009546008909352908320548392839161144791849161150d565b6001600160a01b03861660009081526007602052604090205490915061146e908290611a6e565b6001600160a01b03861660009081526007602090815260408083208490556009546008835281842055600c54600b90925282205492965090916114b291859161150d565b6001600160a01b0387166000908152600a60205260409020549091506114d9908290611a6e565b6001600160a01b039096166000908152600a60209081526040808320899055600c54600b9092529091205550929492505050565b60008360000361151f5750600061074f565b633b9aca008461152f8486611a5b565b6115399190611aa3565b6115439190611aba565b949350505050565b8154600260018083161561010002038216048251808201602081106020841001600281146115f5576001811461161a578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156115df57815184556001840193506020820191506115c2565b815191036101000a90819004029091555061168d565b60028302826020036101000a846020036101000a60208901510402018501875561168d565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101561167b578151845560018401935060208201915061165e565b815191036101000a9081900402909155505b50505050505050565b5080546116a2906119c3565b6000825580601f106116b2575050565b601f0160209004906000526020600020908101906116d091906116d3565b50565b5b808211156116e857600081556001016116d4565b5090565b6000815180845260005b81811015611712576020818501810151868301820152016116f6565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061074f60208301846116ec565b80356001600160a01b038116811461175c57600080fd5b919050565b6000806040838503121561177457600080fd5b61177d83611745565b946020939093013593505050565b60006020828403121561179d57600080fd5b5035919050565b6000806000606084860312156117b957600080fd5b6117c284611745565b92506117d060208501611745565b9150604084013590509250925092565b6000602082840312156117f257600080fd5b61074f82611745565b600080600080600080600060e0888a03121561181657600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561187857611878611847565b604051601f8501601f19908116603f011681019082821181831017156118a0576118a0611847565b816040528093508581528686860111156118b957600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156118e657600080fd5b823567ffffffffffffffff808211156118fe57600080fd5b818501915085601f83011261191257600080fd5b6119218683356020850161185d565b9350602085013591508082111561193757600080fd5b508301601f8101851361194957600080fd5b6119588582356020840161185d565b9150509250929050565b60408152600061197560408301856116ec565b828103602084015261198781856116ec565b95945050505050565b600080604083850312156119a357600080fd5b6119ac83611745565b91506119ba60208401611745565b90509250929050565b600181811c908216806119d757607f821691505b6020821081036119f757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561062c5761062c611a45565b8082018082111561062c5761062c611a45565b600060208284031215611a9357600080fd5b8151801515811461074f57600080fd5b808202811582820484141761062c5761062c611a45565b600082611ad757634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122027f06adca87c9bb81106c922b31dfddca3ffda3de3daf81988ad4bb5642943d764736f6c6343000815003360806040523480156200001157600080fd5b5060405162001249380380620012498339810160408190526200003491620001c6565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000999190620002c8565b831115620000a657600080fd5b600f80546001600160a01b038088166001600160a01b03199283161790925560108054928716929091169190911790556011839055604051620000ee908390602001620002e2565b604051602081830303815290604052600d90816200010d9190620003a0565b5081604051602001620001219190620002e2565b604051602081830303815290604052600e9081620001409190620003a0565b5050601380546001600160a01b03191633179055506200046c92505050565b6001600160a01b03811681146200017557600080fd5b50565b805162000185816200015f565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001bd578181015183820152602001620001a3565b50506000910152565b600080600080600060a08688031215620001df57600080fd5b8551620001ec816200015f565b6020870151909550620001ff816200015f565b6040870151606088015191955093506001600160401b03808211156200022457600080fd5b818801915088601f8301126200023957600080fd5b8151818111156200024e576200024e6200018a565b604051601f8201601f19908116603f011681019083821181831017156200027957620002796200018a565b816040528281528b60208487010111156200029357600080fd5b620002a6836020830160208801620001a0565b8096505050505050620002bc6080870162000178565b90509295509295909350565b600060208284031215620002db57600080fd5b5051919050565b644c4e544e2d60d81b81526000825162000304816005850160208701620001a0565b9190910160050192915050565b600181811c908216806200032657607f821691505b6020821081036200034757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039b57600081815260208120601f850160051c81016020861015620003765750805b601f850160051c820191505b81811015620003975782815560010162000382565b5050505b505050565b81516001600160401b03811115620003bc57620003bc6200018a565b620003d481620003cd845462000311565b846200034d565b602080601f8311600181146200040c5760008415620003f35750858301515b600019600386901b1c1916600185901b17855562000397565b600085815260208120601f198616915b828110156200043d578886015182559484019460019091019084016200041c565b50858210156200045c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dcd806200047c6000396000f3fe60806040526004361061010d5760003560e01c806384955c881161009557806396f18a321161006457806396f18a321461030e578063b2ea9adb14610323578063b66b3e7914610343578063cf9c571914610366578063dd62ed3e1461037b57610124565b806384955c8814610285578063872cf059146102a5578063949813b8146102c457806395d89b41146102f957610124565b80633a5381b5116100dc5780633a5381b5146101ab57806359355736146101e35780635ea1d6f81461021957806361d027b31461022f57806370a082311461024f57610124565b806306fdde031461012f57806318160ddd1461015a5780632d80430814610179578063313ce5671461018f57610124565b366101245761012261011d6103c1565b61049d565b005b61012261011d6103c1565b34801561013b57600080fd5b506101446104c0565b6040516101519190610b11565b60405180910390f35b34801561016657600080fd5b506006545b604051908152602001610151565b34801561018557600080fd5b5061016b60125481565b34801561019b57600080fd5b5060405160128152602001610151565b3480156101b757600080fd5b50600f546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b3480156101ef57600080fd5b5061016b6101fe366004610b40565b6001600160a01b031660009081526004602052604090205490565b34801561022557600080fd5b5061016b60115481565b34801561023b57600080fd5b506010546101cb906001600160a01b031681565b34801561025b57600080fd5b5061016b61026a366004610b40565b6001600160a01b031660009081526003602052604090205490565b34801561029157600080fd5b5061016b6102a0366004610b40565b61054e565b3480156102b157600080fd5b506101226002805460ff19166001179055565b3480156102d057600080fd5b506102e46102df366004610b40565b610582565b60408051928352602083019190915201610151565b34801561030557600080fd5b50610144610703565b34801561031a57600080fd5b506101cb6103c1565b34801561032f57600080fd5b5061012261033e366004610be9565b610710565b34801561034f57600080fd5b5061035861072a565b604051610151929190610c78565b34801561037257600080fd5b50610122610851565b34801561038757600080fd5b5061016b610396366004610ca6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600080601360009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610cdf565b90506001600160a01b0381166104985760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f742073657400000060448201526064015b60405180910390fd5b919050565b3660008037600080366000845af43d6000803e806104ba573d6000fd5b503d6000f35b600d80546104cd90610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990610cfc565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050505081565b6001600160a01b038116600090815260046020908152604080832054600390925282205461057c9190610d36565b92915050565b60008060006106436105926103c1565b6001600160a01b0386166000908152600360209081526040808320546007835281842054600a8452828520546008855283862054600b9095529483902054600954600c549451610614979496939590602401968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60408051601f198184030181529190526020810180516001600160e01b031663b05cd6c960e01b179052610874565b90506040815110156106905760405162461bcd60e51b81526020600482015260166024820152756e6f7420656e6f7567682072657475726e206461746160501b604482015260640161048f565b6040805160208082528183019092526000916020820181803683375050604080516020808252818301909252929350600092915080820181803683375050506020848101518482015260408501519082015290506106ed82610d57565b94506106f881610d57565b949694955050505050565b600e80546104cd90610cfc565b61071b600083610920565b610726600182610920565b5050565b6060806000600181805461073d90610cfc565b80601f016020809104026020016040519081016040528092919081815260200182805461076990610cfc565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b505050505091508080546107c990610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546107f590610cfc565b80156108425780601f1061081757610100808354040283529160200191610842565b820191906000526020600020905b81548152906001019060200180831161082557829003601f168201915b50505050509050915091509091565b61085c600080610a6b565b61086860016000610a6b565b6002805460ff19169055565b6060600080846001600160a01b0316846040516108919190610d7b565b600060405180830381855afa9150503d80600081146108cc576040519150601f19603f3d011682016040523d82523d6000602084013e6108d1565b606091505b5091509150816109185760405162461bcd60e51b81526020600482015260126024820152711cdd185d1a58c818d85b1b0819985a5b195960721b604482015260640161048f565b949350505050565b8154600260018083161561010002038216048251808201602081106020841001600281146109ca57600181146109ef578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156109b45781518455600184019350602082019150610997565b815191036101000a908190040290915550610a62565b60028302826020036101000a846020036101000a602089015104020185018755610a62565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015610a505781518455600184019350602082019150610a33565b815191036101000a9081900402909155505b50505050505050565b508054610a7790610cfc565b6000825580601f10610a87575050565b601f016020900490600052602060002090810190610aa59190610aa8565b50565b5b80821115610abd5760008155600101610aa9565b5090565b60005b83811015610adc578181015183820152602001610ac4565b50506000910152565b60008151808452610afd816020860160208601610ac1565b601f01601f19169290920160200192915050565b602081526000610b246020830184610ae5565b9392505050565b6001600160a01b0381168114610aa557600080fd5b600060208284031215610b5257600080fd5b8135610b2481610b2b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610b8e57610b8e610b5d565b604051601f8501601f19908116603f01168101908282118183101715610bb657610bb6610b5d565b81604052809350858152868686011115610bcf57600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215610bfc57600080fd5b823567ffffffffffffffff80821115610c1457600080fd5b818501915085601f830112610c2857600080fd5b610c3786833560208501610b73565b93506020850135915080821115610c4d57600080fd5b508301601f81018513610c5f57600080fd5b610c6e85823560208401610b73565b9150509250929050565b604081526000610c8b6040830185610ae5565b8281036020840152610c9d8185610ae5565b95945050505050565b60008060408385031215610cb957600080fd5b8235610cc481610b2b565b91506020830135610cd481610b2b565b809150509250929050565b600060208284031215610cf157600080fd5b8151610b2481610b2b565b600181811c90821680610d1057607f821691505b602082108103610d3057634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561057c57634e487b7160e01b600052601160045260246000fd5b80516020808301519190811015610d305760001960209190910360031b1b16919050565b60008251610d8d818460208701610ac1565b919091019291505056fea26469706673582212204655df825ebed0467409cfc6336a0b45df1b65321bdd2f6445a07381250c11c864736f6c63430008150033",
}

// AutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityMetaData.ABI instead.
var AutonityABI = AutonityMetaData.ABI

// Deprecated: Use AutonityMetaData.Sigs instead.
// AutonityFuncSigs maps the 4-byte function signature to its string representation.
var AutonityFuncSigs = AutonityMetaData.Sigs

// AutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityMetaData.Bin instead.
var AutonityBin = AutonityMetaData.Bin

// DeployAutonity deploys a new Ethereum contract, binding an instance of Autonity to it.
func DeployAutonity(auth *bind.TransactOpts, backend bind.ContractBackend, _validators []AutonityValidator, _config AutonityConfig) (common.Address, *types.Transaction, *Autonity, error) {
	parsed, err := AutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AutonityBin), backend, _validators, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Autonity{AutonityCaller: AutonityCaller{contract: contract}, AutonityTransactor: AutonityTransactor{contract: contract}, AutonityFilterer: AutonityFilterer{contract: contract}}, nil
}

// Autonity is an auto generated Go binding around an Ethereum contract.
type Autonity struct {
	AutonityCaller     // Read-only binding to the contract
	AutonityTransactor // Write-only binding to the contract
	AutonityFilterer   // Log filterer for contract events
}

// AutonityCaller is an auto generated read-only Go binding around an Ethereum contract.
type AutonityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AutonityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AutonityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AutonitySession struct {
	Contract     *Autonity         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AutonityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AutonityCallerSession struct {
	Contract *AutonityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// AutonityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AutonityTransactorSession struct {
	Contract     *AutonityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// AutonityRaw is an auto generated low-level Go binding around an Ethereum contract.
type AutonityRaw struct {
	Contract *Autonity // Generic contract binding to access the raw methods on
}

// AutonityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AutonityCallerRaw struct {
	Contract *AutonityCaller // Generic read-only contract binding to access the raw methods on
}

// AutonityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AutonityTransactorRaw struct {
	Contract *AutonityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAutonity creates a new instance of Autonity, bound to a specific deployed contract.
func NewAutonity(address common.Address, backend bind.ContractBackend) (*Autonity, error) {
	contract, err := bindAutonity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Autonity{AutonityCaller: AutonityCaller{contract: contract}, AutonityTransactor: AutonityTransactor{contract: contract}, AutonityFilterer: AutonityFilterer{contract: contract}}, nil
}

// NewAutonityCaller creates a new read-only instance of Autonity, bound to a specific deployed contract.
func NewAutonityCaller(address common.Address, caller bind.ContractCaller) (*AutonityCaller, error) {
	contract, err := bindAutonity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityCaller{contract: contract}, nil
}

// NewAutonityTransactor creates a new write-only instance of Autonity, bound to a specific deployed contract.
func NewAutonityTransactor(address common.Address, transactor bind.ContractTransactor) (*AutonityTransactor, error) {
	contract, err := bindAutonity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityTransactor{contract: contract}, nil
}

// NewAutonityFilterer creates a new log filterer instance of Autonity, bound to a specific deployed contract.
func NewAutonityFilterer(address common.Address, filterer bind.ContractFilterer) (*AutonityFilterer, error) {
	contract, err := bindAutonity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AutonityFilterer{contract: contract}, nil
}

// bindAutonity binds a generic wrapper to an already deployed contract.
func bindAutonity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AutonityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Autonity *AutonityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Autonity.Contract.AutonityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Autonity *AutonityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.Contract.AutonityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Autonity *AutonityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Autonity.Contract.AutonityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Autonity *AutonityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Autonity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Autonity *AutonityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Autonity *AutonityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Autonity.Contract.contract.Transact(opts, method, params...)
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_Autonity *AutonityCaller) COMMISSIONRATEPRECISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_Autonity *AutonitySession) COMMISSIONRATEPRECISION() (*big.Int, error) {
	return _Autonity.Contract.COMMISSIONRATEPRECISION(&_Autonity.CallOpts)
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_Autonity *AutonityCallerSession) COMMISSIONRATEPRECISION() (*big.Int, error) {
	return _Autonity.Contract.COMMISSIONRATEPRECISION(&_Autonity.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonityCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonitySession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Autonity.Contract.Allowance(&_Autonity.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonityCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Autonity.Contract.Allowance(&_Autonity.CallOpts, owner, spender)
}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_Autonity *AutonityCaller) AtnTotalRedistributed(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "atnTotalRedistributed")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_Autonity *AutonitySession) AtnTotalRedistributed() (*big.Int, error) {
	return _Autonity.Contract.AtnTotalRedistributed(&_Autonity.CallOpts)
}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_Autonity *AutonityCallerSession) AtnTotalRedistributed() (*big.Int, error) {
	return _Autonity.Contract.AtnTotalRedistributed(&_Autonity.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *AutonityCaller) BalanceOf(opts *bind.CallOpts, _addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *AutonitySession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _Autonity.Contract.BalanceOf(&_Autonity.CallOpts, _addr)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *AutonityCallerSession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _Autonity.Contract.BalanceOf(&_Autonity.CallOpts, _addr)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *AutonityCaller) Config(opts *bind.CallOpts) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *AutonitySession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _Autonity.Contract.Config(&_Autonity.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *AutonityCallerSession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _Autonity.Contract.Config(&_Autonity.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *AutonityCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *AutonitySession) Decimals() (uint8, error) {
	return _Autonity.Contract.Decimals(&_Autonity.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *AutonityCallerSession) Decimals() (uint8, error) {
	return _Autonity.Contract.Decimals(&_Autonity.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonityCaller) Deployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "deployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonitySession) Deployer() (common.Address, error) {
	return _Autonity.Contract.Deployer(&_Autonity.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonityCallerSession) Deployer() (common.Address, error) {
	return _Autonity.Contract.Deployer(&_Autonity.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *AutonityCaller) EpochID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "epochID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *AutonitySession) EpochID() (*big.Int, error) {
	return _Autonity.Contract.EpochID(&_Autonity.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *AutonityCallerSession) EpochID() (*big.Int, error) {
	return _Autonity.Contract.EpochID(&_Autonity.CallOpts)
}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_Autonity *AutonityCaller) EpochReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "epochReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_Autonity *AutonitySession) EpochReward() (*big.Int, error) {
	return _Autonity.Contract.EpochReward(&_Autonity.CallOpts)
}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_Autonity *AutonityCallerSession) EpochReward() (*big.Int, error) {
	return _Autonity.Contract.EpochReward(&_Autonity.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *AutonityCaller) EpochTotalBondedStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *AutonitySession) EpochTotalBondedStake() (*big.Int, error) {
	return _Autonity.Contract.EpochTotalBondedStake(&_Autonity.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *AutonityCallerSession) EpochTotalBondedStake() (*big.Int, error) {
	return _Autonity.Contract.EpochTotalBondedStake(&_Autonity.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) GetBlockPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *AutonitySession) GetBlockPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetBlockPeriod(&_Autonity.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetBlockPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetBlockPeriod(&_Autonity.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *AutonityCaller) GetCommittee(opts *bind.CallOpts) ([]AutonityCommitteeMember, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)

	return out0, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *AutonitySession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _Autonity.Contract.GetCommittee(&_Autonity.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *AutonityCallerSession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _Autonity.Contract.GetCommittee(&_Autonity.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *AutonityCaller) GetCommitteeEnodes(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *AutonitySession) GetCommitteeEnodes() ([]string, error) {
	return _Autonity.Contract.GetCommitteeEnodes(&_Autonity.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *AutonityCallerSession) GetCommitteeEnodes() ([]string, error) {
	return _Autonity.Contract.GetCommitteeEnodes(&_Autonity.CallOpts)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *AutonityCaller) GetEpochFromBlock(opts *bind.CallOpts, _block *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *AutonitySession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetEpochFromBlock(&_Autonity.CallOpts, _block)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *AutonityCallerSession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetEpochFromBlock(&_Autonity.CallOpts, _block)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) GetEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *AutonitySession) GetEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetEpochPeriod(&_Autonity.CallOpts)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetEpochPeriod(&_Autonity.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *AutonityCaller) GetLastEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *AutonitySession) GetLastEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.GetLastEpochBlock(&_Autonity.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetLastEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.GetLastEpochBlock(&_Autonity.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonityCaller) GetMaxCommitteeSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonitySession) GetMaxCommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.GetMaxCommitteeSize(&_Autonity.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetMaxCommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.GetMaxCommitteeSize(&_Autonity.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *AutonityCaller) GetMinimumBaseFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *AutonitySession) GetMinimumBaseFee() (*big.Int, error) {
	return _Autonity.Contract.GetMinimumBaseFee(&_Autonity.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetMinimumBaseFee() (*big.Int, error) {
	return _Autonity.Contract.GetMinimumBaseFee(&_Autonity.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *AutonityCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *AutonitySession) GetNewContract() ([]byte, string, error) {
	return _Autonity.Contract.GetNewContract(&_Autonity.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *AutonityCallerSession) GetNewContract() ([]byte, string, error) {
	return _Autonity.Contract.GetNewContract(&_Autonity.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *AutonityCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *AutonitySession) GetOperator() (common.Address, error) {
	return _Autonity.Contract.GetOperator(&_Autonity.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *AutonityCallerSession) GetOperator() (common.Address, error) {
	return _Autonity.Contract.GetOperator(&_Autonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *AutonityCaller) GetOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *AutonitySession) GetOracle() (common.Address, error) {
	return _Autonity.Contract.GetOracle(&_Autonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *AutonityCallerSession) GetOracle() (common.Address, error) {
	return _Autonity.Contract.GetOracle(&_Autonity.CallOpts)
}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_Autonity *AutonityCaller) GetProposer(opts *bind.CallOpts, height *big.Int, round *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getProposer", height, round)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_Autonity *AutonitySession) GetProposer(height *big.Int, round *big.Int) (common.Address, error) {
	return _Autonity.Contract.GetProposer(&_Autonity.CallOpts, height, round)
}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_Autonity *AutonityCallerSession) GetProposer(height *big.Int, round *big.Int) (common.Address, error) {
	return _Autonity.Contract.GetProposer(&_Autonity.CallOpts, height, round)
}

// GetRevertingAmount is a free data retrieval call binding the contract method 0xb6ef8c67.
//
// Solidity: function getRevertingAmount(uint256 _unbondingID) view returns(uint256)
func (_Autonity *AutonityCaller) GetRevertingAmount(opts *bind.CallOpts, _unbondingID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getRevertingAmount", _unbondingID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRevertingAmount is a free data retrieval call binding the contract method 0xb6ef8c67.
//
// Solidity: function getRevertingAmount(uint256 _unbondingID) view returns(uint256)
func (_Autonity *AutonitySession) GetRevertingAmount(_unbondingID *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetRevertingAmount(&_Autonity.CallOpts, _unbondingID)
}

// GetRevertingAmount is a free data retrieval call binding the contract method 0xb6ef8c67.
//
// Solidity: function getRevertingAmount(uint256 _unbondingID) view returns(uint256)
func (_Autonity *AutonityCallerSession) GetRevertingAmount(_unbondingID *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetRevertingAmount(&_Autonity.CallOpts, _unbondingID)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *AutonityCaller) GetTreasuryAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *AutonitySession) GetTreasuryAccount() (common.Address, error) {
	return _Autonity.Contract.GetTreasuryAccount(&_Autonity.CallOpts)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *AutonityCallerSession) GetTreasuryAccount() (common.Address, error) {
	return _Autonity.Contract.GetTreasuryAccount(&_Autonity.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *AutonityCaller) GetTreasuryFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *AutonitySession) GetTreasuryFee() (*big.Int, error) {
	return _Autonity.Contract.GetTreasuryFee(&_Autonity.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetTreasuryFee() (*big.Int, error) {
	return _Autonity.Contract.GetTreasuryFee(&_Autonity.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) GetUnbondingPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *AutonitySession) GetUnbondingPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetUnbondingPeriod(&_Autonity.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetUnbondingPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetUnbondingPeriod(&_Autonity.CallOpts)
}

// GetUnbondingReleaseState is a free data retrieval call binding the contract method 0xa9af1059.
//
// Solidity: function getUnbondingReleaseState(uint256 _unbondingID) view returns(uint8)
func (_Autonity *AutonityCaller) GetUnbondingReleaseState(opts *bind.CallOpts, _unbondingID *big.Int) (uint8, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getUnbondingReleaseState", _unbondingID)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetUnbondingReleaseState is a free data retrieval call binding the contract method 0xa9af1059.
//
// Solidity: function getUnbondingReleaseState(uint256 _unbondingID) view returns(uint8)
func (_Autonity *AutonitySession) GetUnbondingReleaseState(_unbondingID *big.Int) (uint8, error) {
	return _Autonity.Contract.GetUnbondingReleaseState(&_Autonity.CallOpts, _unbondingID)
}

// GetUnbondingReleaseState is a free data retrieval call binding the contract method 0xa9af1059.
//
// Solidity: function getUnbondingReleaseState(uint256 _unbondingID) view returns(uint8)
func (_Autonity *AutonityCallerSession) GetUnbondingReleaseState(_unbondingID *big.Int) (uint8, error) {
	return _Autonity.Contract.GetUnbondingReleaseState(&_Autonity.CallOpts, _unbondingID)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *AutonityCaller) GetValidator(opts *bind.CallOpts, _addr common.Address) (AutonityValidator, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *AutonitySession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _Autonity.Contract.GetValidator(&_Autonity.CallOpts, _addr)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *AutonityCallerSession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _Autonity.Contract.GetValidator(&_Autonity.CallOpts, _addr)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonityCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonitySession) GetValidators() ([]common.Address, error) {
	return _Autonity.Contract.GetValidators(&_Autonity.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonityCallerSession) GetValidators() ([]common.Address, error) {
	return _Autonity.Contract.GetValidators(&_Autonity.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *AutonityCaller) GetVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *AutonitySession) GetVersion() (*big.Int, error) {
	return _Autonity.Contract.GetVersion(&_Autonity.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetVersion() (*big.Int, error) {
	return _Autonity.Contract.GetVersion(&_Autonity.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *AutonityCaller) InflationReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "inflationReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *AutonitySession) InflationReserve() (*big.Int, error) {
	return _Autonity.Contract.InflationReserve(&_Autonity.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *AutonityCallerSession) InflationReserve() (*big.Int, error) {
	return _Autonity.Contract.InflationReserve(&_Autonity.CallOpts)
}

// LastEpochBlock is a free data retrieval call binding the contract method 0xc2362dd5.
//
// Solidity: function lastEpochBlock() view returns(uint256)
func (_Autonity *AutonityCaller) LastEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "lastEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastEpochBlock is a free data retrieval call binding the contract method 0xc2362dd5.
//
// Solidity: function lastEpochBlock() view returns(uint256)
func (_Autonity *AutonitySession) LastEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.LastEpochBlock(&_Autonity.CallOpts)
}

// LastEpochBlock is a free data retrieval call binding the contract method 0xc2362dd5.
//
// Solidity: function lastEpochBlock() view returns(uint256)
func (_Autonity *AutonityCallerSession) LastEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.LastEpochBlock(&_Autonity.CallOpts)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *AutonityCaller) LastEpochTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *AutonitySession) LastEpochTime() (*big.Int, error) {
	return _Autonity.Contract.LastEpochTime(&_Autonity.CallOpts)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *AutonityCallerSession) LastEpochTime() (*big.Int, error) {
	return _Autonity.Contract.LastEpochTime(&_Autonity.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *AutonityCaller) LiquidLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *AutonitySession) LiquidLogicContract() (common.Address, error) {
	return _Autonity.Contract.LiquidLogicContract(&_Autonity.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *AutonityCallerSession) LiquidLogicContract() (common.Address, error) {
	return _Autonity.Contract.LiquidLogicContract(&_Autonity.CallOpts)
}

// MaxBondAppliedGas is a free data retrieval call binding the contract method 0xcef98450.
//
// Solidity: function maxBondAppliedGas() view returns(uint256)
func (_Autonity *AutonityCaller) MaxBondAppliedGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "maxBondAppliedGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxBondAppliedGas is a free data retrieval call binding the contract method 0xcef98450.
//
// Solidity: function maxBondAppliedGas() view returns(uint256)
func (_Autonity *AutonitySession) MaxBondAppliedGas() (*big.Int, error) {
	return _Autonity.Contract.MaxBondAppliedGas(&_Autonity.CallOpts)
}

// MaxBondAppliedGas is a free data retrieval call binding the contract method 0xcef98450.
//
// Solidity: function maxBondAppliedGas() view returns(uint256)
func (_Autonity *AutonityCallerSession) MaxBondAppliedGas() (*big.Int, error) {
	return _Autonity.Contract.MaxBondAppliedGas(&_Autonity.CallOpts)
}

// MaxRewardsDistributionGas is a free data retrieval call binding the contract method 0x5bdedd16.
//
// Solidity: function maxRewardsDistributionGas() view returns(uint256)
func (_Autonity *AutonityCaller) MaxRewardsDistributionGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "maxRewardsDistributionGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxRewardsDistributionGas is a free data retrieval call binding the contract method 0x5bdedd16.
//
// Solidity: function maxRewardsDistributionGas() view returns(uint256)
func (_Autonity *AutonitySession) MaxRewardsDistributionGas() (*big.Int, error) {
	return _Autonity.Contract.MaxRewardsDistributionGas(&_Autonity.CallOpts)
}

// MaxRewardsDistributionGas is a free data retrieval call binding the contract method 0x5bdedd16.
//
// Solidity: function maxRewardsDistributionGas() view returns(uint256)
func (_Autonity *AutonityCallerSession) MaxRewardsDistributionGas() (*big.Int, error) {
	return _Autonity.Contract.MaxRewardsDistributionGas(&_Autonity.CallOpts)
}

// MaxUnbondAppliedGas is a free data retrieval call binding the contract method 0x386a827b.
//
// Solidity: function maxUnbondAppliedGas() view returns(uint256)
func (_Autonity *AutonityCaller) MaxUnbondAppliedGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "maxUnbondAppliedGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxUnbondAppliedGas is a free data retrieval call binding the contract method 0x386a827b.
//
// Solidity: function maxUnbondAppliedGas() view returns(uint256)
func (_Autonity *AutonitySession) MaxUnbondAppliedGas() (*big.Int, error) {
	return _Autonity.Contract.MaxUnbondAppliedGas(&_Autonity.CallOpts)
}

// MaxUnbondAppliedGas is a free data retrieval call binding the contract method 0x386a827b.
//
// Solidity: function maxUnbondAppliedGas() view returns(uint256)
func (_Autonity *AutonityCallerSession) MaxUnbondAppliedGas() (*big.Int, error) {
	return _Autonity.Contract.MaxUnbondAppliedGas(&_Autonity.CallOpts)
}

// MaxUnbondReleasedGas is a free data retrieval call binding the contract method 0x71d1bc59.
//
// Solidity: function maxUnbondReleasedGas() view returns(uint256)
func (_Autonity *AutonityCaller) MaxUnbondReleasedGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "maxUnbondReleasedGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxUnbondReleasedGas is a free data retrieval call binding the contract method 0x71d1bc59.
//
// Solidity: function maxUnbondReleasedGas() view returns(uint256)
func (_Autonity *AutonitySession) MaxUnbondReleasedGas() (*big.Int, error) {
	return _Autonity.Contract.MaxUnbondReleasedGas(&_Autonity.CallOpts)
}

// MaxUnbondReleasedGas is a free data retrieval call binding the contract method 0x71d1bc59.
//
// Solidity: function maxUnbondReleasedGas() view returns(uint256)
func (_Autonity *AutonityCallerSession) MaxUnbondReleasedGas() (*big.Int, error) {
	return _Autonity.Contract.MaxUnbondReleasedGas(&_Autonity.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonityCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonitySession) Name() (string, error) {
	return _Autonity.Contract.Name(&_Autonity.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonityCallerSession) Name() (string, error) {
	return _Autonity.Contract.Name(&_Autonity.CallOpts)
}

// StakingGasPrice is a free data retrieval call binding the contract method 0x6bb9cb0e.
//
// Solidity: function stakingGasPrice() view returns(uint256)
func (_Autonity *AutonityCaller) StakingGasPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "stakingGasPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakingGasPrice is a free data retrieval call binding the contract method 0x6bb9cb0e.
//
// Solidity: function stakingGasPrice() view returns(uint256)
func (_Autonity *AutonitySession) StakingGasPrice() (*big.Int, error) {
	return _Autonity.Contract.StakingGasPrice(&_Autonity.CallOpts)
}

// StakingGasPrice is a free data retrieval call binding the contract method 0x6bb9cb0e.
//
// Solidity: function stakingGasPrice() view returns(uint256)
func (_Autonity *AutonityCallerSession) StakingGasPrice() (*big.Int, error) {
	return _Autonity.Contract.StakingGasPrice(&_Autonity.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonityCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonitySession) Symbol() (string, error) {
	return _Autonity.Contract.Symbol(&_Autonity.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonityCallerSession) Symbol() (string, error) {
	return _Autonity.Contract.Symbol(&_Autonity.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonityCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonitySession) TotalSupply() (*big.Int, error) {
	return _Autonity.Contract.TotalSupply(&_Autonity.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonityCallerSession) TotalSupply() (*big.Int, error) {
	return _Autonity.Contract.TotalSupply(&_Autonity.CallOpts)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *AutonityTransactor) SetLiquidLogicContract(opts *bind.TransactOpts, _contract common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "SetLiquidLogicContract", _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *AutonitySession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetLiquidLogicContract(&_Autonity.TransactOpts, _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *AutonityTransactorSession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetLiquidLogicContract(&_Autonity.TransactOpts, _contract)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *AutonityTransactor) ActivateValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "activateValidator", _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *AutonitySession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.ActivateValidator(&_Autonity.TransactOpts, _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *AutonityTransactorSession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.ActivateValidator(&_Autonity.TransactOpts, _address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonitySession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Approve(&_Autonity.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Approve(&_Autonity.TransactOpts, spender, amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) payable returns(uint256)
func (_Autonity *AutonityTransactor) Bond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "bond", _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) payable returns(uint256)
func (_Autonity *AutonitySession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Bond(&_Autonity.TransactOpts, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) payable returns(uint256)
func (_Autonity *AutonityTransactorSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Bond(&_Autonity.TransactOpts, _validator, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactor) Burn(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "burn", _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *AutonitySession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Burn(&_Autonity.TransactOpts, _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactorSession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Burn(&_Autonity.TransactOpts, _addr, _amount)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *AutonityTransactor) ChangeCommissionRate(opts *bind.TransactOpts, _validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "changeCommissionRate", _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *AutonitySession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.ChangeCommissionRate(&_Autonity.TransactOpts, _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *AutonityTransactorSession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.ChangeCommissionRate(&_Autonity.TransactOpts, _validator, _rate)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *AutonityTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *AutonitySession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.CompleteContractUpgrade(&_Autonity.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *AutonityTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.CompleteContractUpgrade(&_Autonity.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_Autonity *AutonityTransactor) ComputeCommittee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "computeCommittee")
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_Autonity *AutonitySession) ComputeCommittee() (*types.Transaction, error) {
	return _Autonity.Contract.ComputeCommittee(&_Autonity.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_Autonity *AutonityTransactorSession) ComputeCommittee() (*types.Transaction, error) {
	return _Autonity.Contract.ComputeCommittee(&_Autonity.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, (address,uint256,bytes)[])
func (_Autonity *AutonityTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, (address,uint256,bytes)[])
func (_Autonity *AutonitySession) Finalize() (*types.Transaction, error) {
	return _Autonity.Contract.Finalize(&_Autonity.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, (address,uint256,bytes)[])
func (_Autonity *AutonityTransactorSession) Finalize() (*types.Transaction, error) {
	return _Autonity.Contract.Finalize(&_Autonity.TransactOpts)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_Autonity *AutonityTransactor) FinalizeInitialization(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "finalizeInitialization")
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_Autonity *AutonitySession) FinalizeInitialization() (*types.Transaction, error) {
	return _Autonity.Contract.FinalizeInitialization(&_Autonity.TransactOpts)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_Autonity *AutonityTransactorSession) FinalizeInitialization() (*types.Transaction, error) {
	return _Autonity.Contract.FinalizeInitialization(&_Autonity.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactor) Mint(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "mint", _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *AutonitySession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Mint(&_Autonity.TransactOpts, _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactorSession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Mint(&_Autonity.TransactOpts, _addr, _amount)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *AutonityTransactor) PauseValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "pauseValidator", _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *AutonitySession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.PauseValidator(&_Autonity.TransactOpts, _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *AutonityTransactorSession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.PauseValidator(&_Autonity.TransactOpts, _address)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_Autonity *AutonityTransactor) ReceiveATN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "receiveATN")
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_Autonity *AutonitySession) ReceiveATN() (*types.Transaction, error) {
	return _Autonity.Contract.ReceiveATN(&_Autonity.TransactOpts)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_Autonity *AutonityTransactorSession) ReceiveATN() (*types.Transaction, error) {
	return _Autonity.Contract.ReceiveATN(&_Autonity.TransactOpts)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *AutonityTransactor) RegisterValidator(opts *bind.TransactOpts, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *AutonitySession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _Autonity.Contract.RegisterValidator(&_Autonity.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *AutonityTransactorSession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _Autonity.Contract.RegisterValidator(&_Autonity.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *AutonityTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *AutonitySession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.ResetContractUpgrade(&_Autonity.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *AutonityTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.ResetContractUpgrade(&_Autonity.TransactOpts)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetAccountabilityContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setAccountabilityContract", _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *AutonitySession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAccountabilityContract(&_Autonity.TransactOpts, _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAccountabilityContract(&_Autonity.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetAcuContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setAcuContract", _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *AutonitySession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAcuContract(&_Autonity.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAcuContract(&_Autonity.TransactOpts, _address)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *AutonityTransactor) SetCommitteeSize(opts *bind.TransactOpts, _size *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setCommitteeSize", _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *AutonitySession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetCommitteeSize(&_Autonity.TransactOpts, _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *AutonityTransactorSession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetCommitteeSize(&_Autonity.TransactOpts, _size)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactor) SetEpochPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setEpochPeriod", _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *AutonitySession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetEpochPeriod(&_Autonity.TransactOpts, _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactorSession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetEpochPeriod(&_Autonity.TransactOpts, _period)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetInflationControllerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setInflationControllerContract", _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *AutonitySession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetInflationControllerContract(&_Autonity.TransactOpts, _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetInflationControllerContract(&_Autonity.TransactOpts, _address)
}

// SetMaxBondAppliedGas is a paid mutator transaction binding the contract method 0x0fe50109.
//
// Solidity: function setMaxBondAppliedGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactor) SetMaxBondAppliedGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMaxBondAppliedGas", _gas)
}

// SetMaxBondAppliedGas is a paid mutator transaction binding the contract method 0x0fe50109.
//
// Solidity: function setMaxBondAppliedGas(uint256 _gas) returns()
func (_Autonity *AutonitySession) SetMaxBondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxBondAppliedGas(&_Autonity.TransactOpts, _gas)
}

// SetMaxBondAppliedGas is a paid mutator transaction binding the contract method 0x0fe50109.
//
// Solidity: function setMaxBondAppliedGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactorSession) SetMaxBondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxBondAppliedGas(&_Autonity.TransactOpts, _gas)
}

// SetMaxRewardsDistributionGas is a paid mutator transaction binding the contract method 0x7e660ac9.
//
// Solidity: function setMaxRewardsDistributionGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactor) SetMaxRewardsDistributionGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMaxRewardsDistributionGas", _gas)
}

// SetMaxRewardsDistributionGas is a paid mutator transaction binding the contract method 0x7e660ac9.
//
// Solidity: function setMaxRewardsDistributionGas(uint256 _gas) returns()
func (_Autonity *AutonitySession) SetMaxRewardsDistributionGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxRewardsDistributionGas(&_Autonity.TransactOpts, _gas)
}

// SetMaxRewardsDistributionGas is a paid mutator transaction binding the contract method 0x7e660ac9.
//
// Solidity: function setMaxRewardsDistributionGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactorSession) SetMaxRewardsDistributionGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxRewardsDistributionGas(&_Autonity.TransactOpts, _gas)
}

// SetMaxUnbondAppliedGas is a paid mutator transaction binding the contract method 0x0b21fb1d.
//
// Solidity: function setMaxUnbondAppliedGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactor) SetMaxUnbondAppliedGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMaxUnbondAppliedGas", _gas)
}

// SetMaxUnbondAppliedGas is a paid mutator transaction binding the contract method 0x0b21fb1d.
//
// Solidity: function setMaxUnbondAppliedGas(uint256 _gas) returns()
func (_Autonity *AutonitySession) SetMaxUnbondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxUnbondAppliedGas(&_Autonity.TransactOpts, _gas)
}

// SetMaxUnbondAppliedGas is a paid mutator transaction binding the contract method 0x0b21fb1d.
//
// Solidity: function setMaxUnbondAppliedGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactorSession) SetMaxUnbondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxUnbondAppliedGas(&_Autonity.TransactOpts, _gas)
}

// SetMaxUnbondReleasedGas is a paid mutator transaction binding the contract method 0xee7ff28d.
//
// Solidity: function setMaxUnbondReleasedGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactor) SetMaxUnbondReleasedGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMaxUnbondReleasedGas", _gas)
}

// SetMaxUnbondReleasedGas is a paid mutator transaction binding the contract method 0xee7ff28d.
//
// Solidity: function setMaxUnbondReleasedGas(uint256 _gas) returns()
func (_Autonity *AutonitySession) SetMaxUnbondReleasedGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxUnbondReleasedGas(&_Autonity.TransactOpts, _gas)
}

// SetMaxUnbondReleasedGas is a paid mutator transaction binding the contract method 0xee7ff28d.
//
// Solidity: function setMaxUnbondReleasedGas(uint256 _gas) returns()
func (_Autonity *AutonityTransactorSession) SetMaxUnbondReleasedGas(_gas *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxUnbondReleasedGas(&_Autonity.TransactOpts, _gas)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *AutonityTransactor) SetMinimumBaseFee(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMinimumBaseFee", _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *AutonitySession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMinimumBaseFee(&_Autonity.TransactOpts, _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *AutonityTransactorSession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMinimumBaseFee(&_Autonity.TransactOpts, _price)
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetNonStakableVestingContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setNonStakableVestingContract", _address)
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_Autonity *AutonitySession) SetNonStakableVestingContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetNonStakableVestingContract(&_Autonity.TransactOpts, _address)
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetNonStakableVestingContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetNonStakableVestingContract(&_Autonity.TransactOpts, _address)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *AutonityTransactor) SetOperatorAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setOperatorAccount", _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *AutonitySession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOperatorAccount(&_Autonity.TransactOpts, _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *AutonityTransactorSession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOperatorAccount(&_Autonity.TransactOpts, _account)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetOracleContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setOracleContract", _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *AutonitySession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOracleContract(&_Autonity.TransactOpts, _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOracleContract(&_Autonity.TransactOpts, _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetStabilizationContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setStabilizationContract", _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *AutonitySession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetStabilizationContract(&_Autonity.TransactOpts, _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetStabilizationContract(&_Autonity.TransactOpts, _address)
}

// SetStakingGasPrice is a paid mutator transaction binding the contract method 0x6a929cef.
//
// Solidity: function setStakingGasPrice(uint256 _price) returns()
func (_Autonity *AutonityTransactor) SetStakingGasPrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setStakingGasPrice", _price)
}

// SetStakingGasPrice is a paid mutator transaction binding the contract method 0x6a929cef.
//
// Solidity: function setStakingGasPrice(uint256 _price) returns()
func (_Autonity *AutonitySession) SetStakingGasPrice(_price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetStakingGasPrice(&_Autonity.TransactOpts, _price)
}

// SetStakingGasPrice is a paid mutator transaction binding the contract method 0x6a929cef.
//
// Solidity: function setStakingGasPrice(uint256 _price) returns()
func (_Autonity *AutonityTransactorSession) SetStakingGasPrice(_price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetStakingGasPrice(&_Autonity.TransactOpts, _price)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetSupplyControlContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setSupplyControlContract", _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *AutonitySession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetSupplyControlContract(&_Autonity.TransactOpts, _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetSupplyControlContract(&_Autonity.TransactOpts, _address)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *AutonityTransactor) SetTreasuryAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setTreasuryAccount", _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *AutonitySession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryAccount(&_Autonity.TransactOpts, _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *AutonityTransactorSession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryAccount(&_Autonity.TransactOpts, _account)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *AutonityTransactor) SetTreasuryFee(opts *bind.TransactOpts, _treasuryFee *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setTreasuryFee", _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *AutonitySession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryFee(&_Autonity.TransactOpts, _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *AutonityTransactorSession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryFee(&_Autonity.TransactOpts, _treasuryFee)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactor) SetUnbondingPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setUnbondingPeriod", _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *AutonitySession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetUnbondingPeriod(&_Autonity.TransactOpts, _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactorSession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetUnbondingPeriod(&_Autonity.TransactOpts, _period)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetUpgradeManagerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setUpgradeManagerContract", _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *AutonitySession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetUpgradeManagerContract(&_Autonity.TransactOpts, _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetUpgradeManagerContract(&_Autonity.TransactOpts, _address)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactor) Transfer(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "transfer", _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonitySession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Transfer(&_Autonity.TransactOpts, _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactorSession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Transfer(&_Autonity.TransactOpts, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactor) TransferFrom(opts *bind.TransactOpts, _sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "transferFrom", _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonitySession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.TransferFrom(&_Autonity.TransactOpts, _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactorSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.TransferFrom(&_Autonity.TransactOpts, _sender, _recipient, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) payable returns(uint256)
func (_Autonity *AutonityTransactor) Unbond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "unbond", _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) payable returns(uint256)
func (_Autonity *AutonitySession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Unbond(&_Autonity.TransactOpts, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) payable returns(uint256)
func (_Autonity *AutonityTransactorSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Unbond(&_Autonity.TransactOpts, _validator, _amount)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *AutonityTransactor) UpdateEnode(opts *bind.TransactOpts, _nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "updateEnode", _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *AutonitySession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _Autonity.Contract.UpdateEnode(&_Autonity.TransactOpts, _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *AutonityTransactorSession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _Autonity.Contract.UpdateEnode(&_Autonity.TransactOpts, _nodeAddress, _enode)
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_Autonity *AutonityTransactor) UpdateValidatorAndTransferSlashedFunds(opts *bind.TransactOpts, _val AutonityValidator) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "updateValidatorAndTransferSlashedFunds", _val)
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_Autonity *AutonitySession) UpdateValidatorAndTransferSlashedFunds(_val AutonityValidator) (*types.Transaction, error) {
	return _Autonity.Contract.UpdateValidatorAndTransferSlashedFunds(&_Autonity.TransactOpts, _val)
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_Autonity *AutonityTransactorSession) UpdateValidatorAndTransferSlashedFunds(_val AutonityValidator) (*types.Transaction, error) {
	return _Autonity.Contract.UpdateValidatorAndTransferSlashedFunds(&_Autonity.TransactOpts, _val)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *AutonityTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *AutonitySession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Autonity.Contract.UpgradeContract(&_Autonity.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *AutonityTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Autonity.Contract.UpgradeContract(&_Autonity.TransactOpts, _bytecode, _abi)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonityTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Autonity.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonitySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Autonity.Contract.Fallback(&_Autonity.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonityTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Autonity.Contract.Fallback(&_Autonity.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonityTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonitySession) Receive() (*types.Transaction, error) {
	return _Autonity.Contract.Receive(&_Autonity.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonityTransactorSession) Receive() (*types.Transaction, error) {
	return _Autonity.Contract.Receive(&_Autonity.TransactOpts)
}

// AutonityActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the Autonity contract.
type AutonityActivatedValidatorIterator struct {
	Event *AutonityActivatedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityActivatedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityActivatedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityActivatedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityActivatedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityActivatedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityActivatedValidator represents a ActivatedValidator event raised by the Autonity contract.
type AutonityActivatedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityActivatedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityActivatedValidatorIterator{contract: _Autonity.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
}

// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityActivatedValidator)
				if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) ParseActivatedValidator(log types.Log) (*AutonityActivatedValidator, error) {
	event := new(AutonityActivatedValidator)
	if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityAppliedUnbondingRevertedIterator is returned from FilterAppliedUnbondingReverted and is used to iterate over the raw logs and unpacked data for AppliedUnbondingReverted events raised by the Autonity contract.
type AutonityAppliedUnbondingRevertedIterator struct {
	Event *AutonityAppliedUnbondingReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityAppliedUnbondingRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityAppliedUnbondingReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityAppliedUnbondingReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityAppliedUnbondingRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityAppliedUnbondingRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityAppliedUnbondingReverted represents a AppliedUnbondingReverted event raised by the Autonity contract.
type AutonityAppliedUnbondingReverted struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAppliedUnbondingReverted is a free log retrieval operation binding the contract event 0x52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c.
//
// Solidity: event AppliedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) FilterAppliedUnbondingReverted(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityAppliedUnbondingRevertedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "AppliedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityAppliedUnbondingRevertedIterator{contract: _Autonity.contract, event: "AppliedUnbondingReverted", logs: logs, sub: sub}, nil
}

// WatchAppliedUnbondingReverted is a free log subscription operation binding the contract event 0x52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c.
//
// Solidity: event AppliedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) WatchAppliedUnbondingReverted(opts *bind.WatchOpts, sink chan<- *AutonityAppliedUnbondingReverted, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "AppliedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityAppliedUnbondingReverted)
				if err := _Autonity.contract.UnpackLog(event, "AppliedUnbondingReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAppliedUnbondingReverted is a log parse operation binding the contract event 0x52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c.
//
// Solidity: event AppliedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) ParseAppliedUnbondingReverted(log types.Log) (*AutonityAppliedUnbondingReverted, error) {
	event := new(AutonityAppliedUnbondingReverted)
	if err := _Autonity.contract.UnpackLog(event, "AppliedUnbondingReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Autonity contract.
type AutonityApprovalIterator struct {
	Event *AutonityApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityApproval represents a Approval event raised by the Autonity contract.
type AutonityApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &AutonityApprovalIterator{contract: _Autonity.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityApproval)
				if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) ParseApproval(log types.Log) (*AutonityApproval, error) {
	event := new(AutonityApproval)
	if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the Autonity contract.
type AutonityBondingRejectedIterator struct {
	Event *AutonityBondingRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityBondingRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityBondingRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityBondingRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityBondingRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityBondingRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityBondingRejected represents a BondingRejected event raised by the Autonity contract.
type AutonityBondingRejected struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	State     uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_Autonity *AutonityFilterer) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityBondingRejectedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityBondingRejectedIterator{contract: _Autonity.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
}

// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_Autonity *AutonityFilterer) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityBondingRejected)
				if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_Autonity *AutonityFilterer) ParseBondingRejected(log types.Log) (*AutonityBondingRejected, error) {
	event := new(AutonityBondingRejected)
	if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityBondingRevertedIterator is returned from FilterBondingReverted and is used to iterate over the raw logs and unpacked data for BondingReverted events raised by the Autonity contract.
type AutonityBondingRevertedIterator struct {
	Event *AutonityBondingReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityBondingRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityBondingReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityBondingReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityBondingRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityBondingRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityBondingReverted represents a BondingReverted event raised by the Autonity contract.
type AutonityBondingReverted struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBondingReverted is a free log retrieval operation binding the contract event 0x2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d90.
//
// Solidity: event BondingReverted(address indexed validator, address indexed delegator, uint256 amount)
func (_Autonity *AutonityFilterer) FilterBondingReverted(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityBondingRevertedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "BondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityBondingRevertedIterator{contract: _Autonity.contract, event: "BondingReverted", logs: logs, sub: sub}, nil
}

// WatchBondingReverted is a free log subscription operation binding the contract event 0x2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d90.
//
// Solidity: event BondingReverted(address indexed validator, address indexed delegator, uint256 amount)
func (_Autonity *AutonityFilterer) WatchBondingReverted(opts *bind.WatchOpts, sink chan<- *AutonityBondingReverted, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "BondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityBondingReverted)
				if err := _Autonity.contract.UnpackLog(event, "BondingReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondingReverted is a log parse operation binding the contract event 0x2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d90.
//
// Solidity: event BondingReverted(address indexed validator, address indexed delegator, uint256 amount)
func (_Autonity *AutonityFilterer) ParseBondingReverted(log types.Log) (*AutonityBondingReverted, error) {
	event := new(AutonityBondingReverted)
	if err := _Autonity.contract.UnpackLog(event, "BondingReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the Autonity contract.
type AutonityBurnedStakeIterator struct {
	Event *AutonityBurnedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityBurnedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityBurnedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityBurnedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityBurnedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityBurnedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityBurnedStake represents a BurnedStake event raised by the Autonity contract.
type AutonityBurnedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityBurnedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityBurnedStakeIterator{contract: _Autonity.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
}

// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityBurnedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityBurnedStake)
				if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) ParseBurnedStake(log types.Log) (*AutonityBurnedStake, error) {
	event := new(AutonityBurnedStake)
	if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the Autonity contract.
type AutonityCallFailedIterator struct {
	Event *AutonityCallFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityCallFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityCallFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityCallFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityCallFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityCallFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityCallFailed represents a CallFailed event raised by the Autonity contract.
type AutonityCallFailed struct {
	To              common.Address
	MethodSignature string
	ReturnData      []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_Autonity *AutonityFilterer) FilterCallFailed(opts *bind.FilterOpts) (*AutonityCallFailedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return &AutonityCallFailedIterator{contract: _Autonity.contract, event: "CallFailed", logs: logs, sub: sub}, nil
}

// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_Autonity *AutonityFilterer) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityCallFailed) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityCallFailed)
				if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_Autonity *AutonityFilterer) ParseCallFailed(log types.Log) (*AutonityCallFailed, error) {
	event := new(AutonityCallFailed)
	if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the Autonity contract.
type AutonityCommissionRateChangeIterator struct {
	Event *AutonityCommissionRateChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityCommissionRateChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityCommissionRateChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityCommissionRateChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityCommissionRateChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityCommissionRateChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityCommissionRateChange represents a CommissionRateChange event raised by the Autonity contract.
type AutonityCommissionRateChange struct {
	Validator common.Address
	Rate      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_Autonity *AutonityFilterer) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityCommissionRateChangeIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityCommissionRateChangeIterator{contract: _Autonity.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
}

// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_Autonity *AutonityFilterer) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityCommissionRateChange, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityCommissionRateChange)
				if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_Autonity *AutonityFilterer) ParseCommissionRateChange(log types.Log) (*AutonityCommissionRateChange, error) {
	event := new(AutonityCommissionRateChange)
	if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the Autonity contract.
type AutonityEpochPeriodUpdatedIterator struct {
	Event *AutonityEpochPeriodUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityEpochPeriodUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityEpochPeriodUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityEpochPeriodUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityEpochPeriodUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityEpochPeriodUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the Autonity contract.
type AutonityEpochPeriodUpdated struct {
	Period *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0xd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81.
//
// Solidity: event EpochPeriodUpdated(uint256 period)
func (_Autonity *AutonityFilterer) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityEpochPeriodUpdatedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityEpochPeriodUpdatedIterator{contract: _Autonity.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
}

// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0xd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81.
//
// Solidity: event EpochPeriodUpdated(uint256 period)
func (_Autonity *AutonityFilterer) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityEpochPeriodUpdated) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityEpochPeriodUpdated)
				if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0xd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81.
//
// Solidity: event EpochPeriodUpdated(uint256 period)
func (_Autonity *AutonityFilterer) ParseEpochPeriodUpdated(log types.Log) (*AutonityEpochPeriodUpdated, error) {
	event := new(AutonityEpochPeriodUpdated)
	if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the Autonity contract.
type AutonityMinimumBaseFeeUpdatedIterator struct {
	Event *AutonityMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityMinimumBaseFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityMinimumBaseFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityMinimumBaseFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityMinimumBaseFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityMinimumBaseFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the Autonity contract.
type AutonityMinimumBaseFeeUpdated struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityMinimumBaseFeeUpdatedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityMinimumBaseFeeUpdatedIterator{contract: _Autonity.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityMinimumBaseFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityMinimumBaseFeeUpdated)
				if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityMinimumBaseFeeUpdated, error) {
	event := new(AutonityMinimumBaseFeeUpdated)
	if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the Autonity contract.
type AutonityMintedStakeIterator struct {
	Event *AutonityMintedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityMintedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityMintedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityMintedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityMintedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityMintedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityMintedStake represents a MintedStake event raised by the Autonity contract.
type AutonityMintedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityMintedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityMintedStakeIterator{contract: _Autonity.contract, event: "MintedStake", logs: logs, sub: sub}, nil
}

// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityMintedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityMintedStake)
				if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) ParseMintedStake(log types.Log) (*AutonityMintedStake, error) {
	event := new(AutonityMintedStake)
	if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the Autonity contract.
type AutonityNewBondingRequestIterator struct {
	Event *AutonityNewBondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityNewBondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityNewBondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityNewBondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityNewBondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityNewBondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityNewBondingRequest represents a NewBondingRequest event raised by the Autonity contract.
type AutonityNewBondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewBondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityNewBondingRequestIterator{contract: _Autonity.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityNewBondingRequest)
				if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) ParseNewBondingRequest(log types.Log) (*AutonityNewBondingRequest, error) {
	event := new(AutonityNewBondingRequest)
	if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Autonity contract.
type AutonityNewEpochIterator struct {
	Event *AutonityNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityNewEpoch represents a NewEpoch event raised by the Autonity contract.
type AutonityNewEpoch struct {
	Epoch *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_Autonity *AutonityFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityNewEpochIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &AutonityNewEpochIterator{contract: _Autonity.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_Autonity *AutonityFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityNewEpoch) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityNewEpoch)
				if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_Autonity *AutonityFilterer) ParseNewEpoch(log types.Log) (*AutonityNewEpoch, error) {
	event := new(AutonityNewEpoch)
	if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the Autonity contract.
type AutonityNewUnbondingRequestIterator struct {
	Event *AutonityNewUnbondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityNewUnbondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityNewUnbondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityNewUnbondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityNewUnbondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityNewUnbondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityNewUnbondingRequest represents a NewUnbondingRequest event raised by the Autonity contract.
type AutonityNewUnbondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewUnbondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityNewUnbondingRequestIterator{contract: _Autonity.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityNewUnbondingRequest)
				if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) ParseNewUnbondingRequest(log types.Log) (*AutonityNewUnbondingRequest, error) {
	event := new(AutonityNewUnbondingRequest)
	if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the Autonity contract.
type AutonityPausedValidatorIterator struct {
	Event *AutonityPausedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityPausedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityPausedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityPausedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityPausedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityPausedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityPausedValidator represents a PausedValidator event raised by the Autonity contract.
type AutonityPausedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityPausedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityPausedValidatorIterator{contract: _Autonity.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
}

// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityPausedValidator)
				if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) ParsePausedValidator(log types.Log) (*AutonityPausedValidator, error) {
	event := new(AutonityPausedValidator)
	if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the Autonity contract.
type AutonityRegisteredValidatorIterator struct {
	Event *AutonityRegisteredValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityRegisteredValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityRegisteredValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityRegisteredValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityRegisteredValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityRegisteredValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityRegisteredValidator represents a RegisteredValidator event raised by the Autonity contract.
type AutonityRegisteredValidator struct {
	Treasury            common.Address
	Addr                common.Address
	OracleAddress       common.Address
	Enode               string
	LiquidStateContract common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_Autonity *AutonityFilterer) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityRegisteredValidatorIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return &AutonityRegisteredValidatorIterator{contract: _Autonity.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
}

// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_Autonity *AutonityFilterer) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityRegisteredValidator) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityRegisteredValidator)
				if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_Autonity *AutonityFilterer) ParseRegisteredValidator(log types.Log) (*AutonityRegisteredValidator, error) {
	event := new(AutonityRegisteredValidator)
	if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityReleasedUnbondingRevertedIterator is returned from FilterReleasedUnbondingReverted and is used to iterate over the raw logs and unpacked data for ReleasedUnbondingReverted events raised by the Autonity contract.
type AutonityReleasedUnbondingRevertedIterator struct {
	Event *AutonityReleasedUnbondingReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityReleasedUnbondingRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityReleasedUnbondingReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityReleasedUnbondingReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityReleasedUnbondingRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityReleasedUnbondingRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityReleasedUnbondingReverted represents a ReleasedUnbondingReverted event raised by the Autonity contract.
type AutonityReleasedUnbondingReverted struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterReleasedUnbondingReverted is a free log retrieval operation binding the contract event 0x0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc.
//
// Solidity: event ReleasedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) FilterReleasedUnbondingReverted(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityReleasedUnbondingRevertedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "ReleasedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityReleasedUnbondingRevertedIterator{contract: _Autonity.contract, event: "ReleasedUnbondingReverted", logs: logs, sub: sub}, nil
}

// WatchReleasedUnbondingReverted is a free log subscription operation binding the contract event 0x0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc.
//
// Solidity: event ReleasedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) WatchReleasedUnbondingReverted(opts *bind.WatchOpts, sink chan<- *AutonityReleasedUnbondingReverted, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "ReleasedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityReleasedUnbondingReverted)
				if err := _Autonity.contract.UnpackLog(event, "ReleasedUnbondingReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleasedUnbondingReverted is a log parse operation binding the contract event 0x0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc.
//
// Solidity: event ReleasedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) ParseReleasedUnbondingReverted(log types.Log) (*AutonityReleasedUnbondingReverted, error) {
	event := new(AutonityReleasedUnbondingReverted)
	if err := _Autonity.contract.UnpackLog(event, "ReleasedUnbondingReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the Autonity contract.
type AutonityRewardedIterator struct {
	Event *AutonityRewarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityRewardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityRewarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityRewarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityRewardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityRewardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityRewarded represents a Rewarded event raised by the Autonity contract.
type AutonityRewarded struct {
	Addr      common.Address
	AtnAmount *big.Int
	NtnAmount *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_Autonity *AutonityFilterer) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityRewardedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityRewardedIterator{contract: _Autonity.contract, event: "Rewarded", logs: logs, sub: sub}, nil
}

// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_Autonity *AutonityFilterer) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityRewarded, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityRewarded)
				if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_Autonity *AutonityFilterer) ParseRewarded(log types.Log) (*AutonityRewarded, error) {
	event := new(AutonityRewarded)
	if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Autonity contract.
type AutonityTransferIterator struct {
	Event *AutonityTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityTransfer represents a Transfer event raised by the Autonity contract.
type AutonityTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AutonityTransferIterator{contract: _Autonity.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityTransfer)
				if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) ParseTransfer(log types.Log) (*AutonityTransfer, error) {
	event := new(AutonityTransfer)
	if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUnbondingRejectedIterator is returned from FilterUnbondingRejected and is used to iterate over the raw logs and unpacked data for UnbondingRejected events raised by the Autonity contract.
type AutonityUnbondingRejectedIterator struct {
	Event *AutonityUnbondingRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUnbondingRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUnbondingRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUnbondingRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUnbondingRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUnbondingRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUnbondingRejected represents a UnbondingRejected event raised by the Autonity contract.
type AutonityUnbondingRejected struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUnbondingRejected is a free log retrieval operation binding the contract event 0xec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866.
//
// Solidity: event UnbondingRejected(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) FilterUnbondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUnbondingRejectedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "UnbondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUnbondingRejectedIterator{contract: _Autonity.contract, event: "UnbondingRejected", logs: logs, sub: sub}, nil
}

// WatchUnbondingRejected is a free log subscription operation binding the contract event 0xec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866.
//
// Solidity: event UnbondingRejected(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) WatchUnbondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityUnbondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "UnbondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUnbondingRejected)
				if err := _Autonity.contract.UnpackLog(event, "UnbondingRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingRejected is a log parse operation binding the contract event 0xec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866.
//
// Solidity: event UnbondingRejected(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) ParseUnbondingRejected(log types.Log) (*AutonityUnbondingRejected, error) {
	event := new(AutonityUnbondingRejected)
	if err := _Autonity.contract.UnpackLog(event, "UnbondingRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUnlockingScheduleFailedIterator is returned from FilterUnlockingScheduleFailed and is used to iterate over the raw logs and unpacked data for UnlockingScheduleFailed events raised by the Autonity contract.
type AutonityUnlockingScheduleFailedIterator struct {
	Event *AutonityUnlockingScheduleFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUnlockingScheduleFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUnlockingScheduleFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUnlockingScheduleFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUnlockingScheduleFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUnlockingScheduleFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUnlockingScheduleFailed represents a UnlockingScheduleFailed event raised by the Autonity contract.
type AutonityUnlockingScheduleFailed struct {
	EpochTime *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUnlockingScheduleFailed is a free log retrieval operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
//
// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
func (_Autonity *AutonityFilterer) FilterUnlockingScheduleFailed(opts *bind.FilterOpts) (*AutonityUnlockingScheduleFailedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "UnlockingScheduleFailed")
	if err != nil {
		return nil, err
	}
	return &AutonityUnlockingScheduleFailedIterator{contract: _Autonity.contract, event: "UnlockingScheduleFailed", logs: logs, sub: sub}, nil
}

// WatchUnlockingScheduleFailed is a free log subscription operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
//
// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
func (_Autonity *AutonityFilterer) WatchUnlockingScheduleFailed(opts *bind.WatchOpts, sink chan<- *AutonityUnlockingScheduleFailed) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "UnlockingScheduleFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUnlockingScheduleFailed)
				if err := _Autonity.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockingScheduleFailed is a log parse operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
//
// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
func (_Autonity *AutonityFilterer) ParseUnlockingScheduleFailed(log types.Log) (*AutonityUnlockingScheduleFailed, error) {
	event := new(AutonityUnlockingScheduleFailed)
	if err := _Autonity.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestMetaData contains all meta data concerning the AutonityUpgradeTest contract.
var AutonityUpgradeTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AppliedUnbondingReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BondingReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleasedUnbondingReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnbondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochTime\",\"type\":\"uint256\"}],\"name\":\"UnlockingScheduleFailed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atnTotalRedistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"nonStakableVestingContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getProposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getRevertingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingReleaseState\",\"outputs\":[{\"internalType\":\"enumAutonity.UnbondingReleaseState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBondAppliedGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardsDistributionGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnbondAppliedGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnbondReleasedGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveATN\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxBondAppliedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxRewardsDistributionGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxUnbondAppliedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setMaxUnbondReleasedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNonStakableVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStakingGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"}],\"name\":\"updateValidatorAndTransferSlashedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"e98712b2": "atnTotalRedistributed()",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"d861b0e8": "finalizeInitialization()",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"96b477cb": "getEpochFromBlock(uint256)",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"5f7d3949": "getProposer(uint256,uint256)",
		"b6ef8c67": "getRevertingAmount(uint256)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"a9af1059": "getUnbondingReleaseState(uint256)",
		"1904bb2e": "getValidator(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"c2362dd5": "lastEpochBlock()",
		"89c614b8": "lastEpochTime()",
		"96f18a32": "liquidLogicContract()",
		"cef98450": "maxBondAppliedGas()",
		"5bdedd16": "maxRewardsDistributionGas()",
		"386a827b": "maxUnbondAppliedGas()",
		"71d1bc59": "maxUnbondReleasedGas()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"161605e3": "receiveATN()",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"0fe50109": "setMaxBondAppliedGas(uint256)",
		"7e660ac9": "setMaxRewardsDistributionGas(uint256)",
		"0b21fb1d": "setMaxUnbondAppliedGas(uint256)",
		"ee7ff28d": "setMaxUnbondReleasedGas(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"1a0cf2e5": "setNonStakableVestingContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"6a929cef": "setStakingGasPrice(uint256)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"6bb9cb0e": "stakingGasPrice()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"35be16e0": "updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x608060405261c35060045561c35060055561c350600655614e2060075560006010556000601155633b9aca006035553480156200003b57600080fd5b50604080516000808252602082019092529062000071565b6200005d62000fc8565b815260200190600190039081620000535790505b506040805161014081018252601254608080830191825260135460a08085019190915260145460c08086019190915260155460e080870191909152601654610100808801919091526017546001600160a01b0390811661012089015295875287519081018852601854861681526019548616602082810191909152601a548716828a0152601b548716606080840191909152601c54881683880152601d54881695830195909552601e54871693820193909352601f5486169181019190915281860152855192830186528054909316825260215492820192909252602254818501526023548183015292820192909252602454918101829052906000036200019157603b80546001600160a01b03191633179055620001918282620001ae565b5050602454600103620001a857620001a8620005e9565b620013f3565b80518051601255602080820151601355604080830151601455606080840151601555608080850151601681905560a095860151601780546001600160a01b03199081166001600160a01b03938416179091558689015180516018805484169185169190911790558088015160198054841691851691909117905580870151601a8054841691851691909117905580860151601b8054841691851691909117905593840151601c8054831691841691909117905596830151601d8054891691831691909117905560c0830151601e8054891691831691909117905560e090920151601f8054881691841691909117905583870151805186549097169690921695909517845592830151602155828201516022559182015160235590830151602455603a9190915551620002e09062001098565b604051809103906000f080158015620002fd573d6000803e3d6000fd5b50603c80546001600160a01b0319166001600160a01b039290921691909117905560005b8251811015620005e457600083828151811062000342576200034262001145565b602002602001015160a001519050600084838151811062000367576200036762001145565b60200260200101516101a001818152505060008483815181106200038f576200038f62001145565b602002602001015161018001906001600160a01b031690816001600160a01b0316815250506000848381518110620003cb57620003cb62001145565b602002602001015160a00181815250506000848381518110620003f257620003f262001145565b60209081029190910101516101c0015260145484518590849081106200041c576200041c62001145565b60200260200101516080018181525050600084838151811062000443576200044362001145565b6020026020010151610260019060038111156200046457620004646200115b565b908160038111156200047a576200047a6200115b565b81525050600084838151811062000495576200049562001145565b6020026020010151610160018181525050620004d3848381518110620004bf57620004bf62001145565b60200260200101516200075a60201b60201c565b62000500848381518110620004ec57620004ec62001145565b60200260200101516200089160201b60201c565b80603760008685815181106200051a576200051a62001145565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600082825462000557919062001187565b92505081905550806039600082825462000572919062001187565b92505081905550620005cc84838151811062000592576200059262001145565b60200260200101516020015182868581518110620005b457620005b462001145565b60200260200101516000015162000b3e60201b60201c565b50508080620005db90620011a3565b91505062000321565b505050565b603b546001600160a01b03163314620006555760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60448201526218dbdb60ea1b60648201526084015b60405180910390fd5b600260386000602560018154811062000672576200067262001145565b60009182526020808320909101546001600160a01b0316835282019290925260400181206005018054909190620006ab908490620011d5565b925050819055506002603860006025600181548110620006cf57620006cf62001145565b60009182526020808320909101546001600160a01b031683528201929092526040018120600801805490919062000708908490620011d5565b90915550506002602455602080546001600160a01b031660009081526037909152604081206103e890556200074090600190620010a6565b6200074e60026000620010a6565b6003805460ff19169055565b600062000771826060015162000d5560201b60201c565b6001600160a01b03909116602084015290508015620007c15760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200064c565b6020808301516001600160a01b03908116600090815260389092526040909120600101541615620008355760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c726561647920726567697374657265640000000060448201526064016200064c565b612710826080015111156200088d5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e207261746500000000000000000060448201526064016200064c565b5050565b6101808101516001600160a01b03166200099057603c546001600160a01b03166200090a5760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b60648201526084016200064c565b6025546000906200091b9062000da3565b905081602001518260000151836080015183603c60009054906101000a90046001600160a01b03166040516200095190620010e8565b62000961959493929190620011ec565b604051809103906000f0801580156200097e573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602580546001808201835560009283527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c90910180546001600160a01b03199081166001600160a01b039586161790915584518416835260389095526040918290208651815487169085161781559351908401805486169184169190911790558401516002830180549094169116179091556060820151829190600382019062000a429082620012fa565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820155610240820151601282019062000b0c9082620012fa565b5061026082015160138201805460ff1916600183600381111562000b345762000b346200115b565b0217905550505050565b600080831162000b9d5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b60648201526084016200064c565b6001600160a01b03821660009081526037602052604090205483111562000c075760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e6365000000000060448201526064016200064c565b6001600160a01b0382166000908152603760205260408120805485929062000c31908490620013c6565b9091555050604080516080810182526001600160a01b03808516825286811660208084019182528385018881524360608601908152600a805460009081526008909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000cc083620011a3565b90915550506001600160a01b03858116600081815260386020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3833b1562000d3a5762000d3a848762000ec3565b6001600a5462000d4b9190620013c6565b9695505050505050565b60008062000d62620010f6565b60008060ff9050604083875160208901845afa62000d7f57600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000dcb5750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000dfb578062000de281620011a3565b915062000df39050600a83620011d5565b915062000dcf565b6000816001600160401b0381111562000e185762000e186200112f565b6040519080825280601f01601f19166020018201604052801562000e43576020820181803683370190505b5090505b841562000ebb5762000e5b600183620013c6565b915062000e6a600a86620013dc565b62000e7790603062001187565b60f81b81838151811062000e8f5762000e8f62001145565b60200101906001600160f81b031916908160001a90535062000eb3600a86620011d5565b945062000e47565b949350505050565b6001600160a01b038216600090815260326020526040812054900362000f41576001600160a01b03821660008181526032602052604081206001908190556033805491820181559091527f82a75bdeeae8604d839476ae9efd8b0e15aa447e21bfd7f41283bb54e22c9a820180546001600160a01b03191690911790555b6001600160a01b03808316600090815260306020908152604080832093851683529290529081205490036200088d576001600160a01b03808316600081815260306020908152604080832094861680845294825280832060019081905593835260318252822080549384018155825290200180546001600160a01b03191690911790555050565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600060038111156200109357620010936200115b565b905290565b611b64806200b03283390190565b508054620010b4906200126c565b6000825580601f10620010c5575050565b601f016020900490600052602060002090810190620010e5919062001114565b50565b611249806200cb9683390190565b60405180604001604052806002906020820280368337509192915050565b5b808211156200112b576000815560010162001115565b5090565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156200119d576200119d62001171565b92915050565b600060018201620011b857620011b862001171565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082620011e757620011e7620011bf565b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b828110156200123b5786810182015185820160c0015281016200121d565b5050600060c0828501015260c0601f19601f83011684010191505062000d4b60808301846001600160a01b03169052565b600181811c908216806200128157607f821691505b602082108103620012a257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005e457600081815260208120601f850160051c81016020861015620012d15750805b601f850160051c820191505b81811015620012f257828155600101620012dd565b505050505050565b81516001600160401b038111156200131657620013166200112f565b6200132e816200132784546200126c565b84620012a8565b602080601f8311600181146200136657600084156200134d5750858301515b600019600386901b1c1916600185901b178555620012f2565b600085815260208120601f198616915b82811015620013975788860151825594840194600190910190840162001376565b5085821015620013b65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156200119d576200119d62001171565b600082620013ee57620013ee620011bf565b500690565b619c2f80620014036000396000f3fe608060405260043610620004cb5760003560e01c8063852c4849116200027b578063b6ef8c671162000153578063d5f3948811620000cb578063e7f43c68116200008d578063e7f43c6814620010d8578063e98712b214620010f8578063ee7ff28d1462001110578063f03b959d1462001135578063f1d592a7146200115a578063f7866ee3146200117f57005b8063d5f394881462001018578063d861b0e8146200103a578063d886f8a21462001052578063dd62ed3e1462001077578063dfb1a4d214620010c157005b8063ceaad4551162000115578063ceaad4551462000f79578063cef984501462000f9e578063cf9c57191462000fb6578063cfd19fb91462000fce578063d372c07e1462000ff357005b8063b6ef8c671462000ee7578063b7ab4db51462000f0c578063c2362dd51462000f24578063c9d97af41462000f3c578063cb696f541462000f5457005b8063a515366a11620001f3578063ab8f6ffe11620001b5578063ab8f6ffe1462000e02578063ae1f5fa01462000e29578063b2ea9adb1462000e50578063b3ecbadd1462000e75578063b46e55201462000e9a578063b66b3e791462000ebf57005b8063a515366a1462000d42578063a5d059ca1462000d59578063a8b2216e1462000d70578063a9059cbb1462000d97578063a9af10591462000dbc57005b806396b477cb116200023d57806396b477cb1462000c9a57806396f18a321462000ccb5780639ac310741462000ced5780639c98e4711462000d055780639dc29fac1462000d1d57005b8063852c48491462000bf2578063872cf0591462000c1757806389c614b81462000c2f5780638bac7dad1462000c4757806395d89b411462000c6c57005b806340c10f1911620003af5780636fd2c80b1162000327578063784304b511620002e9578063784304b5146200098257806379502c5514620009a75780637e660ac91462000b71578063819b64631462000b96578063833b1fce1462000bad57806384467fdb1462000bcd57005b80636fd2c80b14620008dd57806370a0823114620008f457806371d1bc59146200092e578063731b3a03146200094657806377e741c7146200095d57005b80635bdedd1611620003715780635bdedd1614620008255780635f7d3949146200083d5780636a929cef146200087b5780636b5f444c14620008a05780636bb9cb0e14620008c557005b806340c10f19146200077757806343645969146200079c578063496ccd9b14620007b35780634bb278f314620007d8578063520fdbbc146200080057005b8063161605e3116200044357806329070c6d116200040557806329070c6d14620006ed5780632f2c3f2e1462000704578063313ce567146200071c57806335be16e0146200073a578063386a827b146200075f57005b8063161605e314620004d357806318160ddd14620006585780631904bb2e146200066f5780631a0cf2e514620006a357806323b872dd14620006c857005b80630fe50109116200048d5780630fe5010914620005ba5780631122063314620005df578063114eaf5514620005f65780631250a28d146200061b5780631604e416146200064057005b806306fdde0314620004d5578063095ea7b314620005195780630ae65e7a146200054f5780630b21fb1d14620005745780630d8e6e2c146200059957005b36620004d357005b005b348015620004e257600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b604051620005109190620077e5565b60405180910390f35b3480156200052657600080fd5b506200053e6200053836600462007817565b6200119f565b604051901515815260200162000510565b3480156200055c57600080fd5b50620004d36200056e36600462007846565b620011b8565b3480156200058157600080fd5b50620004d36200059336600462007866565b6200125f565b348015620005a657600080fd5b506024545b60405190815260200162000510565b348015620005c757600080fd5b50620004d3620005d936600462007866565b62001291565b348015620005ec57600080fd5b50601354620005ab565b3480156200060357600080fd5b50620004d36200061536600462007866565b620012c3565b3480156200062857600080fd5b50620004d36200063a36600462007846565b620012f5565b3480156200064d57600080fd5b50620005ab602d5481565b3480156200066557600080fd5b50603954620005ab565b3480156200067c57600080fd5b50620006946200068e36600462007846565b62001346565b604051620005109190620078c4565b348015620006b057600080fd5b50620004d3620006c236600462007846565b620015f4565b348015620006d557600080fd5b506200053e620006e736600462007a3d565b62001643565b348015620006fa57600080fd5b50601254620005ab565b3480156200071157600080fd5b50620005ab61271081565b3480156200072957600080fd5b506040516012815260200162000510565b3480156200074757600080fd5b50620004d36200075936600462007a83565b620016eb565b3480156200076c57600080fd5b50620005ab60055481565b3480156200078457600080fd5b50620004d36200079636600462007817565b620018c7565b348015620007a957600080fd5b50602254620005ab565b348015620007c057600080fd5b50620004d3620007d236600462007846565b62001904565b348015620007e557600080fd5b50620007f062001a0e565b6040516200051092919062007b44565b3480156200080d57600080fd5b50620004d36200081f36600462007846565b62001fa0565b3480156200083257600080fd5b50620005ab60075481565b3480156200084a57600080fd5b50620008626200085c36600462007b61565b6200219b565b6040516001600160a01b03909116815260200162000510565b3480156200088857600080fd5b50620004d36200089a36600462007866565b620023b2565b348015620008ad57600080fd5b50620004d3620008bf36600462007866565b620023e4565b348015620008d257600080fd5b50620005ab60355481565b348015620008ea57600080fd5b50601554620005ab565b3480156200090157600080fd5b50620005ab6200091336600462007846565b6001600160a01b031660009081526037602052604090205490565b3480156200093b57600080fd5b50620005ab60065481565b3480156200095357600080fd5b50602854620005ab565b3480156200096a57600080fd5b50620004d36200097c36600462007866565b6200256a565b3480156200098f57600080fd5b50620004d3620009a136600462007c2f565b6200259c565b348015620009b457600080fd5b506040805160c080820183526012548252601354602080840191909152601454838501526015546060808501919091526016546080808601919091526017546001600160a01b0390811660a08088019190915287516101008101895260185483168152601954831681870152601a548316818a0152601b54831681860152601c54831681850152601d54831691810191909152601e54821695810195909552601f54811660e086015286519182018752835416815260215492810192909252602254948201949094526023549381019390935260245462000a93939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0988901516001600160a01b039081168a8601528851811660c080870191909152848a0151821660e0808801919091528a8801518316610100880152848b01518316610120880152928a015182166101408701529989015181166101608601529888015189166101808501529096015187166101a083015284519096166101c0820152948301516101e08601528201516102008501529101516102208301526102408201526102600162000510565b34801562000b7e57600080fd5b50620004d362000b9036600462007866565b62002747565b34801562000ba357600080fd5b50602354620005ab565b34801562000bba57600080fd5b506019546001600160a01b031662000862565b34801562000bda57600080fd5b50620004d362000bec36600462007c85565b62002779565b34801562000bff57600080fd5b50620004d362000c1136600462007817565b620028a8565b34801562000c2457600080fd5b50620004d362002a39565b34801562000c3c57600080fd5b50620005ab60295481565b34801562000c5457600080fd5b50620004d362000c6636600462007866565b62002a75565b34801562000c7957600080fd5b50604080518082019091526003815262272a2760e91b602082015262000501565b34801562000ca757600080fd5b50620005ab62000cb936600462007866565b60009081526027602052604090205490565b34801562000cd857600080fd5b50603c5462000862906001600160a01b031681565b34801562000cfa57600080fd5b50620005ab603a5481565b34801562000d1257600080fd5b50620005ab602a5481565b34801562000d2a57600080fd5b50620004d362000d3c36600462007817565b62002af9565b620005ab62000d5336600462007817565b62002c16565b620005ab62000d6a36600462007817565b62002d33565b34801562000d7d57600080fd5b5062000d8862002e0c565b60405162000510919062007d2e565b34801562000da457600080fd5b506200053e62000db636600462007817565b62002eef565b34801562000dc957600080fd5b5062000df362000ddb36600462007866565b6000908152600b602052604090206006015460ff1690565b60405162000510919062007d94565b34801562000e0f57600080fd5b5062000e1a62002f47565b60405162000510919062007da9565b34801562000e3657600080fd5b5062000e4162003059565b60405162000510919062007dbe565b34801562000e5d57600080fd5b50620004d362000e6f36600462007e0d565b6200329f565b34801562000e8257600080fd5b50620004d362000e9436600462007846565b620032e6565b34801562000ea757600080fd5b50620004d362000eb936600462007846565b62003335565b34801562000ecc57600080fd5b5062000ed762003582565b6040516200051092919062007e6e565b34801562000ef457600080fd5b50620005ab62000f0636600462007866565b620036b9565b34801562000f1957600080fd5b5062000e416200374b565b34801562000f3157600080fd5b50620005ab60285481565b34801562000f4957600080fd5b50620005ab60265481565b34801562000f6157600080fd5b50620004d362000f7336600462007866565b620037af565b34801562000f8657600080fd5b50620004d362000f9836600462007846565b62003812565b34801562000fab57600080fd5b50620005ab60045481565b34801562000fc357600080fd5b50620004d362003861565b34801562000fdb57600080fd5b50620004d362000fed36600462007846565b620038b6565b3480156200100057600080fd5b50620004d36200101236600462007846565b62003905565b3480156200102557600080fd5b50603b5462000862906001600160a01b031681565b3480156200104757600080fd5b50620004d362003954565b3480156200105f57600080fd5b50620004d36200107136600462007846565b620039ae565b3480156200108457600080fd5b50620005ab6200109636600462007ea0565b6001600160a01b039182166000908152602f6020908152604080832093909416825291909152205490565b348015620010ce57600080fd5b50602154620005ab565b348015620010e557600080fd5b506020546001600160a01b031662000862565b3480156200110557600080fd5b50620005ab602c5481565b3480156200111d57600080fd5b50620004d36200112f36600462007866565b620039fd565b3480156200114257600080fd5b50620004d36200115436600462007846565b62003a2f565b3480156200116757600080fd5b50620004d36200117936600462007846565b62003a7e565b3480156200118c57600080fd5b506017546001600160a01b031662000862565b6000620011ae33848462003acd565b5060015b92915050565b620011c262003bf6565b6001600160a01b03808216600081815260386020526040902060010154909116146200120b5760405162461bcd60e51b8152600401620012029062007ede565b60405180910390fd5b6001600160a01b03818116600090815260386020526040902054163314620012475760405162461bcd60e51b8152600401620012029062007f15565b620012528162003c45565b6200125c60008055565b50565b6020546001600160a01b031633146200128c5760405162461bcd60e51b8152600401620012029062007f61565b600555565b6020546001600160a01b03163314620012be5760405162461bcd60e51b8152600401620012029062007f61565b600455565b6020546001600160a01b03163314620012f05760405162461bcd60e51b8152600401620012029062007f61565b601555565b6020546001600160a01b03163314620013225760405162461bcd60e51b8152600401620012029062007f61565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b565b620013506200759e565b6001600160a01b0380831660008181526038602052604090206001015490911614620013905760405162461bcd60e51b8152600401620012029062007f98565b6001600160a01b038083166000908152603860209081526040918290208251610280810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620013f39062007fcf565b80601f0160208091040260200160405190810160405280929190818152602001828054620014219062007fcf565b8015620014725780601f10620014465761010080835404028352916020019162001472565b820191906000526020600020905b8154815290600101906020018083116200145457829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a082015260118201546101c08201526012820180546101e0909201916200152e9062007fcf565b80601f01602080910402602001604051908101604052809291908181526020018280546200155c9062007fcf565b8015620015ad5780601f106200158157610100808354040283529160200191620015ad565b820191906000526020600020905b8154815290600101906020018083116200158f57829003601f168201915b5050509183525050601382015460209091019060ff166003811115620015d757620015d762007880565b6003811115620015eb57620015eb62007880565b90525092915050565b6020546001600160a01b03163314620016215760405162461bcd60e51b8152600401620012029062007f61565b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006200165284848462003d31565b6001600160a01b0384166000908152602f602090815260408083203384529091528120546200168390849062008021565b90506200169285338362003acd565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051620016d891815260200190565b60405180910390a3506001949350505050565b6018546001600160a01b03163314620017535760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f742074686520736c617368696e6720636f6e74726044820152621858dd60ea1b606482015260840162001202565b600061012082013560388262001770604086016020870162007846565b6001600160a01b03166001600160a01b0316815260200190815260200160002060090154620017a0919062008021565b60c083013560386000620017bb604087016020880162007846565b6001600160a01b03166001600160a01b0316815260200190815260200160002060060154620017eb919062008021565b60a08401356038600062001806604088016020890162007846565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015462001836919062008021565b62001842919062008037565b6200184e919062008037565b6017546001600160a01b03166000908152603760205260408120805492935083929091906200187f90849062008037565b90915550829050603860006200189c604084016020850162007846565b6001600160a01b031681526020810191909152604001600020620018c1828262008225565b50505050565b6020546001600160a01b03163314620018f45760405162461bcd60e51b8152600401620012029062007f61565b62001900828262003e63565b5050565b6020546001600160a01b03163314620019315760405162461bcd60e51b8152600401620012029062007f61565b601980546001600160a01b0319166001600160a01b03838116918217909255601a54604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b1580156200199057600080fd5b505af1158015620019a5573d6000803e3d6000fd5b5050601c54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b158015620019f257600080fd5b505af115801562001a07573d6000803e3d6000fd5b5050505050565b603b546000906060906001600160a01b0316331462001a415760405162461bcd60e51b815260040162001202906200837b565b62001a4b62003bf6565b6026544360008181526027602052604081209290925560215460285462001a73919062008037565b6018546040516306c9789b60e41b8152929091146004830181905292506001600160a01b031690636c9789b090602401600060405180830381600087803b15801562001abe57600080fd5b505af115801562001ad3573d6000803e3d6000fd5b50505050801562001d8157601e54603954603a546029546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562001b46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b6c9190620083be565b905080603a54101562001b7e5750603a545b62001b8a308262003e63565b80603a600082825462001b9e919062008021565b9091555050601f546040805163f968f49360e01b815281516001600160a01b039093169263f968f4939260048084019391929182900301816000875af192505050801562001c0b575060408051601f3d908101601f1916820190925262001c0891810190620083d8565b60015b62001c49576040514281527ff1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c99060200160405180910390a162001c7c565b60175462001c61906001600160a01b03168262003e63565b601f5462001c79906001600160a01b03168362003e63565b50505b62001c88478262003ee9565b62001c926200449e565b62001c9c62004761565b62001ca662004850565b62001cb0620048ef565b600062001cbc62003059565b60195460405163422811f960e11b81529192506001600160a01b03169063845023f29062001cef90849060040162007dbe565b600060405180830381600087803b15801562001d0a57600080fd5b505af115801562001d1f573d6000803e3d6000fd5b505043602855505042602955602680546001919060009062001d4390849062008037565b90915550506026546040519081527febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e3359060200160405180910390a150505b60195460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af115801562001dcd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001df39190620083fd565b9050801562001e6f57601a546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af192505050801562001e67575060408051601f3d908101601f1916820190925262001e6491810190620083fd565b60015b1562001e6f57505b600354602b80546040805160208084028201810190925282815260ff9094169391839160009084015b8282101562001f86576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162001eee9062007fcf565b80601f016020809104026020016040519081016040528092919081815260200182805462001f1c9062007fcf565b801562001f6d5780601f1062001f415761010080835404028352916020019162001f6d565b820191906000526020600020905b81548152906001019060200180831162001f4f57829003601f168201915b5050505050815250508152602001906001019062001e98565b50505050905093509350505062001f9c60008055565b9091565b6020546001600160a01b0316331462001fcd5760405162461bcd60e51b8152600401620012029062007f61565b602080546001600160a01b0319166001600160a01b0383811691821790925560195460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b1580156200202c57600080fd5b505af115801562002041573d6000803e3d6000fd5b5050601a5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200208d57600080fd5b505af1158015620020a2573d6000803e3d6000fd5b5050601b5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b158015620020ee57600080fd5b505af115801562002103573d6000803e3d6000fd5b5050601c5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200214f57600080fd5b505af115801562002164573d6000803e3d6000fd5b5050601d5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401620019d7565b600080805b602b54811015620021f757602b8181548110620021c157620021c162008421565b90600052602060002090600302016001015482620021e0919062008037565b915080620021ee8162008437565b915050620021a0565b50806000036200224a5760405162461bcd60e51b815260206004820152601c60248201527f54686520636f6d6d6974746565206973206e6f74207374616b696e6700000000604482015260640162001202565b6000836200225a60638762008453565b62002266919062008037565b90506000816040516020016200227e91815260200190565b60408051601f19818403018152919052805160209091012090506000620022a6848362008483565b90506000805b602b548110156200235657602b8181548110620022cd57620022cd62008421565b90600052602060002090600302016001015482620022ec919062008037565b9150620022fb60018362008021565b83116200234157602b818154811062002318576200231862008421565b60009182526020909120600390910201546001600160a01b03169650620011b295505050505050565b806200234d8162008437565b915050620022ac565b5060405162461bcd60e51b815260206004820152602960248201527f5468657265206973206e6f2076616c696461746f72206c65667420696e20746860448201526865206e6574776f726b60b81b606482015260840162001202565b6020546001600160a01b03163314620023df5760405162461bcd60e51b8152600401620012029062007f61565b603555565b6020546001600160a01b03163314620024115760405162461bcd60e51b8152600401620012029062007f61565b602154811015620024c857806028546200242c919062008037565b4310620024c85760405162461bcd60e51b815260206004820152605760248201527f63757272656e7420636861696e2068656164206578636565642074686520776960448201527f6e646f773a206c617374426c6f636b45706f6368202b205f6e6577506572696f60648201527f642c2074727920616761696e206c6174746572206f6e2e000000000000000000608482015260a40162001202565b6021819055601854604051631ad7d11360e21b8152600481018390526001600160a01b0390911690636b5f444c90602401600060405180830381600087803b1580156200251457600080fd5b505af115801562002529573d6000803e3d6000fd5b505050507fd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81816040516200255f91815260200190565b60405180910390a150565b6020546001600160a01b03163314620025975760405162461bcd60e51b8152600401620012029062007f61565b601255565b6001600160a01b038083166000818152603860205260409020600181015490921614620025dd5760405162461bcd60e51b8152600401620012029062007f98565b80546001600160a01b03163314620026095760405162461bcd60e51b815260040162001202906200849a565b620026148362004aa0565b156200266e5760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b606482015260840162001202565b6000806200267c8462004b11565b925090508115620026be5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001202565b60018301546001600160a01b038281169116146200272f5760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b606482015260840162001202565b600383016200273f8582620084e9565b505050505050565b6020546001600160a01b03163314620027745760405162461bcd60e51b8152600401620012029062007f61565b600755565b6000604051806102800160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160126000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020014381526020016000815260200160008152602001600081526020018481526020016000600381111562002848576200284862007880565b9052905062002858818362004b56565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200289992339289918b91620085b2565b60405180910390a15050505050565b6001600160a01b0380831660008181526038602052604090206001015490911614620028e85760405162461bcd60e51b8152600401620012029062007ede565b6001600160a01b03828116600090815260386020526040902054163314620029245760405162461bcd60e51b8152600401620012029062007f15565b612710811115620029785760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e207261746500604482015260640162001202565b604080516060810182526001600160a01b038481168252436020808401918252838501868152601180546000908152600f909352958220855181546001600160a01b031916951694909417845591516001808501919091559151600290930192909255835492939092909190620029f190849062008037565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b6020546001600160a01b0316331462002a665760405162461bcd60e51b8152600401620012029062007f61565b6003805460ff19166001179055565b6020546001600160a01b0316331462002aa25760405162461bcd60e51b8152600401620012029062007f61565b6000811162002af45760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e2774206265203000000000000000604482015260640162001202565b602355565b6020546001600160a01b0316331462002b265760405162461bcd60e51b8152600401620012029062007f61565b6001600160a01b03821660009081526037602052604090205481111562002b895760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b604482015260640162001202565b6001600160a01b0382166000908152603760205260408120805483929062002bb390849062008021565b92505081905550806039600082825462002bce919062008021565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062002c2262003bf6565b6001600160a01b038084166000818152603860205260409020600101549091161462002c625760405162461bcd60e51b8152600401620012029062007f98565b6001600160a01b03831660009081526038602052604081206013015460ff16600381111562002c955762002c9562007880565b1462002ce45760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f206265206163746976650000000000604482015260640162001202565b60355462002cf39034620085fb565b336000908152603660205260408120805490919062002d1490849062008037565b9091555062002d27905083833362004fb0565b9050620011b260008055565b600062002d3f62003bf6565b6001600160a01b038084166000818152603860205260409020600101549091161462002d7f5760405162461bcd60e51b8152600401620012029062007f98565b6000821162002dc95760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b604482015260640162001202565b60355462002dd89034620085fb565b336000908152603660205260408120805490919062002df990849062008037565b9091555062002d279050838333620051c7565b6060602e805480602002602001604051908101604052809291908181526020016000905b8282101562002ee657838290600052602060002001805462002e529062007fcf565b80601f016020809104026020016040519081016040528092919081815260200182805462002e809062007fcf565b801562002ed15780601f1062002ea55761010080835404028352916020019162002ed1565b820191906000526020600020905b81548152906001019060200180831162002eb357829003601f168201915b50505050508152602001906001019062002e30565b50505050905090565b600062002efe33848462003d31565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6060602b805480602002602001604051908101604052809291908181526020016000905b8282101562002ee6576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162002fc19062007fcf565b80601f016020809104026020016040519081016040528092919081815260200182805462002fef9062007fcf565b8015620030405780601f10620030145761010080835404028352916020019162003040565b820191906000526020600020905b8154815290600101906020018083116200302257829003601f168201915b5050505050815250508152602001906001019062002f6b565b603b546060906001600160a01b03163314620030895760405162461bcd60e51b815260040162001202906200837b565b602554620030da5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f72730000000000000000604482015260640162001202565b620030e46200766e565b60235460808201526025815260386020820152602b6040820152602a606082015262003110816200562e565b6200311e602e60006200768c565b602b5480620031655760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b604482015260640162001202565b60008167ffffffffffffffff81111562003183576200318362007b84565b604051908082528060200260200182016040528015620031ad578160200160208202803683370190505b50905060005b828110156200329757600060386000602b8481548110620031d857620031d862008421565b60009182526020808320600392830201546001600160a01b0316845283019390935260409091018120602e8054600181018255925292507f37fa166cbdbfbb1561ccd9ea985ec0218b5e68502e230525f544285b2bdf3d7e0190620032409083018262008612565b50600281015483516001600160a01b039091169084908490811062003269576200326962008421565b6001600160a01b039092166020928302919091019091015250806200328e8162008437565b915050620031b3565b509250505090565b6020546001600160a01b03163314620032cc5760405162461bcd60e51b8152600401620012029062007f61565b620032d96001836200564e565b620019006002826200564e565b6020546001600160a01b03163314620033135760405162461bcd60e51b8152600401620012029062007f61565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6200333f62003bf6565b6001600160a01b03808216600081815260386020526040902060010154909116146200337f5760405162461bcd60e51b8152600401620012029062007ede565b6001600160a01b03808216600090815260386020526040902080549091163314620033be5760405162461bcd60e51b815260040162001202906200849a565b6000601382015460ff166003811115620033dc57620033dc62007880565b036200342b5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c7265616479206163746976650000000000000000604482015260640162001202565b6002601382015460ff16600381111562003449576200344962007880565b1480156200345a5750438160100154115b15620034a95760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c000000000000000000604482015260640162001202565b6003601382015460ff166003811115620034c757620034c762007880565b03620035165760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c7900000000604482015260640162001202565b60138101805460ff1916905580546021546028546001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b59162003566919062008037565b60405190815260200160405180910390a3506200125c60008055565b60608060016002818054620035979062007fcf565b80601f0160208091040260200160405190810160405280929190818152602001828054620035c59062007fcf565b8015620036165780601f10620035ea5761010080835404028352916020019162003616565b820191906000526020600020905b815481529060010190602001808311620035f857829003601f168201915b505050505091508080546200362b9062007fcf565b80601f0160208091040260200160405190810160405280929190818152602001828054620036599062007fcf565b8015620036aa5780601f106200367e57610100808354040283529160200191620036aa565b820191906000526020600020905b8154815290600101906020018083116200368c57829003601f168201915b50505050509050915091509091565b600060036000838152600b602052604090206006015460ff166003811115620036e657620036e662007880565b14620037355760405162461bcd60e51b815260206004820152601e60248201527f756e626f6e64696e672072656c65617365206e6f742072657665727465640000604482015260640162001202565b506000908152600b602052604090206005015490565b60606025805480602002602001604051908101604052809291908181526020018280548015620037a557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003786575b5050505050905090565b6020546001600160a01b03163314620037dc5760405162461bcd60e51b8152600401620012029062007f61565b60138190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128906020016200255f565b6020546001600160a01b031633146200383f5760405162461bcd60e51b8152600401620012029062007f61565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b031633146200388e5760405162461bcd60e51b8152600401620012029062007f61565b6200389c60016000620076ac565b620038aa60026000620076ac565b6003805460ff19169055565b6020546001600160a01b03163314620038e35760405162461bcd60e51b8152600401620012029062007f61565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b03163314620039325760405162461bcd60e51b8152600401620012029062007f61565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b603b546001600160a01b03163314620039815760405162461bcd60e51b815260040162001202906200837b565b6200398b62003bf6565b6200399562004761565b6200399f62003059565b50426029556200134460008055565b6020546001600160a01b03163314620039db5760405162461bcd60e51b8152600401620012029062007f61565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b0316331462003a2a5760405162461bcd60e51b8152600401620012029062007f61565b600655565b6020546001600160a01b0316331462003a5c5760405162461bcd60e51b8152600401620012029062007f61565b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b6020546001600160a01b0316331462003aab5760405162461bcd60e51b8152600401620012029062007f61565b603c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831662003b315760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162001202565b6001600160a01b03821662003b945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162001202565b6001600160a01b038381166000818152602f602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000541562003c3e5760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b604482015260640162001202565b6001600055565b6001600160a01b038116600090815260386020526040812090601382015460ff16600381111562003c7a5762003c7a62007880565b1462003cc95760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d757374206265206163746976650000000000000000604482015260640162001202565b60138101805460ff1916600117905580546021546028546001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c9162003d1c919062008037565b60405190815260200160405180910390a35050565b6001600160a01b03831660009081526037602052604090205481111562003d945760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b604482015260640162001202565b6001600160a01b0383166000908152603760205260408120805483929062003dbe90849062008021565b92505081905550806039600082825462003dd9919062008037565b9091555062003dec905081600262008453565b6001600160a01b0383166000908152603760205260408120805490919062003e1690849062008037565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162003be991815260200190565b6001600160a01b0382166000908152603760205260408120805483929062003e8d90849062008037565b92505081905550806039600082825462003ea8919062008037565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162002c0a565b8115801562003ef6575080155b1562003f00575050565b601254600090670de0b6b3a76400009062003f1d90859062008453565b62003f299190620085fb565b9050801562003fa7576017546040516000916001600160a01b03169083908381818185875af1925050503d806000811462003f81576040519150601f19603f3d011682016040523d82523d6000602084013e62003f86565b606091505b509091505080151560010362003fa55762003fa2828562008021565b93505b505b82602c600082825462003fbb919062008037565b90915550600090505b602b54811015620018c157600060386000602b848154811062003feb5762003feb62008421565b600091825260208083206003909202909101546001600160a01b031683528201929092526040018120602a54602b805492945090918891908690811062004036576200403662008421565b90600052602060002090600302016001015462004054919062008453565b620040609190620085fb565b90506000602a5486602b86815481106200407e576200407e62008421565b9060005260206000209060030201600101546200409c919062008453565b620040a89190620085fb565b90506000821180620040ba5750600081115b1562004485576002601384015460ff166003811115620040de57620040de62007880565b14806200410657506003601384015460ff16600381111562004104576200410462007880565b145b15620041d057601854620041269030906001600160a01b03168362003d31565b601854602b80546001600160a01b039092169163a8031a1d9185918890811062004154576200415462008421565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b158015620041ad57600080fd5b505af1158015620041c2573d6000803e3d6000fd5b505050505050505062004489565b60008360050154838560080154620041e9919062008453565b620041f59190620085fb565b90508015620042a657835460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d806000811462004255576040519150601f19603f3d011682016040523d82523d6000602084013e6200425a565b606091505b509092509050811515600003620042a357855460405160008051602062009bda833981519152916200429a916001600160a01b03909116908490620086f0565b60405180910390a15b50505b60008460050154838660080154620042bf919062008453565b620042cb9190620085fb565b90508015620042ed578454620042ed9030906001600160a01b03168362003d31565b6000620042fb828562008021565b905060006200430b848762008021565b905060008111806200431d5750600082115b156200443657600c8701546200433f9030906001600160a01b03168462003d31565b600c870154604051602481018490526000916001600160a01b031690839060440160408051601f198184030181529181526020820180516001600160e01b031663a0ce552d60e01b1790525162004397919062008721565b60006040518083038185875af1925050503d8060008114620043d6576040519150601f19603f3d011682016040523d82523d6000602084013e620043db565b606091505b5090915050600181151514620044345760405162461bcd60e51b815260206004820152601c60248201527f6661696c656420746f2064697374726962757465207265776172647300000000604482015260640162001202565b505b600187015460408051888152602081018890526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a2505050505b5050505b80620044958162008437565b91505062003fc4565b60335460005b818110156200190057600060338281548110620044c557620044c562008421565b60009182526020808320909101546001600160a01b0316808352603182526040808420805482518186028101860190935280835292955090929091908301828280156200453c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200451d575b5050505050905060005b8151811015620045c4576001600160a01b0383166000908152603060205260408120835190919084908490811062004582576200458262008421565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600090558080620045bb9062008437565b91505062004546565b506001600160a01b0382166000908152603160205260408120620045e891620076eb565b6001600160a01b038216600090815260366020526040902054815160075462004612919062008453565b8111156200462e5781516007546200462b919062008453565b90505b60005a9050836001600160a01b031663d18736ab83856040518363ffffffff1660e01b815260040162004662919062007dbe565b600060405180830381600088803b1580156200467d57600080fd5b5087f19350505050801562004690575060015b620046c6575a620046a2908262008021565b6001600160a01b0385166000908152603460205260409020600190559050620046d6565b5a620046d3908262008021565b90505b6001600160a01b0384166000908152603660205260409020548110156200472d576001600160a01b038416600090815260366020526040812080548392906200472190849062008021565b90915550620047479050565b6001600160a01b0384166000908152603660205260408120555b505050508080620047589062008437565b915050620044a4565b6009545b600a548110156200478e576200478881620047808162008437565b9250620057a1565b62004765565b50600a54600955600d54600c5403620047a357565b600e545b600d54811015620047d057620047ca81620047c28162008437565b925062005ad8565b620047a7565b50600d54600e55600c54805b600d548110156200484a576015546000828152600b60205260409020600401544391620048099162008037565b116200482f576200481a8162005f83565b6200482760018362008037565b915062004835565b6200484a565b80620048418162008437565b915050620047dc565b50600c55565b60335460005b81811015620048e05760006033828154811062004877576200487762008421565b60009182526020808320909101546001600160a01b03168083526032825260408084208490556034909252912054909150600103620048ca576001600160a01b0381166000908152603460205260408120555b5080620048d78162008437565b91505062004856565b506200125c60336000620076eb565b601154601054101562001344576010546000908152600f6020526040902060155460018201544391620049229162008037565b11156200492c5750565b600281015481546001600160a01b03908116600090815260386020526040808220600401849055845483168252808220600c01549051602481019490945290928392919091169060440160408051601f198184030181529181526020820180516001600160e01b03166319fac8fd60e01b17905251620049ad919062008721565b6000604051808303816000865af19150503d8060008114620049ec576040519150601f19603f3d011682016040523d82523d6000602084013e620049f1565b606091505b50909250905081151560000362004a4e5782546001600160a01b0390811660009081526038602052604090819020600c0154905160008051602062009bda8339815191529262004a4592169084906200873f565b60405180910390a15b601080546000908152600f6020526040812080546001600160a01b03191681556001808201839055600290910182905582549092919062004a9190849062008037565b90915550620048ef9350505050565b6000805b602b5481101562004b0857602b818154811062004ac55762004ac562008421565b60009182526020909120600390910201546001600160a01b039081169084160362004af35750600192915050565b8062004aff8162008437565b91505062004aa4565b50600092915050565b60008062004b1e6200770b565b60008060ff9050604083875160208901845afa62004b3b57600080fd5b50508051602090910151600160601b90910494909350915050565b60e281511462004ba05760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640162001202565b6030826102400151511462004bf85760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e67746800000000604482015260640162001202565b62004c03826200612c565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262004c66920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262004c86835162006259565b8360405160200162004c9b9392919062008796565b60408051601f198184030181528282528051602091820120600280855260608501845290945060009392909183019080368337019050509050600080808062004cf3898262004ced6041600262008453565b6200637a565b9050600062004d128a62004d0a6041600262008453565b60606200637a565b905060205b825181101562004de35762004d2d838262006493565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa15801562004d89573d6000803e3d6000fd5b5050604051601f19015190508762004da3604184620085fb565b8151811062004db65762004db662008421565b6001600160a01b039092166020928302919091019091015262004ddb60418262008037565b905062004d17565b508a602001516001600160a01b03168660008151811062004e085762004e0862008421565b60200260200101516001600160a01b03161462004e7a5760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b606482015260840162001202565b8a604001516001600160a01b03168660018151811062004e9e5762004e9e62008421565b60200260200101516001600160a01b03161462004f125760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b606482015260840162001202565b600162004f2a8c6102400151838e60000151620064ca565b1462004f985760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b606482015260840162001202565b62004fa38b62006539565b5050505050505050505050565b60008083116200500f5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162001202565b6001600160a01b038216600090815260376020526040902054831115620050795760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162001202565b6001600160a01b03821660009081526037602052604081208054859290620050a390849062008021565b9091555050604080516080810182526001600160a01b03808516825286811660208084019182528385018881524360608601908152600a805460009081526008909452968320865181549087166001600160a01b031991821617825594516001820180549190971695169490941790945551600283015591516003909101558254919290620051328362008437565b90915550506001600160a01b03858116600081815260386020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3833b15620051ac57620051ac8487620067e6565b6001600a54620051bd919062008021565b9695505050505050565b6001600160a01b03808416600090815260386020526040812080549192909184821691161480620053c157600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa15801562005240573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620052669190620083be565b905085811015620052ce5760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b606482015260840162001202565b600c8301546040516001600160a01b03878116602483015260448201899052600092169060640160408051601f198184030181529181526020820180516001600160e01b031663282d3fdf60e01b179052516200532c919062008721565b6000604051808303816000865af19150503d80600081146200536b576040519150601f19603f3d011682016040523d82523d6000602084013e62005370565b606091505b5050905080620053b95760405162461bcd60e51b81526020600482015260136024820152722330b4b632b2103a37903637b1b59026272a2760691b604482015260640162001202565b505062005454565b8482600b01548360080154620053d8919062008021565b1015620054385760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b606482015260840162001202565b8482600b0160008282546200544e919062008037565b90915550505b604051806101200160405280856001600160a01b03168152602001876001600160a01b03168152602001868152602001600081526020014381526020016000815260200160006003811115620054ae57620054ae62007880565b815260006020808301829052841515604093840152600d548252600b815290829020835181546001600160a01b039182166001600160a01b03199182161783559285015160018381018054929093169190941617905591830151600283015560608301516003808401919091556080840151600484015560a0840151600584015560c08401516006840180549193909260ff1990921691849081111562005559576200555962007880565b021790555060e082015160069091018054610100938401511515620100000262ff0000199315159094029290921662ffff001990921691909117919091179055600d8054906000620055ab8362008437565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc8388604051620056019291909115158252602082015260400190565b60405180910390a3833b156200561d576200561d8487620067e6565b6001600d54620051bd919062008021565b60fa60a06000808285855af462005649573d6000803e3d6000fd5b505050565b815460026001808316156101000203821604825180820160208110602084100160028114620056fd576001811462005723578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b80821015620056e65781518455600184019350602082019150620056c7565b815191036101000a90819004029091555062005798565b60028302826020036101000a846020036101000a60208901510402018501875562005798565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101562005786578151845560018401935060208201915062005767565b815191036101000a9081900402909155505b50505050505050565b600081815260086020908152604080832060018101546001600160a01b03168452603890925282209091601382015460ff166003811115620057e757620057e762007880565b1415806200580e575081546001600160a01b03166000908152603460205260409020546001145b15620058ce57600282015482546001600160a01b0316600090815260376020526040812080549091906200584490849062008037565b909155505081546001830154600284015460138401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f87834292620058a292909160ff90911690620087df565b60405180910390a380548254620056499185916000916001600160a01b039182169116146001620068eb565b805482546001600160a01b0390811691161462005a885760008082600801548360050154620058fe919062008021565b9050806000036200591657836002015491506200593c565b80846002015484600d01546200592d919062008453565b620059399190620085fb565b91505b600c83015484546040516001600160a01b039182166024820152604481018590526000928392169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b179052516200599e919062008721565b6000604051808303816000865af19150503d8060008114620059dd576040519150601f19603f3d011682016040523d82523d6000602084013e620059e2565b606091505b50909250905081151560000362005a3d57600c85015460405160008051602062009bda8339815191529162005a25916001600160a01b03909116908490620087fe565b60405180910390a162005798876000806001620068eb565b8385600d01600082825462005a53919062008037565b9091555050600286015460058601805460009062005a7390849062008037565b909155506200579890508785600080620068eb565b816002015481600801600082825462005aa2919062008037565b9091555050600282015460058201805460009062005ac290849062008037565b90915550620056499050836000600181620068eb565b6000818152600b6020908152604080832080546001600160a01b0316845260349092529091205460010362005b7a578054600182015460068301546002840154604080516201000090930460ff161515835260208301919091526001600160a01b0393841693909216917fec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866910160405180910390a36200190082600162006a74565b60018101546001600160a01b03166000908152603860205260408120600683015490919062010000900460ff1662005e71576002830154600c83015484546040516001600160a01b039182166024820152604481018490526000928392169060640160408051601f198184030181529181526020820180516001600160e01b0316637eee288d60e01b1790525162005c13919062008721565b6000604051808303816000865af19150503d806000811462005c52576040519150601f19603f3d011682016040523d82523d6000602084013e62005c57565b606091505b50909250905081151560000362005caf57600c85015460405160008051602062009bda8339815191529162005c9a916001600160a01b039091169084906200884d565b60405180910390a16200579887600162006a74565b600c85015486546040516001600160a01b0391821660248201526044810186905291169060640160408051601f198184030181529181526020820180516001600160e01b0316632770a7eb60e21b1790525162005d0d919062008721565b6000604051808303816000865af19150503d806000811462005d4c576040519150601f19603f3d011682016040523d82523d6000602084013e62005d51565b606091505b50909250905081151560000362005d9457600c85015460405160008051602062009bda8339815191529162005c9a916001600160a01b03909116908490620088a4565b60008560080154866005015462005dac919062008021565b600d87015490915062005dc0828662008453565b62005dcc9190620085fb565b94508386600d01600082825462005de4919062008021565b9091555050600686015460000362005e03576003870185905562005e2b565b6006860154600787015462005e19908762008453565b62005e259190620085fb565b60038801555b8486600601600082825462005e41919062008037565b9091555050600387015460078701805460009062005e6190849062008037565b9091555062005f46945050505050565b506002820154600882015481111562005e8b575060088101545b816009015460000362005ea5576003830181905562005ecd565b6009820154600a83015462005ebb908362008453565b62005ec79190620085fb565b60038401555b8082600901600082825462005ee3919062008037565b90915550506003830154600a8301805460009062005f0390849062008037565b925050819055508082600801600082825462005f20919062008021565b90915550506002830154600b8301805460009062005f4090849062008021565b90915550505b60068301805461ff00191661010017905560058201805482919060009062005f7090849062008021565b90915550620018c1905084600062006a74565b6000818152600b602052604090206006810154610100900460ff1662005fc15760068101805460ff1916600217905562001900826000600162006be7565b60068101805460ff19166001179055600381015460000362005feb57620019008260008062006be7565b60018101546001600160a01b03166000908152603860205260408120600683015490919062010000900460ff16620060885781600701548260060154846003015462006038919062008453565b620060449190620085fb565b9050808260060160008282546200605c919062008021565b909155505060038301546007830180546000906200607c90849062008021565b90915550620060ed9050565b81600a015482600901548460030154620060a3919062008453565b620060af9190620085fb565b905080826009016000828254620060c7919062008021565b90915550506003830154600a83018054600090620060e790849062008021565b90915550505b82546001600160a01b0316600090815260376020526040812080548392906200611890849062008037565b90915550620018c190508482600062006be7565b60006200613d826060015162004b11565b6001600160a01b039091166020840152905080156200618d5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001202565b6020808301516001600160a01b03908116600090815260389092526040909120600101541615620062015760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162001202565b61271082608001511115620019005760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162001202565b606081600003620062815750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620062b15780620062988162008437565b9150620062a99050600a83620085fb565b915062006285565b60008167ffffffffffffffff811115620062cf57620062cf62007b84565b6040519080825280601f01601f191660200182016040528015620062fa576020820181803683370190505b5090505b841562006372576200631260018362008021565b915062006321600a8662008483565b6200632e90603062008037565b60f81b81838151811062006346576200634662008421565b60200101906001600160f81b031916908160001a9053506200636a600a86620085fb565b9450620062fe565b949350505050565b6060816200638a81601f62008037565b1015620063cb5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640162001202565b620063d7828462008037565b845110156200641d5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640162001202565b6060821580156200643e57604051915060008252602082016040526200648a565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015620064795780518352602092830192016200645f565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b811015620064c357620064c0601b82620088f3565b90505b9250925092565b6000620064d662007729565b6000858585604051602001620064ef939291906200890f565b6040516020818303038152906040529050600060fb905060008251602062006518919062008037565b90506020848285855afa6200652c57600080fd5b5050905195945050505050565b6101808101516001600160a01b03166200663857603c546001600160a01b0316620065b25760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162001202565b602554600090620065c39062006259565b905081602001518260000151836080015183603c60009054906101000a90046001600160a01b0316604051620065f99062007747565b620066099594939291906200895e565b604051809103906000f08015801562006626573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602580546001808201835560009283527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c90910180546001600160a01b03199081166001600160a01b0395861617909155845184168352603890955260409182902086518154871690851617815593519084018054861691841691909117905584015160028301805490941691161790915560608201518291906003820190620066ea9082620084e9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f820155610200820151601082015561022082015160118201556102408201516012820190620067b49082620084e9565b5061026082015160138201805460ff19166001836003811115620067dc57620067dc62007880565b0217905550505050565b6001600160a01b038216600090815260326020526040812054900362006864576001600160a01b03821660008181526032602052604081206001908190556033805491820181559091527f82a75bdeeae8604d839476ae9efd8b0e15aa447e21bfd7f41283bb54e22c9a820180546001600160a01b03191690911790555b6001600160a01b038083166000908152603060209081526040808320938516835292905290812054900362001900576001600160a01b03808316600081815260306020908152604080832094861680845294825280832060019081905593835260318252822080549384018155825290200180546001600160a01b03191690911790555050565b600084815260086020526040902080546001600160a01b0316803b62006913575050620018c1565b6001600160a01b0381166000908152603660205260409020546004548111156200693c57506004545b60005a6001850154604051634efe8dc760e11b8152600481018b90526001600160a01b039182166024820152604481018a905288151560648201528715156084820152919250841690639dfd1b8e90849060a401600060405180830381600088803b158015620069ab57600080fd5b5087f193505050508015620069be575060015b620069e9575a620069d0908262008021565b905084620069e357620069e38862006d57565b620069f9565b5a620069f6908262008021565b90505b6001600160a01b03831660009081526036602052604090205481101562006a50576001600160a01b0383166000908152603660205260408120805483929062006a4490849062008021565b9091555062006a6a9050565b6001600160a01b0383166000908152603660205260408120555b5050505050505050565b6000828152600b6020526040902080546001600160a01b0316803b62006a9a5750505050565b6001600160a01b03811660009081526036602052604090205460055481111562006ac357506005545b60005a600185015460405163a892024160e01b8152600481018990526001600160a01b039182166024820152871515604482015291925084169063a8920241908490606401600060405180830381600088803b15801562006b2357600080fd5b5087f19350505050801562006b36575060015b62006b61575a62006b48908262008021565b90508462006b5b5762006b5b8662006fb2565b62006b71565b5a62006b6e908262008021565b90505b6001600160a01b03831660009081526036602052604090205481101562006bc8576001600160a01b0383166000908152603660205260408120805483929062006bbc90849062008021565b909155506200273f9050565b50506001600160a01b0316600090815260366020526040812055505050565b6000838152600b6020526040902080546001600160a01b0316803b62006c0e575050505050565b6001600160a01b03811660009081526036602052604090205460065481111562006c3757506006545b60005a6040516303c54c2960e41b8152600481018990526024810188905286151560448201529091506001600160a01b03841690633c54c290908490606401600060405180830381600088803b15801562006c9157600080fd5b5087f19350505050801562006ca4575060015b62006cd0575a62006cb6908262008021565b90508462006cca5762006cca878762007299565b62006ce0565b5a62006cdd908262008021565b90505b6001600160a01b03831660009081526036602052604090205481101562006d37576001600160a01b0383166000908152603660205260408120805483929062006d2b90849062008021565b90915550620057989050565b50506001600160a01b031660009081526036602052604081205550505050565b600081815260086020908152604080832060018101546001600160a01b0390811685526038909352922080548354919291821691161462006ef05760008160080154826005015462006daa919062008021565b836002015483600d015462006dc0919062008453565b62006dcc9190620085fb565b600c83015484546040516001600160a01b039182166024820152604481018490529293506000928392919091169060640160408051601f198184030181529181526020820180516001600160e01b0316632770a7eb60e21b1790525162006e34919062008721565b6000604051808303816000865af19150503d806000811462006e73576040519150601f19603f3d011682016040523d82523d6000602084013e62006e78565b606091505b50909250905081151560000362006ecb57600c84015460405160008051602062009bda8339815191529162006ebb916001600160a01b03909116908490620088a4565b60405180910390a1505050505050565b8284600d01600082825462006ee1919062008021565b9091555062006f109350505050565b816002015481600801600082825462006f0a919062008021565b90915550505b600282015482546001600160a01b03166000908152603760205260408120805490919062006f4090849062008037565b9091555050600282015460058201805460009062006f6090849062008021565b90915550508154600183015460028401546040519081526001600160a01b0392831692909116907f2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d909060200162003be9565b6000818152600b6020908152604080832060018101546001600160a01b031684526038909252822060068201549192909162010000900460ff1662007179576002830154600c83015484546040516001600160a01b039182166024820152604481018490526000928392169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b1790525162007058919062008721565b6000604051808303816000865af19150503d806000811462007097576040519150601f19603f3d011682016040523d82523d6000602084013e6200709c565b606091505b509092509050811515600003620070f057600c85015460405160008051602062009bda83398151915291620070df916001600160a01b03909116908490620087fe565b60405180910390a150505050505050565b8285600d01600082825462007106919062008037565b909155505060078501546006860154600388015462007126919062008453565b620071329190620085fb565b9350838560060160008282546200714a919062008021565b909155505060038601546007860180546000906200716a90849062008021565b90915550620071fb9350505050565b81600a01548260090154846003015462007194919062008453565b620071a09190620085fb565b905080826009016000828254620071b8919062008021565b90915550506003830154600a83018054600090620071d890849062008021565b9250508190555080826008016000828254620071f5919062008037565b90915550505b60006003840181905560068401805461ff00191690556005830180548392906200722790849062008037565b90915550508254600184015460068501546002860154604080516201000090930460ff161515835260208301919091526001600160a01b0393841693909216917f52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c91015b60405180910390a350505050565b6000828152600b60205260408120908290036200731d57600681018054600360ff19909116179081905581546001830154604080516201000090940460ff1615158452602084018690526001600160a01b039283169392909116917f0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc910162003be9565b60018101546001600160a01b03166000908152603860205260409020600682015462010000900460ff16620074bf576000808260080154836005015462007365919062008021565b90508060000362007379578491506200739b565b808584600d01546200738c919062008453565b620073989190620085fb565b91505b600c83015484546040516001600160a01b039182166024820152604481018590526000928392169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b17905251620073fd919062008721565b6000604051808303816000865af19150503d80600081146200743c576040519150601f19603f3d011682016040523d82523d6000602084013e62007441565b606091505b5090925090508115156000036200749657600c85015460405160008051602062009bda8339815191529162007484916001600160a01b03909116908490620087fe565b60405180910390a15050505050505050565b8385600d016000828254620074ac919062008037565b90915550505050506005830155620074e4565b82826005018190555082816008016000828254620074de919062008037565b90915550505b60068201805460ff1916600317905581546001600160a01b0316600090815260376020526040812080548592906200751e90849062008021565b92505081905550828160050160008282546200753b919062008037565b9091555050815460018301546006840154604080516201000090920460ff1615158252602082018790526001600160a01b0393841693909216917f0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc91016200728b565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000600381111562007669576200766962007880565b905290565b6040518060a001604052806005906020820280368337509192915050565b50805460008255906000526020600020908101906200125c919062007755565b508054620076ba9062007fcf565b6000825580601f10620076cb575050565b601f0160209004906000526020600020908101906200125c91906200777a565b50805460008255906000526020600020908101906200125c91906200777a565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b611249806200899183390190565b80821115620077765760006200776c8282620076ac565b5060010162007755565b5090565b5b808211156200777657600081556001016200777b565b60005b83811015620077ae57818101518382015260200162007794565b50506000910152565b60008151808452620077d181602086016020860162007791565b601f01601f19169290920160200192915050565b602081526000620077fa6020830184620077b7565b9392505050565b6001600160a01b03811681146200125c57600080fd5b600080604083850312156200782b57600080fd5b8235620078388162007801565b946020939093013593505050565b6000602082840312156200785957600080fd5b8135620077fa8162007801565b6000602082840312156200787957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600481106200125c57634e487b7160e01b600052602160045260246000fd5b620078c08162007896565b9052565b60208152620078df6020820183516001600160a01b03169052565b60006020830151620078fc60408401826001600160a01b03169052565b5060408301516001600160a01b0381166060840152506060830151610280806080850152620079306102a0850183620077b7565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a0620079b8818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f19016102608088019190915290915062007a1c8483620077b7565b93508087015191505062007a3382860182620078b5565b5090949350505050565b60008060006060848603121562007a5357600080fd5b833562007a608162007801565b9250602084013562007a728162007801565b929592945050506040919091013590565b60006020828403121562007a9657600080fd5b813567ffffffffffffffff81111562007aae57600080fd5b82016102808185031215620077fa57600080fd5b600081518084526020808501808196508360051b8101915082860160005b8581101562007b37578284038952815180516001600160a01b03168552858101518686015260409081015160609186018290529062007b2281870183620077b7565b9a87019a955050509084019060010162007ae0565b5091979650505050505050565b821515815260406020820152600062006372604083018462007ac2565b6000806040838503121562007b7557600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262007bac57600080fd5b813567ffffffffffffffff8082111562007bca5762007bca62007b84565b604051601f8301601f19908116603f0116810190828211818310171562007bf55762007bf562007b84565b8160405283815286602085880101111562007c0f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121562007c4357600080fd5b823562007c508162007801565b9150602083013567ffffffffffffffff81111562007c6d57600080fd5b62007c7b8582860162007b9a565b9150509250929050565b6000806000806080858703121562007c9c57600080fd5b843567ffffffffffffffff8082111562007cb557600080fd5b62007cc38883890162007b9a565b95506020870135915062007cd78262007801565b9093506040860135908082111562007cee57600080fd5b62007cfc8883890162007b9a565b9350606087013591508082111562007d1357600080fd5b5062007d228782880162007b9a565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562007d8757603f1988860301845262007d74858351620077b7565b9450928501929085019060010162007d55565b5092979650505050505050565b6020810162007da38362007896565b91905290565b602081526000620077fa602083018462007ac2565b6020808252825182820181905260009190848201906040850190845b8181101562007e015783516001600160a01b03168352928401929184019160010162007dda565b50909695505050505050565b6000806040838503121562007e2157600080fd5b823567ffffffffffffffff8082111562007e3a57600080fd5b62007e488683870162007b9a565b9350602085013591508082111562007e5f57600080fd5b5062007c7b8582860162007b9a565b60408152600062007e836040830185620077b7565b828103602084015262007e978185620077b7565b95945050505050565b6000806040838503121562007eb457600080fd5b823562007ec18162007801565b9150602083013562007ed38162007801565b809150509250929050565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b600181811c9082168062007fe457607f821691505b6020821081036200800557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115620011b257620011b26200800b565b80820180821115620011b257620011b26200800b565b60008135620011b28162007801565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808335601e198436030181126200809457600080fd5b83018035915067ffffffffffffffff821115620080b057600080fd5b602001915036819003821315620080c657600080fd5b9250929050565b601f8211156200564957600081815260208120601f850160051c81016020861015620080f65750805b601f850160051c820191505b818110156200273f5782815560010162008102565b600019600383901b1c191660019190911b1790565b67ffffffffffffffff83111562008147576200814762007b84565b6200815f8362008158835462007fcf565b83620080cd565b6000601f8411600181146200819257600085156200817d5750838201355b62008189868262008117565b84555062001a07565b600083815260209020601f19861690835b82811015620081c55786850135825560209485019460019092019101620081a3565b5086821015620081e35760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000813560048110620011b257600080fd5b620082128262007896565b60ff1981541660ff831681178255505050565b6200823b62008234836200804d565b826200805c565b620082576200824d602084016200804d565b600183016200805c565b6200827362008269604084016200804d565b600283016200805c565b6200828260608301836200807c565b620082928183600386016200812c565b50506080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610160820135600b82015562008305620082fb61018084016200804d565b600c83016200805c565b6101a0820135600d8201556101c0820135600e8201556101e0820135600f820155610200820135601082015561022082013560118201556200834c6102408301836200807c565b6200835c8183601286016200812c565b505062001900620083716102608401620081f5565b6013830162008207565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b600060208284031215620083d157600080fd5b5051919050565b60008060408385031215620083ec57600080fd5b505080516020909101519092909150565b6000602082840312156200841057600080fd5b81518015158114620077fa57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016200844c576200844c6200800b565b5060010190565b8082028115828204841417620011b257620011b26200800b565b634e487b7160e01b600052601260045260246000fd5b6000826200849557620084956200846d565b500690565b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b815167ffffffffffffffff81111562008506576200850662007b84565b6200851e8162008517845462007fcf565b84620080cd565b602080601f8311600181146200855257600084156200853d5750858301515b62008549858262008117565b8655506200273f565b600085815260208120601f198616915b82811015620085835788860151825594840194600190910190840162008562565b5085821015620085a25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018060a01b0380881683528087166020840152808616604084015260a06060840152620085e660a0840186620077b7565b91508084166080840152509695505050505050565b6000826200860d576200860d6200846d565b500490565b8181036200861e575050565b6200862a825462007fcf565b67ffffffffffffffff81111562008645576200864562007b84565b620086568162008517845462007fcf565b6000601f821160018114620086895760008315620086745750848201545b62008680848262008117565b85555062001a07565b600085815260209020601f19841690600086815260209020845b83811015620086c55782860154825560019586019590910190602001620086a3565b5085831015620085a25793015460001960f8600387901b161c19169092555050600190811b01905550565b60018060a01b03831681526060602082015260006060820152608060408201526000620063726080830184620077b7565b600082516200873581846020870162007791565b9190910192915050565b60018060a01b038316815260606020820152601a60608201527f736574436f6d6d697373696f6e526174652875696e7432353629000000000000608082015260a0604082015260006200637260a0830184620077b7565b60008451620087aa81846020890162007791565b845190830190620087c081836020890162007791565b8451910190620087d581836020880162007791565b0195945050505050565b82815260408101620087f18362007896565b8260208301529392505050565b60018060a01b03831681526060602082015260156060820152746d696e7428616464726573732c75696e743235362960581b608082015260a0604082015260006200637260a0830184620077b7565b60018060a01b038316815260606020820152601760608201527f756e6c6f636b28616464726573732c75696e7432353629000000000000000000608082015260a0604082015260006200637260a0830184620077b7565b60018060a01b03831681526060602082015260156060820152746275726e28616464726573732c75696e743235362960581b608082015260a0604082015260006200637260a0830184620077b7565b60ff8181168382160190811115620011b257620011b26200800b565b600084516200892381846020890162007791565b8451908301906200893981836020890162007791565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a06060840152620085e660a0840186620077b756fe60806040523480156200001157600080fd5b5060405162001249380380620012498339810160408190526200003491620001c6565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000999190620002c8565b831115620000a657600080fd5b600f80546001600160a01b038088166001600160a01b03199283161790925560108054928716929091169190911790556011839055604051620000ee908390602001620002e2565b604051602081830303815290604052600d90816200010d9190620003a0565b5081604051602001620001219190620002e2565b604051602081830303815290604052600e9081620001409190620003a0565b5050601380546001600160a01b03191633179055506200046c92505050565b6001600160a01b03811681146200017557600080fd5b50565b805162000185816200015f565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001bd578181015183820152602001620001a3565b50506000910152565b600080600080600060a08688031215620001df57600080fd5b8551620001ec816200015f565b6020870151909550620001ff816200015f565b6040870151606088015191955093506001600160401b03808211156200022457600080fd5b818801915088601f8301126200023957600080fd5b8151818111156200024e576200024e6200018a565b604051601f8201601f19908116603f011681019083821181831017156200027957620002796200018a565b816040528281528b60208487010111156200029357600080fd5b620002a6836020830160208801620001a0565b8096505050505050620002bc6080870162000178565b90509295509295909350565b600060208284031215620002db57600080fd5b5051919050565b644c4e544e2d60d81b81526000825162000304816005850160208701620001a0565b9190910160050192915050565b600181811c908216806200032657607f821691505b6020821081036200034757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039b57600081815260208120601f850160051c81016020861015620003765750805b601f850160051c820191505b81811015620003975782815560010162000382565b5050505b505050565b81516001600160401b03811115620003bc57620003bc6200018a565b620003d481620003cd845462000311565b846200034d565b602080601f8311600181146200040c5760008415620003f35750858301515b600019600386901b1c1916600185901b17855562000397565b600085815260208120601f198616915b828110156200043d578886015182559484019460019091019084016200041c565b50858210156200045c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dcd806200047c6000396000f3fe60806040526004361061010d5760003560e01c806384955c881161009557806396f18a321161006457806396f18a321461030e578063b2ea9adb14610323578063b66b3e7914610343578063cf9c571914610366578063dd62ed3e1461037b57610124565b806384955c8814610285578063872cf059146102a5578063949813b8146102c457806395d89b41146102f957610124565b80633a5381b5116100dc5780633a5381b5146101ab57806359355736146101e35780635ea1d6f81461021957806361d027b31461022f57806370a082311461024f57610124565b806306fdde031461012f57806318160ddd1461015a5780632d80430814610179578063313ce5671461018f57610124565b366101245761012261011d6103c1565b61049d565b005b61012261011d6103c1565b34801561013b57600080fd5b506101446104c0565b6040516101519190610b11565b60405180910390f35b34801561016657600080fd5b506006545b604051908152602001610151565b34801561018557600080fd5b5061016b60125481565b34801561019b57600080fd5b5060405160128152602001610151565b3480156101b757600080fd5b50600f546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b3480156101ef57600080fd5b5061016b6101fe366004610b40565b6001600160a01b031660009081526004602052604090205490565b34801561022557600080fd5b5061016b60115481565b34801561023b57600080fd5b506010546101cb906001600160a01b031681565b34801561025b57600080fd5b5061016b61026a366004610b40565b6001600160a01b031660009081526003602052604090205490565b34801561029157600080fd5b5061016b6102a0366004610b40565b61054e565b3480156102b157600080fd5b506101226002805460ff19166001179055565b3480156102d057600080fd5b506102e46102df366004610b40565b610582565b60408051928352602083019190915201610151565b34801561030557600080fd5b50610144610703565b34801561031a57600080fd5b506101cb6103c1565b34801561032f57600080fd5b5061012261033e366004610be9565b610710565b34801561034f57600080fd5b5061035861072a565b604051610151929190610c78565b34801561037257600080fd5b50610122610851565b34801561038757600080fd5b5061016b610396366004610ca6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600080601360009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610cdf565b90506001600160a01b0381166104985760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f742073657400000060448201526064015b60405180910390fd5b919050565b3660008037600080366000845af43d6000803e806104ba573d6000fd5b503d6000f35b600d80546104cd90610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990610cfc565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050505081565b6001600160a01b038116600090815260046020908152604080832054600390925282205461057c9190610d36565b92915050565b60008060006106436105926103c1565b6001600160a01b0386166000908152600360209081526040808320546007835281842054600a8452828520546008855283862054600b9095529483902054600954600c549451610614979496939590602401968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60408051601f198184030181529190526020810180516001600160e01b031663b05cd6c960e01b179052610874565b90506040815110156106905760405162461bcd60e51b81526020600482015260166024820152756e6f7420656e6f7567682072657475726e206461746160501b604482015260640161048f565b6040805160208082528183019092526000916020820181803683375050604080516020808252818301909252929350600092915080820181803683375050506020848101518482015260408501519082015290506106ed82610d57565b94506106f881610d57565b949694955050505050565b600e80546104cd90610cfc565b61071b600083610920565b610726600182610920565b5050565b6060806000600181805461073d90610cfc565b80601f016020809104026020016040519081016040528092919081815260200182805461076990610cfc565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b505050505091508080546107c990610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546107f590610cfc565b80156108425780601f1061081757610100808354040283529160200191610842565b820191906000526020600020905b81548152906001019060200180831161082557829003601f168201915b50505050509050915091509091565b61085c600080610a6b565b61086860016000610a6b565b6002805460ff19169055565b6060600080846001600160a01b0316846040516108919190610d7b565b600060405180830381855afa9150503d80600081146108cc576040519150601f19603f3d011682016040523d82523d6000602084013e6108d1565b606091505b5091509150816109185760405162461bcd60e51b81526020600482015260126024820152711cdd185d1a58c818d85b1b0819985a5b195960721b604482015260640161048f565b949350505050565b8154600260018083161561010002038216048251808201602081106020841001600281146109ca57600181146109ef578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156109b45781518455600184019350602082019150610997565b815191036101000a908190040290915550610a62565b60028302826020036101000a846020036101000a602089015104020185018755610a62565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015610a505781518455600184019350602082019150610a33565b815191036101000a9081900402909155505b50505050505050565b508054610a7790610cfc565b6000825580601f10610a87575050565b601f016020900490600052602060002090810190610aa59190610aa8565b50565b5b80821115610abd5760008155600101610aa9565b5090565b60005b83811015610adc578181015183820152602001610ac4565b50506000910152565b60008151808452610afd816020860160208601610ac1565b601f01601f19169290920160200192915050565b602081526000610b246020830184610ae5565b9392505050565b6001600160a01b0381168114610aa557600080fd5b600060208284031215610b5257600080fd5b8135610b2481610b2b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610b8e57610b8e610b5d565b604051601f8501601f19908116603f01168101908282118183101715610bb657610bb6610b5d565b81604052809350858152868686011115610bcf57600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215610bfc57600080fd5b823567ffffffffffffffff80821115610c1457600080fd5b818501915085601f830112610c2857600080fd5b610c3786833560208501610b73565b93506020850135915080821115610c4d57600080fd5b508301601f81018513610c5f57600080fd5b610c6e85823560208401610b73565b9150509250929050565b604081526000610c8b6040830185610ae5565b8281036020840152610c9d8185610ae5565b95945050505050565b60008060408385031215610cb957600080fd5b8235610cc481610b2b565b91506020830135610cd481610b2b565b809150509250929050565b600060208284031215610cf157600080fd5b8151610b2481610b2b565b600181811c90821680610d1057607f821691505b602082108103610d3057634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561057c57634e487b7160e01b600052601160045260246000fd5b80516020808301519190811015610d305760001960209190910360031b1b16919050565b60008251610d8d818460208701610ac1565b919091019291505056fea26469706673582212204655df825ebed0467409cfc6336a0b45df1b65321bdd2f6445a07381250c11c864736f6c634300081500331137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352a264697066735822122083f5ad6485e555887447e2f7a94f7a112ea97acbd4907fab89a6aa566ee023ce64736f6c63430008150033608060405234801561001057600080fd5b50601380546001600160a01b03191633179055611b32806100326000396000f3fe6080604052600436106101a05760003560e01c806361d027b3116100ec578063a9059cbb1161008a578063b66b3e7911610064578063b66b3e79146104fa578063bd96102f1461051d578063cf9c571914610532578063dd62ed3e14610547576101a7565b8063a9059cbb1461049a578063b05cd6c9146104ba578063b2ea9adb146104da576101a7565b8063872cf059116100c6578063872cf0591461041e57806395d89b411461043d5780639dc29fac14610452578063a0ce552d14610472576101a7565b806361d027b3146103a857806370a08231146103c85780637eee288d146103fe576101a7565b8063282d3fdf11610159578063372500ab11610133578063372500ab146103255780633a5381b51461033a57806340c10f19146103725780635ea1d6f814610392576101a7565b8063282d3fdf146102d95780632d804308146102f95780632f2c3f2e1461030f576101a7565b806306fdde0314610205578063095ea7b31461023057806318160ddd14610260578063187cf4d71461027f57806319fac8fd1461029757806323b872dd146102b9576101a7565b366101a757005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b34801561021157600080fd5b5061021a61058d565b6040516102279190611732565b60405180910390f35b34801561023c57600080fd5b5061025061024b366004611761565b61061b565b6040519015158152602001610227565b34801561026c57600080fd5b506006545b604051908152602001610227565b34801561028b57600080fd5b50610271633b9aca0081565b3480156102a357600080fd5b506102b76102b236600461178b565b610632565b005b3480156102c557600080fd5b506102506102d43660046117a4565b610661565b3480156102e557600080fd5b506102b76102f4366004611761565b610756565b34801561030557600080fd5b5061027160125481565b34801561031b57600080fd5b5061027161271081565b34801561033157600080fd5b506102b761083b565b34801561034657600080fd5b50600f5461035a906001600160a01b031681565b6040516001600160a01b039091168152602001610227565b34801561037e57600080fd5b506102b761038d366004611761565b610a1c565b34801561039e57600080fd5b5061027160115481565b3480156103b457600080fd5b5060105461035a906001600160a01b031681565b3480156103d457600080fd5b506102716103e33660046117e0565b6001600160a01b031660009081526003602052604090205490565b34801561040a57600080fd5b506102b7610419366004611761565b610a84565b34801561042a57600080fd5b506102b76002805460ff19166001179055565b34801561044957600080fd5b5061021a610b4a565b34801561045e57600080fd5b506102b761046d366004611761565b610b57565b61048561048036600461178b565b610bb7565b60408051928352602083019190915201610227565b3480156104a657600080fd5b506102506104b5366004611761565b610eab565b3480156104c657600080fd5b506104856104d53660046117fb565b610ef8565b3480156104e657600080fd5b506102b76104f53660046118d3565b610f3f565b34801561050657600080fd5b5061050f610f59565b604051610227929190611962565b34801561052957600080fd5b506102b7611080565b34801561053e57600080fd5b506102b7611187565b34801561055357600080fd5b50610271610562366004611990565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600d805461059a906119c3565b80601f01602080910402602001604051908101604052809291908181526020018280546105c6906119c3565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b505050505081565b60006106283384846111aa565b5060015b92915050565b6013546001600160a01b0316331461065c5760405162461bcd60e51b81526004016101fc906119fd565b601155565b6001600160a01b0383166000908152600560209081526040808320338452909152812054828110156106e65760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101fc565b6106fa85336106f58685611a5b565b6111aa565b61070485846112ce565b61070e84846113c4565b836001600160a01b0316856001600160a01b0316600080516020611add8339815191528560405161074191815260200190565b60405180910390a360019150505b9392505050565b6013546001600160a01b031633146107805760405162461bcd60e51b81526004016101fc906119fd565b6001600160a01b03821660009081526004602090815260408083205460039092529091205482916107b091611a5b565b101561080a5760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101fc565b6001600160a01b03821660009081526004602052604081208054839290610832908490611a6e565b90915550505050565b60008061084733611410565b336000908152600760209081526040808320839055600a90915281208190559193509150811561092a5760135460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190611a81565b90508061092a5760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101fc565b333b1561098a57336001600160a01b031663161605e3846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561096c57600080fd5b505af1158015610980573d6000803e3d6000fd5b5050505050505050565b60405133908490600081818185875af1925050503d80600081146109ca576040519150601f19603f3d011682016040523d82523d6000602084013e6109cf565b606091505b50508091505080610a175760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b505050565b6013546001600160a01b03163314610a465760405162461bcd60e51b81526004016101fc906119fd565b610a5082826113c4565b6040518181526001600160a01b03831690600090600080516020611add833981519152906020015b60405180910390a35050565b6013546001600160a01b03163314610aae5760405162461bcd60e51b81526004016101fc906119fd565b6001600160a01b038216600090815260046020526040902054811115610b225760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101fc565b6001600160a01b03821660009081526004602052604081208054839290610832908490611a5b565b600e805461059a906119c3565b6013546001600160a01b03163314610b815760405162461bcd60e51b81526004016101fc906119fd565b610b8b82826112ce565b6040518181526000906001600160a01b03841690600080516020611add83398151915290602001610a78565b60135460009081906001600160a01b03163314610be65760405162461bcd60e51b81526004016101fc906119fd565b601154349060009061271090610bfc9084611aa3565b610c069190611aba565b905081811115610c585760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610c628183611a5b565b6010546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610cb9576040519150601f19603f3d011682016040523d82523d6000602084013e610cbe565b606091505b5090915050801515600003610ce5578160126000828254610cdf9190611a6e565b90915550505b600061271060115488610cf89190611aa3565b610d029190611aba565b905086811115610d545760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610d5e8188611a5b565b96508015610de15760135460105460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf9190611a81565b505b600654600090610df5633b9aca0087611aa3565b610dff9190611aba565b905080600954610e0f9190611a6e565b600955600654600090610e26633b9aca008b611aa3565b610e309190611aba565b905080600c54610e409190611a6e565b600c55600654600090633b9aca0090610e599085611aa3565b610e639190611aba565b90506000633b9aca0060065484610e7a9190611aa3565b610e849190611aba565b9050610e908288611a6e565b610e9a8287611a6e565b995099505050505050505050915091565b6000610eb733836112ce565b610ec183836113c4565b6040518281526001600160a01b038416903390600080516020611add8339815191529060200160405180910390a350600192915050565b6000806000610f088a868961150d565b9050610f14818a611a6e565b92506000610f238b868961150d565b9050610f2f818a611a6e565b9250505097509795505050505050565b610f4a60008361154b565b610f5560018261154b565b5050565b60608060006001818054610f6c906119c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f98906119c3565b8015610fe55780601f10610fba57610100808354040283529160200191610fe5565b820191906000526020600020905b815481529060010190602001808311610fc857829003601f168201915b50505050509150808054610ff8906119c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611024906119c3565b80156110715780601f1061104657610100808354040283529160200191611071565b820191906000526020600020905b81548152906001019060200180831161105457829003601f168201915b50505050509050915091509091565b6010546001600160a01b031633146110e55760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101fc565b6010546012546040516000926001600160a01b031691908381818185875af1925050503d8060008114611134576040519150601f19603f3d011682016040523d82523d6000602084013e611139565b606091505b505090508061117f5760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b506000601255565b611192600080611696565b61119e60016000611696565b6002805460ff19169055565b6001600160a01b03831661120c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101fc565b6001600160a01b03821661126d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101fc565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6112d782611410565b50506001600160a01b0382166000908152600360209081526040808320546004909252909120546113089082611a5b565b8211156113575760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101fc565b6113618282611a5b565b6001600160a01b0384166000908152600360205260409020558082036113a8576001600160a01b0383166000908152600860209081526040808320839055600b9091528120555b81600660008282546113ba9190611a5b565b9091555050505050565b6113cd82611410565b50506001600160a01b038216600090815260036020526040812080548392906113f7908490611a6e565b9250508190555080600660008282546108329190611a6e565b6001600160a01b0381166000908152600360209081526040808320546009546008909352908320548392839161144791849161150d565b6001600160a01b03861660009081526007602052604090205490915061146e908290611a6e565b6001600160a01b03861660009081526007602090815260408083208490556009546008835281842055600c54600b90925282205492965090916114b291859161150d565b6001600160a01b0387166000908152600a60205260409020549091506114d9908290611a6e565b6001600160a01b039096166000908152600a60209081526040808320899055600c54600b9092529091205550929492505050565b60008360000361151f5750600061074f565b633b9aca008461152f8486611a5b565b6115399190611aa3565b6115439190611aba565b949350505050565b8154600260018083161561010002038216048251808201602081106020841001600281146115f5576001811461161a578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156115df57815184556001840193506020820191506115c2565b815191036101000a90819004029091555061168d565b60028302826020036101000a846020036101000a60208901510402018501875561168d565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101561167b578151845560018401935060208201915061165e565b815191036101000a9081900402909155505b50505050505050565b5080546116a2906119c3565b6000825580601f106116b2575050565b601f0160209004906000526020600020908101906116d091906116d3565b50565b5b808211156116e857600081556001016116d4565b5090565b6000815180845260005b81811015611712576020818501810151868301820152016116f6565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061074f60208301846116ec565b80356001600160a01b038116811461175c57600080fd5b919050565b6000806040838503121561177457600080fd5b61177d83611745565b946020939093013593505050565b60006020828403121561179d57600080fd5b5035919050565b6000806000606084860312156117b957600080fd5b6117c284611745565b92506117d060208501611745565b9150604084013590509250925092565b6000602082840312156117f257600080fd5b61074f82611745565b600080600080600080600060e0888a03121561181657600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561187857611878611847565b604051601f8501601f19908116603f011681019082821181831017156118a0576118a0611847565b816040528093508581528686860111156118b957600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156118e657600080fd5b823567ffffffffffffffff808211156118fe57600080fd5b818501915085601f83011261191257600080fd5b6119218683356020850161185d565b9350602085013591508082111561193757600080fd5b508301601f8101851361194957600080fd5b6119588582356020840161185d565b9150509250929050565b60408152600061197560408301856116ec565b828103602084015261198781856116ec565b95945050505050565b600080604083850312156119a357600080fd5b6119ac83611745565b91506119ba60208401611745565b90509250929050565b600181811c908216806119d757607f821691505b6020821081036119f757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561062c5761062c611a45565b8082018082111561062c5761062c611a45565b600060208284031215611a9357600080fd5b8151801515811461074f57600080fd5b808202811582820484141761062c5761062c611a45565b600082611ad757634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122027f06adca87c9bb81106c922b31dfddca3ffda3de3daf81988ad4bb5642943d764736f6c6343000815003360806040523480156200001157600080fd5b5060405162001249380380620012498339810160408190526200003491620001c6565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000999190620002c8565b831115620000a657600080fd5b600f80546001600160a01b038088166001600160a01b03199283161790925560108054928716929091169190911790556011839055604051620000ee908390602001620002e2565b604051602081830303815290604052600d90816200010d9190620003a0565b5081604051602001620001219190620002e2565b604051602081830303815290604052600e9081620001409190620003a0565b5050601380546001600160a01b03191633179055506200046c92505050565b6001600160a01b03811681146200017557600080fd5b50565b805162000185816200015f565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001bd578181015183820152602001620001a3565b50506000910152565b600080600080600060a08688031215620001df57600080fd5b8551620001ec816200015f565b6020870151909550620001ff816200015f565b6040870151606088015191955093506001600160401b03808211156200022457600080fd5b818801915088601f8301126200023957600080fd5b8151818111156200024e576200024e6200018a565b604051601f8201601f19908116603f011681019083821181831017156200027957620002796200018a565b816040528281528b60208487010111156200029357600080fd5b620002a6836020830160208801620001a0565b8096505050505050620002bc6080870162000178565b90509295509295909350565b600060208284031215620002db57600080fd5b5051919050565b644c4e544e2d60d81b81526000825162000304816005850160208701620001a0565b9190910160050192915050565b600181811c908216806200032657607f821691505b6020821081036200034757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039b57600081815260208120601f850160051c81016020861015620003765750805b601f850160051c820191505b81811015620003975782815560010162000382565b5050505b505050565b81516001600160401b03811115620003bc57620003bc6200018a565b620003d481620003cd845462000311565b846200034d565b602080601f8311600181146200040c5760008415620003f35750858301515b600019600386901b1c1916600185901b17855562000397565b600085815260208120601f198616915b828110156200043d578886015182559484019460019091019084016200041c565b50858210156200045c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dcd806200047c6000396000f3fe60806040526004361061010d5760003560e01c806384955c881161009557806396f18a321161006457806396f18a321461030e578063b2ea9adb14610323578063b66b3e7914610343578063cf9c571914610366578063dd62ed3e1461037b57610124565b806384955c8814610285578063872cf059146102a5578063949813b8146102c457806395d89b41146102f957610124565b80633a5381b5116100dc5780633a5381b5146101ab57806359355736146101e35780635ea1d6f81461021957806361d027b31461022f57806370a082311461024f57610124565b806306fdde031461012f57806318160ddd1461015a5780632d80430814610179578063313ce5671461018f57610124565b366101245761012261011d6103c1565b61049d565b005b61012261011d6103c1565b34801561013b57600080fd5b506101446104c0565b6040516101519190610b11565b60405180910390f35b34801561016657600080fd5b506006545b604051908152602001610151565b34801561018557600080fd5b5061016b60125481565b34801561019b57600080fd5b5060405160128152602001610151565b3480156101b757600080fd5b50600f546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b3480156101ef57600080fd5b5061016b6101fe366004610b40565b6001600160a01b031660009081526004602052604090205490565b34801561022557600080fd5b5061016b60115481565b34801561023b57600080fd5b506010546101cb906001600160a01b031681565b34801561025b57600080fd5b5061016b61026a366004610b40565b6001600160a01b031660009081526003602052604090205490565b34801561029157600080fd5b5061016b6102a0366004610b40565b61054e565b3480156102b157600080fd5b506101226002805460ff19166001179055565b3480156102d057600080fd5b506102e46102df366004610b40565b610582565b60408051928352602083019190915201610151565b34801561030557600080fd5b50610144610703565b34801561031a57600080fd5b506101cb6103c1565b34801561032f57600080fd5b5061012261033e366004610be9565b610710565b34801561034f57600080fd5b5061035861072a565b604051610151929190610c78565b34801561037257600080fd5b50610122610851565b34801561038757600080fd5b5061016b610396366004610ca6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600080601360009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610cdf565b90506001600160a01b0381166104985760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f742073657400000060448201526064015b60405180910390fd5b919050565b3660008037600080366000845af43d6000803e806104ba573d6000fd5b503d6000f35b600d80546104cd90610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990610cfc565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050505081565b6001600160a01b038116600090815260046020908152604080832054600390925282205461057c9190610d36565b92915050565b60008060006106436105926103c1565b6001600160a01b0386166000908152600360209081526040808320546007835281842054600a8452828520546008855283862054600b9095529483902054600954600c549451610614979496939590602401968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60408051601f198184030181529190526020810180516001600160e01b031663b05cd6c960e01b179052610874565b90506040815110156106905760405162461bcd60e51b81526020600482015260166024820152756e6f7420656e6f7567682072657475726e206461746160501b604482015260640161048f565b6040805160208082528183019092526000916020820181803683375050604080516020808252818301909252929350600092915080820181803683375050506020848101518482015260408501519082015290506106ed82610d57565b94506106f881610d57565b949694955050505050565b600e80546104cd90610cfc565b61071b600083610920565b610726600182610920565b5050565b6060806000600181805461073d90610cfc565b80601f016020809104026020016040519081016040528092919081815260200182805461076990610cfc565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b505050505091508080546107c990610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546107f590610cfc565b80156108425780601f1061081757610100808354040283529160200191610842565b820191906000526020600020905b81548152906001019060200180831161082557829003601f168201915b50505050509050915091509091565b61085c600080610a6b565b61086860016000610a6b565b6002805460ff19169055565b6060600080846001600160a01b0316846040516108919190610d7b565b600060405180830381855afa9150503d80600081146108cc576040519150601f19603f3d011682016040523d82523d6000602084013e6108d1565b606091505b5091509150816109185760405162461bcd60e51b81526020600482015260126024820152711cdd185d1a58c818d85b1b0819985a5b195960721b604482015260640161048f565b949350505050565b8154600260018083161561010002038216048251808201602081106020841001600281146109ca57600181146109ef578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156109b45781518455600184019350602082019150610997565b815191036101000a908190040290915550610a62565b60028302826020036101000a846020036101000a602089015104020185018755610a62565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015610a505781518455600184019350602082019150610a33565b815191036101000a9081900402909155505b50505050505050565b508054610a7790610cfc565b6000825580601f10610a87575050565b601f016020900490600052602060002090810190610aa59190610aa8565b50565b5b80821115610abd5760008155600101610aa9565b5090565b60005b83811015610adc578181015183820152602001610ac4565b50506000910152565b60008151808452610afd816020860160208601610ac1565b601f01601f19169290920160200192915050565b602081526000610b246020830184610ae5565b9392505050565b6001600160a01b0381168114610aa557600080fd5b600060208284031215610b5257600080fd5b8135610b2481610b2b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610b8e57610b8e610b5d565b604051601f8501601f19908116603f01168101908282118183101715610bb657610bb6610b5d565b81604052809350858152868686011115610bcf57600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215610bfc57600080fd5b823567ffffffffffffffff80821115610c1457600080fd5b818501915085601f830112610c2857600080fd5b610c3786833560208501610b73565b93506020850135915080821115610c4d57600080fd5b508301601f81018513610c5f57600080fd5b610c6e85823560208401610b73565b9150509250929050565b604081526000610c8b6040830185610ae5565b8281036020840152610c9d8185610ae5565b95945050505050565b60008060408385031215610cb957600080fd5b8235610cc481610b2b565b91506020830135610cd481610b2b565b809150509250929050565b600060208284031215610cf157600080fd5b8151610b2481610b2b565b600181811c90821680610d1057607f821691505b602082108103610d3057634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561057c57634e487b7160e01b600052601160045260246000fd5b80516020808301519190811015610d305760001960209190910360031b1b16919050565b60008251610d8d818460208701610ac1565b919091019291505056fea26469706673582212204655df825ebed0467409cfc6336a0b45df1b65321bdd2f6445a07381250c11c864736f6c63430008150033",
}

// AutonityUpgradeTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityUpgradeTestMetaData.ABI instead.
var AutonityUpgradeTestABI = AutonityUpgradeTestMetaData.ABI

// Deprecated: Use AutonityUpgradeTestMetaData.Sigs instead.
// AutonityUpgradeTestFuncSigs maps the 4-byte function signature to its string representation.
var AutonityUpgradeTestFuncSigs = AutonityUpgradeTestMetaData.Sigs

// AutonityUpgradeTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityUpgradeTestMetaData.Bin instead.
var AutonityUpgradeTestBin = AutonityUpgradeTestMetaData.Bin

// DeployAutonityUpgradeTest deploys a new Ethereum contract, binding an instance of AutonityUpgradeTest to it.
func DeployAutonityUpgradeTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AutonityUpgradeTest, error) {
	parsed, err := AutonityUpgradeTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AutonityUpgradeTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AutonityUpgradeTest{AutonityUpgradeTestCaller: AutonityUpgradeTestCaller{contract: contract}, AutonityUpgradeTestTransactor: AutonityUpgradeTestTransactor{contract: contract}, AutonityUpgradeTestFilterer: AutonityUpgradeTestFilterer{contract: contract}}, nil
}

// AutonityUpgradeTest is an auto generated Go binding around an Ethereum contract.
type AutonityUpgradeTest struct {
	AutonityUpgradeTestCaller     // Read-only binding to the contract
	AutonityUpgradeTestTransactor // Write-only binding to the contract
	AutonityUpgradeTestFilterer   // Log filterer for contract events
}

// AutonityUpgradeTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type AutonityUpgradeTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityUpgradeTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AutonityUpgradeTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityUpgradeTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AutonityUpgradeTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityUpgradeTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AutonityUpgradeTestSession struct {
	Contract     *AutonityUpgradeTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AutonityUpgradeTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AutonityUpgradeTestCallerSession struct {
	Contract *AutonityUpgradeTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// AutonityUpgradeTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AutonityUpgradeTestTransactorSession struct {
	Contract     *AutonityUpgradeTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// AutonityUpgradeTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type AutonityUpgradeTestRaw struct {
	Contract *AutonityUpgradeTest // Generic contract binding to access the raw methods on
}

// AutonityUpgradeTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AutonityUpgradeTestCallerRaw struct {
	Contract *AutonityUpgradeTestCaller // Generic read-only contract binding to access the raw methods on
}

// AutonityUpgradeTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AutonityUpgradeTestTransactorRaw struct {
	Contract *AutonityUpgradeTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAutonityUpgradeTest creates a new instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTest(address common.Address, backend bind.ContractBackend) (*AutonityUpgradeTest, error) {
	contract, err := bindAutonityUpgradeTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTest{AutonityUpgradeTestCaller: AutonityUpgradeTestCaller{contract: contract}, AutonityUpgradeTestTransactor: AutonityUpgradeTestTransactor{contract: contract}, AutonityUpgradeTestFilterer: AutonityUpgradeTestFilterer{contract: contract}}, nil
}

// NewAutonityUpgradeTestCaller creates a new read-only instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTestCaller(address common.Address, caller bind.ContractCaller) (*AutonityUpgradeTestCaller, error) {
	contract, err := bindAutonityUpgradeTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestCaller{contract: contract}, nil
}

// NewAutonityUpgradeTestTransactor creates a new write-only instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTestTransactor(address common.Address, transactor bind.ContractTransactor) (*AutonityUpgradeTestTransactor, error) {
	contract, err := bindAutonityUpgradeTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestTransactor{contract: contract}, nil
}

// NewAutonityUpgradeTestFilterer creates a new log filterer instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTestFilterer(address common.Address, filterer bind.ContractFilterer) (*AutonityUpgradeTestFilterer, error) {
	contract, err := bindAutonityUpgradeTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestFilterer{contract: contract}, nil
}

// bindAutonityUpgradeTest binds a generic wrapper to an already deployed contract.
func bindAutonityUpgradeTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AutonityUpgradeTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AutonityUpgradeTest *AutonityUpgradeTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AutonityUpgradeTest.Contract.AutonityUpgradeTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AutonityUpgradeTest *AutonityUpgradeTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.AutonityUpgradeTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AutonityUpgradeTest *AutonityUpgradeTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.AutonityUpgradeTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AutonityUpgradeTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.contract.Transact(opts, method, params...)
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) COMMISSIONRATEPRECISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) COMMISSIONRATEPRECISION() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.COMMISSIONRATEPRECISION(&_AutonityUpgradeTest.CallOpts)
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) COMMISSIONRATEPRECISION() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.COMMISSIONRATEPRECISION(&_AutonityUpgradeTest.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.Allowance(&_AutonityUpgradeTest.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.Allowance(&_AutonityUpgradeTest.CallOpts, owner, spender)
}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) AtnTotalRedistributed(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "atnTotalRedistributed")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) AtnTotalRedistributed() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.AtnTotalRedistributed(&_AutonityUpgradeTest.CallOpts)
}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) AtnTotalRedistributed() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.AtnTotalRedistributed(&_AutonityUpgradeTest.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) BalanceOf(opts *bind.CallOpts, _addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.BalanceOf(&_AutonityUpgradeTest.CallOpts, _addr)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.BalanceOf(&_AutonityUpgradeTest.CallOpts, _addr)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Config(opts *bind.CallOpts) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _AutonityUpgradeTest.Contract.Config(&_AutonityUpgradeTest.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _AutonityUpgradeTest.Contract.Config(&_AutonityUpgradeTest.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Decimals() (uint8, error) {
	return _AutonityUpgradeTest.Contract.Decimals(&_AutonityUpgradeTest.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Decimals() (uint8, error) {
	return _AutonityUpgradeTest.Contract.Decimals(&_AutonityUpgradeTest.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Deployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "deployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Deployer() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.Deployer(&_AutonityUpgradeTest.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Deployer() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.Deployer(&_AutonityUpgradeTest.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) EpochID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "epochID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) EpochID() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochID(&_AutonityUpgradeTest.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) EpochID() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochID(&_AutonityUpgradeTest.CallOpts)
}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) EpochReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "epochReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) EpochReward() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochReward(&_AutonityUpgradeTest.CallOpts)
}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) EpochReward() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochReward(&_AutonityUpgradeTest.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) EpochTotalBondedStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) EpochTotalBondedStake() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochTotalBondedStake(&_AutonityUpgradeTest.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) EpochTotalBondedStake() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochTotalBondedStake(&_AutonityUpgradeTest.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetBlockPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetBlockPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetBlockPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetBlockPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetBlockPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetCommittee(opts *bind.CallOpts) ([]AutonityCommitteeMember, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)

	return out0, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _AutonityUpgradeTest.Contract.GetCommittee(&_AutonityUpgradeTest.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _AutonityUpgradeTest.Contract.GetCommittee(&_AutonityUpgradeTest.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetCommitteeEnodes(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetCommitteeEnodes() ([]string, error) {
	return _AutonityUpgradeTest.Contract.GetCommitteeEnodes(&_AutonityUpgradeTest.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetCommitteeEnodes() ([]string, error) {
	return _AutonityUpgradeTest.Contract.GetCommitteeEnodes(&_AutonityUpgradeTest.CallOpts)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetEpochFromBlock(opts *bind.CallOpts, _block *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochFromBlock(&_AutonityUpgradeTest.CallOpts, _block)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochFromBlock(&_AutonityUpgradeTest.CallOpts, _block)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetLastEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetLastEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetLastEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetLastEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetLastEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetMaxCommitteeSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetMaxCommitteeSize() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMaxCommitteeSize(&_AutonityUpgradeTest.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetMaxCommitteeSize() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMaxCommitteeSize(&_AutonityUpgradeTest.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetMinimumBaseFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetMinimumBaseFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMinimumBaseFee(&_AutonityUpgradeTest.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetMinimumBaseFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMinimumBaseFee(&_AutonityUpgradeTest.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetNewContract() ([]byte, string, error) {
	return _AutonityUpgradeTest.Contract.GetNewContract(&_AutonityUpgradeTest.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetNewContract() ([]byte, string, error) {
	return _AutonityUpgradeTest.Contract.GetNewContract(&_AutonityUpgradeTest.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetOperator() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOperator(&_AutonityUpgradeTest.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetOperator() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOperator(&_AutonityUpgradeTest.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetOracle() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOracle(&_AutonityUpgradeTest.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetOracle() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOracle(&_AutonityUpgradeTest.CallOpts)
}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetProposer(opts *bind.CallOpts, height *big.Int, round *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getProposer", height, round)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetProposer(height *big.Int, round *big.Int) (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetProposer(&_AutonityUpgradeTest.CallOpts, height, round)
}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetProposer(height *big.Int, round *big.Int) (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetProposer(&_AutonityUpgradeTest.CallOpts, height, round)
}

// GetRevertingAmount is a free data retrieval call binding the contract method 0xb6ef8c67.
//
// Solidity: function getRevertingAmount(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetRevertingAmount(opts *bind.CallOpts, _unbondingID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getRevertingAmount", _unbondingID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRevertingAmount is a free data retrieval call binding the contract method 0xb6ef8c67.
//
// Solidity: function getRevertingAmount(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetRevertingAmount(_unbondingID *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetRevertingAmount(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// GetRevertingAmount is a free data retrieval call binding the contract method 0xb6ef8c67.
//
// Solidity: function getRevertingAmount(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetRevertingAmount(_unbondingID *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetRevertingAmount(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetTreasuryAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetTreasuryAccount() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryAccount(&_AutonityUpgradeTest.CallOpts)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetTreasuryAccount() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryAccount(&_AutonityUpgradeTest.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetTreasuryFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetTreasuryFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryFee(&_AutonityUpgradeTest.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetTreasuryFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryFee(&_AutonityUpgradeTest.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetUnbondingPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetUnbondingPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetUnbondingPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetUnbondingReleaseState is a free data retrieval call binding the contract method 0xa9af1059.
//
// Solidity: function getUnbondingReleaseState(uint256 _unbondingID) view returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetUnbondingReleaseState(opts *bind.CallOpts, _unbondingID *big.Int) (uint8, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getUnbondingReleaseState", _unbondingID)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetUnbondingReleaseState is a free data retrieval call binding the contract method 0xa9af1059.
//
// Solidity: function getUnbondingReleaseState(uint256 _unbondingID) view returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetUnbondingReleaseState(_unbondingID *big.Int) (uint8, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingReleaseState(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// GetUnbondingReleaseState is a free data retrieval call binding the contract method 0xa9af1059.
//
// Solidity: function getUnbondingReleaseState(uint256 _unbondingID) view returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetUnbondingReleaseState(_unbondingID *big.Int) (uint8, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingReleaseState(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetValidator(opts *bind.CallOpts, _addr common.Address) (AutonityValidator, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _AutonityUpgradeTest.Contract.GetValidator(&_AutonityUpgradeTest.CallOpts, _addr)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _AutonityUpgradeTest.Contract.GetValidator(&_AutonityUpgradeTest.CallOpts, _addr)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetValidators() ([]common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetValidators(&_AutonityUpgradeTest.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetValidators() ([]common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetValidators(&_AutonityUpgradeTest.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetVersion() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetVersion(&_AutonityUpgradeTest.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetVersion() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetVersion(&_AutonityUpgradeTest.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) InflationReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "inflationReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) InflationReserve() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.InflationReserve(&_AutonityUpgradeTest.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) InflationReserve() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.InflationReserve(&_AutonityUpgradeTest.CallOpts)
}

// LastEpochBlock is a free data retrieval call binding the contract method 0xc2362dd5.
//
// Solidity: function lastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) LastEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "lastEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastEpochBlock is a free data retrieval call binding the contract method 0xc2362dd5.
//
// Solidity: function lastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) LastEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// LastEpochBlock is a free data retrieval call binding the contract method 0xc2362dd5.
//
// Solidity: function lastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) LastEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) LastEpochTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) LastEpochTime() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastEpochTime(&_AutonityUpgradeTest.CallOpts)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) LastEpochTime() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastEpochTime(&_AutonityUpgradeTest.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) LiquidLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) LiquidLogicContract() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.LiquidLogicContract(&_AutonityUpgradeTest.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) LiquidLogicContract() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.LiquidLogicContract(&_AutonityUpgradeTest.CallOpts)
}

// MaxBondAppliedGas is a free data retrieval call binding the contract method 0xcef98450.
//
// Solidity: function maxBondAppliedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) MaxBondAppliedGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "maxBondAppliedGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxBondAppliedGas is a free data retrieval call binding the contract method 0xcef98450.
//
// Solidity: function maxBondAppliedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) MaxBondAppliedGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxBondAppliedGas(&_AutonityUpgradeTest.CallOpts)
}

// MaxBondAppliedGas is a free data retrieval call binding the contract method 0xcef98450.
//
// Solidity: function maxBondAppliedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) MaxBondAppliedGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxBondAppliedGas(&_AutonityUpgradeTest.CallOpts)
}

// MaxRewardsDistributionGas is a free data retrieval call binding the contract method 0x5bdedd16.
//
// Solidity: function maxRewardsDistributionGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) MaxRewardsDistributionGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "maxRewardsDistributionGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxRewardsDistributionGas is a free data retrieval call binding the contract method 0x5bdedd16.
//
// Solidity: function maxRewardsDistributionGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) MaxRewardsDistributionGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxRewardsDistributionGas(&_AutonityUpgradeTest.CallOpts)
}

// MaxRewardsDistributionGas is a free data retrieval call binding the contract method 0x5bdedd16.
//
// Solidity: function maxRewardsDistributionGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) MaxRewardsDistributionGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxRewardsDistributionGas(&_AutonityUpgradeTest.CallOpts)
}

// MaxUnbondAppliedGas is a free data retrieval call binding the contract method 0x386a827b.
//
// Solidity: function maxUnbondAppliedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) MaxUnbondAppliedGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "maxUnbondAppliedGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxUnbondAppliedGas is a free data retrieval call binding the contract method 0x386a827b.
//
// Solidity: function maxUnbondAppliedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) MaxUnbondAppliedGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxUnbondAppliedGas(&_AutonityUpgradeTest.CallOpts)
}

// MaxUnbondAppliedGas is a free data retrieval call binding the contract method 0x386a827b.
//
// Solidity: function maxUnbondAppliedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) MaxUnbondAppliedGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxUnbondAppliedGas(&_AutonityUpgradeTest.CallOpts)
}

// MaxUnbondReleasedGas is a free data retrieval call binding the contract method 0x71d1bc59.
//
// Solidity: function maxUnbondReleasedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) MaxUnbondReleasedGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "maxUnbondReleasedGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxUnbondReleasedGas is a free data retrieval call binding the contract method 0x71d1bc59.
//
// Solidity: function maxUnbondReleasedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) MaxUnbondReleasedGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxUnbondReleasedGas(&_AutonityUpgradeTest.CallOpts)
}

// MaxUnbondReleasedGas is a free data retrieval call binding the contract method 0x71d1bc59.
//
// Solidity: function maxUnbondReleasedGas() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) MaxUnbondReleasedGas() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.MaxUnbondReleasedGas(&_AutonityUpgradeTest.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Name() (string, error) {
	return _AutonityUpgradeTest.Contract.Name(&_AutonityUpgradeTest.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Name() (string, error) {
	return _AutonityUpgradeTest.Contract.Name(&_AutonityUpgradeTest.CallOpts)
}

// StakingGasPrice is a free data retrieval call binding the contract method 0x6bb9cb0e.
//
// Solidity: function stakingGasPrice() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) StakingGasPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "stakingGasPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakingGasPrice is a free data retrieval call binding the contract method 0x6bb9cb0e.
//
// Solidity: function stakingGasPrice() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) StakingGasPrice() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.StakingGasPrice(&_AutonityUpgradeTest.CallOpts)
}

// StakingGasPrice is a free data retrieval call binding the contract method 0x6bb9cb0e.
//
// Solidity: function stakingGasPrice() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) StakingGasPrice() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.StakingGasPrice(&_AutonityUpgradeTest.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Symbol() (string, error) {
	return _AutonityUpgradeTest.Contract.Symbol(&_AutonityUpgradeTest.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Symbol() (string, error) {
	return _AutonityUpgradeTest.Contract.Symbol(&_AutonityUpgradeTest.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) TotalSupply() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.TotalSupply(&_AutonityUpgradeTest.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) TotalSupply() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.TotalSupply(&_AutonityUpgradeTest.CallOpts)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetLiquidLogicContract(opts *bind.TransactOpts, _contract common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "SetLiquidLogicContract", _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetLiquidLogicContract(&_AutonityUpgradeTest.TransactOpts, _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetLiquidLogicContract(&_AutonityUpgradeTest.TransactOpts, _contract)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ActivateValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "activateValidator", _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ActivateValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ActivateValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Approve(&_AutonityUpgradeTest.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Approve(&_AutonityUpgradeTest.TransactOpts, spender, amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) payable returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Bond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "bond", _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) payable returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Bond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) payable returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Bond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Burn(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "burn", _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Burn(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Burn(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ChangeCommissionRate(opts *bind.TransactOpts, _validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "changeCommissionRate", _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ChangeCommissionRate(&_AutonityUpgradeTest.TransactOpts, _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ChangeCommissionRate(&_AutonityUpgradeTest.TransactOpts, _validator, _rate)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.CompleteContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.CompleteContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ComputeCommittee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "computeCommittee")
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ComputeCommittee() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ComputeCommittee(&_AutonityUpgradeTest.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ComputeCommittee() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ComputeCommittee(&_AutonityUpgradeTest.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, (address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, (address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Finalize() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Finalize(&_AutonityUpgradeTest.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, (address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Finalize() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Finalize(&_AutonityUpgradeTest.TransactOpts)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) FinalizeInitialization(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "finalizeInitialization")
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) FinalizeInitialization() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.FinalizeInitialization(&_AutonityUpgradeTest.TransactOpts)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) FinalizeInitialization() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.FinalizeInitialization(&_AutonityUpgradeTest.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Mint(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "mint", _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Mint(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Mint(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) PauseValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "pauseValidator", _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.PauseValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.PauseValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ReceiveATN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "receiveATN")
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ReceiveATN() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ReceiveATN(&_AutonityUpgradeTest.TransactOpts)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ReceiveATN() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ReceiveATN(&_AutonityUpgradeTest.TransactOpts)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) RegisterValidator(opts *bind.TransactOpts, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.RegisterValidator(&_AutonityUpgradeTest.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.RegisterValidator(&_AutonityUpgradeTest.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ResetContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ResetContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetAccountabilityContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setAccountabilityContract", _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAccountabilityContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAccountabilityContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetAcuContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setAcuContract", _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAcuContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAcuContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetCommitteeSize(opts *bind.TransactOpts, _size *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setCommitteeSize", _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetCommitteeSize(&_AutonityUpgradeTest.TransactOpts, _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetCommitteeSize(&_AutonityUpgradeTest.TransactOpts, _size)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetEpochPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setEpochPeriod", _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetEpochPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetEpochPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetInflationControllerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setInflationControllerContract", _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetInflationControllerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetInflationControllerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetMaxBondAppliedGas is a paid mutator transaction binding the contract method 0x0fe50109.
//
// Solidity: function setMaxBondAppliedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetMaxBondAppliedGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setMaxBondAppliedGas", _gas)
}

// SetMaxBondAppliedGas is a paid mutator transaction binding the contract method 0x0fe50109.
//
// Solidity: function setMaxBondAppliedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetMaxBondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxBondAppliedGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMaxBondAppliedGas is a paid mutator transaction binding the contract method 0x0fe50109.
//
// Solidity: function setMaxBondAppliedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetMaxBondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxBondAppliedGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMaxRewardsDistributionGas is a paid mutator transaction binding the contract method 0x7e660ac9.
//
// Solidity: function setMaxRewardsDistributionGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetMaxRewardsDistributionGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setMaxRewardsDistributionGas", _gas)
}

// SetMaxRewardsDistributionGas is a paid mutator transaction binding the contract method 0x7e660ac9.
//
// Solidity: function setMaxRewardsDistributionGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetMaxRewardsDistributionGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxRewardsDistributionGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMaxRewardsDistributionGas is a paid mutator transaction binding the contract method 0x7e660ac9.
//
// Solidity: function setMaxRewardsDistributionGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetMaxRewardsDistributionGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxRewardsDistributionGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMaxUnbondAppliedGas is a paid mutator transaction binding the contract method 0x0b21fb1d.
//
// Solidity: function setMaxUnbondAppliedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetMaxUnbondAppliedGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setMaxUnbondAppliedGas", _gas)
}

// SetMaxUnbondAppliedGas is a paid mutator transaction binding the contract method 0x0b21fb1d.
//
// Solidity: function setMaxUnbondAppliedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetMaxUnbondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxUnbondAppliedGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMaxUnbondAppliedGas is a paid mutator transaction binding the contract method 0x0b21fb1d.
//
// Solidity: function setMaxUnbondAppliedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetMaxUnbondAppliedGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxUnbondAppliedGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMaxUnbondReleasedGas is a paid mutator transaction binding the contract method 0xee7ff28d.
//
// Solidity: function setMaxUnbondReleasedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetMaxUnbondReleasedGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setMaxUnbondReleasedGas", _gas)
}

// SetMaxUnbondReleasedGas is a paid mutator transaction binding the contract method 0xee7ff28d.
//
// Solidity: function setMaxUnbondReleasedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetMaxUnbondReleasedGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxUnbondReleasedGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMaxUnbondReleasedGas is a paid mutator transaction binding the contract method 0xee7ff28d.
//
// Solidity: function setMaxUnbondReleasedGas(uint256 _gas) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetMaxUnbondReleasedGas(_gas *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxUnbondReleasedGas(&_AutonityUpgradeTest.TransactOpts, _gas)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetMinimumBaseFee(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setMinimumBaseFee", _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMinimumBaseFee(&_AutonityUpgradeTest.TransactOpts, _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMinimumBaseFee(&_AutonityUpgradeTest.TransactOpts, _price)
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetNonStakableVestingContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setNonStakableVestingContract", _address)
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetNonStakableVestingContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetNonStakableVestingContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetNonStakableVestingContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetNonStakableVestingContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetOperatorAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setOperatorAccount", _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOperatorAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOperatorAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetOracleContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setOracleContract", _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOracleContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOracleContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetStabilizationContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setStabilizationContract", _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetStabilizationContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetStabilizationContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetStakingGasPrice is a paid mutator transaction binding the contract method 0x6a929cef.
//
// Solidity: function setStakingGasPrice(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetStakingGasPrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setStakingGasPrice", _price)
}

// SetStakingGasPrice is a paid mutator transaction binding the contract method 0x6a929cef.
//
// Solidity: function setStakingGasPrice(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetStakingGasPrice(_price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetStakingGasPrice(&_AutonityUpgradeTest.TransactOpts, _price)
}

// SetStakingGasPrice is a paid mutator transaction binding the contract method 0x6a929cef.
//
// Solidity: function setStakingGasPrice(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetStakingGasPrice(_price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetStakingGasPrice(&_AutonityUpgradeTest.TransactOpts, _price)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetSupplyControlContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setSupplyControlContract", _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetSupplyControlContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetSupplyControlContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetTreasuryAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setTreasuryAccount", _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetTreasuryFee(opts *bind.TransactOpts, _treasuryFee *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setTreasuryFee", _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryFee(&_AutonityUpgradeTest.TransactOpts, _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryFee(&_AutonityUpgradeTest.TransactOpts, _treasuryFee)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetUnbondingPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setUnbondingPeriod", _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUnbondingPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUnbondingPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetUpgradeManagerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setUpgradeManagerContract", _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUpgradeManagerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUpgradeManagerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Transfer(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "transfer", _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Transfer(&_AutonityUpgradeTest.TransactOpts, _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Transfer(&_AutonityUpgradeTest.TransactOpts, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) TransferFrom(opts *bind.TransactOpts, _sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "transferFrom", _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.TransferFrom(&_AutonityUpgradeTest.TransactOpts, _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.TransferFrom(&_AutonityUpgradeTest.TransactOpts, _sender, _recipient, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) payable returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Unbond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "unbond", _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) payable returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Unbond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) payable returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Unbond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) UpdateEnode(opts *bind.TransactOpts, _nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "updateEnode", _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpdateEnode(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpdateEnode(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _enode)
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) UpdateValidatorAndTransferSlashedFunds(opts *bind.TransactOpts, _val AutonityValidator) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "updateValidatorAndTransferSlashedFunds", _val)
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) UpdateValidatorAndTransferSlashedFunds(_val AutonityValidator) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpdateValidatorAndTransferSlashedFunds(&_AutonityUpgradeTest.TransactOpts, _val)
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) UpdateValidatorAndTransferSlashedFunds(_val AutonityValidator) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpdateValidatorAndTransferSlashedFunds(&_AutonityUpgradeTest.TransactOpts, _val)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpgradeContract(&_AutonityUpgradeTest.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpgradeContract(&_AutonityUpgradeTest.TransactOpts, _bytecode, _abi)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Fallback(&_AutonityUpgradeTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Fallback(&_AutonityUpgradeTest.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Receive() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Receive(&_AutonityUpgradeTest.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Receive() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Receive(&_AutonityUpgradeTest.TransactOpts)
}

// AutonityUpgradeTestActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestActivatedValidatorIterator struct {
	Event *AutonityUpgradeTestActivatedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestActivatedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestActivatedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestActivatedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestActivatedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestActivatedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestActivatedValidator represents a ActivatedValidator event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestActivatedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestActivatedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestActivatedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
}

// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestActivatedValidator)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseActivatedValidator(log types.Log) (*AutonityUpgradeTestActivatedValidator, error) {
	event := new(AutonityUpgradeTestActivatedValidator)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestAppliedUnbondingRevertedIterator is returned from FilterAppliedUnbondingReverted and is used to iterate over the raw logs and unpacked data for AppliedUnbondingReverted events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestAppliedUnbondingRevertedIterator struct {
	Event *AutonityUpgradeTestAppliedUnbondingReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestAppliedUnbondingRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestAppliedUnbondingReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestAppliedUnbondingReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestAppliedUnbondingRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestAppliedUnbondingRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestAppliedUnbondingReverted represents a AppliedUnbondingReverted event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestAppliedUnbondingReverted struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAppliedUnbondingReverted is a free log retrieval operation binding the contract event 0x52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c.
//
// Solidity: event AppliedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterAppliedUnbondingReverted(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestAppliedUnbondingRevertedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "AppliedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestAppliedUnbondingRevertedIterator{contract: _AutonityUpgradeTest.contract, event: "AppliedUnbondingReverted", logs: logs, sub: sub}, nil
}

// WatchAppliedUnbondingReverted is a free log subscription operation binding the contract event 0x52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c.
//
// Solidity: event AppliedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchAppliedUnbondingReverted(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestAppliedUnbondingReverted, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "AppliedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestAppliedUnbondingReverted)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "AppliedUnbondingReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAppliedUnbondingReverted is a log parse operation binding the contract event 0x52c1b482483796c697edd43958bc63e332069083ea38782d960693145db2cf0c.
//
// Solidity: event AppliedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseAppliedUnbondingReverted(log types.Log) (*AutonityUpgradeTestAppliedUnbondingReverted, error) {
	event := new(AutonityUpgradeTestAppliedUnbondingReverted)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "AppliedUnbondingReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestApprovalIterator struct {
	Event *AutonityUpgradeTestApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestApproval represents a Approval event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityUpgradeTestApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestApprovalIterator{contract: _AutonityUpgradeTest.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestApproval)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseApproval(log types.Log) (*AutonityUpgradeTestApproval, error) {
	event := new(AutonityUpgradeTestApproval)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBondingRejectedIterator struct {
	Event *AutonityUpgradeTestBondingRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestBondingRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestBondingRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestBondingRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestBondingRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestBondingRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestBondingRejected represents a BondingRejected event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBondingRejected struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	State     uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestBondingRejectedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestBondingRejectedIterator{contract: _AutonityUpgradeTest.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
}

// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestBondingRejected)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseBondingRejected(log types.Log) (*AutonityUpgradeTestBondingRejected, error) {
	event := new(AutonityUpgradeTestBondingRejected)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestBondingRevertedIterator is returned from FilterBondingReverted and is used to iterate over the raw logs and unpacked data for BondingReverted events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBondingRevertedIterator struct {
	Event *AutonityUpgradeTestBondingReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestBondingRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestBondingReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestBondingReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestBondingRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestBondingRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestBondingReverted represents a BondingReverted event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBondingReverted struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBondingReverted is a free log retrieval operation binding the contract event 0x2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d90.
//
// Solidity: event BondingReverted(address indexed validator, address indexed delegator, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterBondingReverted(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestBondingRevertedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestBondingRevertedIterator{contract: _AutonityUpgradeTest.contract, event: "BondingReverted", logs: logs, sub: sub}, nil
}

// WatchBondingReverted is a free log subscription operation binding the contract event 0x2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d90.
//
// Solidity: event BondingReverted(address indexed validator, address indexed delegator, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchBondingReverted(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBondingReverted, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestBondingReverted)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondingReverted is a log parse operation binding the contract event 0x2d2530c45d577d38d6fc598e41ade6fb0bfbde20d09244c88348d3a2797a9d90.
//
// Solidity: event BondingReverted(address indexed validator, address indexed delegator, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseBondingReverted(log types.Log) (*AutonityUpgradeTestBondingReverted, error) {
	event := new(AutonityUpgradeTestBondingReverted)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBurnedStakeIterator struct {
	Event *AutonityUpgradeTestBurnedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestBurnedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestBurnedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestBurnedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestBurnedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestBurnedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestBurnedStake represents a BurnedStake event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBurnedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestBurnedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestBurnedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
}

// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBurnedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestBurnedStake)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseBurnedStake(log types.Log) (*AutonityUpgradeTestBurnedStake, error) {
	event := new(AutonityUpgradeTestBurnedStake)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCallFailedIterator struct {
	Event *AutonityUpgradeTestCallFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestCallFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestCallFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestCallFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestCallFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestCallFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestCallFailed represents a CallFailed event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCallFailed struct {
	To              common.Address
	MethodSignature string
	ReturnData      []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterCallFailed(opts *bind.FilterOpts) (*AutonityUpgradeTestCallFailedIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestCallFailedIterator{contract: _AutonityUpgradeTest.contract, event: "CallFailed", logs: logs, sub: sub}, nil
}

// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCallFailed) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestCallFailed)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseCallFailed(log types.Log) (*AutonityUpgradeTestCallFailed, error) {
	event := new(AutonityUpgradeTestCallFailed)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCommissionRateChangeIterator struct {
	Event *AutonityUpgradeTestCommissionRateChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestCommissionRateChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestCommissionRateChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestCommissionRateChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestCommissionRateChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestCommissionRateChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestCommissionRateChange represents a CommissionRateChange event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCommissionRateChange struct {
	Validator common.Address
	Rate      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityUpgradeTestCommissionRateChangeIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestCommissionRateChangeIterator{contract: _AutonityUpgradeTest.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
}

// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCommissionRateChange, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestCommissionRateChange)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseCommissionRateChange(log types.Log) (*AutonityUpgradeTestCommissionRateChange, error) {
	event := new(AutonityUpgradeTestCommissionRateChange)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestEpochPeriodUpdatedIterator struct {
	Event *AutonityUpgradeTestEpochPeriodUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestEpochPeriodUpdated struct {
	Period *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0xd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81.
//
// Solidity: event EpochPeriodUpdated(uint256 period)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestEpochPeriodUpdatedIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestEpochPeriodUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
}

// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0xd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81.
//
// Solidity: event EpochPeriodUpdated(uint256 period)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestEpochPeriodUpdated) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestEpochPeriodUpdated)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0xd7f1279ded354dbf22a69fcc2fd661763a6e2956a5d2891af9410af880fa5f81.
//
// Solidity: event EpochPeriodUpdated(uint256 period)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseEpochPeriodUpdated(log types.Log) (*AutonityUpgradeTestEpochPeriodUpdated, error) {
	event := new(AutonityUpgradeTestEpochPeriodUpdated)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMinimumBaseFeeUpdatedIterator struct {
	Event *AutonityUpgradeTestMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMinimumBaseFeeUpdated struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestMinimumBaseFeeUpdatedIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestMinimumBaseFeeUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMinimumBaseFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityUpgradeTestMinimumBaseFeeUpdated, error) {
	event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMintedStakeIterator struct {
	Event *AutonityUpgradeTestMintedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestMintedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestMintedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestMintedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestMintedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestMintedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestMintedStake represents a MintedStake event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMintedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestMintedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestMintedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "MintedStake", logs: logs, sub: sub}, nil
}

// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMintedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestMintedStake)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseMintedStake(log types.Log) (*AutonityUpgradeTestMintedStake, error) {
	event := new(AutonityUpgradeTestMintedStake)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewBondingRequestIterator struct {
	Event *AutonityUpgradeTestNewBondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestNewBondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestNewBondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestNewBondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestNewBondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestNewBondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestNewBondingRequest represents a NewBondingRequest event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewBondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewBondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestNewBondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestNewBondingRequest)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseNewBondingRequest(log types.Log) (*AutonityUpgradeTestNewBondingRequest, error) {
	event := new(AutonityUpgradeTestNewBondingRequest)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewEpochIterator struct {
	Event *AutonityUpgradeTestNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestNewEpoch represents a NewEpoch event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewEpoch struct {
	Epoch *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityUpgradeTestNewEpochIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestNewEpochIterator{contract: _AutonityUpgradeTest.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewEpoch) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestNewEpoch)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseNewEpoch(log types.Log) (*AutonityUpgradeTestNewEpoch, error) {
	event := new(AutonityUpgradeTestNewEpoch)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewUnbondingRequestIterator struct {
	Event *AutonityUpgradeTestNewUnbondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestNewUnbondingRequest represents a NewUnbondingRequest event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewUnbondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewUnbondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestNewUnbondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestNewUnbondingRequest)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseNewUnbondingRequest(log types.Log) (*AutonityUpgradeTestNewUnbondingRequest, error) {
	event := new(AutonityUpgradeTestNewUnbondingRequest)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestPausedValidatorIterator struct {
	Event *AutonityUpgradeTestPausedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestPausedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestPausedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestPausedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestPausedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestPausedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestPausedValidator represents a PausedValidator event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestPausedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestPausedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestPausedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
}

// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestPausedValidator)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParsePausedValidator(log types.Log) (*AutonityUpgradeTestPausedValidator, error) {
	event := new(AutonityUpgradeTestPausedValidator)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRegisteredValidatorIterator struct {
	Event *AutonityUpgradeTestRegisteredValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestRegisteredValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestRegisteredValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestRegisteredValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestRegisteredValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestRegisteredValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestRegisteredValidator represents a RegisteredValidator event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRegisteredValidator struct {
	Treasury            common.Address
	Addr                common.Address
	OracleAddress       common.Address
	Enode               string
	LiquidStateContract common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityUpgradeTestRegisteredValidatorIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestRegisteredValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
}

// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRegisteredValidator) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestRegisteredValidator)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseRegisteredValidator(log types.Log) (*AutonityUpgradeTestRegisteredValidator, error) {
	event := new(AutonityUpgradeTestRegisteredValidator)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestReleasedUnbondingRevertedIterator is returned from FilterReleasedUnbondingReverted and is used to iterate over the raw logs and unpacked data for ReleasedUnbondingReverted events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestReleasedUnbondingRevertedIterator struct {
	Event *AutonityUpgradeTestReleasedUnbondingReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestReleasedUnbondingRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestReleasedUnbondingReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestReleasedUnbondingReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestReleasedUnbondingRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestReleasedUnbondingRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestReleasedUnbondingReverted represents a ReleasedUnbondingReverted event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestReleasedUnbondingReverted struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterReleasedUnbondingReverted is a free log retrieval operation binding the contract event 0x0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc.
//
// Solidity: event ReleasedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterReleasedUnbondingReverted(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestReleasedUnbondingRevertedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "ReleasedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestReleasedUnbondingRevertedIterator{contract: _AutonityUpgradeTest.contract, event: "ReleasedUnbondingReverted", logs: logs, sub: sub}, nil
}

// WatchReleasedUnbondingReverted is a free log subscription operation binding the contract event 0x0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc.
//
// Solidity: event ReleasedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchReleasedUnbondingReverted(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestReleasedUnbondingReverted, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "ReleasedUnbondingReverted", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestReleasedUnbondingReverted)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ReleasedUnbondingReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleasedUnbondingReverted is a log parse operation binding the contract event 0x0a4bfc4c4e35975ab1fe5fd21d963e8bb8d483f04aebdbc0a059b246bec3f5fc.
//
// Solidity: event ReleasedUnbondingReverted(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseReleasedUnbondingReverted(log types.Log) (*AutonityUpgradeTestReleasedUnbondingReverted, error) {
	event := new(AutonityUpgradeTestReleasedUnbondingReverted)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ReleasedUnbondingReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRewardedIterator struct {
	Event *AutonityUpgradeTestRewarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestRewardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestRewarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestRewarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestRewardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestRewardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestRewarded represents a Rewarded event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRewarded struct {
	Addr      common.Address
	AtnAmount *big.Int
	NtnAmount *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestRewardedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestRewardedIterator{contract: _AutonityUpgradeTest.contract, event: "Rewarded", logs: logs, sub: sub}, nil
}

// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRewarded, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestRewarded)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseRewarded(log types.Log) (*AutonityUpgradeTestRewarded, error) {
	event := new(AutonityUpgradeTestRewarded)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestTransferIterator struct {
	Event *AutonityUpgradeTestTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestTransfer represents a Transfer event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityUpgradeTestTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestTransferIterator{contract: _AutonityUpgradeTest.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestTransfer)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseTransfer(log types.Log) (*AutonityUpgradeTestTransfer, error) {
	event := new(AutonityUpgradeTestTransfer)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestUnbondingRejectedIterator is returned from FilterUnbondingRejected and is used to iterate over the raw logs and unpacked data for UnbondingRejected events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestUnbondingRejectedIterator struct {
	Event *AutonityUpgradeTestUnbondingRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestUnbondingRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestUnbondingRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestUnbondingRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestUnbondingRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestUnbondingRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestUnbondingRejected represents a UnbondingRejected event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestUnbondingRejected struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUnbondingRejected is a free log retrieval operation binding the contract event 0xec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866.
//
// Solidity: event UnbondingRejected(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterUnbondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestUnbondingRejectedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "UnbondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestUnbondingRejectedIterator{contract: _AutonityUpgradeTest.contract, event: "UnbondingRejected", logs: logs, sub: sub}, nil
}

// WatchUnbondingRejected is a free log subscription operation binding the contract event 0xec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866.
//
// Solidity: event UnbondingRejected(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchUnbondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestUnbondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "UnbondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestUnbondingRejected)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "UnbondingRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingRejected is a log parse operation binding the contract event 0xec3ccfdbfc982a0ea188f4fd85459da1d6a7b332ddc4ca6b7a774c1abfc75866.
//
// Solidity: event UnbondingRejected(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseUnbondingRejected(log types.Log) (*AutonityUpgradeTestUnbondingRejected, error) {
	event := new(AutonityUpgradeTestUnbondingRejected)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "UnbondingRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestUnlockingScheduleFailedIterator is returned from FilterUnlockingScheduleFailed and is used to iterate over the raw logs and unpacked data for UnlockingScheduleFailed events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestUnlockingScheduleFailedIterator struct {
	Event *AutonityUpgradeTestUnlockingScheduleFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestUnlockingScheduleFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestUnlockingScheduleFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestUnlockingScheduleFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestUnlockingScheduleFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestUnlockingScheduleFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestUnlockingScheduleFailed represents a UnlockingScheduleFailed event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestUnlockingScheduleFailed struct {
	EpochTime *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUnlockingScheduleFailed is a free log retrieval operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
//
// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterUnlockingScheduleFailed(opts *bind.FilterOpts) (*AutonityUpgradeTestUnlockingScheduleFailedIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "UnlockingScheduleFailed")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestUnlockingScheduleFailedIterator{contract: _AutonityUpgradeTest.contract, event: "UnlockingScheduleFailed", logs: logs, sub: sub}, nil
}

// WatchUnlockingScheduleFailed is a free log subscription operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
//
// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchUnlockingScheduleFailed(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestUnlockingScheduleFailed) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "UnlockingScheduleFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestUnlockingScheduleFailed)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockingScheduleFailed is a log parse operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
//
// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseUnlockingScheduleFailed(log types.Log) (*AutonityUpgradeTestUnlockingScheduleFailed, error) {
	event := new(AutonityUpgradeTestUnlockingScheduleFailed)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BytesLibMetaData contains all meta data concerning the BytesLib contract.
var BytesLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220831cbf1d093207c822ca0bb8903ee29676712d9a6abe4b340d9c5562c8a851e464736f6c63430008150033",
}

// BytesLibABI is the input ABI used to generate the binding from.
// Deprecated: Use BytesLibMetaData.ABI instead.
var BytesLibABI = BytesLibMetaData.ABI

// BytesLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BytesLibMetaData.Bin instead.
var BytesLibBin = BytesLibMetaData.Bin

// DeployBytesLib deploys a new Ethereum contract, binding an instance of BytesLib to it.
func DeployBytesLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BytesLib, error) {
	parsed, err := BytesLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BytesLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BytesLib{BytesLibCaller: BytesLibCaller{contract: contract}, BytesLibTransactor: BytesLibTransactor{contract: contract}, BytesLibFilterer: BytesLibFilterer{contract: contract}}, nil
}

// BytesLib is an auto generated Go binding around an Ethereum contract.
type BytesLib struct {
	BytesLibCaller     // Read-only binding to the contract
	BytesLibTransactor // Write-only binding to the contract
	BytesLibFilterer   // Log filterer for contract events
}

// BytesLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type BytesLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BytesLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BytesLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BytesLibSession struct {
	Contract     *BytesLib         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BytesLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BytesLibCallerSession struct {
	Contract *BytesLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BytesLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BytesLibTransactorSession struct {
	Contract     *BytesLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BytesLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type BytesLibRaw struct {
	Contract *BytesLib // Generic contract binding to access the raw methods on
}

// BytesLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BytesLibCallerRaw struct {
	Contract *BytesLibCaller // Generic read-only contract binding to access the raw methods on
}

// BytesLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BytesLibTransactorRaw struct {
	Contract *BytesLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBytesLib creates a new instance of BytesLib, bound to a specific deployed contract.
func NewBytesLib(address common.Address, backend bind.ContractBackend) (*BytesLib, error) {
	contract, err := bindBytesLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BytesLib{BytesLibCaller: BytesLibCaller{contract: contract}, BytesLibTransactor: BytesLibTransactor{contract: contract}, BytesLibFilterer: BytesLibFilterer{contract: contract}}, nil
}

// NewBytesLibCaller creates a new read-only instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibCaller(address common.Address, caller bind.ContractCaller) (*BytesLibCaller, error) {
	contract, err := bindBytesLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BytesLibCaller{contract: contract}, nil
}

// NewBytesLibTransactor creates a new write-only instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibTransactor(address common.Address, transactor bind.ContractTransactor) (*BytesLibTransactor, error) {
	contract, err := bindBytesLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BytesLibTransactor{contract: contract}, nil
}

// NewBytesLibFilterer creates a new log filterer instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibFilterer(address common.Address, filterer bind.ContractFilterer) (*BytesLibFilterer, error) {
	contract, err := bindBytesLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BytesLibFilterer{contract: contract}, nil
}

// bindBytesLib binds a generic wrapper to an already deployed contract.
func bindBytesLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BytesLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BytesLib *BytesLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BytesLib.Contract.BytesLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BytesLib *BytesLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BytesLib.Contract.BytesLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BytesLib *BytesLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BytesLib.Contract.BytesLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BytesLib *BytesLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BytesLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BytesLib *BytesLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BytesLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BytesLib *BytesLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BytesLib.Contract.contract.Transact(opts, method, params...)
}

// ContractBaseMetaData contains all meta data concerning the ContractBase contract.
var ContractBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"2afbbacb": "canStake(address,uint256)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"635bf933": "totalContracts(address)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161067938038061067983398101604081905261002f91610078565b600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b6105b8806100c16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063213fe2b7146100515780632afbbacb1461007a578063635bf9331461009d578063aad55726146100d4575b600080fd5b61006461005f366004610419565b6100f4565b604051610071919061043b565b60405180910390f35b61008d6100883660046104c0565b610268565b6040519015158152602001610071565b6100c66100ab366004610419565b6001600160a01b031660009081526020819052604090205490565b604051908152602001610071565b6100e76100e23660046104c0565b6102a6565b60405161007191906104ea565b6001600160a01b038116600090815260208190526040812080546060929067ffffffffffffffff81111561012a5761012a61052f565b60405190808252806020026020018201604052801561019657816020015b6101836040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816101485790505b50905060005b81518110156102605760018382815481106101b9576101b9610545565b9060005260206000200154815481106101d4576101d4610545565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152825183908390811061024257610242610545565b602002602001018190525080806102589061055b565b91505061019c565b509392505050565b60006001610276848461035f565b8154811061028657610286610545565b600091825260209091206005600690920201015460ff1690505b92915050565b6102e16040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60016102ed848461035f565b815481106102fd576102fd610545565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b6001600160a01b03821660009081526020819052604081205482106103c05760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b604482015260640160405180910390fd5b6001600160a01b03831660009081526020819052604090208054839081106103ea576103ea610545565b9060005260206000200154905092915050565b80356001600160a01b038116811461041457600080fd5b919050565b60006020828403121561042b57600080fd5b610434826103fd565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156104b4576104a1838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c09290920191600101610457565b50909695505050505050565b600080604083850312156104d357600080fd5b6104dc836103fd565b946020939093013593505050565b60c081016102a08284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161057b57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122045adcd772e7795bf1f5231e841852cad53c458b0e6860a42300522d3da84ed5264736f6c63430008150033",
}

// ContractBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractBaseMetaData.ABI instead.
var ContractBaseABI = ContractBaseMetaData.ABI

// Deprecated: Use ContractBaseMetaData.Sigs instead.
// ContractBaseFuncSigs maps the 4-byte function signature to its string representation.
var ContractBaseFuncSigs = ContractBaseMetaData.Sigs

// ContractBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractBaseMetaData.Bin instead.
var ContractBaseBin = ContractBaseMetaData.Bin

// DeployContractBase deploys a new Ethereum contract, binding an instance of ContractBase to it.
func DeployContractBase(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _operator common.Address) (common.Address, *types.Transaction, *ContractBase, error) {
	parsed, err := ContractBaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBaseBin), backend, _autonity, _operator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractBase{ContractBaseCaller: ContractBaseCaller{contract: contract}, ContractBaseTransactor: ContractBaseTransactor{contract: contract}, ContractBaseFilterer: ContractBaseFilterer{contract: contract}}, nil
}

// ContractBase is an auto generated Go binding around an Ethereum contract.
type ContractBase struct {
	ContractBaseCaller     // Read-only binding to the contract
	ContractBaseTransactor // Write-only binding to the contract
	ContractBaseFilterer   // Log filterer for contract events
}

// ContractBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractBaseSession struct {
	Contract     *ContractBase     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractBaseCallerSession struct {
	Contract *ContractBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ContractBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractBaseTransactorSession struct {
	Contract     *ContractBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ContractBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractBaseRaw struct {
	Contract *ContractBase // Generic contract binding to access the raw methods on
}

// ContractBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractBaseCallerRaw struct {
	Contract *ContractBaseCaller // Generic read-only contract binding to access the raw methods on
}

// ContractBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractBaseTransactorRaw struct {
	Contract *ContractBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractBase creates a new instance of ContractBase, bound to a specific deployed contract.
func NewContractBase(address common.Address, backend bind.ContractBackend) (*ContractBase, error) {
	contract, err := bindContractBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractBase{ContractBaseCaller: ContractBaseCaller{contract: contract}, ContractBaseTransactor: ContractBaseTransactor{contract: contract}, ContractBaseFilterer: ContractBaseFilterer{contract: contract}}, nil
}

// NewContractBaseCaller creates a new read-only instance of ContractBase, bound to a specific deployed contract.
func NewContractBaseCaller(address common.Address, caller bind.ContractCaller) (*ContractBaseCaller, error) {
	contract, err := bindContractBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBaseCaller{contract: contract}, nil
}

// NewContractBaseTransactor creates a new write-only instance of ContractBase, bound to a specific deployed contract.
func NewContractBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractBaseTransactor, error) {
	contract, err := bindContractBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBaseTransactor{contract: contract}, nil
}

// NewContractBaseFilterer creates a new log filterer instance of ContractBase, bound to a specific deployed contract.
func NewContractBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractBaseFilterer, error) {
	contract, err := bindContractBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractBaseFilterer{contract: contract}, nil
}

// bindContractBase binds a generic wrapper to an already deployed contract.
func bindContractBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBase *ContractBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBase.Contract.ContractBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBase *ContractBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBase.Contract.ContractBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBase *ContractBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBase.Contract.ContractBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBase *ContractBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBase *ContractBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBase *ContractBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBase.Contract.contract.Transact(opts, method, params...)
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_ContractBase *ContractBaseCaller) CanStake(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (bool, error) {
	var out []interface{}
	err := _ContractBase.contract.Call(opts, &out, "canStake", _beneficiary, _id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_ContractBase *ContractBaseSession) CanStake(_beneficiary common.Address, _id *big.Int) (bool, error) {
	return _ContractBase.Contract.CanStake(&_ContractBase.CallOpts, _beneficiary, _id)
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_ContractBase *ContractBaseCallerSession) CanStake(_beneficiary common.Address, _id *big.Int) (bool, error) {
	return _ContractBase.Contract.CanStake(&_ContractBase.CallOpts, _beneficiary, _id)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_ContractBase *ContractBaseCaller) GetContract(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	var out []interface{}
	err := _ContractBase.contract.Call(opts, &out, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_ContractBase *ContractBaseSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _ContractBase.Contract.GetContract(&_ContractBase.CallOpts, _beneficiary, _id)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_ContractBase *ContractBaseCallerSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _ContractBase.Contract.GetContract(&_ContractBase.CallOpts, _beneficiary, _id)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_ContractBase *ContractBaseCaller) GetContracts(opts *bind.CallOpts, _beneficiary common.Address) ([]ContractBaseContract, error) {
	var out []interface{}
	err := _ContractBase.contract.Call(opts, &out, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)

	return out0, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_ContractBase *ContractBaseSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _ContractBase.Contract.GetContracts(&_ContractBase.CallOpts, _beneficiary)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_ContractBase *ContractBaseCallerSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _ContractBase.Contract.GetContracts(&_ContractBase.CallOpts, _beneficiary)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_ContractBase *ContractBaseCaller) TotalContracts(opts *bind.CallOpts, _beneficiary common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractBase.contract.Call(opts, &out, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_ContractBase *ContractBaseSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _ContractBase.Contract.TotalContracts(&_ContractBase.CallOpts, _beneficiary)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_ContractBase *ContractBaseCallerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _ContractBase.Contract.TotalContracts(&_ContractBase.CallOpts, _beneficiary)
}

// HelpersMetaData contains all meta data concerning the Helpers contract.
var HelpersMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f08ec662b3647da9f8d9adbbfb5ae571333af0be6a27cf20a23d7dccab133b1b64736f6c63430008150033",
}

// HelpersABI is the input ABI used to generate the binding from.
// Deprecated: Use HelpersMetaData.ABI instead.
var HelpersABI = HelpersMetaData.ABI

// HelpersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HelpersMetaData.Bin instead.
var HelpersBin = HelpersMetaData.Bin

// DeployHelpers deploys a new Ethereum contract, binding an instance of Helpers to it.
func DeployHelpers(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Helpers, error) {
	parsed, err := HelpersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HelpersBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// Helpers is an auto generated Go binding around an Ethereum contract.
type Helpers struct {
	HelpersCaller     // Read-only binding to the contract
	HelpersTransactor // Write-only binding to the contract
	HelpersFilterer   // Log filterer for contract events
}

// HelpersCaller is an auto generated read-only Go binding around an Ethereum contract.
type HelpersCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HelpersTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HelpersFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HelpersSession struct {
	Contract     *Helpers          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HelpersCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HelpersCallerSession struct {
	Contract *HelpersCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// HelpersTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HelpersTransactorSession struct {
	Contract     *HelpersTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// HelpersRaw is an auto generated low-level Go binding around an Ethereum contract.
type HelpersRaw struct {
	Contract *Helpers // Generic contract binding to access the raw methods on
}

// HelpersCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HelpersCallerRaw struct {
	Contract *HelpersCaller // Generic read-only contract binding to access the raw methods on
}

// HelpersTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HelpersTransactorRaw struct {
	Contract *HelpersTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHelpers creates a new instance of Helpers, bound to a specific deployed contract.
func NewHelpers(address common.Address, backend bind.ContractBackend) (*Helpers, error) {
	contract, err := bindHelpers(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// NewHelpersCaller creates a new read-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersCaller(address common.Address, caller bind.ContractCaller) (*HelpersCaller, error) {
	contract, err := bindHelpers(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersCaller{contract: contract}, nil
}

// NewHelpersTransactor creates a new write-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersTransactor(address common.Address, transactor bind.ContractTransactor) (*HelpersTransactor, error) {
	contract, err := bindHelpers(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersTransactor{contract: contract}, nil
}

// NewHelpersFilterer creates a new log filterer instance of Helpers, bound to a specific deployed contract.
func NewHelpersFilterer(address common.Address, filterer bind.ContractFilterer) (*HelpersFilterer, error) {
	contract, err := bindHelpers(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HelpersFilterer{contract: contract}, nil
}

// bindHelpers binds a generic wrapper to an already deployed contract.
func bindHelpers(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HelpersABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.HelpersCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transact(opts, method, params...)
}

// IACUMetaData contains all meta data concerning the IACU contract.
var IACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"a2e62045": "update()",
	},
}

// IACUABI is the input ABI used to generate the binding from.
// Deprecated: Use IACUMetaData.ABI instead.
var IACUABI = IACUMetaData.ABI

// Deprecated: Use IACUMetaData.Sigs instead.
// IACUFuncSigs maps the 4-byte function signature to its string representation.
var IACUFuncSigs = IACUMetaData.Sigs

// IACU is an auto generated Go binding around an Ethereum contract.
type IACU struct {
	IACUCaller     // Read-only binding to the contract
	IACUTransactor // Write-only binding to the contract
	IACUFilterer   // Log filterer for contract events
}

// IACUCaller is an auto generated read-only Go binding around an Ethereum contract.
type IACUCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IACUTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IACUTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IACUFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IACUFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IACUSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IACUSession struct {
	Contract     *IACU             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IACUCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IACUCallerSession struct {
	Contract *IACUCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IACUTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IACUTransactorSession struct {
	Contract     *IACUTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IACURaw is an auto generated low-level Go binding around an Ethereum contract.
type IACURaw struct {
	Contract *IACU // Generic contract binding to access the raw methods on
}

// IACUCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IACUCallerRaw struct {
	Contract *IACUCaller // Generic read-only contract binding to access the raw methods on
}

// IACUTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IACUTransactorRaw struct {
	Contract *IACUTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIACU creates a new instance of IACU, bound to a specific deployed contract.
func NewIACU(address common.Address, backend bind.ContractBackend) (*IACU, error) {
	contract, err := bindIACU(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IACU{IACUCaller: IACUCaller{contract: contract}, IACUTransactor: IACUTransactor{contract: contract}, IACUFilterer: IACUFilterer{contract: contract}}, nil
}

// NewIACUCaller creates a new read-only instance of IACU, bound to a specific deployed contract.
func NewIACUCaller(address common.Address, caller bind.ContractCaller) (*IACUCaller, error) {
	contract, err := bindIACU(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IACUCaller{contract: contract}, nil
}

// NewIACUTransactor creates a new write-only instance of IACU, bound to a specific deployed contract.
func NewIACUTransactor(address common.Address, transactor bind.ContractTransactor) (*IACUTransactor, error) {
	contract, err := bindIACU(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IACUTransactor{contract: contract}, nil
}

// NewIACUFilterer creates a new log filterer instance of IACU, bound to a specific deployed contract.
func NewIACUFilterer(address common.Address, filterer bind.ContractFilterer) (*IACUFilterer, error) {
	contract, err := bindIACU(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IACUFilterer{contract: contract}, nil
}

// bindIACU binds a generic wrapper to an already deployed contract.
func bindIACU(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IACUABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IACU *IACURaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IACU.Contract.IACUCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IACU *IACURaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IACU.Contract.IACUTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IACU *IACURaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IACU.Contract.IACUTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IACU *IACUCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IACU.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IACU *IACUTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IACU.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IACU *IACUTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IACU.Contract.contract.Transact(opts, method, params...)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACUTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _IACU.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACUSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOperator(&_IACU.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACUTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOperator(&_IACU.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACUTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _IACU.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACUSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOracle(&_IACU.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACUTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOracle(&_IACU.TransactOpts, oracle)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACUTransactor) Update(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IACU.contract.Transact(opts, "update")
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACUSession) Update() (*types.Transaction, error) {
	return _IACU.Contract.Update(&_IACU.TransactOpts)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACUTransactorSession) Update() (*types.Transaction, error) {
	return _IACU.Contract.Update(&_IACU.TransactOpts)
}

// IAccountabilityMetaData contains all meta data concerning the IAccountability contract.
var IAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a8031a1d": "distributeRewards(address,uint256)",
		"6c9789b0": "finalize(bool)",
		"6b5f444c": "setEpochPeriod(uint256)",
	},
}

// IAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAccountabilityMetaData.ABI instead.
var IAccountabilityABI = IAccountabilityMetaData.ABI

// Deprecated: Use IAccountabilityMetaData.Sigs instead.
// IAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var IAccountabilityFuncSigs = IAccountabilityMetaData.Sigs

// IAccountability is an auto generated Go binding around an Ethereum contract.
type IAccountability struct {
	IAccountabilityCaller     // Read-only binding to the contract
	IAccountabilityTransactor // Write-only binding to the contract
	IAccountabilityFilterer   // Log filterer for contract events
}

// IAccountabilityCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAccountabilityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccountabilityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAccountabilityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccountabilityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAccountabilityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccountabilitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAccountabilitySession struct {
	Contract     *IAccountability  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAccountabilityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAccountabilityCallerSession struct {
	Contract *IAccountabilityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IAccountabilityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAccountabilityTransactorSession struct {
	Contract     *IAccountabilityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IAccountabilityRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAccountabilityRaw struct {
	Contract *IAccountability // Generic contract binding to access the raw methods on
}

// IAccountabilityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAccountabilityCallerRaw struct {
	Contract *IAccountabilityCaller // Generic read-only contract binding to access the raw methods on
}

// IAccountabilityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAccountabilityTransactorRaw struct {
	Contract *IAccountabilityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAccountability creates a new instance of IAccountability, bound to a specific deployed contract.
func NewIAccountability(address common.Address, backend bind.ContractBackend) (*IAccountability, error) {
	contract, err := bindIAccountability(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAccountability{IAccountabilityCaller: IAccountabilityCaller{contract: contract}, IAccountabilityTransactor: IAccountabilityTransactor{contract: contract}, IAccountabilityFilterer: IAccountabilityFilterer{contract: contract}}, nil
}

// NewIAccountabilityCaller creates a new read-only instance of IAccountability, bound to a specific deployed contract.
func NewIAccountabilityCaller(address common.Address, caller bind.ContractCaller) (*IAccountabilityCaller, error) {
	contract, err := bindIAccountability(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityCaller{contract: contract}, nil
}

// NewIAccountabilityTransactor creates a new write-only instance of IAccountability, bound to a specific deployed contract.
func NewIAccountabilityTransactor(address common.Address, transactor bind.ContractTransactor) (*IAccountabilityTransactor, error) {
	contract, err := bindIAccountability(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityTransactor{contract: contract}, nil
}

// NewIAccountabilityFilterer creates a new log filterer instance of IAccountability, bound to a specific deployed contract.
func NewIAccountabilityFilterer(address common.Address, filterer bind.ContractFilterer) (*IAccountabilityFilterer, error) {
	contract, err := bindIAccountability(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityFilterer{contract: contract}, nil
}

// bindIAccountability binds a generic wrapper to an already deployed contract.
func bindIAccountability(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IAccountabilityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccountability *IAccountabilityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccountability.Contract.IAccountabilityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccountability *IAccountabilityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccountability.Contract.IAccountabilityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccountability *IAccountabilityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccountability.Contract.IAccountabilityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccountability *IAccountabilityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccountability.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccountability *IAccountabilityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccountability.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccountability *IAccountabilityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccountability.Contract.contract.Transact(opts, method, params...)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountabilityTransactor) DistributeRewards(opts *bind.TransactOpts, _validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _IAccountability.contract.Transact(opts, "distributeRewards", _validator, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountabilitySession) DistributeRewards(_validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _IAccountability.Contract.DistributeRewards(&_IAccountability.TransactOpts, _validator, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountabilityTransactorSession) DistributeRewards(_validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _IAccountability.Contract.DistributeRewards(&_IAccountability.TransactOpts, _validator, _ntnReward)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountabilityTransactor) Finalize(opts *bind.TransactOpts, _epochEnd bool) (*types.Transaction, error) {
	return _IAccountability.contract.Transact(opts, "finalize", _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountabilitySession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _IAccountability.Contract.Finalize(&_IAccountability.TransactOpts, _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountabilityTransactorSession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _IAccountability.Contract.Finalize(&_IAccountability.TransactOpts, _epochEnd)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountabilityTransactor) SetEpochPeriod(opts *bind.TransactOpts, _newPeriod *big.Int) (*types.Transaction, error) {
	return _IAccountability.contract.Transact(opts, "setEpochPeriod", _newPeriod)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountabilitySession) SetEpochPeriod(_newPeriod *big.Int) (*types.Transaction, error) {
	return _IAccountability.Contract.SetEpochPeriod(&_IAccountability.TransactOpts, _newPeriod)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountabilityTransactorSession) SetEpochPeriod(_newPeriod *big.Int) (*types.Transaction, error) {
	return _IAccountability.Contract.SetEpochPeriod(&_IAccountability.TransactOpts, _newPeriod)
}

// IAccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the IAccountability contract.
type IAccountabilityInnocenceProvenIterator struct {
	Event *IAccountabilityInnocenceProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilityInnocenceProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilityInnocenceProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilityInnocenceProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilityInnocenceProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilityInnocenceProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilityInnocenceProven represents a InnocenceProven event raised by the IAccountability contract.
type IAccountabilityInnocenceProven struct {
	Offender common.Address
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityInnocenceProvenIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityInnocenceProvenIterator{contract: _IAccountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
}

// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *IAccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilityInnocenceProven)
				if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) ParseInnocenceProven(log types.Log) (*IAccountabilityInnocenceProven, error) {
	event := new(IAccountabilityInnocenceProven)
	if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the IAccountability contract.
type IAccountabilityNewAccusationIterator struct {
	Event *IAccountabilityNewAccusation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilityNewAccusationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilityNewAccusation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilityNewAccusation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilityNewAccusationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilityNewAccusationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilityNewAccusation represents a NewAccusation event raised by the IAccountability contract.
type IAccountabilityNewAccusation struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewAccusationIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityNewAccusationIterator{contract: _IAccountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
}

// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilityNewAccusation)
				if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) ParseNewAccusation(log types.Log) (*IAccountabilityNewAccusation, error) {
	event := new(IAccountabilityNewAccusation)
	if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the IAccountability contract.
type IAccountabilityNewFaultProofIterator struct {
	Event *IAccountabilityNewFaultProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilityNewFaultProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilityNewFaultProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilityNewFaultProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilityNewFaultProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilityNewFaultProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilityNewFaultProof represents a NewFaultProof event raised by the IAccountability contract.
type IAccountabilityNewFaultProof struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewFaultProofIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityNewFaultProofIterator{contract: _IAccountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
}

// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilityNewFaultProof)
				if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) ParseNewFaultProof(log types.Log) (*IAccountabilityNewFaultProof, error) {
	event := new(IAccountabilityNewFaultProof)
	if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the IAccountability contract.
type IAccountabilitySlashingEventIterator struct {
	Event *IAccountabilitySlashingEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilitySlashingEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilitySlashingEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilitySlashingEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilitySlashingEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilitySlashingEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilitySlashingEvent represents a SlashingEvent event raised by the IAccountability contract.
type IAccountabilitySlashingEvent struct {
	Validator    common.Address
	Amount       *big.Int
	ReleaseBlock *big.Int
	IsJailbound  bool
	EventId      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_IAccountability *IAccountabilityFilterer) FilterSlashingEvent(opts *bind.FilterOpts) (*IAccountabilitySlashingEventIterator, error) {

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return &IAccountabilitySlashingEventIterator{contract: _IAccountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
}

// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_IAccountability *IAccountabilityFilterer) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *IAccountabilitySlashingEvent) (event.Subscription, error) {

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilitySlashingEvent)
				if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_IAccountability *IAccountabilityFilterer) ParseSlashingEvent(log types.Log) (*IAccountabilitySlashingEvent, error) {
	event := new(IAccountabilitySlashingEvent)
	if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAutonityMetaData contains all meta data concerning the IAutonity contract.
var IAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
	},
}

// IAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAutonityMetaData.ABI instead.
var IAutonityABI = IAutonityMetaData.ABI

// Deprecated: Use IAutonityMetaData.Sigs instead.
// IAutonityFuncSigs maps the 4-byte function signature to its string representation.
var IAutonityFuncSigs = IAutonityMetaData.Sigs

// IAutonity is an auto generated Go binding around an Ethereum contract.
type IAutonity struct {
	IAutonityCaller     // Read-only binding to the contract
	IAutonityTransactor // Write-only binding to the contract
	IAutonityFilterer   // Log filterer for contract events
}

// IAutonityCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAutonityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAutonityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAutonityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAutonityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAutonityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAutonitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAutonitySession struct {
	Contract     *IAutonity        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAutonityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAutonityCallerSession struct {
	Contract *IAutonityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IAutonityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAutonityTransactorSession struct {
	Contract     *IAutonityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IAutonityRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAutonityRaw struct {
	Contract *IAutonity // Generic contract binding to access the raw methods on
}

// IAutonityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAutonityCallerRaw struct {
	Contract *IAutonityCaller // Generic read-only contract binding to access the raw methods on
}

// IAutonityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAutonityTransactorRaw struct {
	Contract *IAutonityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAutonity creates a new instance of IAutonity, bound to a specific deployed contract.
func NewIAutonity(address common.Address, backend bind.ContractBackend) (*IAutonity, error) {
	contract, err := bindIAutonity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAutonity{IAutonityCaller: IAutonityCaller{contract: contract}, IAutonityTransactor: IAutonityTransactor{contract: contract}, IAutonityFilterer: IAutonityFilterer{contract: contract}}, nil
}

// NewIAutonityCaller creates a new read-only instance of IAutonity, bound to a specific deployed contract.
func NewIAutonityCaller(address common.Address, caller bind.ContractCaller) (*IAutonityCaller, error) {
	contract, err := bindIAutonity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAutonityCaller{contract: contract}, nil
}

// NewIAutonityTransactor creates a new write-only instance of IAutonity, bound to a specific deployed contract.
func NewIAutonityTransactor(address common.Address, transactor bind.ContractTransactor) (*IAutonityTransactor, error) {
	contract, err := bindIAutonity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAutonityTransactor{contract: contract}, nil
}

// NewIAutonityFilterer creates a new log filterer instance of IAutonity, bound to a specific deployed contract.
func NewIAutonityFilterer(address common.Address, filterer bind.ContractFilterer) (*IAutonityFilterer, error) {
	contract, err := bindIAutonity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAutonityFilterer{contract: contract}, nil
}

// bindIAutonity binds a generic wrapper to an already deployed contract.
func bindIAutonity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IAutonityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAutonity *IAutonityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAutonity.Contract.IAutonityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAutonity *IAutonityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAutonity.Contract.IAutonityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAutonity *IAutonityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAutonity.Contract.IAutonityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAutonity *IAutonityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAutonity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAutonity *IAutonityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAutonity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAutonity *IAutonityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAutonity.Contract.contract.Transact(opts, method, params...)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonityCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IAutonity.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonitySession) GetOperator() (common.Address, error) {
	return _IAutonity.Contract.GetOperator(&_IAutonity.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonityCallerSession) GetOperator() (common.Address, error) {
	return _IAutonity.Contract.GetOperator(&_IAutonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonityCaller) GetOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IAutonity.contract.Call(opts, &out, "getOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonitySession) GetOracle() (common.Address, error) {
	return _IAutonity.Contract.GetOracle(&_IAutonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonityCallerSession) GetOracle() (common.Address, error) {
	return _IAutonity.Contract.GetOracle(&_IAutonity.CallOpts)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// Deprecated: Use IERC20MetaData.Sigs instead.
// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = IERC20MetaData.Sigs

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IInflationControllerMetaData contains all meta data concerning the IInflationController contract.
var IInflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
	},
}

// IInflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use IInflationControllerMetaData.ABI instead.
var IInflationControllerABI = IInflationControllerMetaData.ABI

// Deprecated: Use IInflationControllerMetaData.Sigs instead.
// IInflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var IInflationControllerFuncSigs = IInflationControllerMetaData.Sigs

// IInflationController is an auto generated Go binding around an Ethereum contract.
type IInflationController struct {
	IInflationControllerCaller     // Read-only binding to the contract
	IInflationControllerTransactor // Write-only binding to the contract
	IInflationControllerFilterer   // Log filterer for contract events
}

// IInflationControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IInflationControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInflationControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IInflationControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInflationControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IInflationControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInflationControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IInflationControllerSession struct {
	Contract     *IInflationController // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IInflationControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IInflationControllerCallerSession struct {
	Contract *IInflationControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IInflationControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IInflationControllerTransactorSession struct {
	Contract     *IInflationControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IInflationControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IInflationControllerRaw struct {
	Contract *IInflationController // Generic contract binding to access the raw methods on
}

// IInflationControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IInflationControllerCallerRaw struct {
	Contract *IInflationControllerCaller // Generic read-only contract binding to access the raw methods on
}

// IInflationControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IInflationControllerTransactorRaw struct {
	Contract *IInflationControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIInflationController creates a new instance of IInflationController, bound to a specific deployed contract.
func NewIInflationController(address common.Address, backend bind.ContractBackend) (*IInflationController, error) {
	contract, err := bindIInflationController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IInflationController{IInflationControllerCaller: IInflationControllerCaller{contract: contract}, IInflationControllerTransactor: IInflationControllerTransactor{contract: contract}, IInflationControllerFilterer: IInflationControllerFilterer{contract: contract}}, nil
}

// NewIInflationControllerCaller creates a new read-only instance of IInflationController, bound to a specific deployed contract.
func NewIInflationControllerCaller(address common.Address, caller bind.ContractCaller) (*IInflationControllerCaller, error) {
	contract, err := bindIInflationController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IInflationControllerCaller{contract: contract}, nil
}

// NewIInflationControllerTransactor creates a new write-only instance of IInflationController, bound to a specific deployed contract.
func NewIInflationControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*IInflationControllerTransactor, error) {
	contract, err := bindIInflationController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IInflationControllerTransactor{contract: contract}, nil
}

// NewIInflationControllerFilterer creates a new log filterer instance of IInflationController, bound to a specific deployed contract.
func NewIInflationControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*IInflationControllerFilterer, error) {
	contract, err := bindIInflationController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IInflationControllerFilterer{contract: contract}, nil
}

// bindIInflationController binds a generic wrapper to an already deployed contract.
func bindIInflationController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IInflationControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IInflationController *IInflationControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IInflationController.Contract.IInflationControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IInflationController *IInflationControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IInflationController.Contract.IInflationControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IInflationController *IInflationControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IInflationController.Contract.IInflationControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IInflationController *IInflationControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IInflationController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IInflationController *IInflationControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IInflationController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IInflationController *IInflationControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IInflationController.Contract.contract.Transact(opts, method, params...)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationControllerCaller) CalculateSupplyDelta(opts *bind.CallOpts, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IInflationController.contract.Call(opts, &out, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationControllerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _IInflationController.Contract.CalculateSupplyDelta(&_IInflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationControllerCallerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _IInflationController.Contract.CalculateSupplyDelta(&_IInflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// INonStakableVestingVaultMetaData contains all meta data concerning the INonStakableVestingVault contract.
var INonStakableVestingVaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnlockedSubscribed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newUnlockedUnsubscribed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"f968f493": "unlockTokens()",
	},
}

// INonStakableVestingVaultABI is the input ABI used to generate the binding from.
// Deprecated: Use INonStakableVestingVaultMetaData.ABI instead.
var INonStakableVestingVaultABI = INonStakableVestingVaultMetaData.ABI

// Deprecated: Use INonStakableVestingVaultMetaData.Sigs instead.
// INonStakableVestingVaultFuncSigs maps the 4-byte function signature to its string representation.
var INonStakableVestingVaultFuncSigs = INonStakableVestingVaultMetaData.Sigs

// INonStakableVestingVault is an auto generated Go binding around an Ethereum contract.
type INonStakableVestingVault struct {
	INonStakableVestingVaultCaller     // Read-only binding to the contract
	INonStakableVestingVaultTransactor // Write-only binding to the contract
	INonStakableVestingVaultFilterer   // Log filterer for contract events
}

// INonStakableVestingVaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type INonStakableVestingVaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INonStakableVestingVaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INonStakableVestingVaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INonStakableVestingVaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INonStakableVestingVaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INonStakableVestingVaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type INonStakableVestingVaultSession struct {
	Contract     *INonStakableVestingVault // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// INonStakableVestingVaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type INonStakableVestingVaultCallerSession struct {
	Contract *INonStakableVestingVaultCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// INonStakableVestingVaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type INonStakableVestingVaultTransactorSession struct {
	Contract     *INonStakableVestingVaultTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// INonStakableVestingVaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type INonStakableVestingVaultRaw struct {
	Contract *INonStakableVestingVault // Generic contract binding to access the raw methods on
}

// INonStakableVestingVaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type INonStakableVestingVaultCallerRaw struct {
	Contract *INonStakableVestingVaultCaller // Generic read-only contract binding to access the raw methods on
}

// INonStakableVestingVaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type INonStakableVestingVaultTransactorRaw struct {
	Contract *INonStakableVestingVaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewINonStakableVestingVault creates a new instance of INonStakableVestingVault, bound to a specific deployed contract.
func NewINonStakableVestingVault(address common.Address, backend bind.ContractBackend) (*INonStakableVestingVault, error) {
	contract, err := bindINonStakableVestingVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INonStakableVestingVault{INonStakableVestingVaultCaller: INonStakableVestingVaultCaller{contract: contract}, INonStakableVestingVaultTransactor: INonStakableVestingVaultTransactor{contract: contract}, INonStakableVestingVaultFilterer: INonStakableVestingVaultFilterer{contract: contract}}, nil
}

// NewINonStakableVestingVaultCaller creates a new read-only instance of INonStakableVestingVault, bound to a specific deployed contract.
func NewINonStakableVestingVaultCaller(address common.Address, caller bind.ContractCaller) (*INonStakableVestingVaultCaller, error) {
	contract, err := bindINonStakableVestingVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INonStakableVestingVaultCaller{contract: contract}, nil
}

// NewINonStakableVestingVaultTransactor creates a new write-only instance of INonStakableVestingVault, bound to a specific deployed contract.
func NewINonStakableVestingVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*INonStakableVestingVaultTransactor, error) {
	contract, err := bindINonStakableVestingVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INonStakableVestingVaultTransactor{contract: contract}, nil
}

// NewINonStakableVestingVaultFilterer creates a new log filterer instance of INonStakableVestingVault, bound to a specific deployed contract.
func NewINonStakableVestingVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*INonStakableVestingVaultFilterer, error) {
	contract, err := bindINonStakableVestingVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INonStakableVestingVaultFilterer{contract: contract}, nil
}

// bindINonStakableVestingVault binds a generic wrapper to an already deployed contract.
func bindINonStakableVestingVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(INonStakableVestingVaultABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INonStakableVestingVault *INonStakableVestingVaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INonStakableVestingVault.Contract.INonStakableVestingVaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INonStakableVestingVault *INonStakableVestingVaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INonStakableVestingVault.Contract.INonStakableVestingVaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INonStakableVestingVault *INonStakableVestingVaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INonStakableVestingVault.Contract.INonStakableVestingVaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INonStakableVestingVault *INonStakableVestingVaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INonStakableVestingVault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INonStakableVestingVault *INonStakableVestingVaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INonStakableVestingVault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INonStakableVestingVault *INonStakableVestingVaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INonStakableVestingVault.Contract.contract.Transact(opts, method, params...)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_INonStakableVestingVault *INonStakableVestingVaultTransactor) UnlockTokens(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INonStakableVestingVault.contract.Transact(opts, "unlockTokens")
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_INonStakableVestingVault *INonStakableVestingVaultSession) UnlockTokens() (*types.Transaction, error) {
	return _INonStakableVestingVault.Contract.UnlockTokens(&_INonStakableVestingVault.TransactOpts)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_INonStakableVestingVault *INonStakableVestingVaultTransactorSession) UnlockTokens() (*types.Transaction, error) {
	return _INonStakableVestingVault.Contract.UnlockTokens(&_INonStakableVestingVault.TransactOpts)
}

// IOracleMetaData contains all meta data concerning the IOracle contract.
var IOracleMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"33f98c77": "latestRoundData(string)",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"307de9b6": "vote(uint256,int256[],uint256)",
	},
}

// IOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use IOracleMetaData.ABI instead.
var IOracleABI = IOracleMetaData.ABI

// Deprecated: Use IOracleMetaData.Sigs instead.
// IOracleFuncSigs maps the 4-byte function signature to its string representation.
var IOracleFuncSigs = IOracleMetaData.Sigs

// IOracle is an auto generated Go binding around an Ethereum contract.
type IOracle struct {
	IOracleCaller     // Read-only binding to the contract
	IOracleTransactor // Write-only binding to the contract
	IOracleFilterer   // Log filterer for contract events
}

// IOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOracleSession struct {
	Contract     *IOracle          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOracleCallerSession struct {
	Contract *IOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOracleTransactorSession struct {
	Contract     *IOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOracleRaw struct {
	Contract *IOracle // Generic contract binding to access the raw methods on
}

// IOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOracleCallerRaw struct {
	Contract *IOracleCaller // Generic read-only contract binding to access the raw methods on
}

// IOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOracleTransactorRaw struct {
	Contract *IOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOracle creates a new instance of IOracle, bound to a specific deployed contract.
func NewIOracle(address common.Address, backend bind.ContractBackend) (*IOracle, error) {
	contract, err := bindIOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOracle{IOracleCaller: IOracleCaller{contract: contract}, IOracleTransactor: IOracleTransactor{contract: contract}, IOracleFilterer: IOracleFilterer{contract: contract}}, nil
}

// NewIOracleCaller creates a new read-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleCaller(address common.Address, caller bind.ContractCaller) (*IOracleCaller, error) {
	contract, err := bindIOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleCaller{contract: contract}, nil
}

// NewIOracleTransactor creates a new write-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*IOracleTransactor, error) {
	contract, err := bindIOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleTransactor{contract: contract}, nil
}

// NewIOracleFilterer creates a new log filterer instance of IOracle, bound to a specific deployed contract.
func NewIOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*IOracleFilterer, error) {
	contract, err := bindIOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOracleFilterer{contract: contract}, nil
}

// bindIOracle binds a generic wrapper to an already deployed contract.
func bindIOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.IOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transact(opts, method, params...)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_IOracle *IOracleCaller) GetPrecision(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getPrecision")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_IOracle *IOracleSession) GetPrecision() (*big.Int, error) {
	return _IOracle.Contract.GetPrecision(&_IOracle.CallOpts)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_IOracle *IOracleCallerSession) GetPrecision() (*big.Int, error) {
	return _IOracle.Contract.GetPrecision(&_IOracle.CallOpts)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracleCaller) GetRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracleSession) GetRound() (*big.Int, error) {
	return _IOracle.Contract.GetRound(&_IOracle.CallOpts)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracleCallerSession) GetRound() (*big.Int, error) {
	return _IOracle.Contract.GetRound(&_IOracle.CallOpts)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracleCaller) GetRoundData(opts *bind.CallOpts, _round *big.Int, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracleSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.GetRoundData(&_IOracle.CallOpts, _round, _symbol)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracleCallerSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.GetRoundData(&_IOracle.CallOpts, _round, _symbol)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracleCaller) GetSymbols(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getSymbols")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracleSession) GetSymbols() ([]string, error) {
	return _IOracle.Contract.GetSymbols(&_IOracle.CallOpts)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracleCallerSession) GetSymbols() ([]string, error) {
	return _IOracle.Contract.GetSymbols(&_IOracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracleCaller) GetVotePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracleSession) GetVotePeriod() (*big.Int, error) {
	return _IOracle.Contract.GetVotePeriod(&_IOracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracleCallerSession) GetVotePeriod() (*big.Int, error) {
	return _IOracle.Contract.GetVotePeriod(&_IOracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracleCaller) GetVoters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getVoters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracleSession) GetVoters() ([]common.Address, error) {
	return _IOracle.Contract.GetVoters(&_IOracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracleCallerSession) GetVoters() ([]common.Address, error) {
	return _IOracle.Contract.GetVoters(&_IOracle.CallOpts)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracleCaller) LatestRoundData(opts *bind.CallOpts, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracleSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.LatestRoundData(&_IOracle.CallOpts, _symbol)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracleCallerSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.LatestRoundData(&_IOracle.CallOpts, _symbol)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracleTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracleSession) Finalize() (*types.Transaction, error) {
	return _IOracle.Contract.Finalize(&_IOracle.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracleTransactorSession) Finalize() (*types.Transaction, error) {
	return _IOracle.Contract.Finalize(&_IOracle.TransactOpts)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracleTransactor) SetOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "setOperator", _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracleSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetOperator(&_IOracle.TransactOpts, _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracleTransactorSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetOperator(&_IOracle.TransactOpts, _operator)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracleTransactor) SetSymbols(opts *bind.TransactOpts, _symbols []string) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "setSymbols", _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracleSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _IOracle.Contract.SetSymbols(&_IOracle.TransactOpts, _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracleTransactorSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _IOracle.Contract.SetSymbols(&_IOracle.TransactOpts, _symbols)
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracleTransactor) SetVoters(opts *bind.TransactOpts, _newVoters []common.Address) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "setVoters", _newVoters)
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracleSession) SetVoters(_newVoters []common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetVoters(&_IOracle.TransactOpts, _newVoters)
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracleTransactorSession) SetVoters(_newVoters []common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetVoters(&_IOracle.TransactOpts, _newVoters)
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracleTransactor) Vote(opts *bind.TransactOpts, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "vote", _commit, _reports, _salt)
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracleSession) Vote(_commit *big.Int, _reports []*big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.Vote(&_IOracle.TransactOpts, _commit, _reports, _salt)
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracleTransactorSession) Vote(_commit *big.Int, _reports []*big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.Vote(&_IOracle.TransactOpts, _commit, _reports, _salt)
}

// IOracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the IOracle contract.
type IOracleNewRoundIterator struct {
	Event *IOracleNewRound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOracleNewRoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOracleNewRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOracleNewRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOracleNewRoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOracleNewRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOracleNewRound represents a NewRound event raised by the IOracle contract.
type IOracleNewRound struct {
	Round      *big.Int
	Height     *big.Int
	Timestamp  *big.Int
	VotePeriod *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_IOracle *IOracleFilterer) FilterNewRound(opts *bind.FilterOpts) (*IOracleNewRoundIterator, error) {

	logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return &IOracleNewRoundIterator{contract: _IOracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
}

// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_IOracle *IOracleFilterer) WatchNewRound(opts *bind.WatchOpts, sink chan<- *IOracleNewRound) (event.Subscription, error) {

	logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOracleNewRound)
				if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_IOracle *IOracleFilterer) ParseNewRound(log types.Log) (*IOracleNewRound, error) {
	event := new(IOracleNewRound)
	if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the IOracle contract.
type IOracleNewSymbolsIterator struct {
	Event *IOracleNewSymbols // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOracleNewSymbolsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOracleNewSymbols)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOracleNewSymbols)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOracleNewSymbolsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOracleNewSymbolsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOracleNewSymbols represents a NewSymbols event raised by the IOracle contract.
type IOracleNewSymbols struct {
	Symbols []string
	Round   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_IOracle *IOracleFilterer) FilterNewSymbols(opts *bind.FilterOpts) (*IOracleNewSymbolsIterator, error) {

	logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return &IOracleNewSymbolsIterator{contract: _IOracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
}

// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_IOracle *IOracleFilterer) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *IOracleNewSymbols) (event.Subscription, error) {

	logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOracleNewSymbols)
				if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_IOracle *IOracleFilterer) ParseNewSymbols(log types.Log) (*IOracleNewSymbols, error) {
	event := new(IOracleNewSymbols)
	if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the IOracle contract.
type IOracleVotedIterator struct {
	Event *IOracleVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOracleVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOracleVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOracleVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOracleVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOracleVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOracleVoted represents a Voted event raised by the IOracle contract.
type IOracleVoted struct {
	Voter common.Address
	Votes []*big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_IOracle *IOracleFilterer) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*IOracleVotedIterator, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _IOracle.contract.FilterLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return &IOracleVotedIterator{contract: _IOracle.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_IOracle *IOracleFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *IOracleVoted, _voter []common.Address) (event.Subscription, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _IOracle.contract.WatchLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOracleVoted)
				if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_IOracle *IOracleFilterer) ParseVoted(log types.Log) (*IOracleVoted, error) {
	event := new(IOracleVoted)
	if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IStabilizationMetaData contains all meta data concerning the IStabilization contract.
var IStabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
	},
}

// IStabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use IStabilizationMetaData.ABI instead.
var IStabilizationABI = IStabilizationMetaData.ABI

// Deprecated: Use IStabilizationMetaData.Sigs instead.
// IStabilizationFuncSigs maps the 4-byte function signature to its string representation.
var IStabilizationFuncSigs = IStabilizationMetaData.Sigs

// IStabilization is an auto generated Go binding around an Ethereum contract.
type IStabilization struct {
	IStabilizationCaller     // Read-only binding to the contract
	IStabilizationTransactor // Write-only binding to the contract
	IStabilizationFilterer   // Log filterer for contract events
}

// IStabilizationCaller is an auto generated read-only Go binding around an Ethereum contract.
type IStabilizationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStabilizationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IStabilizationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStabilizationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IStabilizationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStabilizationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IStabilizationSession struct {
	Contract     *IStabilization   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IStabilizationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IStabilizationCallerSession struct {
	Contract *IStabilizationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IStabilizationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IStabilizationTransactorSession struct {
	Contract     *IStabilizationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IStabilizationRaw is an auto generated low-level Go binding around an Ethereum contract.
type IStabilizationRaw struct {
	Contract *IStabilization // Generic contract binding to access the raw methods on
}

// IStabilizationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IStabilizationCallerRaw struct {
	Contract *IStabilizationCaller // Generic read-only contract binding to access the raw methods on
}

// IStabilizationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IStabilizationTransactorRaw struct {
	Contract *IStabilizationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIStabilization creates a new instance of IStabilization, bound to a specific deployed contract.
func NewIStabilization(address common.Address, backend bind.ContractBackend) (*IStabilization, error) {
	contract, err := bindIStabilization(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IStabilization{IStabilizationCaller: IStabilizationCaller{contract: contract}, IStabilizationTransactor: IStabilizationTransactor{contract: contract}, IStabilizationFilterer: IStabilizationFilterer{contract: contract}}, nil
}

// NewIStabilizationCaller creates a new read-only instance of IStabilization, bound to a specific deployed contract.
func NewIStabilizationCaller(address common.Address, caller bind.ContractCaller) (*IStabilizationCaller, error) {
	contract, err := bindIStabilization(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IStabilizationCaller{contract: contract}, nil
}

// NewIStabilizationTransactor creates a new write-only instance of IStabilization, bound to a specific deployed contract.
func NewIStabilizationTransactor(address common.Address, transactor bind.ContractTransactor) (*IStabilizationTransactor, error) {
	contract, err := bindIStabilization(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IStabilizationTransactor{contract: contract}, nil
}

// NewIStabilizationFilterer creates a new log filterer instance of IStabilization, bound to a specific deployed contract.
func NewIStabilizationFilterer(address common.Address, filterer bind.ContractFilterer) (*IStabilizationFilterer, error) {
	contract, err := bindIStabilization(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IStabilizationFilterer{contract: contract}, nil
}

// bindIStabilization binds a generic wrapper to an already deployed contract.
func bindIStabilization(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IStabilizationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStabilization *IStabilizationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStabilization.Contract.IStabilizationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStabilization *IStabilizationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStabilization.Contract.IStabilizationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStabilization *IStabilizationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStabilization.Contract.IStabilizationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStabilization *IStabilizationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStabilization.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStabilization *IStabilizationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStabilization.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStabilization *IStabilizationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStabilization.Contract.contract.Transact(opts, method, params...)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilizationTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _IStabilization.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilizationSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOperator(&_IStabilization.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilizationTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOperator(&_IStabilization.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilizationTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _IStabilization.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilizationSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOracle(&_IStabilization.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilizationTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOracle(&_IStabilization.TransactOpts, oracle)
}

// IStakeProxyMetaData contains all meta data concerning the IStakeProxy contract.
var IStakeProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_selfDelegation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_rejected\",\"type\":\"bool\"}],\"name\":\"bondingApplied\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveATN\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"rewardsDistributed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_rejected\",\"type\":\"bool\"}],\"name\":\"unbondingApplied\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rejected\",\"type\":\"bool\"}],\"name\":\"unbondingReleased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"9dfd1b8e": "bondingApplied(uint256,address,uint256,bool,bool)",
		"161605e3": "receiveATN()",
		"d18736ab": "rewardsDistributed(address[])",
		"a8920241": "unbondingApplied(uint256,address,bool)",
		"3c54c290": "unbondingReleased(uint256,uint256,bool)",
	},
}

// IStakeProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakeProxyMetaData.ABI instead.
var IStakeProxyABI = IStakeProxyMetaData.ABI

// Deprecated: Use IStakeProxyMetaData.Sigs instead.
// IStakeProxyFuncSigs maps the 4-byte function signature to its string representation.
var IStakeProxyFuncSigs = IStakeProxyMetaData.Sigs

// IStakeProxy is an auto generated Go binding around an Ethereum contract.
type IStakeProxy struct {
	IStakeProxyCaller     // Read-only binding to the contract
	IStakeProxyTransactor // Write-only binding to the contract
	IStakeProxyFilterer   // Log filterer for contract events
}

// IStakeProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type IStakeProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IStakeProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IStakeProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IStakeProxySession struct {
	Contract     *IStakeProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IStakeProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IStakeProxyCallerSession struct {
	Contract *IStakeProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IStakeProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IStakeProxyTransactorSession struct {
	Contract     *IStakeProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IStakeProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type IStakeProxyRaw struct {
	Contract *IStakeProxy // Generic contract binding to access the raw methods on
}

// IStakeProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IStakeProxyCallerRaw struct {
	Contract *IStakeProxyCaller // Generic read-only contract binding to access the raw methods on
}

// IStakeProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IStakeProxyTransactorRaw struct {
	Contract *IStakeProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIStakeProxy creates a new instance of IStakeProxy, bound to a specific deployed contract.
func NewIStakeProxy(address common.Address, backend bind.ContractBackend) (*IStakeProxy, error) {
	contract, err := bindIStakeProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IStakeProxy{IStakeProxyCaller: IStakeProxyCaller{contract: contract}, IStakeProxyTransactor: IStakeProxyTransactor{contract: contract}, IStakeProxyFilterer: IStakeProxyFilterer{contract: contract}}, nil
}

// NewIStakeProxyCaller creates a new read-only instance of IStakeProxy, bound to a specific deployed contract.
func NewIStakeProxyCaller(address common.Address, caller bind.ContractCaller) (*IStakeProxyCaller, error) {
	contract, err := bindIStakeProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IStakeProxyCaller{contract: contract}, nil
}

// NewIStakeProxyTransactor creates a new write-only instance of IStakeProxy, bound to a specific deployed contract.
func NewIStakeProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*IStakeProxyTransactor, error) {
	contract, err := bindIStakeProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IStakeProxyTransactor{contract: contract}, nil
}

// NewIStakeProxyFilterer creates a new log filterer instance of IStakeProxy, bound to a specific deployed contract.
func NewIStakeProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*IStakeProxyFilterer, error) {
	contract, err := bindIStakeProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IStakeProxyFilterer{contract: contract}, nil
}

// bindIStakeProxy binds a generic wrapper to an already deployed contract.
func bindIStakeProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IStakeProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakeProxy *IStakeProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakeProxy.Contract.IStakeProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakeProxy *IStakeProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeProxy.Contract.IStakeProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakeProxy *IStakeProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakeProxy.Contract.IStakeProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakeProxy *IStakeProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakeProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakeProxy *IStakeProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakeProxy *IStakeProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakeProxy.Contract.contract.Transact(opts, method, params...)
}

// BondingApplied is a paid mutator transaction binding the contract method 0x9dfd1b8e.
//
// Solidity: function bondingApplied(uint256 _bondingID, address _validator, uint256 _liquid, bool _selfDelegation, bool _rejected) returns()
func (_IStakeProxy *IStakeProxyTransactor) BondingApplied(opts *bind.TransactOpts, _bondingID *big.Int, _validator common.Address, _liquid *big.Int, _selfDelegation bool, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.contract.Transact(opts, "bondingApplied", _bondingID, _validator, _liquid, _selfDelegation, _rejected)
}

// BondingApplied is a paid mutator transaction binding the contract method 0x9dfd1b8e.
//
// Solidity: function bondingApplied(uint256 _bondingID, address _validator, uint256 _liquid, bool _selfDelegation, bool _rejected) returns()
func (_IStakeProxy *IStakeProxySession) BondingApplied(_bondingID *big.Int, _validator common.Address, _liquid *big.Int, _selfDelegation bool, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.Contract.BondingApplied(&_IStakeProxy.TransactOpts, _bondingID, _validator, _liquid, _selfDelegation, _rejected)
}

// BondingApplied is a paid mutator transaction binding the contract method 0x9dfd1b8e.
//
// Solidity: function bondingApplied(uint256 _bondingID, address _validator, uint256 _liquid, bool _selfDelegation, bool _rejected) returns()
func (_IStakeProxy *IStakeProxyTransactorSession) BondingApplied(_bondingID *big.Int, _validator common.Address, _liquid *big.Int, _selfDelegation bool, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.Contract.BondingApplied(&_IStakeProxy.TransactOpts, _bondingID, _validator, _liquid, _selfDelegation, _rejected)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_IStakeProxy *IStakeProxyTransactor) ReceiveATN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeProxy.contract.Transact(opts, "receiveATN")
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_IStakeProxy *IStakeProxySession) ReceiveATN() (*types.Transaction, error) {
	return _IStakeProxy.Contract.ReceiveATN(&_IStakeProxy.TransactOpts)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_IStakeProxy *IStakeProxyTransactorSession) ReceiveATN() (*types.Transaction, error) {
	return _IStakeProxy.Contract.ReceiveATN(&_IStakeProxy.TransactOpts)
}

// RewardsDistributed is a paid mutator transaction binding the contract method 0xd18736ab.
//
// Solidity: function rewardsDistributed(address[] _validators) returns()
func (_IStakeProxy *IStakeProxyTransactor) RewardsDistributed(opts *bind.TransactOpts, _validators []common.Address) (*types.Transaction, error) {
	return _IStakeProxy.contract.Transact(opts, "rewardsDistributed", _validators)
}

// RewardsDistributed is a paid mutator transaction binding the contract method 0xd18736ab.
//
// Solidity: function rewardsDistributed(address[] _validators) returns()
func (_IStakeProxy *IStakeProxySession) RewardsDistributed(_validators []common.Address) (*types.Transaction, error) {
	return _IStakeProxy.Contract.RewardsDistributed(&_IStakeProxy.TransactOpts, _validators)
}

// RewardsDistributed is a paid mutator transaction binding the contract method 0xd18736ab.
//
// Solidity: function rewardsDistributed(address[] _validators) returns()
func (_IStakeProxy *IStakeProxyTransactorSession) RewardsDistributed(_validators []common.Address) (*types.Transaction, error) {
	return _IStakeProxy.Contract.RewardsDistributed(&_IStakeProxy.TransactOpts, _validators)
}

// UnbondingApplied is a paid mutator transaction binding the contract method 0xa8920241.
//
// Solidity: function unbondingApplied(uint256 _unbondingID, address _validator, bool _rejected) returns()
func (_IStakeProxy *IStakeProxyTransactor) UnbondingApplied(opts *bind.TransactOpts, _unbondingID *big.Int, _validator common.Address, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.contract.Transact(opts, "unbondingApplied", _unbondingID, _validator, _rejected)
}

// UnbondingApplied is a paid mutator transaction binding the contract method 0xa8920241.
//
// Solidity: function unbondingApplied(uint256 _unbondingID, address _validator, bool _rejected) returns()
func (_IStakeProxy *IStakeProxySession) UnbondingApplied(_unbondingID *big.Int, _validator common.Address, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.Contract.UnbondingApplied(&_IStakeProxy.TransactOpts, _unbondingID, _validator, _rejected)
}

// UnbondingApplied is a paid mutator transaction binding the contract method 0xa8920241.
//
// Solidity: function unbondingApplied(uint256 _unbondingID, address _validator, bool _rejected) returns()
func (_IStakeProxy *IStakeProxyTransactorSession) UnbondingApplied(_unbondingID *big.Int, _validator common.Address, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.Contract.UnbondingApplied(&_IStakeProxy.TransactOpts, _unbondingID, _validator, _rejected)
}

// UnbondingReleased is a paid mutator transaction binding the contract method 0x3c54c290.
//
// Solidity: function unbondingReleased(uint256 _unbondingID, uint256 _amount, bool _rejected) returns()
func (_IStakeProxy *IStakeProxyTransactor) UnbondingReleased(opts *bind.TransactOpts, _unbondingID *big.Int, _amount *big.Int, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.contract.Transact(opts, "unbondingReleased", _unbondingID, _amount, _rejected)
}

// UnbondingReleased is a paid mutator transaction binding the contract method 0x3c54c290.
//
// Solidity: function unbondingReleased(uint256 _unbondingID, uint256 _amount, bool _rejected) returns()
func (_IStakeProxy *IStakeProxySession) UnbondingReleased(_unbondingID *big.Int, _amount *big.Int, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.Contract.UnbondingReleased(&_IStakeProxy.TransactOpts, _unbondingID, _amount, _rejected)
}

// UnbondingReleased is a paid mutator transaction binding the contract method 0x3c54c290.
//
// Solidity: function unbondingReleased(uint256 _unbondingID, uint256 _amount, bool _rejected) returns()
func (_IStakeProxy *IStakeProxyTransactorSession) UnbondingReleased(_unbondingID *big.Int, _amount *big.Int, _rejected bool) (*types.Transaction, error) {
	return _IStakeProxy.Contract.UnbondingReleased(&_IStakeProxy.TransactOpts, _unbondingID, _amount, _rejected)
}

// ISupplyControlMetaData contains all meta data concerning the ISupplyControl contract.
var ISupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
}

// ISupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use ISupplyControlMetaData.ABI instead.
var ISupplyControlABI = ISupplyControlMetaData.ABI

// Deprecated: Use ISupplyControlMetaData.Sigs instead.
// ISupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var ISupplyControlFuncSigs = ISupplyControlMetaData.Sigs

// ISupplyControl is an auto generated Go binding around an Ethereum contract.
type ISupplyControl struct {
	ISupplyControlCaller     // Read-only binding to the contract
	ISupplyControlTransactor // Write-only binding to the contract
	ISupplyControlFilterer   // Log filterer for contract events
}

// ISupplyControlCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISupplyControlCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISupplyControlTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISupplyControlTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISupplyControlFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISupplyControlFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISupplyControlSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISupplyControlSession struct {
	Contract     *ISupplyControl   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISupplyControlCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISupplyControlCallerSession struct {
	Contract *ISupplyControlCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ISupplyControlTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISupplyControlTransactorSession struct {
	Contract     *ISupplyControlTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ISupplyControlRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISupplyControlRaw struct {
	Contract *ISupplyControl // Generic contract binding to access the raw methods on
}

// ISupplyControlCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISupplyControlCallerRaw struct {
	Contract *ISupplyControlCaller // Generic read-only contract binding to access the raw methods on
}

// ISupplyControlTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISupplyControlTransactorRaw struct {
	Contract *ISupplyControlTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISupplyControl creates a new instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControl(address common.Address, backend bind.ContractBackend) (*ISupplyControl, error) {
	contract, err := bindISupplyControl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISupplyControl{ISupplyControlCaller: ISupplyControlCaller{contract: contract}, ISupplyControlTransactor: ISupplyControlTransactor{contract: contract}, ISupplyControlFilterer: ISupplyControlFilterer{contract: contract}}, nil
}

// NewISupplyControlCaller creates a new read-only instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControlCaller(address common.Address, caller bind.ContractCaller) (*ISupplyControlCaller, error) {
	contract, err := bindISupplyControl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISupplyControlCaller{contract: contract}, nil
}

// NewISupplyControlTransactor creates a new write-only instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControlTransactor(address common.Address, transactor bind.ContractTransactor) (*ISupplyControlTransactor, error) {
	contract, err := bindISupplyControl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISupplyControlTransactor{contract: contract}, nil
}

// NewISupplyControlFilterer creates a new log filterer instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControlFilterer(address common.Address, filterer bind.ContractFilterer) (*ISupplyControlFilterer, error) {
	contract, err := bindISupplyControl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISupplyControlFilterer{contract: contract}, nil
}

// bindISupplyControl binds a generic wrapper to an already deployed contract.
func bindISupplyControl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ISupplyControlABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISupplyControl *ISupplyControlRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISupplyControl.Contract.ISupplyControlCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISupplyControl *ISupplyControlRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISupplyControl.Contract.ISupplyControlTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISupplyControl *ISupplyControlRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISupplyControl.Contract.ISupplyControlTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISupplyControl *ISupplyControlCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISupplyControl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISupplyControl *ISupplyControlTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISupplyControl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISupplyControl *ISupplyControlTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISupplyControl.Contract.contract.Transact(opts, method, params...)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCaller) AvailableSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISupplyControl.contract.Call(opts, &out, "availableSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlSession) AvailableSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.AvailableSupply(&_ISupplyControl.CallOpts)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCallerSession) AvailableSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.AvailableSupply(&_ISupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControlCaller) Stabilizer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ISupplyControl.contract.Call(opts, &out, "stabilizer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControlSession) Stabilizer() (common.Address, error) {
	return _ISupplyControl.Contract.Stabilizer(&_ISupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControlCallerSession) Stabilizer() (common.Address, error) {
	return _ISupplyControl.Contract.Stabilizer(&_ISupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISupplyControl.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlSession) TotalSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.TotalSupply(&_ISupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCallerSession) TotalSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.TotalSupply(&_ISupplyControl.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControlTransactor) Burn(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "burn")
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControlSession) Burn() (*types.Transaction, error) {
	return _ISupplyControl.Contract.Burn(&_ISupplyControl.TransactOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControlTransactorSession) Burn() (*types.Transaction, error) {
	return _ISupplyControl.Contract.Burn(&_ISupplyControl.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControlTransactor) Mint(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "mint", recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControlSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ISupplyControl.Contract.Mint(&_ISupplyControl.TransactOpts, recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControlTransactorSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ISupplyControl.Contract.Mint(&_ISupplyControl.TransactOpts, recipient, amount)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControlTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControlSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetOperator(&_ISupplyControl.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControlTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetOperator(&_ISupplyControl.TransactOpts, operator)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControlTransactor) SetStabilizer(opts *bind.TransactOpts, stabilizer_ common.Address) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "setStabilizer", stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControlSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetStabilizer(&_ISupplyControl.TransactOpts, stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControlTransactorSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetStabilizer(&_ISupplyControl.TransactOpts, stabilizer_)
}

// ISupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the ISupplyControl contract.
type ISupplyControlBurnIterator struct {
	Event *ISupplyControlBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ISupplyControlBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ISupplyControlBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ISupplyControlBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ISupplyControlBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ISupplyControlBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ISupplyControlBurn represents a Burn event raised by the ISupplyControl contract.
type ISupplyControlBurn struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) FilterBurn(opts *bind.FilterOpts) (*ISupplyControlBurnIterator, error) {

	logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return &ISupplyControlBurnIterator{contract: _ISupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *ISupplyControlBurn) (event.Subscription, error) {

	logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ISupplyControlBurn)
				if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) ParseBurn(log types.Log) (*ISupplyControlBurn, error) {
	event := new(ISupplyControlBurn)
	if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ISupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the ISupplyControl contract.
type ISupplyControlMintIterator struct {
	Event *ISupplyControlMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ISupplyControlMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ISupplyControlMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ISupplyControlMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ISupplyControlMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ISupplyControlMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ISupplyControlMint represents a Mint event raised by the ISupplyControl contract.
type ISupplyControlMint struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) FilterMint(opts *bind.FilterOpts) (*ISupplyControlMintIterator, error) {

	logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &ISupplyControlMintIterator{contract: _ISupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *ISupplyControlMint) (event.Subscription, error) {

	logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ISupplyControlMint)
				if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) ParseMint(log types.Log) (*ISupplyControlMint, error) {
	event := new(ISupplyControlMint)
	if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InflationControllerMetaData contains all meta data concerning the InflationController contract.
var InflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"internalType\":\"structInflationController.Params\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Div_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Div_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Mul_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Mul_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
		"cff0ab96": "params()",
	},
	Bin: "0x608060405234801561001057600080fd5b506040516110c43803806110c483398101604081905261002f9161005c565b805160005560208101516001556040810151600255606081015160035560800151600455426005556100d9565b600060a0828403121561006e57600080fd5b60405160a081016001600160401b038111828210171561009e57634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b610fdc806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806392eff3cd1461003b578063cff0ab9614610061575b600080fd5b61004e610049366004610e97565b6100a3565b6040519081526020015b60405180910390f35b60005460015460025460035460045461007b949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610058565b6000806100bc600554856100b79190610edf565b610150565b905060006100d1600554856100b79190610edf565b60035490915081136100f1576100e88783836101da565b92505050610148565b60035482121561013857600061010d88846000600301546101da565b9050600061012188600060030154856102da565b905061012d8183610ef2565b945050505050610148565b6101438683836102da565b925050505b949350505050565b6000610168670de0b6b3a7640000600160ff1b610f1b565b821215610190576040516399474eeb60e01b8152600481018390526024015b60405180910390fd5b6101a9670de0b6b3a76400006001600160ff1b03610f1b565b8213156101cc57604051639d58109160e01b815260048101839052602401610187565b50670de0b6b3a76400000290565b6000806101f46000600201546101f06000610150565b1490565b156102305760005460015461022991906102249061021c9061021690846102fe565b8861030d565b6003546103d8565b610485565b90506102a2565b600061024461021c6000600201548761030d565b9050600061027c6102666102578461049a565b6102616001610150565b6102fe565b61027761025760006002015461049a565b6103d8565b60005460015491925061029d916102249061029790836102fe565b8461030d565b925050505b60006102c36102b9836102b489610150565b61030d565b6102b486886102fe565b90506102ce816104ef565b925050505b9392505050565b60006101486102f66102ee6102b987610150565b60045461030d565b6104ef565b90565b60006102d36102fb8385610f57565b60008282600160ff1b8214806103265750600160ff1b81145b156103445760405163a6070c2560e01b815260040160405180910390fd5b60008060008412610355578361035a565b836000035b91506000831261036a578261036f565b826000035b9050600061037d8383610503565b90506001600160ff1b038111156103b15760405163120b5b4360e01b81526004810189905260248101889052604401610187565b600019858518136103cb816103c7578260000390565b8290565b9998505050505050505050565b60008282600160ff1b8214806103f15750600160ff1b81145b1561040f576040516309fe2b4560e41b815260040160405180910390fd5b600080600084126104205783610425565b836000035b915060008312610435578261043a565b826000035b9050600061045183670de0b6b3a7640000846105b9565b90506001600160ff1b038111156103b15760405163d49c26b360e01b81526004810189905260248101889052604401610187565b60006102d36102fb8385610f7e565b92915050565b600081680736ea4425c11ac6308113156104ca5760405163ca7ec0c560e01b815260048101849052602401610187565b6714057b7ef767814f81026101486104ea670de0b6b3a7640000835b0590565b61068d565b6000610494670de0b6b3a764000083610f1b565b60008080600019848609848602925082811083820303915050806000036105375750670de0b6b3a764000090049050610494565b670de0b6b3a7640000811061056957604051635173648d60e01b81526004810186905260248101859052604401610187565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b60008080600019858709858702925082811083820303915050806000036105f3578382816105e9576105e9610f05565b04925050506102d3565b83811061062457604051630c740aef60e31b8152600481018790526024810186905260448101859052606401610187565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081818112156106ea5768033dd1780914b97114198112156106b35750600092915050565b6106e36106c66102fb6104ea8460000390565b6ec097ce7bc90715b34b9f1000000000816104e6576104e6610f05565b9150610731565b680a688906bd8affffff81131561071657604051626c1a0560e31b815260048101849052602401610187565b670de0b6b3a7640000604082901b056101486102fb82610737565b50919050565b600160bf1b67ff000000000000008216156108445767800000000000000082161561076b5768016a09e667f3bcc9090260401c5b67400000000000000082161561078a576801306fe0a31b7152df0260401c5b6720000000000000008216156107a9576801172b83c7d517adce0260401c5b6710000000000000008216156107c85768010b5586cf9890f62a0260401c5b6708000000000000008216156107e7576801059b0d31585743ae0260401c5b67040000000000000082161561080657680102c9a3e778060ee70260401c5b6702000000000000008216156108255768010163da9fb33356d80260401c5b67010000000000000082161561084457680100b1afa5abcbed610260401c5b66ff0000000000008216156109435766800000000000008216156108715768010058c86da1c09ea20260401c5b664000000000000082161561088f576801002c605e2e8cec500260401c5b66200000000000008216156108ad57680100162f3904051fa10260401c5b66100000000000008216156108cb576801000b175effdc76ba0260401c5b66080000000000008216156108e957680100058ba01fb9f96d0260401c5b66040000000000008216156109075768010002c5cc37da94920260401c5b6602000000000000821615610925576801000162e525ee05470260401c5b66010000000000008216156109435768010000b17255775c040260401c5b65ff0000000000821615610a39576580000000000082161561096e576801000058b91b5bc9ae0260401c5b6540000000000082161561098b57680100002c5c89d5ec6d0260401c5b652000000000008216156109a85768010000162e43f4f8310260401c5b651000000000008216156109c557680100000b1721bcfc9a0260401c5b650800000000008216156109e25768010000058b90cf1e6e0260401c5b650400000000008216156109ff576801000002c5c863b73f0260401c5b65020000000000821615610a1c57680100000162e430e5a20260401c5b65010000000000821615610a39576801000000b1721835510260401c5b64ff00000000821615610b2657648000000000821615610a6257680100000058b90c0b490260401c5b644000000000821615610a7e5768010000002c5c8601cc0260401c5b642000000000821615610a9a576801000000162e42fff00260401c5b641000000000821615610ab65768010000000b17217fbb0260401c5b640800000000821615610ad2576801000000058b90bfce0260401c5b640400000000821615610aee57680100000002c5c85fe30260401c5b640200000000821615610b0a5768010000000162e42ff10260401c5b640100000000821615610b2657680100000000b17217f80260401c5b63ff000000821615610c0a576380000000821615610b4d5768010000000058b90bfc0260401c5b6340000000821615610b68576801000000002c5c85fe0260401c5b6320000000821615610b8357680100000000162e42ff0260401c5b6310000000821615610b9e576801000000000b17217f0260401c5b6308000000821615610bb957680100000000058b90c00260401c5b6304000000821615610bd45768010000000002c5c8600260401c5b6302000000821615610bef576801000000000162e4300260401c5b6301000000821615610c0a5768010000000000b172180260401c5b62ff0000821615610ce55762800000821615610c2f576801000000000058b90c0260401c5b62400000821615610c4957680100000000002c5c860260401c5b62200000821615610c635768010000000000162e430260401c5b62100000821615610c7d57680100000000000b17210260401c5b62080000821615610c975768010000000000058b910260401c5b62040000821615610cb1576801000000000002c5c80260401c5b62020000821615610ccb57680100000000000162e40260401c5b62010000821615610ce5576801000000000000b1720260401c5b61ff00821615610db757618000821615610d0857680100000000000058b90260401c5b614000821615610d215768010000000000002c5d0260401c5b612000821615610d3a576801000000000000162e0260401c5b611000821615610d535768010000000000000b170260401c5b610800821615610d6c576801000000000000058c0260401c5b610400821615610d8557680100000000000002c60260401c5b610200821615610d9e57680100000000000001630260401c5b610100821615610db757680100000000000000b10260401c5b60ff821615610e80576080821615610dd857680100000000000000590260401c5b6040821615610df0576801000000000000002c0260401c5b6020821615610e0857680100000000000000160260401c5b6010821615610e20576801000000000000000b0260401c5b6008821615610e3857680100000000000000060260401c5b6004821615610e5057680100000000000000030260401c5b6002821615610e6857680100000000000000010260401c5b6001821615610e8057680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b60008060008060808587031215610ead57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561049457610494610ec9565b8082018082111561049457610494610ec9565b634e487b7160e01b600052601260045260246000fd5b600082610f3857634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610f5257610f52610ec9565b500590565b8181036000831280158383131683831282161715610f7757610f77610ec9565b5092915050565b8082018281126000831280158216821582161715610f9e57610f9e610ec9565b50509291505056fea2646970667358221220504f3314895e62f29ab0c4b64de9dfae65546185267645a44e47d1b435d782dc64736f6c63430008150033",
}

// InflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use InflationControllerMetaData.ABI instead.
var InflationControllerABI = InflationControllerMetaData.ABI

// Deprecated: Use InflationControllerMetaData.Sigs instead.
// InflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var InflationControllerFuncSigs = InflationControllerMetaData.Sigs

// InflationControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InflationControllerMetaData.Bin instead.
var InflationControllerBin = InflationControllerMetaData.Bin

// DeployInflationController deploys a new Ethereum contract, binding an instance of InflationController to it.
func DeployInflationController(auth *bind.TransactOpts, backend bind.ContractBackend, _params InflationControllerParams) (common.Address, *types.Transaction, *InflationController, error) {
	parsed, err := InflationControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(InflationControllerBin), backend, _params)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InflationController{InflationControllerCaller: InflationControllerCaller{contract: contract}, InflationControllerTransactor: InflationControllerTransactor{contract: contract}, InflationControllerFilterer: InflationControllerFilterer{contract: contract}}, nil
}

// InflationController is an auto generated Go binding around an Ethereum contract.
type InflationController struct {
	InflationControllerCaller     // Read-only binding to the contract
	InflationControllerTransactor // Write-only binding to the contract
	InflationControllerFilterer   // Log filterer for contract events
}

// InflationControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type InflationControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InflationControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InflationControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InflationControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InflationControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InflationControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InflationControllerSession struct {
	Contract     *InflationController // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// InflationControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InflationControllerCallerSession struct {
	Contract *InflationControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// InflationControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InflationControllerTransactorSession struct {
	Contract     *InflationControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// InflationControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type InflationControllerRaw struct {
	Contract *InflationController // Generic contract binding to access the raw methods on
}

// InflationControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InflationControllerCallerRaw struct {
	Contract *InflationControllerCaller // Generic read-only contract binding to access the raw methods on
}

// InflationControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InflationControllerTransactorRaw struct {
	Contract *InflationControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInflationController creates a new instance of InflationController, bound to a specific deployed contract.
func NewInflationController(address common.Address, backend bind.ContractBackend) (*InflationController, error) {
	contract, err := bindInflationController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InflationController{InflationControllerCaller: InflationControllerCaller{contract: contract}, InflationControllerTransactor: InflationControllerTransactor{contract: contract}, InflationControllerFilterer: InflationControllerFilterer{contract: contract}}, nil
}

// NewInflationControllerCaller creates a new read-only instance of InflationController, bound to a specific deployed contract.
func NewInflationControllerCaller(address common.Address, caller bind.ContractCaller) (*InflationControllerCaller, error) {
	contract, err := bindInflationController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InflationControllerCaller{contract: contract}, nil
}

// NewInflationControllerTransactor creates a new write-only instance of InflationController, bound to a specific deployed contract.
func NewInflationControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*InflationControllerTransactor, error) {
	contract, err := bindInflationController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InflationControllerTransactor{contract: contract}, nil
}

// NewInflationControllerFilterer creates a new log filterer instance of InflationController, bound to a specific deployed contract.
func NewInflationControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*InflationControllerFilterer, error) {
	contract, err := bindInflationController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InflationControllerFilterer{contract: contract}, nil
}

// bindInflationController binds a generic wrapper to an already deployed contract.
func bindInflationController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InflationControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InflationController *InflationControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InflationController.Contract.InflationControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InflationController *InflationControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InflationController.Contract.InflationControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InflationController *InflationControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InflationController.Contract.InflationControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InflationController *InflationControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InflationController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InflationController *InflationControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InflationController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InflationController *InflationControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InflationController.Contract.contract.Transact(opts, method, params...)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationControllerCaller) CalculateSupplyDelta(opts *bind.CallOpts, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _InflationController.contract.Call(opts, &out, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationControllerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _InflationController.Contract.CalculateSupplyDelta(&_InflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationControllerCallerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _InflationController.Contract.CalculateSupplyDelta(&_InflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationControllerCaller) Params(opts *bind.CallOpts) (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, error) {
	var out []interface{}
	err := _InflationController.contract.Call(opts, &out, "params")

	outstruct := new(struct {
		InflationRateInitial      *big.Int
		InflationRateTransition   *big.Int
		InflationCurveConvexity   *big.Int
		InflationTransitionPeriod *big.Int
		InflationReserveDecayRate *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.InflationRateInitial = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.InflationRateTransition = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.InflationCurveConvexity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.InflationTransitionPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.InflationReserveDecayRate = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationControllerSession) Params() (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, error) {
	return _InflationController.Contract.Params(&_InflationController.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationControllerCallerSession) Params() (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, error) {
	return _InflationController.Contract.Params(&_InflationController.CallOpts)
}

// LiquidLogicMetaData contains all meta data concerning the LiquidLogic contract.
var LiquidLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_atnRealisedFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRealisedFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_atnUnrealisedFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnUnrealisedFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_atnLastUnrealisedFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnLastUnrealisedFeeFactor\",\"type\":\"uint256\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"5ea1d6f8": "commissionRate()",
		"872cf059": "completeContractUpgrade()",
		"b66b3e79": "getNewContract()",
		"282d3fdf": "lock(address,uint256)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"a0ce552d": "redistribute(uint256)",
		"cf9c5719": "resetContractUpgrade()",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"61d027b3": "treasury()",
		"2d804308": "treasuryUnclaimedATN()",
		"b05cd6c9": "unclaimedRewards(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
		"7eee288d": "unlock(address,uint256)",
		"b2ea9adb": "upgradeContract(bytes,string)",
		"3a5381b5": "validator()",
	},
	Bin: "",
}

// LiquidLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidLogicMetaData.ABI instead.
var LiquidLogicABI = LiquidLogicMetaData.ABI

// Deprecated: Use LiquidLogicMetaData.Sigs instead.
// LiquidLogicFuncSigs maps the 4-byte function signature to its string representation.
var LiquidLogicFuncSigs = LiquidLogicMetaData.Sigs

// LiquidLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidLogicMetaData.Bin instead.
var LiquidLogicBin = LiquidLogicMetaData.Bin

// DeployLiquidLogic deploys a new Ethereum contract, binding an instance of LiquidLogic to it.
func DeployLiquidLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LiquidLogic, error) {
	parsed, err := LiquidLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidLogic{LiquidLogicCaller: LiquidLogicCaller{contract: contract}, LiquidLogicTransactor: LiquidLogicTransactor{contract: contract}, LiquidLogicFilterer: LiquidLogicFilterer{contract: contract}}, nil
}

// LiquidLogic is an auto generated Go binding around an Ethereum contract.
type LiquidLogic struct {
	LiquidLogicCaller     // Read-only binding to the contract
	LiquidLogicTransactor // Write-only binding to the contract
	LiquidLogicFilterer   // Log filterer for contract events
}

// LiquidLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidLogicSession struct {
	Contract     *LiquidLogic      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidLogicCallerSession struct {
	Contract *LiquidLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LiquidLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidLogicTransactorSession struct {
	Contract     *LiquidLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LiquidLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidLogicRaw struct {
	Contract *LiquidLogic // Generic contract binding to access the raw methods on
}

// LiquidLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidLogicCallerRaw struct {
	Contract *LiquidLogicCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidLogicTransactorRaw struct {
	Contract *LiquidLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidLogic creates a new instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogic(address common.Address, backend bind.ContractBackend) (*LiquidLogic, error) {
	contract, err := bindLiquidLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidLogic{LiquidLogicCaller: LiquidLogicCaller{contract: contract}, LiquidLogicTransactor: LiquidLogicTransactor{contract: contract}, LiquidLogicFilterer: LiquidLogicFilterer{contract: contract}}, nil
}

// NewLiquidLogicCaller creates a new read-only instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogicCaller(address common.Address, caller bind.ContractCaller) (*LiquidLogicCaller, error) {
	contract, err := bindLiquidLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicCaller{contract: contract}, nil
}

// NewLiquidLogicTransactor creates a new write-only instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidLogicTransactor, error) {
	contract, err := bindLiquidLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicTransactor{contract: contract}, nil
}

// NewLiquidLogicFilterer creates a new log filterer instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidLogicFilterer, error) {
	contract, err := bindLiquidLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicFilterer{contract: contract}, nil
}

// bindLiquidLogic binds a generic wrapper to an already deployed contract.
func bindLiquidLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidLogic *LiquidLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidLogic.Contract.LiquidLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidLogic *LiquidLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.Contract.LiquidLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidLogic *LiquidLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidLogic.Contract.LiquidLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidLogic *LiquidLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidLogic *LiquidLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidLogic *LiquidLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidLogic.Contract.contract.Transact(opts, method, params...)
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) COMMISSIONRATEPRECISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) COMMISSIONRATEPRECISION() (*big.Int, error) {
	return _LiquidLogic.Contract.COMMISSIONRATEPRECISION(&_LiquidLogic.CallOpts)
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) COMMISSIONRATEPRECISION() (*big.Int, error) {
	return _LiquidLogic.Contract.COMMISSIONRATEPRECISION(&_LiquidLogic.CallOpts)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) FEEFACTORUNITRECIP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _LiquidLogic.Contract.FEEFACTORUNITRECIP(&_LiquidLogic.CallOpts)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _LiquidLogic.Contract.FEEFACTORUNITRECIP(&_LiquidLogic.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) Allowance(opts *bind.CallOpts, _owner common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "allowance", _owner, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.Allowance(&_LiquidLogic.CallOpts, _owner, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.Allowance(&_LiquidLogic.CallOpts, _owner, _spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _account) view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) BalanceOf(opts *bind.CallOpts, _account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "balanceOf", _account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _account) view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) BalanceOf(_account common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.BalanceOf(&_LiquidLogic.CallOpts, _account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _account) view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) BalanceOf(_account common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.BalanceOf(&_LiquidLogic.CallOpts, _account)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) CommissionRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "commissionRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) CommissionRate() (*big.Int, error) {
	return _LiquidLogic.Contract.CommissionRate(&_LiquidLogic.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) CommissionRate() (*big.Int, error) {
	return _LiquidLogic.Contract.CommissionRate(&_LiquidLogic.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_LiquidLogic *LiquidLogicCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_LiquidLogic *LiquidLogicSession) GetNewContract() ([]byte, string, error) {
	return _LiquidLogic.Contract.GetNewContract(&_LiquidLogic.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_LiquidLogic *LiquidLogicCallerSession) GetNewContract() ([]byte, string, error) {
	return _LiquidLogic.Contract.GetNewContract(&_LiquidLogic.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogicCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogicSession) Name() (string, error) {
	return _LiquidLogic.Contract.Name(&_LiquidLogic.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogicCallerSession) Name() (string, error) {
	return _LiquidLogic.Contract.Name(&_LiquidLogic.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogicCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogicSession) Symbol() (string, error) {
	return _LiquidLogic.Contract.Symbol(&_LiquidLogic.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogicCallerSession) Symbol() (string, error) {
	return _LiquidLogic.Contract.Symbol(&_LiquidLogic.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) TotalSupply() (*big.Int, error) {
	return _LiquidLogic.Contract.TotalSupply(&_LiquidLogic.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) TotalSupply() (*big.Int, error) {
	return _LiquidLogic.Contract.TotalSupply(&_LiquidLogic.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_LiquidLogic *LiquidLogicCaller) Treasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "treasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_LiquidLogic *LiquidLogicSession) Treasury() (common.Address, error) {
	return _LiquidLogic.Contract.Treasury(&_LiquidLogic.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_LiquidLogic *LiquidLogicCallerSession) Treasury() (common.Address, error) {
	return _LiquidLogic.Contract.Treasury(&_LiquidLogic.CallOpts)
}

// TreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x2d804308.
//
// Solidity: function treasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) TreasuryUnclaimedATN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "treasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x2d804308.
//
// Solidity: function treasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) TreasuryUnclaimedATN() (*big.Int, error) {
	return _LiquidLogic.Contract.TreasuryUnclaimedATN(&_LiquidLogic.CallOpts)
}

// TreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x2d804308.
//
// Solidity: function treasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) TreasuryUnclaimedATN() (*big.Int, error) {
	return _LiquidLogic.Contract.TreasuryUnclaimedATN(&_LiquidLogic.CallOpts)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0xb05cd6c9.
//
// Solidity: function unclaimedRewards(uint256 _balance, uint256 _atnRealisedFees, uint256 _ntnRealisedFees, uint256 _atnUnrealisedFeeFactor, uint256 _ntnUnrealisedFeeFactor, uint256 _atnLastUnrealisedFeeFactor, uint256 _ntnLastUnrealisedFeeFactor) pure returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidLogic *LiquidLogicCaller) UnclaimedRewards(opts *bind.CallOpts, _balance *big.Int, _atnRealisedFees *big.Int, _ntnRealisedFees *big.Int, _atnUnrealisedFeeFactor *big.Int, _ntnUnrealisedFeeFactor *big.Int, _atnLastUnrealisedFeeFactor *big.Int, _ntnLastUnrealisedFeeFactor *big.Int) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "unclaimedRewards", _balance, _atnRealisedFees, _ntnRealisedFees, _atnUnrealisedFeeFactor, _ntnUnrealisedFeeFactor, _atnLastUnrealisedFeeFactor, _ntnLastUnrealisedFeeFactor)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0xb05cd6c9.
//
// Solidity: function unclaimedRewards(uint256 _balance, uint256 _atnRealisedFees, uint256 _ntnRealisedFees, uint256 _atnUnrealisedFeeFactor, uint256 _ntnUnrealisedFeeFactor, uint256 _atnLastUnrealisedFeeFactor, uint256 _ntnLastUnrealisedFeeFactor) pure returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidLogic *LiquidLogicSession) UnclaimedRewards(_balance *big.Int, _atnRealisedFees *big.Int, _ntnRealisedFees *big.Int, _atnUnrealisedFeeFactor *big.Int, _ntnUnrealisedFeeFactor *big.Int, _atnLastUnrealisedFeeFactor *big.Int, _ntnLastUnrealisedFeeFactor *big.Int) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, error) {
	return _LiquidLogic.Contract.UnclaimedRewards(&_LiquidLogic.CallOpts, _balance, _atnRealisedFees, _ntnRealisedFees, _atnUnrealisedFeeFactor, _ntnUnrealisedFeeFactor, _atnLastUnrealisedFeeFactor, _ntnLastUnrealisedFeeFactor)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0xb05cd6c9.
//
// Solidity: function unclaimedRewards(uint256 _balance, uint256 _atnRealisedFees, uint256 _ntnRealisedFees, uint256 _atnUnrealisedFeeFactor, uint256 _ntnUnrealisedFeeFactor, uint256 _atnLastUnrealisedFeeFactor, uint256 _ntnLastUnrealisedFeeFactor) pure returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidLogic *LiquidLogicCallerSession) UnclaimedRewards(_balance *big.Int, _atnRealisedFees *big.Int, _ntnRealisedFees *big.Int, _atnUnrealisedFeeFactor *big.Int, _ntnUnrealisedFeeFactor *big.Int, _atnLastUnrealisedFeeFactor *big.Int, _ntnLastUnrealisedFeeFactor *big.Int) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, error) {
	return _LiquidLogic.Contract.UnclaimedRewards(&_LiquidLogic.CallOpts, _balance, _atnRealisedFees, _ntnRealisedFees, _atnUnrealisedFeeFactor, _ntnUnrealisedFeeFactor, _atnLastUnrealisedFeeFactor, _ntnLastUnrealisedFeeFactor)
}

// Validator is a free data retrieval call binding the contract method 0x3a5381b5.
//
// Solidity: function validator() view returns(address)
func (_LiquidLogic *LiquidLogicCaller) Validator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "validator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Validator is a free data retrieval call binding the contract method 0x3a5381b5.
//
// Solidity: function validator() view returns(address)
func (_LiquidLogic *LiquidLogicSession) Validator() (common.Address, error) {
	return _LiquidLogic.Contract.Validator(&_LiquidLogic.CallOpts)
}

// Validator is a free data retrieval call binding the contract method 0x3a5381b5.
//
// Solidity: function validator() view returns(address)
func (_LiquidLogic *LiquidLogicCallerSession) Validator() (common.Address, error) {
	return _LiquidLogic.Contract.Validator(&_LiquidLogic.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "approve", _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Approve(&_LiquidLogic.TransactOpts, _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactorSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Approve(&_LiquidLogic.TransactOpts, _spender, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Burn(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "burn", _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Burn(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Burn(&_LiquidLogic.TransactOpts, _account, _amount)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogicTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "claimRewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogicSession) ClaimRewards() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimRewards(&_LiquidLogic.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogicTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimRewards(&_LiquidLogic.TransactOpts)
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogicTransactor) ClaimTreasuryATN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "claimTreasuryATN")
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogicSession) ClaimTreasuryATN() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimTreasuryATN(&_LiquidLogic.TransactOpts)
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogicTransactorSession) ClaimTreasuryATN() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimTreasuryATN(&_LiquidLogic.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_LiquidLogic *LiquidLogicTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_LiquidLogic *LiquidLogicSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _LiquidLogic.Contract.CompleteContractUpgrade(&_LiquidLogic.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_LiquidLogic *LiquidLogicTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _LiquidLogic.Contract.CompleteContractUpgrade(&_LiquidLogic.TransactOpts)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Lock(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "lock", _account, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Lock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Lock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Lock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Lock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Mint(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "mint", _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Mint(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Mint(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogicTransactor) Redistribute(opts *bind.TransactOpts, _ntnReward *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "redistribute", _ntnReward)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogicSession) Redistribute(_ntnReward *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Redistribute(&_LiquidLogic.TransactOpts, _ntnReward)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogicTransactorSession) Redistribute(_ntnReward *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Redistribute(&_LiquidLogic.TransactOpts, _ntnReward)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_LiquidLogic *LiquidLogicTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_LiquidLogic *LiquidLogicSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ResetContractUpgrade(&_LiquidLogic.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_LiquidLogic *LiquidLogicTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ResetContractUpgrade(&_LiquidLogic.TransactOpts)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogicTransactor) SetCommissionRate(opts *bind.TransactOpts, _rate *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "setCommissionRate", _rate)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogicSession) SetCommissionRate(_rate *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.SetCommissionRate(&_LiquidLogic.TransactOpts, _rate)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) SetCommissionRate(_rate *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.SetCommissionRate(&_LiquidLogic.TransactOpts, _rate)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogicTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogicSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Transfer(&_LiquidLogic.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogicTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Transfer(&_LiquidLogic.TransactOpts, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactor) TransferFrom(opts *bind.TransactOpts, _sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "transferFrom", _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.TransferFrom(&_LiquidLogic.TransactOpts, _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactorSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.TransferFrom(&_LiquidLogic.TransactOpts, _sender, _recipient, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Unlock(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "unlock", _account, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Unlock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Unlock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Unlock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Unlock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_LiquidLogic *LiquidLogicTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_LiquidLogic *LiquidLogicSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _LiquidLogic.Contract.UpgradeContract(&_LiquidLogic.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _LiquidLogic.Contract.UpgradeContract(&_LiquidLogic.TransactOpts, _bytecode, _abi)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogicTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LiquidLogic.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogicSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Fallback(&_LiquidLogic.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Fallback(&_LiquidLogic.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogicTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogicSession) Receive() (*types.Transaction, error) {
	return _LiquidLogic.Contract.Receive(&_LiquidLogic.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Receive() (*types.Transaction, error) {
	return _LiquidLogic.Contract.Receive(&_LiquidLogic.TransactOpts)
}

// LiquidLogicApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LiquidLogic contract.
type LiquidLogicApprovalIterator struct {
	Event *LiquidLogicApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidLogicApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidLogicApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidLogicApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidLogicApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidLogicApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidLogicApproval represents a Approval event raised by the LiquidLogic contract.
type LiquidLogicApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LiquidLogicApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicApprovalIterator{contract: _LiquidLogic.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LiquidLogicApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidLogicApproval)
				if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) ParseApproval(log types.Log) (*LiquidLogicApproval, error) {
	event := new(LiquidLogicApproval)
	if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidLogicTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LiquidLogic contract.
type LiquidLogicTransferIterator struct {
	Event *LiquidLogicTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidLogicTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidLogicTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidLogicTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidLogicTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidLogicTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidLogicTransfer represents a Transfer event raised by the LiquidLogic contract.
type LiquidLogicTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidLogicTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicTransferIterator{contract: _LiquidLogic.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LiquidLogicTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidLogicTransfer)
				if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) ParseTransfer(log types.Log) (*LiquidLogicTransfer, error) {
	event := new(LiquidLogicTransfer)
	if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidRewardManagerMetaData contains all meta data concerning the LiquidRewardManager contract.
var LiquidRewardManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161011138038061011183398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b607f806100926000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063187cf4d714602d575b600080fd5b6037633b9aca0081565b60405190815260200160405180910390f3fea2646970667358221220f0f09cdd2bfce00717bd03a620e01d9bdac3c27a25445ab78fd907b1a9f1281164736f6c63430008150033",
}

// LiquidRewardManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidRewardManagerMetaData.ABI instead.
var LiquidRewardManagerABI = LiquidRewardManagerMetaData.ABI

// Deprecated: Use LiquidRewardManagerMetaData.Sigs instead.
// LiquidRewardManagerFuncSigs maps the 4-byte function signature to its string representation.
var LiquidRewardManagerFuncSigs = LiquidRewardManagerMetaData.Sigs

// LiquidRewardManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidRewardManagerMetaData.Bin instead.
var LiquidRewardManagerBin = LiquidRewardManagerMetaData.Bin

// DeployLiquidRewardManager deploys a new Ethereum contract, binding an instance of LiquidRewardManager to it.
func DeployLiquidRewardManager(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *LiquidRewardManager, error) {
	parsed, err := LiquidRewardManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidRewardManagerBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidRewardManager{LiquidRewardManagerCaller: LiquidRewardManagerCaller{contract: contract}, LiquidRewardManagerTransactor: LiquidRewardManagerTransactor{contract: contract}, LiquidRewardManagerFilterer: LiquidRewardManagerFilterer{contract: contract}}, nil
}

// LiquidRewardManager is an auto generated Go binding around an Ethereum contract.
type LiquidRewardManager struct {
	LiquidRewardManagerCaller     // Read-only binding to the contract
	LiquidRewardManagerTransactor // Write-only binding to the contract
	LiquidRewardManagerFilterer   // Log filterer for contract events
}

// LiquidRewardManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidRewardManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidRewardManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidRewardManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidRewardManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidRewardManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidRewardManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidRewardManagerSession struct {
	Contract     *LiquidRewardManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// LiquidRewardManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidRewardManagerCallerSession struct {
	Contract *LiquidRewardManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// LiquidRewardManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidRewardManagerTransactorSession struct {
	Contract     *LiquidRewardManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// LiquidRewardManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidRewardManagerRaw struct {
	Contract *LiquidRewardManager // Generic contract binding to access the raw methods on
}

// LiquidRewardManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidRewardManagerCallerRaw struct {
	Contract *LiquidRewardManagerCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidRewardManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidRewardManagerTransactorRaw struct {
	Contract *LiquidRewardManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidRewardManager creates a new instance of LiquidRewardManager, bound to a specific deployed contract.
func NewLiquidRewardManager(address common.Address, backend bind.ContractBackend) (*LiquidRewardManager, error) {
	contract, err := bindLiquidRewardManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidRewardManager{LiquidRewardManagerCaller: LiquidRewardManagerCaller{contract: contract}, LiquidRewardManagerTransactor: LiquidRewardManagerTransactor{contract: contract}, LiquidRewardManagerFilterer: LiquidRewardManagerFilterer{contract: contract}}, nil
}

// NewLiquidRewardManagerCaller creates a new read-only instance of LiquidRewardManager, bound to a specific deployed contract.
func NewLiquidRewardManagerCaller(address common.Address, caller bind.ContractCaller) (*LiquidRewardManagerCaller, error) {
	contract, err := bindLiquidRewardManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidRewardManagerCaller{contract: contract}, nil
}

// NewLiquidRewardManagerTransactor creates a new write-only instance of LiquidRewardManager, bound to a specific deployed contract.
func NewLiquidRewardManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidRewardManagerTransactor, error) {
	contract, err := bindLiquidRewardManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidRewardManagerTransactor{contract: contract}, nil
}

// NewLiquidRewardManagerFilterer creates a new log filterer instance of LiquidRewardManager, bound to a specific deployed contract.
func NewLiquidRewardManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidRewardManagerFilterer, error) {
	contract, err := bindLiquidRewardManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidRewardManagerFilterer{contract: contract}, nil
}

// bindLiquidRewardManager binds a generic wrapper to an already deployed contract.
func bindLiquidRewardManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidRewardManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidRewardManager *LiquidRewardManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidRewardManager.Contract.LiquidRewardManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidRewardManager *LiquidRewardManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidRewardManager.Contract.LiquidRewardManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidRewardManager *LiquidRewardManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidRewardManager.Contract.LiquidRewardManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidRewardManager *LiquidRewardManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidRewardManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidRewardManager *LiquidRewardManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidRewardManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidRewardManager *LiquidRewardManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidRewardManager.Contract.contract.Transact(opts, method, params...)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidRewardManager *LiquidRewardManagerCaller) FEEFACTORUNITRECIP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidRewardManager.contract.Call(opts, &out, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidRewardManager *LiquidRewardManagerSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _LiquidRewardManager.Contract.FEEFACTORUNITRECIP(&_LiquidRewardManager.CallOpts)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidRewardManager *LiquidRewardManagerCallerSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _LiquidRewardManager.Contract.FEEFACTORUNITRECIP(&_LiquidRewardManager.CallOpts)
}

// LiquidStateMetaData contains all meta data concerning the LiquidState contract.
var LiquidStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"70a08231": "balanceOf(address)",
		"5ea1d6f8": "commissionRate()",
		"872cf059": "completeContractUpgrade()",
		"313ce567": "decimals()",
		"b66b3e79": "getNewContract()",
		"96f18a32": "liquidLogicContract()",
		"59355736": "lockedBalanceOf(address)",
		"06fdde03": "name()",
		"cf9c5719": "resetContractUpgrade()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"61d027b3": "treasury()",
		"2d804308": "treasuryUnclaimedATN()",
		"949813b8": "unclaimedRewards(address)",
		"84955c88": "unlockedBalanceOf(address)",
		"b2ea9adb": "upgradeContract(bytes,string)",
		"3a5381b5": "validator()",
	},
	Bin: "0x60806040523480156200001157600080fd5b5060405162001249380380620012498339810160408190526200003491620001c6565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000999190620002c8565b831115620000a657600080fd5b600f80546001600160a01b038088166001600160a01b03199283161790925560108054928716929091169190911790556011839055604051620000ee908390602001620002e2565b604051602081830303815290604052600d90816200010d9190620003a0565b5081604051602001620001219190620002e2565b604051602081830303815290604052600e9081620001409190620003a0565b5050601380546001600160a01b03191633179055506200046c92505050565b6001600160a01b03811681146200017557600080fd5b50565b805162000185816200015f565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001bd578181015183820152602001620001a3565b50506000910152565b600080600080600060a08688031215620001df57600080fd5b8551620001ec816200015f565b6020870151909550620001ff816200015f565b6040870151606088015191955093506001600160401b03808211156200022457600080fd5b818801915088601f8301126200023957600080fd5b8151818111156200024e576200024e6200018a565b604051601f8201601f19908116603f011681019083821181831017156200027957620002796200018a565b816040528281528b60208487010111156200029357600080fd5b620002a6836020830160208801620001a0565b8096505050505050620002bc6080870162000178565b90509295509295909350565b600060208284031215620002db57600080fd5b5051919050565b644c4e544e2d60d81b81526000825162000304816005850160208701620001a0565b9190910160050192915050565b600181811c908216806200032657607f821691505b6020821081036200034757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039b57600081815260208120601f850160051c81016020861015620003765750805b601f850160051c820191505b81811015620003975782815560010162000382565b5050505b505050565b81516001600160401b03811115620003bc57620003bc6200018a565b620003d481620003cd845462000311565b846200034d565b602080601f8311600181146200040c5760008415620003f35750858301515b600019600386901b1c1916600185901b17855562000397565b600085815260208120601f198616915b828110156200043d578886015182559484019460019091019084016200041c565b50858210156200045c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dcd806200047c6000396000f3fe60806040526004361061010d5760003560e01c806384955c881161009557806396f18a321161006457806396f18a321461030e578063b2ea9adb14610323578063b66b3e7914610343578063cf9c571914610366578063dd62ed3e1461037b57610124565b806384955c8814610285578063872cf059146102a5578063949813b8146102c457806395d89b41146102f957610124565b80633a5381b5116100dc5780633a5381b5146101ab57806359355736146101e35780635ea1d6f81461021957806361d027b31461022f57806370a082311461024f57610124565b806306fdde031461012f57806318160ddd1461015a5780632d80430814610179578063313ce5671461018f57610124565b366101245761012261011d6103c1565b61049d565b005b61012261011d6103c1565b34801561013b57600080fd5b506101446104c0565b6040516101519190610b11565b60405180910390f35b34801561016657600080fd5b506006545b604051908152602001610151565b34801561018557600080fd5b5061016b60125481565b34801561019b57600080fd5b5060405160128152602001610151565b3480156101b757600080fd5b50600f546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b3480156101ef57600080fd5b5061016b6101fe366004610b40565b6001600160a01b031660009081526004602052604090205490565b34801561022557600080fd5b5061016b60115481565b34801561023b57600080fd5b506010546101cb906001600160a01b031681565b34801561025b57600080fd5b5061016b61026a366004610b40565b6001600160a01b031660009081526003602052604090205490565b34801561029157600080fd5b5061016b6102a0366004610b40565b61054e565b3480156102b157600080fd5b506101226002805460ff19166001179055565b3480156102d057600080fd5b506102e46102df366004610b40565b610582565b60408051928352602083019190915201610151565b34801561030557600080fd5b50610144610703565b34801561031a57600080fd5b506101cb6103c1565b34801561032f57600080fd5b5061012261033e366004610be9565b610710565b34801561034f57600080fd5b5061035861072a565b604051610151929190610c78565b34801561037257600080fd5b50610122610851565b34801561038757600080fd5b5061016b610396366004610ca6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600080601360009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610cdf565b90506001600160a01b0381166104985760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f742073657400000060448201526064015b60405180910390fd5b919050565b3660008037600080366000845af43d6000803e806104ba573d6000fd5b503d6000f35b600d80546104cd90610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990610cfc565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050505081565b6001600160a01b038116600090815260046020908152604080832054600390925282205461057c9190610d36565b92915050565b60008060006106436105926103c1565b6001600160a01b0386166000908152600360209081526040808320546007835281842054600a8452828520546008855283862054600b9095529483902054600954600c549451610614979496939590602401968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60408051601f198184030181529190526020810180516001600160e01b031663b05cd6c960e01b179052610874565b90506040815110156106905760405162461bcd60e51b81526020600482015260166024820152756e6f7420656e6f7567682072657475726e206461746160501b604482015260640161048f565b6040805160208082528183019092526000916020820181803683375050604080516020808252818301909252929350600092915080820181803683375050506020848101518482015260408501519082015290506106ed82610d57565b94506106f881610d57565b949694955050505050565b600e80546104cd90610cfc565b61071b600083610920565b610726600182610920565b5050565b6060806000600181805461073d90610cfc565b80601f016020809104026020016040519081016040528092919081815260200182805461076990610cfc565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b505050505091508080546107c990610cfc565b80601f01602080910402602001604051908101604052809291908181526020018280546107f590610cfc565b80156108425780601f1061081757610100808354040283529160200191610842565b820191906000526020600020905b81548152906001019060200180831161082557829003601f168201915b50505050509050915091509091565b61085c600080610a6b565b61086860016000610a6b565b6002805460ff19169055565b6060600080846001600160a01b0316846040516108919190610d7b565b600060405180830381855afa9150503d80600081146108cc576040519150601f19603f3d011682016040523d82523d6000602084013e6108d1565b606091505b5091509150816109185760405162461bcd60e51b81526020600482015260126024820152711cdd185d1a58c818d85b1b0819985a5b195960721b604482015260640161048f565b949350505050565b8154600260018083161561010002038216048251808201602081106020841001600281146109ca57600181146109ef578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156109b45781518455600184019350602082019150610997565b815191036101000a908190040290915550610a62565b60028302826020036101000a846020036101000a602089015104020185018755610a62565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015610a505781518455600184019350602082019150610a33565b815191036101000a9081900402909155505b50505050505050565b508054610a7790610cfc565b6000825580601f10610a87575050565b601f016020900490600052602060002090810190610aa59190610aa8565b50565b5b80821115610abd5760008155600101610aa9565b5090565b60005b83811015610adc578181015183820152602001610ac4565b50506000910152565b60008151808452610afd816020860160208601610ac1565b601f01601f19169290920160200192915050565b602081526000610b246020830184610ae5565b9392505050565b6001600160a01b0381168114610aa557600080fd5b600060208284031215610b5257600080fd5b8135610b2481610b2b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610b8e57610b8e610b5d565b604051601f8501601f19908116603f01168101908282118183101715610bb657610bb6610b5d565b81604052809350858152868686011115610bcf57600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215610bfc57600080fd5b823567ffffffffffffffff80821115610c1457600080fd5b818501915085601f830112610c2857600080fd5b610c3786833560208501610b73565b93506020850135915080821115610c4d57600080fd5b508301601f81018513610c5f57600080fd5b610c6e85823560208401610b73565b9150509250929050565b604081526000610c8b6040830185610ae5565b8281036020840152610c9d8185610ae5565b95945050505050565b60008060408385031215610cb957600080fd5b8235610cc481610b2b565b91506020830135610cd481610b2b565b809150509250929050565b600060208284031215610cf157600080fd5b8151610b2481610b2b565b600181811c90821680610d1057607f821691505b602082108103610d3057634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561057c57634e487b7160e01b600052601160045260246000fd5b80516020808301519190811015610d305760001960209190910360031b1b16919050565b60008251610d8d818460208701610ac1565b919091019291505056fea26469706673582212204655df825ebed0467409cfc6336a0b45df1b65321bdd2f6445a07381250c11c864736f6c63430008150033",
}

// LiquidStateABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateMetaData.ABI instead.
var LiquidStateABI = LiquidStateMetaData.ABI

// Deprecated: Use LiquidStateMetaData.Sigs instead.
// LiquidStateFuncSigs maps the 4-byte function signature to its string representation.
var LiquidStateFuncSigs = LiquidStateMetaData.Sigs

// LiquidStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateMetaData.Bin instead.
var LiquidStateBin = LiquidStateMetaData.Bin

// DeployLiquidState deploys a new Ethereum contract, binding an instance of LiquidState to it.
func DeployLiquidState(auth *bind.TransactOpts, backend bind.ContractBackend, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, *types.Transaction, *LiquidState, error) {
	parsed, err := LiquidStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidStateBin), backend, _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidState{LiquidStateCaller: LiquidStateCaller{contract: contract}, LiquidStateTransactor: LiquidStateTransactor{contract: contract}, LiquidStateFilterer: LiquidStateFilterer{contract: contract}}, nil
}

// LiquidState is an auto generated Go binding around an Ethereum contract.
type LiquidState struct {
	LiquidStateCaller     // Read-only binding to the contract
	LiquidStateTransactor // Write-only binding to the contract
	LiquidStateFilterer   // Log filterer for contract events
}

// LiquidStateCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidStateCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidStateTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidStateFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidStateSession struct {
	Contract     *LiquidState      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidStateCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidStateCallerSession struct {
	Contract *LiquidStateCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LiquidStateTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidStateTransactorSession struct {
	Contract     *LiquidStateTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LiquidStateRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidStateRaw struct {
	Contract *LiquidState // Generic contract binding to access the raw methods on
}

// LiquidStateCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidStateCallerRaw struct {
	Contract *LiquidStateCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidStateTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidStateTransactorRaw struct {
	Contract *LiquidStateTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidState creates a new instance of LiquidState, bound to a specific deployed contract.
func NewLiquidState(address common.Address, backend bind.ContractBackend) (*LiquidState, error) {
	contract, err := bindLiquidState(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidState{LiquidStateCaller: LiquidStateCaller{contract: contract}, LiquidStateTransactor: LiquidStateTransactor{contract: contract}, LiquidStateFilterer: LiquidStateFilterer{contract: contract}}, nil
}

// NewLiquidStateCaller creates a new read-only instance of LiquidState, bound to a specific deployed contract.
func NewLiquidStateCaller(address common.Address, caller bind.ContractCaller) (*LiquidStateCaller, error) {
	contract, err := bindLiquidState(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStateCaller{contract: contract}, nil
}

// NewLiquidStateTransactor creates a new write-only instance of LiquidState, bound to a specific deployed contract.
func NewLiquidStateTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidStateTransactor, error) {
	contract, err := bindLiquidState(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStateTransactor{contract: contract}, nil
}

// NewLiquidStateFilterer creates a new log filterer instance of LiquidState, bound to a specific deployed contract.
func NewLiquidStateFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidStateFilterer, error) {
	contract, err := bindLiquidState(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidStateFilterer{contract: contract}, nil
}

// bindLiquidState binds a generic wrapper to an already deployed contract.
func bindLiquidState(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidStateABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidState *LiquidStateRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidState.Contract.LiquidStateCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidState *LiquidStateRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.Contract.LiquidStateTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidState *LiquidStateRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidState.Contract.LiquidStateTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidState *LiquidStateCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidState.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidState *LiquidStateTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidState *LiquidStateTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidState.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidState *LiquidStateCaller) Allowance(opts *bind.CallOpts, _owner common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "allowance", _owner, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidState *LiquidStateSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _LiquidState.Contract.Allowance(&_LiquidState.CallOpts, _owner, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidState *LiquidStateCallerSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _LiquidState.Contract.Allowance(&_LiquidState.CallOpts, _owner, _spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateCaller) BalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "balanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateSession) BalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidState.Contract.BalanceOf(&_LiquidState.CallOpts, _delegator)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateCallerSession) BalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidState.Contract.BalanceOf(&_LiquidState.CallOpts, _delegator)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_LiquidState *LiquidStateCaller) CommissionRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "commissionRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_LiquidState *LiquidStateSession) CommissionRate() (*big.Int, error) {
	return _LiquidState.Contract.CommissionRate(&_LiquidState.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_LiquidState *LiquidStateCallerSession) CommissionRate() (*big.Int, error) {
	return _LiquidState.Contract.CommissionRate(&_LiquidState.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidState *LiquidStateCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidState *LiquidStateSession) Decimals() (uint8, error) {
	return _LiquidState.Contract.Decimals(&_LiquidState.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidState *LiquidStateCallerSession) Decimals() (uint8, error) {
	return _LiquidState.Contract.Decimals(&_LiquidState.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_LiquidState *LiquidStateCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_LiquidState *LiquidStateSession) GetNewContract() ([]byte, string, error) {
	return _LiquidState.Contract.GetNewContract(&_LiquidState.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_LiquidState *LiquidStateCallerSession) GetNewContract() ([]byte, string, error) {
	return _LiquidState.Contract.GetNewContract(&_LiquidState.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidState *LiquidStateCaller) LiquidLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidState *LiquidStateSession) LiquidLogicContract() (common.Address, error) {
	return _LiquidState.Contract.LiquidLogicContract(&_LiquidState.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidState *LiquidStateCallerSession) LiquidLogicContract() (common.Address, error) {
	return _LiquidState.Contract.LiquidLogicContract(&_LiquidState.CallOpts)
}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateCaller) LockedBalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateSession) LockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidState.Contract.LockedBalanceOf(&_LiquidState.CallOpts, _delegator)
}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateCallerSession) LockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidState.Contract.LockedBalanceOf(&_LiquidState.CallOpts, _delegator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidState *LiquidStateCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidState *LiquidStateSession) Name() (string, error) {
	return _LiquidState.Contract.Name(&_LiquidState.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidState *LiquidStateCallerSession) Name() (string, error) {
	return _LiquidState.Contract.Name(&_LiquidState.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidState *LiquidStateCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidState *LiquidStateSession) Symbol() (string, error) {
	return _LiquidState.Contract.Symbol(&_LiquidState.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidState *LiquidStateCallerSession) Symbol() (string, error) {
	return _LiquidState.Contract.Symbol(&_LiquidState.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidState *LiquidStateCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidState *LiquidStateSession) TotalSupply() (*big.Int, error) {
	return _LiquidState.Contract.TotalSupply(&_LiquidState.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidState *LiquidStateCallerSession) TotalSupply() (*big.Int, error) {
	return _LiquidState.Contract.TotalSupply(&_LiquidState.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_LiquidState *LiquidStateCaller) Treasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "treasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_LiquidState *LiquidStateSession) Treasury() (common.Address, error) {
	return _LiquidState.Contract.Treasury(&_LiquidState.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_LiquidState *LiquidStateCallerSession) Treasury() (common.Address, error) {
	return _LiquidState.Contract.Treasury(&_LiquidState.CallOpts)
}

// TreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x2d804308.
//
// Solidity: function treasuryUnclaimedATN() view returns(uint256)
func (_LiquidState *LiquidStateCaller) TreasuryUnclaimedATN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "treasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x2d804308.
//
// Solidity: function treasuryUnclaimedATN() view returns(uint256)
func (_LiquidState *LiquidStateSession) TreasuryUnclaimedATN() (*big.Int, error) {
	return _LiquidState.Contract.TreasuryUnclaimedATN(&_LiquidState.CallOpts)
}

// TreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x2d804308.
//
// Solidity: function treasuryUnclaimedATN() view returns(uint256)
func (_LiquidState *LiquidStateCallerSession) TreasuryUnclaimedATN() (*big.Int, error) {
	return _LiquidState.Contract.TreasuryUnclaimedATN(&_LiquidState.CallOpts)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidState *LiquidStateCaller) UnclaimedRewards(opts *bind.CallOpts, _account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "unclaimedRewards", _account)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidState *LiquidStateSession) UnclaimedRewards(_account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, error) {
	return _LiquidState.Contract.UnclaimedRewards(&_LiquidState.CallOpts, _account)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidState *LiquidStateCallerSession) UnclaimedRewards(_account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, error) {
	return _LiquidState.Contract.UnclaimedRewards(&_LiquidState.CallOpts, _account)
}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateCaller) UnlockedBalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateSession) UnlockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidState.Contract.UnlockedBalanceOf(&_LiquidState.CallOpts, _delegator)
}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidState *LiquidStateCallerSession) UnlockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidState.Contract.UnlockedBalanceOf(&_LiquidState.CallOpts, _delegator)
}

// Validator is a free data retrieval call binding the contract method 0x3a5381b5.
//
// Solidity: function validator() view returns(address)
func (_LiquidState *LiquidStateCaller) Validator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidState.contract.Call(opts, &out, "validator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Validator is a free data retrieval call binding the contract method 0x3a5381b5.
//
// Solidity: function validator() view returns(address)
func (_LiquidState *LiquidStateSession) Validator() (common.Address, error) {
	return _LiquidState.Contract.Validator(&_LiquidState.CallOpts)
}

// Validator is a free data retrieval call binding the contract method 0x3a5381b5.
//
// Solidity: function validator() view returns(address)
func (_LiquidState *LiquidStateCallerSession) Validator() (common.Address, error) {
	return _LiquidState.Contract.Validator(&_LiquidState.CallOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_LiquidState *LiquidStateTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_LiquidState *LiquidStateSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _LiquidState.Contract.CompleteContractUpgrade(&_LiquidState.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_LiquidState *LiquidStateTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _LiquidState.Contract.CompleteContractUpgrade(&_LiquidState.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_LiquidState *LiquidStateTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_LiquidState *LiquidStateSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _LiquidState.Contract.ResetContractUpgrade(&_LiquidState.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_LiquidState *LiquidStateTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _LiquidState.Contract.ResetContractUpgrade(&_LiquidState.TransactOpts)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_LiquidState *LiquidStateTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _LiquidState.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_LiquidState *LiquidStateSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _LiquidState.Contract.UpgradeContract(&_LiquidState.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_LiquidState *LiquidStateTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _LiquidState.Contract.UpgradeContract(&_LiquidState.TransactOpts, _bytecode, _abi)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidStateTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LiquidState.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidStateSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidState.Contract.Fallback(&_LiquidState.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidStateTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidState.Contract.Fallback(&_LiquidState.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidState *LiquidStateTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidState *LiquidStateSession) Receive() (*types.Transaction, error) {
	return _LiquidState.Contract.Receive(&_LiquidState.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidState *LiquidStateTransactorSession) Receive() (*types.Transaction, error) {
	return _LiquidState.Contract.Receive(&_LiquidState.TransactOpts)
}

// NonStakableVestingMetaData contains all meta data concerning the NonStakableVesting contract.
var NonStakableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unsubscribedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnlockedUnsubscribed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structNonStakableVesting.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowedDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalNominal\",\"type\":\"uint256\"}],\"name\":\"setTotalNominal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNominal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnlockedSubscribed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newUnlockedUnsubscribed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"2afbbacb": "canStake(address,uint256)",
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"0b5d0e42": "createSchedule(uint256,uint256,uint256,uint256)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"c5ca93a7": "getSchedule(uint256)",
		"d934047d": "maxAllowedDuration()",
		"7b8d4744": "newContract(address,uint256,uint256)",
		"0a30959d": "releaseAllFunds(uint256)",
		"07ae499f": "releaseFund(uint256,uint256)",
		"4e974657": "setMaxAllowedDuration(uint256)",
		"995e21a4": "setTotalNominal(uint256)",
		"635bf933": "totalContracts(address)",
		"b0c93009": "totalNominal()",
		"f968f493": "unlockTokens()",
		"21ec4487": "unlockedFunds(address,uint256)",
	},
	Bin: "0x60806040523480156200001157600080fd5b50604051620019623803806200196283398101604081905262000034916200007f565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b61189480620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637b8d474411610097578063b0c9300911610066578063b0c9300914610242578063c5ca93a71461024b578063d934047d146102bf578063f968f493146102c857600080fd5b80637b8d4744146101e9578063995e21a4146101fc578063a9f45b621461020f578063aad557261461022257600080fd5b806321ec4487116100d357806321ec4487146101695780632afbbacb1461018a5780634e974657146101ad578063635bf933146101c057600080fd5b806307ae499f146101055780630a30959d1461011a5780630b5d0e421461012d578063213fe2b714610140575b600080fd5b610118610113366004611544565b6102e5565b005b610118610128366004611566565b610360565b61011861013b36600461157f565b610385565b61015361014e3660046115cd565b610623565b60405161016091906115e8565b60405180910390f35b61017c61017736600461166d565b610797565b604051908152602001610160565b61019d61019836600461166d565b6107b4565b6040519015158152602001610160565b6101186101bb366004611566565b6107f0565b61017c6101ce3660046115cd565b6001600160a01b031660009081526020819052604090205490565b6101186101f7366004611697565b61081f565b61011861020a366004611566565b610a36565b61011861021d3660046116ca565b610a65565b61023561023036600461166d565b610aa3565b6040516101609190611706565b61017c60045481565b61025e610259366004611566565b610b5c565b6040516101609190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b61017c60055481565b6102d0610c79565b60408051928352602083019190915201610160565b60006102f13384610e1e565b90506102fc81610eb8565b8211156103505760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f75676820756e6c6f636b65642066756e64730000000000000060448201526064015b60405180910390fd5b61035a8183610f02565b50505050565b600061036c3383610e1e565b90506103808161037b83610eb8565b610f02565b505050565b6003546001600160a01b031633146103af5760405162461bcd60e51b81526004016103479061174b565b8360045410156104135760405162461bcd60e51b815260206004820152602960248201527f6e6f7420656e6f7567682066756e647320746f206372656174652061206e6577604482015268207363686564756c6560b81b6064820152608401610347565b8060055410156104825760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b6064820152608401610347565b6040805161010081018252848152602081018481529181018381526060820187815260808301888152600060a0850181815260c0860182815260e087018381526006805460018101825590855297517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60089099029889015597517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4088015594517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4187015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4286015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4385015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4484015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4583015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d469091015560048054869290610618908490611798565b909155505050505050565b6001600160a01b038116600090815260208190526040812080546060929067ffffffffffffffff811115610659576106596117ab565b6040519080825280602002602001820160405280156106c557816020015b6106b26040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816106775790505b50905060005b815181101561078f5760018382815481106106e8576106e86117c1565b906000526020600020015481548110610703576107036117c1565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a08201528251839083908110610771576107716117c1565b60200260200101819052508080610787906117d7565b9150506106cb565b509392505050565b60006107ab6107a68484610e1e565b610eb8565b90505b92915050565b600060016107c28484610e1e565b815481106107d2576107d26117c1565b600091825260209091206006909102016005015460ff169392505050565b6003546001600160a01b0316331461081a5760405162461bcd60e51b81526004016103479061174b565b600555565b6003546001600160a01b031633146108495760405162461bcd60e51b81526004016103479061174b565b60065481106108905760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a59081cd8da19591d5b19481251606a1b6044820152606401610347565b6000600682815481106108a5576108a56117c1565b90600052602060002090600802019050828160040154101561092f5760405162461bcd60e51b815260206004820152603860248201527f6e6f7420656e6f7567682066756e647320746f206372656174652061206e657760448201527f20636f6e747261637420756e646572207363686564756c6500000000000000006064820152608401610347565b600061094c85858460000154856001015486600201546000610f6e565b600081815260076020526040902084905560018301548354919250610970916117f0565b826007015410610a165760006001828154811061098f5761098f6117c1565b9060005260206000209060060201905060008360040154846006015483600001546109ba9190611803565b6109c4919061181a565b9050808460060160008282546109da9190611798565b90915550508154819083906000906109f3908490611798565b9250508190555080826001016000828254610a0e91906117f0565b909155505050505b83826004016000828254610a2a9190611798565b90915550505050505050565b6003546001600160a01b03163314610a605760405162461bcd60e51b81526004016103479061174b565b600455565b6003546001600160a01b03163314610a8f5760405162461bcd60e51b81526004016103479061174b565b610380610a9c8484610e1e565b8483611123565b610ade6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6001610aea8484610e1e565b81548110610afa57610afa6117c1565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b610ba460405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6006548210610bf55760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f742065786973740000000000000000006044820152606401610347565b60068281548110610c0857610c086117c1565b906000526020600020906008020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b60025460009081906001600160a01b03163314610ce95760405162461bcd60e51b815260206004820152602860248201527f66756e6374696f6e207265737472696374656420746f204175746f6e6974792060448201526718dbdb9d1c9858dd60c21b6064820152608401610347565b426000805b600654811015610e0b57600060068281548110610d0d57610d0d6117c1565b906000526020600020906008020190508381600001548260010154610d3291906117f0565b1180610d45575080600501548160030154145b15610d505750610df9565b8381600701819055506000610d7382600001548360020154878560030154611273565b90508160050154811015610d88575060058101545b6005820154610d979082611798565b610da190856117f0565b60058301829055825460028401546004850154929650610dc2928890611273565b90508160060154811015610dd7575060068101545b6006820154610de69082611798565b610df090876117f0565b60069092015593505b80610e03816117d7565b915050610cee565b50610e168382611798565b935050509091565b6001600160a01b0382166000908152602081905260408120548210610e7b5760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b6044820152606401610347565b6001600160a01b0383166000908152602081905260409020805483908110610ea557610ea56117c1565b9060005260206000200154905092915050565b60006107ae82610ec7846112b6565b600085815260076020526040902054600680549091908110610eeb57610eeb6117c1565b9060005260206000209060080201600701546112f7565b60008060018481548110610f1857610f186117c1565b906000526020600020906006020190508060000154831115610f56578054610f409084611798565b9150610f51843383600001546113c8565b610f67565b8215610f6757610f678433856113c8565b5092915050565b6000838311610fbf5760405162461bcd60e51b815260206004820152601e60248201527f656e64206d7573742062652067726561746572207468616e20636c69666600006044820152606401610347565b50600180546040805160c08101825297885260006020808a018281528a8401998a5260608b0198895260808b0197885295151560a08b01908152848601865585835299517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600686029081019190915595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf787015597517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf886015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf985015593517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa84015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb909201805460ff1916921515929092179091556001600160a01b0395909516825281835281208054948501815581522090910181905590565b6001600160a01b0382166000908152602081905260408120805490919061114c90600190611798565b67ffffffffffffffff811115611164576111646117ab565b60405190808252806020026020018201604052801561118d578160200160208202803683370190505b5090506000805b835481101561121b57868482815481106111b0576111b06117c1565b90600052602060002001540315611209578381815481106111d3576111d36117c1565b90600052602060002001548383806111ea906117d7565b9450815181106111fc576111fc6117c1565b6020026020010181815250505b80611213816117d7565b915050611194565b506001600160a01b0385166000908152602081815260409091208351611243928501906114e4565b505050506001600160a01b0316600090815260208181526040822080546001810182559083529120019190915550565b600061127f85856117f0565b831061128c5750806112ae565b836112978685611798565b6112a19084611803565b6112ab919061181a565b90505b949350505050565b600080600183815481106112cc576112cc6117c1565b90600052602060002090600602019050806001015481600001546112f091906117f0565b9392505050565b6000806001858154811061130d5761130d6117c1565b906000526020600020906006020190508060030154816002015461133191906117f0565b8310156113805760405162461bcd60e51b815260206004820152601c60248201527f636c69666620706572696f64206e6f74207265616368656420796574000000006044820152606401610347565b6000611396826002015483600401548688611273565b905081600101548111156113bc5760018201546113b39082611798565b925050506112f0565b50600095945050505050565b6000600184815481106113dd576113dd6117c1565b90600052602060002090600602019050818160000160008282546114019190611798565b925050819055508181600101600082825461141c91906117f0565b9091555061035a9050838360025460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb906044016020604051808303816000875af115801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f919061183c565b9050806103805760405162461bcd60e51b8152602060048201526013602482015272139513881b9bdd081d1c985b9cd9995c9c9959606a1b6044820152606401610347565b82805482825590600052602060002090810192821561151f579160200282015b8281111561151f578251825591602001919060010190611504565b5061152b92915061152f565b5090565b5b8082111561152b5760008155600101611530565b6000806040838503121561155757600080fd5b50508035926020909101359150565b60006020828403121561157857600080fd5b5035919050565b6000806000806080858703121561159557600080fd5b5050823594602084013594506040840135936060013592509050565b80356001600160a01b03811681146115c857600080fd5b919050565b6000602082840312156115df57600080fd5b6107ab826115b1565b6020808252825182820181905260009190848201906040850190845b818110156116615761164e838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c09290920191600101611604565b50909695505050505050565b6000806040838503121561168057600080fd5b611689836115b1565b946020939093013593505050565b6000806000606084860312156116ac57600080fd5b6116b5846115b1565b95602085013595506040909401359392505050565b6000806000606084860312156116df57600080fd5b6116e8846115b1565b9250602084013591506116fd604085016115b1565b90509250925092565b60c081016107ae8284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107ae576107ae611782565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016117e9576117e9611782565b5060010190565b808201808211156107ae576107ae611782565b80820281158282048414176107ae576107ae611782565b60008261183757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561184e57600080fd5b815180151581146112f057600080fdfea264697066735822122070a2d08b851a1dc7565f860cd66c05c36ab5f8713fcf7316015392f0aa6ca14c64736f6c63430008150033",
}

// NonStakableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use NonStakableVestingMetaData.ABI instead.
var NonStakableVestingABI = NonStakableVestingMetaData.ABI

// Deprecated: Use NonStakableVestingMetaData.Sigs instead.
// NonStakableVestingFuncSigs maps the 4-byte function signature to its string representation.
var NonStakableVestingFuncSigs = NonStakableVestingMetaData.Sigs

// NonStakableVestingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NonStakableVestingMetaData.Bin instead.
var NonStakableVestingBin = NonStakableVestingMetaData.Bin

// DeployNonStakableVesting deploys a new Ethereum contract, binding an instance of NonStakableVesting to it.
func DeployNonStakableVesting(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _operator common.Address) (common.Address, *types.Transaction, *NonStakableVesting, error) {
	parsed, err := NonStakableVestingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NonStakableVestingBin), backend, _autonity, _operator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NonStakableVesting{NonStakableVestingCaller: NonStakableVestingCaller{contract: contract}, NonStakableVestingTransactor: NonStakableVestingTransactor{contract: contract}, NonStakableVestingFilterer: NonStakableVestingFilterer{contract: contract}}, nil
}

// NonStakableVesting is an auto generated Go binding around an Ethereum contract.
type NonStakableVesting struct {
	NonStakableVestingCaller     // Read-only binding to the contract
	NonStakableVestingTransactor // Write-only binding to the contract
	NonStakableVestingFilterer   // Log filterer for contract events
}

// NonStakableVestingCaller is an auto generated read-only Go binding around an Ethereum contract.
type NonStakableVestingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NonStakableVestingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NonStakableVestingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NonStakableVestingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NonStakableVestingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NonStakableVestingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NonStakableVestingSession struct {
	Contract     *NonStakableVesting // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// NonStakableVestingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NonStakableVestingCallerSession struct {
	Contract *NonStakableVestingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// NonStakableVestingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NonStakableVestingTransactorSession struct {
	Contract     *NonStakableVestingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// NonStakableVestingRaw is an auto generated low-level Go binding around an Ethereum contract.
type NonStakableVestingRaw struct {
	Contract *NonStakableVesting // Generic contract binding to access the raw methods on
}

// NonStakableVestingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NonStakableVestingCallerRaw struct {
	Contract *NonStakableVestingCaller // Generic read-only contract binding to access the raw methods on
}

// NonStakableVestingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NonStakableVestingTransactorRaw struct {
	Contract *NonStakableVestingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNonStakableVesting creates a new instance of NonStakableVesting, bound to a specific deployed contract.
func NewNonStakableVesting(address common.Address, backend bind.ContractBackend) (*NonStakableVesting, error) {
	contract, err := bindNonStakableVesting(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NonStakableVesting{NonStakableVestingCaller: NonStakableVestingCaller{contract: contract}, NonStakableVestingTransactor: NonStakableVestingTransactor{contract: contract}, NonStakableVestingFilterer: NonStakableVestingFilterer{contract: contract}}, nil
}

// NewNonStakableVestingCaller creates a new read-only instance of NonStakableVesting, bound to a specific deployed contract.
func NewNonStakableVestingCaller(address common.Address, caller bind.ContractCaller) (*NonStakableVestingCaller, error) {
	contract, err := bindNonStakableVesting(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NonStakableVestingCaller{contract: contract}, nil
}

// NewNonStakableVestingTransactor creates a new write-only instance of NonStakableVesting, bound to a specific deployed contract.
func NewNonStakableVestingTransactor(address common.Address, transactor bind.ContractTransactor) (*NonStakableVestingTransactor, error) {
	contract, err := bindNonStakableVesting(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NonStakableVestingTransactor{contract: contract}, nil
}

// NewNonStakableVestingFilterer creates a new log filterer instance of NonStakableVesting, bound to a specific deployed contract.
func NewNonStakableVestingFilterer(address common.Address, filterer bind.ContractFilterer) (*NonStakableVestingFilterer, error) {
	contract, err := bindNonStakableVesting(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NonStakableVestingFilterer{contract: contract}, nil
}

// bindNonStakableVesting binds a generic wrapper to an already deployed contract.
func bindNonStakableVesting(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NonStakableVestingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NonStakableVesting *NonStakableVestingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NonStakableVesting.Contract.NonStakableVestingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NonStakableVesting *NonStakableVestingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.NonStakableVestingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NonStakableVesting *NonStakableVestingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.NonStakableVestingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NonStakableVesting *NonStakableVestingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NonStakableVesting.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NonStakableVesting *NonStakableVestingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NonStakableVesting *NonStakableVestingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.contract.Transact(opts, method, params...)
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_NonStakableVesting *NonStakableVestingCaller) CanStake(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (bool, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "canStake", _beneficiary, _id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_NonStakableVesting *NonStakableVestingSession) CanStake(_beneficiary common.Address, _id *big.Int) (bool, error) {
	return _NonStakableVesting.Contract.CanStake(&_NonStakableVesting.CallOpts, _beneficiary, _id)
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_NonStakableVesting *NonStakableVestingCallerSession) CanStake(_beneficiary common.Address, _id *big.Int) (bool, error) {
	return _NonStakableVesting.Contract.CanStake(&_NonStakableVesting.CallOpts, _beneficiary, _id)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakableVesting *NonStakableVestingCaller) GetContract(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakableVesting *NonStakableVestingSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _NonStakableVesting.Contract.GetContract(&_NonStakableVesting.CallOpts, _beneficiary, _id)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakableVesting *NonStakableVestingCallerSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _NonStakableVesting.Contract.GetContract(&_NonStakableVesting.CallOpts, _beneficiary, _id)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakableVesting *NonStakableVestingCaller) GetContracts(opts *bind.CallOpts, _beneficiary common.Address) ([]ContractBaseContract, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)

	return out0, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakableVesting *NonStakableVestingSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _NonStakableVesting.Contract.GetContracts(&_NonStakableVesting.CallOpts, _beneficiary)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakableVesting *NonStakableVestingCallerSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _NonStakableVesting.Contract.GetContracts(&_NonStakableVesting.CallOpts, _beneficiary)
}

// GetSchedule is a free data retrieval call binding the contract method 0xc5ca93a7.
//
// Solidity: function getSchedule(uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))
func (_NonStakableVesting *NonStakableVestingCaller) GetSchedule(opts *bind.CallOpts, _id *big.Int) (NonStakableVestingSchedule, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "getSchedule", _id)

	if err != nil {
		return *new(NonStakableVestingSchedule), err
	}

	out0 := *abi.ConvertType(out[0], new(NonStakableVestingSchedule)).(*NonStakableVestingSchedule)

	return out0, err

}

// GetSchedule is a free data retrieval call binding the contract method 0xc5ca93a7.
//
// Solidity: function getSchedule(uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))
func (_NonStakableVesting *NonStakableVestingSession) GetSchedule(_id *big.Int) (NonStakableVestingSchedule, error) {
	return _NonStakableVesting.Contract.GetSchedule(&_NonStakableVesting.CallOpts, _id)
}

// GetSchedule is a free data retrieval call binding the contract method 0xc5ca93a7.
//
// Solidity: function getSchedule(uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))
func (_NonStakableVesting *NonStakableVestingCallerSession) GetSchedule(_id *big.Int) (NonStakableVestingSchedule, error) {
	return _NonStakableVesting.Contract.GetSchedule(&_NonStakableVesting.CallOpts, _id)
}

// MaxAllowedDuration is a free data retrieval call binding the contract method 0xd934047d.
//
// Solidity: function maxAllowedDuration() view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCaller) MaxAllowedDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "maxAllowedDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxAllowedDuration is a free data retrieval call binding the contract method 0xd934047d.
//
// Solidity: function maxAllowedDuration() view returns(uint256)
func (_NonStakableVesting *NonStakableVestingSession) MaxAllowedDuration() (*big.Int, error) {
	return _NonStakableVesting.Contract.MaxAllowedDuration(&_NonStakableVesting.CallOpts)
}

// MaxAllowedDuration is a free data retrieval call binding the contract method 0xd934047d.
//
// Solidity: function maxAllowedDuration() view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCallerSession) MaxAllowedDuration() (*big.Int, error) {
	return _NonStakableVesting.Contract.MaxAllowedDuration(&_NonStakableVesting.CallOpts)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCaller) TotalContracts(opts *bind.CallOpts, _beneficiary common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakableVesting *NonStakableVestingSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _NonStakableVesting.Contract.TotalContracts(&_NonStakableVesting.CallOpts, _beneficiary)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCallerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _NonStakableVesting.Contract.TotalContracts(&_NonStakableVesting.CallOpts, _beneficiary)
}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCaller) TotalNominal(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "totalNominal")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_NonStakableVesting *NonStakableVestingSession) TotalNominal() (*big.Int, error) {
	return _NonStakableVesting.Contract.TotalNominal(&_NonStakableVesting.CallOpts)
}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCallerSession) TotalNominal() (*big.Int, error) {
	return _NonStakableVesting.Contract.TotalNominal(&_NonStakableVesting.CallOpts)
}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCaller) UnlockedFunds(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NonStakableVesting.contract.Call(opts, &out, "unlockedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVestingSession) UnlockedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakableVesting.Contract.UnlockedFunds(&_NonStakableVesting.CallOpts, _beneficiary, _id)
}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVestingCallerSession) UnlockedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakableVesting.Contract.UnlockedFunds(&_NonStakableVesting.CallOpts, _beneficiary, _id)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakableVesting *NonStakableVestingTransactor) ChangeContractBeneficiary(opts *bind.TransactOpts, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakableVesting *NonStakableVestingSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.ChangeContractBeneficiary(&_NonStakableVesting.TransactOpts, _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakableVesting *NonStakableVestingTransactorSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.ChangeContractBeneficiary(&_NonStakableVesting.TransactOpts, _beneficiary, _id, _recipient)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x0b5d0e42.
//
// Solidity: function createSchedule(uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_NonStakableVesting *NonStakableVestingTransactor) CreateSchedule(opts *bind.TransactOpts, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "createSchedule", _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x0b5d0e42.
//
// Solidity: function createSchedule(uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_NonStakableVesting *NonStakableVestingSession) CreateSchedule(_amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.CreateSchedule(&_NonStakableVesting.TransactOpts, _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x0b5d0e42.
//
// Solidity: function createSchedule(uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_NonStakableVesting *NonStakableVestingTransactorSession) CreateSchedule(_amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.CreateSchedule(&_NonStakableVesting.TransactOpts, _amount, _startTime, _cliffDuration, _totalDuration)
}

// NewContract is a paid mutator transaction binding the contract method 0x7b8d4744.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVestingTransactor) NewContract(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "newContract", _beneficiary, _amount, _scheduleID)
}

// NewContract is a paid mutator transaction binding the contract method 0x7b8d4744.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVestingSession) NewContract(_beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.NewContract(&_NonStakableVesting.TransactOpts, _beneficiary, _amount, _scheduleID)
}

// NewContract is a paid mutator transaction binding the contract method 0x7b8d4744.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVestingTransactorSession) NewContract(_beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.NewContract(&_NonStakableVesting.TransactOpts, _beneficiary, _amount, _scheduleID)
}

// ReleaseAllFunds is a paid mutator transaction binding the contract method 0x0a30959d.
//
// Solidity: function releaseAllFunds(uint256 _id) returns()
func (_NonStakableVesting *NonStakableVestingTransactor) ReleaseAllFunds(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "releaseAllFunds", _id)
}

// ReleaseAllFunds is a paid mutator transaction binding the contract method 0x0a30959d.
//
// Solidity: function releaseAllFunds(uint256 _id) returns()
func (_NonStakableVesting *NonStakableVestingSession) ReleaseAllFunds(_id *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.ReleaseAllFunds(&_NonStakableVesting.TransactOpts, _id)
}

// ReleaseAllFunds is a paid mutator transaction binding the contract method 0x0a30959d.
//
// Solidity: function releaseAllFunds(uint256 _id) returns()
func (_NonStakableVesting *NonStakableVestingTransactorSession) ReleaseAllFunds(_id *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.ReleaseAllFunds(&_NonStakableVesting.TransactOpts, _id)
}

// ReleaseFund is a paid mutator transaction binding the contract method 0x07ae499f.
//
// Solidity: function releaseFund(uint256 _id, uint256 _amount) returns()
func (_NonStakableVesting *NonStakableVestingTransactor) ReleaseFund(opts *bind.TransactOpts, _id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "releaseFund", _id, _amount)
}

// ReleaseFund is a paid mutator transaction binding the contract method 0x07ae499f.
//
// Solidity: function releaseFund(uint256 _id, uint256 _amount) returns()
func (_NonStakableVesting *NonStakableVestingSession) ReleaseFund(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.ReleaseFund(&_NonStakableVesting.TransactOpts, _id, _amount)
}

// ReleaseFund is a paid mutator transaction binding the contract method 0x07ae499f.
//
// Solidity: function releaseFund(uint256 _id, uint256 _amount) returns()
func (_NonStakableVesting *NonStakableVestingTransactorSession) ReleaseFund(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.ReleaseFund(&_NonStakableVesting.TransactOpts, _id, _amount)
}

// SetMaxAllowedDuration is a paid mutator transaction binding the contract method 0x4e974657.
//
// Solidity: function setMaxAllowedDuration(uint256 _newMaxDuration) returns()
func (_NonStakableVesting *NonStakableVestingTransactor) SetMaxAllowedDuration(opts *bind.TransactOpts, _newMaxDuration *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "setMaxAllowedDuration", _newMaxDuration)
}

// SetMaxAllowedDuration is a paid mutator transaction binding the contract method 0x4e974657.
//
// Solidity: function setMaxAllowedDuration(uint256 _newMaxDuration) returns()
func (_NonStakableVesting *NonStakableVestingSession) SetMaxAllowedDuration(_newMaxDuration *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.SetMaxAllowedDuration(&_NonStakableVesting.TransactOpts, _newMaxDuration)
}

// SetMaxAllowedDuration is a paid mutator transaction binding the contract method 0x4e974657.
//
// Solidity: function setMaxAllowedDuration(uint256 _newMaxDuration) returns()
func (_NonStakableVesting *NonStakableVestingTransactorSession) SetMaxAllowedDuration(_newMaxDuration *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.SetMaxAllowedDuration(&_NonStakableVesting.TransactOpts, _newMaxDuration)
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _totalNominal) returns()
func (_NonStakableVesting *NonStakableVestingTransactor) SetTotalNominal(opts *bind.TransactOpts, _totalNominal *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "setTotalNominal", _totalNominal)
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _totalNominal) returns()
func (_NonStakableVesting *NonStakableVestingSession) SetTotalNominal(_totalNominal *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.SetTotalNominal(&_NonStakableVesting.TransactOpts, _totalNominal)
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _totalNominal) returns()
func (_NonStakableVesting *NonStakableVestingTransactorSession) SetTotalNominal(_totalNominal *big.Int) (*types.Transaction, error) {
	return _NonStakableVesting.Contract.SetTotalNominal(&_NonStakableVesting.TransactOpts, _totalNominal)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_NonStakableVesting *NonStakableVestingTransactor) UnlockTokens(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NonStakableVesting.contract.Transact(opts, "unlockTokens")
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_NonStakableVesting *NonStakableVestingSession) UnlockTokens() (*types.Transaction, error) {
	return _NonStakableVesting.Contract.UnlockTokens(&_NonStakableVesting.TransactOpts)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_NonStakableVesting *NonStakableVestingTransactorSession) UnlockTokens() (*types.Transaction, error) {
	return _NonStakableVesting.Contract.UnlockTokens(&_NonStakableVesting.TransactOpts)
}

// OracleMetaData contains all meta data concerning the Oracle contract.
var OracleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVoterUpdateRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolUpdatedRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVoter\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"e6a02a28": "lastRoundBlock()",
		"aa2f89b5": "lastVoterUpdateRound()",
		"33f98c77": "latestRoundData(string)",
		"5281b5c6": "newSymbols(uint256)",
		"4c56ea56": "reports(string,address)",
		"146ca531": "round()",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"08f21ff5": "symbolUpdatedRound()",
		"ccce413b": "symbols(uint256)",
		"307de9b6": "vote(uint256,int256[],uint256)",
		"a7813587": "votePeriod()",
		"5412b3ae": "votingInfo(address)",
	},
	Bin: "0x6080604052600160ff1b600755600160ff1b6008553480156200002157600080fd5b5060405162002d3438038062002d34833981016040819052620000449162000639565b600280546001600160a01b038087166001600160a01b03199283161790925560038054928616929091169190911790558151620000899060009060208501906200035f565b5081516200009f9060019060208501906200035f565b5080600981905550620000c485600060018851620000be91906200074e565b62000181565b8451620000d9906004906020880190620003bc565b508451620000ef906005906020880190620003bc565b5060016006819055600d8054909101815560009081525b855181101562000175576001600b60008884815181106200012b576200012b6200076a565b6020908102919091018101516001600160a01b03168252810191909152604001600020600201805460ff1916911515919091179055806200016c8162000780565b91505062000106565b505050505050620009c3565b8082126200018e57505050565b81816000856002620001a185856200079c565b620001ad9190620007c6565b620001b9908762000806565b81518110620001cc57620001cc6200076a565b602002602001015190505b8183136200032b575b806001600160a01b0316868481518110620001ff57620001ff6200076a565b60200260200101516001600160a01b031610156200022c5782620002238162000831565b935050620001e0565b806001600160a01b03168683815181106200024b576200024b6200076a565b60200260200101516001600160a01b031611156200027857816200026f816200084c565b9250506200022c565b81831362000325578582815181106200029557620002956200076a565b6020026020010151868481518110620002b257620002b26200076a565b6020026020010151878581518110620002cf57620002cf6200076a565b60200260200101888581518110620002eb57620002eb6200076a565b6001600160a01b0393841660209182029290920101529116905282620003118162000831565b935050818062000321906200084c565b9250505b620001d7565b8185121562000341576200034186868462000181565b8383121562000357576200035786848662000181565b505050505050565b828054828255906000526020600020908101928215620003aa579160200282015b82811115620003aa5782518290620003999082620008f7565b509160200191906001019062000380565b50620003b892915062000422565b5090565b82805482825590600052602060002090810192821562000414579160200282015b828111156200041457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003dd565b50620003b892915062000443565b80821115620003b85760006200043982826200045a565b5060010162000422565b5b80821115620003b8576000815560010162000444565b50805462000468906200086c565b6000825580601f1062000479575050565b601f01602090049060005260206000209081019062000499919062000443565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620004dd57620004dd6200049c565b604052919050565b60006001600160401b038211156200050157620005016200049c565b5060051b60200190565b80516001600160a01b03811681146200052357600080fd5b919050565b6000601f83818401126200053b57600080fd5b82516020620005546200054e83620004e5565b620004b2565b82815260059290921b850181019181810190878411156200057457600080fd5b8287015b848110156200062d5780516001600160401b03808211156200059a5760008081fd5b818a0191508a603f830112620005b05760008081fd5b8582015181811115620005c757620005c76200049c565b620005da818a01601f19168801620004b2565b915080825260408c81838601011115620005f45760008081fd5b60005b8281101562000614578481018201518482018a01528801620005f7565b5050600090820187015284525091830191830162000578565b50979650505050505050565b600080600080600060a086880312156200065257600080fd5b85516001600160401b03808211156200066a57600080fd5b818801915088601f8301126200067f57600080fd5b81516020620006926200054e83620004e5565b82815260059290921b8401810191818101908c841115620006b257600080fd5b948201945b83861015620006db57620006cb866200050b565b82529482019490820190620006b7565b9950620006ec90508a82016200050b565b97505050620006fe604089016200050b565b945060608801519150808211156200071557600080fd5b50620007248882890162000528565b925050608086015190509295509295909350565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000764576200076462000738565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820162000795576200079562000738565b5060010190565b8181036000831280158383131683831282161715620007bf57620007bf62000738565b5092915050565b600082620007e457634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161562000801576200080162000738565b500590565b808201828112600083128015821682158216171562000829576200082962000738565b505092915050565b60006001600160ff1b01820162000795576200079562000738565b6000600160ff1b820162000864576200086462000738565b506000190190565b600181811c908216806200088157607f821691505b602082108103620008a257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008f257600081815260208120601f850160051c81016020861015620008d15750805b601f850160051c820191505b818110156200035757828155600101620008dd565b505050565b81516001600160401b038111156200091357620009136200049c565b6200092b816200092484546200086c565b84620008a8565b602080601f8311600181146200096357600084156200094a5750858301515b600019600386901b1c1916600185901b17855562000357565b600085815260208120601f198616915b82811015620009945788860151825594840194600190910190840162000973565b5085821015620009b35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61236180620009d36000396000f3fe6080604052600436106101225760003560e01c80638d4f75d2116100a5578063b3ab15fb1161006c578063b3ab15fb1461038c578063b78dec52146103ac578063ccce413b146103c1578063cdd72253146103e1578063df7f710e14610403578063e6a02a281461042557005b80638d4f75d2146103155780639670c0bc146103355780639f8743f71461034b578063a781358714610360578063aa2f89b51461037657005b80634bb278f3116100e95780634bb278f3146101ff5780634c56ea56146102245780635281b5c61461026c5780635412b3ae14610299578063845023f2146102f557005b806308f21ff51461012b578063146ca53114610154578063307de9b61461016a57806333f98c771461018a5780633c8510fd146101df57005b3661012957005b005b34801561013757600080fd5b5061014160085481565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014160065481565b34801561017657600080fd5b5061012961018536600461198c565b61043b565b34801561019657600080fd5b506101aa6101a5366004611ac8565b610682565b60405161014b919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b3480156101eb57600080fd5b506101aa6101fa366004611afd565b61076c565b34801561020b57600080fd5b5061021461082d565b604051901515815260200161014b565b34801561023057600080fd5b5061014161023f366004611b60565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205481565b34801561027857600080fd5b5061028c610287366004611bae565b6109d0565b60405161014b9190611c17565b3480156102a557600080fd5b506102d86102b4366004611c31565b600b6020526000908152604090208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161014b565b34801561030157600080fd5b50610129610310366004611c70565b610a7c565b34801561032157600080fd5b50610129610330366004611d0d565b610b25565b34801561034157600080fd5b5062989680610141565b34801561035757600080fd5b50600654610141565b34801561036c57600080fd5b5061014160095481565b34801561038257600080fd5b5061014160075481565b34801561039857600080fd5b506101296103a7366004611c31565b610c95565b3480156103b857600080fd5b50600954610141565b3480156103cd57600080fd5b5061028c6103dc366004611bae565b610ce1565b3480156103ed57600080fd5b506103f6610cf1565b60405161014b9190611dbe565b34801561040f57600080fd5b50610418610d53565b60405161014b9190611e60565b34801561043157600080fd5b50610141600a5481565b336000908152600b602052604090206002015460ff166104a25760405162461bcd60e51b815260206004820152601960248201527f7265737472696374656420746f206f6e6c7920766f746572730000000000000060448201526064015b60405180910390fd5b600654336000908152600b6020526040902054036104f25760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481d9bdd1959609a1b6044820152606401610499565b336000908152600b602052604081206001810180549087905581546006549092559181900361052257505061067c565b600054841461053257505061067c565b60016006546105419190611e89565b8114158061057e5750848484336040516020016105619493929190611e9c565b6040516020818303038152906040528051906020012060001c8214155b156105fa5760005b6000548110156105f2576001600160ff1b03600c600083815481106105ad576105ad611ee7565b906000526020600020016040516105c49190611f37565b90815260408051602092819003830190203360009081529252902055806105ea81611fad565b915050610586565b50505061067c565b60005b848110156106785785858281811061061757610617611ee7565b90506020020135600c6000838154811061063357610633611ee7565b9060005260206000200160405161064a9190611f37565b908152604080516020928190038301902033600090815292529020558061067081611fad565b9150506105fd565b5050505b50505050565b6106af60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d60016006546106c29190611e89565b815481106106d2576106d2611ee7565b90600052602060002001836040516106ea9190611fc6565b90815260408051918290036020908101832060608401835280548452600180820154928501929092526002015460ff16151583830152815160808101909252600654929350600092829161073d91611e89565b815260200183600001518152602001836020015181526020018360400151151581525090508092505050919050565b61079960405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d84815481106107ae576107ae611ee7565b90600052602060002001836040516107c69190611fc6565b9081526040805191829003602090810183206060808501845281548552600182015485840190815260029092015460ff16151585850190815284516080810186528a8152955193860193909352905192840192909252511515908201529150505b92915050565b6002546000906001600160a01b0316331461085a5760405162461bcd60e51b815260040161049990611fe2565b600954600a5461086a9190612025565b43106109ca5760005b6000548110156108985761088681610f11565b610891600182612025565b9050610873565b50600654600754036109155760005b600554811015610913576001600b6000600584815481106108ca576108ca611ee7565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600201805460ff19169115159190911790558061090b81611fad565b9150506108a7565b505b600654600754610926906001612038565b0361093357610933611218565b43600a8190555060016006600082825461094d9190612025565b9091555050600854610960906002612038565b6006540361097a5760018054610978916000916117de565b505b60065460095460408051928352436020840152429083015260608201527fb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e59060800160405180910390a150600190565b50600090565b600181815481106109e057600080fd5b9060005260206000200160009150905080546109fb90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2790611efd565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b505050505081565b6002546001600160a01b03163314610aa65760405162461bcd60e51b815260040161049990611fe2565b8051600003610aef5760405162461bcd60e51b8152602060048201526015602482015274566f746572732063616e277420626520656d70747960581b6044820152606401610499565b610b0881600060018451610b039190611e89565b6113f5565b8051610b1b906005906020840190611836565b5050600654600755565b6003546001600160a01b03163314610b785760405162461bcd60e51b81526020600482015260166024820152753932b9ba3934b1ba32b2103a379037b832b930ba37b960511b6044820152606401610499565b8051600003610bc25760405162461bcd60e51b815260206004820152601660248201527573796d626f6c732063616e277420626520656d70747960501b6044820152606401610499565b600654600854610bd3906001612038565b14158015610be5575060065460085414155b610c315760405162461bcd60e51b815260206004820152601e60248201527f63616e2774206265207570646174656420696e207468697320726f756e6400006044820152606401610499565b8051610c44906001906020840190611897565b5060065460088190557faa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d908290610c7c906001612025565b604051610c8a929190612060565b60405180910390a150565b6002546001600160a01b03163314610cbf5760405162461bcd60e51b815260040161049990611fe2565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600081815481106109e057600080fd5b60606005805480602002602001604051908101604052809291908181526020018280548015610d4957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d2b575b5050505050905090565b60606006546008546001610d679190612038565b03610e43576001805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610dad90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd990611efd565b8015610e265780601f10610dfb57610100808354040283529160200191610e26565b820191906000526020600020905b815481529060010190602001808311610e0957829003601f168201915b505050505081526020019060010190610d8e565b50505050905090565b6000805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610e8490611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb090611efd565b8015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b505050505081526020019060010190610e65565b6000808281548110610f2557610f25611ee7565b906000526020600020018054610f3a90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6690611efd565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b50505050509050600060048054905067ffffffffffffffff811115610fda57610fda611a11565b604051908082528060200260200182016040528015611003578160200160208202803683370190505b5090506000805b60045481101561111a5760006004828154811061102957611029611ee7565b60009182526020808320909101546006546001600160a01b03909116808452600b90925260409092205490925014158061109d57506001600160ff1b03600c866040516110769190611fc6565b90815260408051602092819003830190206001600160a01b03851660009081529252902054145b156110a85750611108565b600c856040516110b89190611fc6565b90815260408051602092819003830190206001600160a01b0384166000908152925290205484846110e881611fad565b9550815181106110fa576110fa611ee7565b602002602001018181525050505b8061111281611fad565b91505061100a565b506000600d600160065461112e9190611e89565b8154811061113e5761113e611ee7565b90600052602060002001846040516111569190611fc6565b908152604051908190036020019020549050600082156111815761117a84846115a2565b9150600190505b600d80546001018082556000829052604080516060810182528581524260208201528415159181019190915260065490929181106111c1576111c1611ee7565b90600052602060002001866040516111d99190611fc6565b90815260408051602092819003830190208351815591830151600183015591909101516002909101805460ff1916911515919091179055505050505050565b6000805b6004548210801561122e575060055481105b15611373576005818154811061124657611246611ee7565b600091825260209091200154600480546001600160a01b03909216918490811061127257611272611ee7565b6000918252602090912001546001600160a01b0316036112ac578161129681611fad565b92505080806112a490611fad565b91505061121c565b600581815481106112bf576112bf611ee7565b600091825260209091200154600480546001600160a01b0390921691849081106112eb576112eb611ee7565b6000918252602090912001546001600160a01b0316101561136957600b60006004848154811061131d5761131d611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff191690558161136181611fad565b92505061121c565b806112a481611fad565b6004548210156113e057600b60006004848154811061139457611394611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff19169055816113d881611fad565b925050611373565b600580546113f0916004916118dd565b505050565b80821261140157505050565b818160008560026114128585612082565b61141c91906120bf565b6114269087612038565b8151811061143657611436611ee7565b602002602001015190505b818313611574575b806001600160a01b031686848151811061146557611465611ee7565b60200260200101516001600160a01b0316101561148e5782611486816120ed565b935050611449565b806001600160a01b03168683815181106114aa576114aa611ee7565b60200260200101516001600160a01b031611156114d357816114cb81612105565b92505061148e565b81831361156f578582815181106114ec576114ec611ee7565b602002602001015186848151811061150657611506611ee7565b602002602001015187858151811061152057611520611ee7565b6020026020010188858151811061153957611539611ee7565b6001600160a01b039384166020918202929092010152911690528261155d816120ed565b935050818061156b90612105565b9250505b611441565b81851215611587576115878686846113f5565b8383121561159a5761159a8684866113f5565b505050505050565b6000816000036115b457506000610827565b6115ca8360006115c5600186611e89565b611666565b60006115d7600284612122565b90506115e4600284612136565b15611608578381815181106115fb576115fb611ee7565b602002602001015161165e565b600284828151811061161c5761161c611ee7565b6020026020010151856001846116329190611e89565b8151811061164257611642611ee7565b60200260200101516116549190612038565b61165e91906120bf565b949350505050565b8181808203611676575050505050565b60008560026116858787612082565b61168f91906120bf565b6116999087612038565b815181106116a9576116a9611ee7565b602002602001015190505b8183136117b8575b808684815181106116cf576116cf611ee7565b602002602001015112156116ef57826116e7816120ed565b9350506116bc565b85828151811061170157611701611ee7565b6020026020010151811215611722578161171a81612105565b9250506116ef565b8183136117b35785828151811061173b5761173b611ee7565b602002602001015186848151811061175557611755611ee7565b602002602001015187858151811061176f5761176f611ee7565b6020026020010188858151811061178857611788611ee7565b602090810291909101019190915252816117a181612105565b92505082806117af906120ed565b9350505b6116b4565b818512156117cb576117cb868684611666565b8383121561159a5761159a868486611666565b8280548282559060005260206000209081019282156118265760005260206000209182015b8281111561182657816118168482612190565b5091600101919060010190611803565b5061183292915061191d565b5090565b82805482825590600052602060002090810192821561188b579160200282015b8281111561188b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611856565b5061183292915061193a565b828054828255906000526020600020908101928215611826579160200282015b8281111561182657825182906118cd9082612271565b50916020019190600101906118b7565b82805482825590600052602060002090810192821561188b5760005260206000209182015b8281111561188b578254825591600101919060010190611902565b80821115611832576000611931828261194f565b5060010161191d565b5b80821115611832576000815560010161193b565b50805461195b90611efd565b6000825580601f1061196b575050565b601f016020900490600052602060002090810190611989919061193a565b50565b600080600080606085870312156119a257600080fd5b84359350602085013567ffffffffffffffff808211156119c157600080fd5b818701915087601f8301126119d557600080fd5b8135818111156119e457600080fd5b8860208260051b85010111156119f957600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a5057611a50611a11565b604052919050565b600082601f830112611a6957600080fd5b813567ffffffffffffffff811115611a8357611a83611a11565b611a96601f8201601f1916602001611a27565b818152846020838601011115611aab57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ada57600080fd5b813567ffffffffffffffff811115611af157600080fd5b61165e84828501611a58565b60008060408385031215611b1057600080fd5b82359150602083013567ffffffffffffffff811115611b2e57600080fd5b611b3a85828601611a58565b9150509250929050565b80356001600160a01b0381168114611b5b57600080fd5b919050565b60008060408385031215611b7357600080fd5b823567ffffffffffffffff811115611b8a57600080fd5b611b9685828601611a58565b925050611ba560208401611b44565b90509250929050565b600060208284031215611bc057600080fd5b5035919050565b60005b83811015611be2578181015183820152602001611bca565b50506000910152565b60008151808452611c03816020860160208601611bc7565b601f01601f19169290920160200192915050565b602081526000611c2a6020830184611beb565b9392505050565b600060208284031215611c4357600080fd5b611c2a82611b44565b600067ffffffffffffffff821115611c6657611c66611a11565b5060051b60200190565b60006020808385031215611c8357600080fd5b823567ffffffffffffffff811115611c9a57600080fd5b8301601f81018513611cab57600080fd5b8035611cbe611cb982611c4c565b611a27565b81815260059190911b82018301908381019087831115611cdd57600080fd5b928401925b82841015611d0257611cf384611b44565b82529284019290840190611ce2565b979650505050505050565b60006020808385031215611d2057600080fd5b823567ffffffffffffffff80821115611d3857600080fd5b818501915085601f830112611d4c57600080fd5b8135611d5a611cb982611c4c565b81815260059190911b83018401908481019088831115611d7957600080fd5b8585015b83811015611db157803585811115611d955760008081fd5b611da38b89838a0101611a58565b845250918601918601611d7d565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611dff5783516001600160a01b031683529284019291840191600101611dda565b50909695505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611e53578284038952611e41848351611beb565b98850198935090840190600101611e29565b5091979650505050505050565b602081526000611c2a6020830184611e0b565b634e487b7160e01b600052601160045260246000fd5b8181038181111561082757610827611e73565b60008186825b87811015611ec0578135835260209283019290910190600101611ea2565b5050938452505060601b6bffffffffffffffffffffffff1916602082015260340192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f1157607f821691505b602082108103611f3157634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354611f4581611efd565b60018281168015611f5d5760018114611f7257611fa1565b60ff1984168752821515830287019450611fa1565b8760005260208060002060005b85811015611f985781548a820152908401908201611f7f565b50505082870194505b50929695505050505050565b600060018201611fbf57611fbf611e73565b5060010190565b60008251611fd8818460208701611bc7565b9190910192915050565b60208082526023908201527f7265737472696374656420746f20746865206175746f6e69747920636f6e74726040820152621858dd60ea1b606082015260800190565b8082018082111561082757610827611e73565b808201828112600083128015821682158216171561205857612058611e73565b505092915050565b6040815260006120736040830185611e0b565b90508260208301529392505050565b81810360008312801583831316838312821617156120a2576120a2611e73565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826120ce576120ce6120a9565b600160ff1b8214600019841416156120e8576120e8611e73565b500590565b60006001600160ff1b018201611fbf57611fbf611e73565b6000600160ff1b820161211a5761211a611e73565b506000190190565b600082612131576121316120a9565b500490565b600082612145576121456120a9565b500690565b601f8211156113f057600081815260208120601f850160051c810160208610156121715750805b601f850160051c820191505b8181101561159a5782815560010161217d565b81810361219b575050565b6121a58254611efd565b67ffffffffffffffff8111156121bd576121bd611a11565b6121d1816121cb8454611efd565b8461214a565b6000601f82116001811461220557600083156121ed5750848201545b600019600385901b1c1916600184901b17845561226a565b600085815260209020601f19841690600086815260209020845b8381101561223f578286015482556001958601959091019060200161221f565b508583101561225d5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b815167ffffffffffffffff81111561228b5761228b611a11565b612299816121cb8454611efd565b602080601f8311600181146122ce57600084156122b65750858301515b600019600386901b1c1916600185901b17855561159a565b600085815260208120601f198616915b828110156122fd578886015182559484019460019091019084016122de565b508582101561231b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203c20d60b3688c4746f988dc74b8b4238d2ea704a050cfa1eb51d85c8e28d03b264736f6c63430008150033",
}

// OracleABI is the input ABI used to generate the binding from.
// Deprecated: Use OracleMetaData.ABI instead.
var OracleABI = OracleMetaData.ABI

// Deprecated: Use OracleMetaData.Sigs instead.
// OracleFuncSigs maps the 4-byte function signature to its string representation.
var OracleFuncSigs = OracleMetaData.Sigs

// OracleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OracleMetaData.Bin instead.
var OracleBin = OracleMetaData.Bin

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _voters []common.Address, _autonity common.Address, _operator common.Address, _symbols []string, _votePeriod *big.Int) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := OracleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OracleBin), backend, _voters, _autonity, _operator, _symbols, _votePeriod)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() pure returns(uint256)
func (_Oracle *OracleCaller) GetPrecision(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getPrecision")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() pure returns(uint256)
func (_Oracle *OracleSession) GetPrecision() (*big.Int, error) {
	return _Oracle.Contract.GetPrecision(&_Oracle.CallOpts)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() pure returns(uint256)
func (_Oracle *OracleCallerSession) GetPrecision() (*big.Int, error) {
	return _Oracle.Contract.GetPrecision(&_Oracle.CallOpts)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *OracleCaller) GetRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *OracleSession) GetRound() (*big.Int, error) {
	return _Oracle.Contract.GetRound(&_Oracle.CallOpts)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *OracleCallerSession) GetRound() (*big.Int, error) {
	return _Oracle.Contract.GetRound(&_Oracle.CallOpts)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *OracleCaller) GetRoundData(opts *bind.CallOpts, _round *big.Int, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *OracleSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.GetRoundData(&_Oracle.CallOpts, _round, _symbol)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *OracleCallerSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.GetRoundData(&_Oracle.CallOpts, _round, _symbol)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *OracleCaller) GetSymbols(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getSymbols")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *OracleSession) GetSymbols() ([]string, error) {
	return _Oracle.Contract.GetSymbols(&_Oracle.CallOpts)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *OracleCallerSession) GetSymbols() ([]string, error) {
	return _Oracle.Contract.GetSymbols(&_Oracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *OracleCaller) GetVotePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *OracleSession) GetVotePeriod() (*big.Int, error) {
	return _Oracle.Contract.GetVotePeriod(&_Oracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *OracleCallerSession) GetVotePeriod() (*big.Int, error) {
	return _Oracle.Contract.GetVotePeriod(&_Oracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *OracleCaller) GetVoters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getVoters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *OracleSession) GetVoters() ([]common.Address, error) {
	return _Oracle.Contract.GetVoters(&_Oracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *OracleCallerSession) GetVoters() ([]common.Address, error) {
	return _Oracle.Contract.GetVoters(&_Oracle.CallOpts)
}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *OracleCaller) LastRoundBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "lastRoundBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *OracleSession) LastRoundBlock() (*big.Int, error) {
	return _Oracle.Contract.LastRoundBlock(&_Oracle.CallOpts)
}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *OracleCallerSession) LastRoundBlock() (*big.Int, error) {
	return _Oracle.Contract.LastRoundBlock(&_Oracle.CallOpts)
}

// LastVoterUpdateRound is a free data retrieval call binding the contract method 0xaa2f89b5.
//
// Solidity: function lastVoterUpdateRound() view returns(int256)
func (_Oracle *OracleCaller) LastVoterUpdateRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "lastVoterUpdateRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastVoterUpdateRound is a free data retrieval call binding the contract method 0xaa2f89b5.
//
// Solidity: function lastVoterUpdateRound() view returns(int256)
func (_Oracle *OracleSession) LastVoterUpdateRound() (*big.Int, error) {
	return _Oracle.Contract.LastVoterUpdateRound(&_Oracle.CallOpts)
}

// LastVoterUpdateRound is a free data retrieval call binding the contract method 0xaa2f89b5.
//
// Solidity: function lastVoterUpdateRound() view returns(int256)
func (_Oracle *OracleCallerSession) LastVoterUpdateRound() (*big.Int, error) {
	return _Oracle.Contract.LastVoterUpdateRound(&_Oracle.CallOpts)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *OracleCaller) LatestRoundData(opts *bind.CallOpts, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *OracleSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.LatestRoundData(&_Oracle.CallOpts, _symbol)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *OracleCallerSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.LatestRoundData(&_Oracle.CallOpts, _symbol)
}

// NewSymbols is a free data retrieval call binding the contract method 0x5281b5c6.
//
// Solidity: function newSymbols(uint256 ) view returns(string)
func (_Oracle *OracleCaller) NewSymbols(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "newSymbols", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NewSymbols is a free data retrieval call binding the contract method 0x5281b5c6.
//
// Solidity: function newSymbols(uint256 ) view returns(string)
func (_Oracle *OracleSession) NewSymbols(arg0 *big.Int) (string, error) {
	return _Oracle.Contract.NewSymbols(&_Oracle.CallOpts, arg0)
}

// NewSymbols is a free data retrieval call binding the contract method 0x5281b5c6.
//
// Solidity: function newSymbols(uint256 ) view returns(string)
func (_Oracle *OracleCallerSession) NewSymbols(arg0 *big.Int) (string, error) {
	return _Oracle.Contract.NewSymbols(&_Oracle.CallOpts, arg0)
}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(int256)
func (_Oracle *OracleCaller) Reports(opts *bind.CallOpts, arg0 string, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "reports", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(int256)
func (_Oracle *OracleSession) Reports(arg0 string, arg1 common.Address) (*big.Int, error) {
	return _Oracle.Contract.Reports(&_Oracle.CallOpts, arg0, arg1)
}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(int256)
func (_Oracle *OracleCallerSession) Reports(arg0 string, arg1 common.Address) (*big.Int, error) {
	return _Oracle.Contract.Reports(&_Oracle.CallOpts, arg0, arg1)
}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_Oracle *OracleCaller) Round(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "round")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_Oracle *OracleSession) Round() (*big.Int, error) {
	return _Oracle.Contract.Round(&_Oracle.CallOpts)
}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_Oracle *OracleCallerSession) Round() (*big.Int, error) {
	return _Oracle.Contract.Round(&_Oracle.CallOpts)
}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *OracleCaller) SymbolUpdatedRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "symbolUpdatedRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *OracleSession) SymbolUpdatedRound() (*big.Int, error) {
	return _Oracle.Contract.SymbolUpdatedRound(&_Oracle.CallOpts)
}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *OracleCallerSession) SymbolUpdatedRound() (*big.Int, error) {
	return _Oracle.Contract.SymbolUpdatedRound(&_Oracle.CallOpts)
}

// Symbols is a free data retrieval call binding the contract method 0xccce413b.
//
// Solidity: function symbols(uint256 ) view returns(string)
func (_Oracle *OracleCaller) Symbols(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "symbols", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbols is a free data retrieval call binding the contract method 0xccce413b.
//
// Solidity: function symbols(uint256 ) view returns(string)
func (_Oracle *OracleSession) Symbols(arg0 *big.Int) (string, error) {
	return _Oracle.Contract.Symbols(&_Oracle.CallOpts, arg0)
}

// Symbols is a free data retrieval call binding the contract method 0xccce413b.
//
// Solidity: function symbols(uint256 ) view returns(string)
func (_Oracle *OracleCallerSession) Symbols(arg0 *big.Int) (string, error) {
	return _Oracle.Contract.Symbols(&_Oracle.CallOpts, arg0)
}

// VotePeriod is a free data retrieval call binding the contract method 0xa7813587.
//
// Solidity: function votePeriod() view returns(uint256)
func (_Oracle *OracleCaller) VotePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "votePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VotePeriod is a free data retrieval call binding the contract method 0xa7813587.
//
// Solidity: function votePeriod() view returns(uint256)
func (_Oracle *OracleSession) VotePeriod() (*big.Int, error) {
	return _Oracle.Contract.VotePeriod(&_Oracle.CallOpts)
}

// VotePeriod is a free data retrieval call binding the contract method 0xa7813587.
//
// Solidity: function votePeriod() view returns(uint256)
func (_Oracle *OracleCallerSession) VotePeriod() (*big.Int, error) {
	return _Oracle.Contract.VotePeriod(&_Oracle.CallOpts)
}

// VotingInfo is a free data retrieval call binding the contract method 0x5412b3ae.
//
// Solidity: function votingInfo(address ) view returns(uint256 round, uint256 commit, bool isVoter)
func (_Oracle *OracleCaller) VotingInfo(opts *bind.CallOpts, arg0 common.Address) (struct {
	Round   *big.Int
	Commit  *big.Int
	IsVoter bool
}, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "votingInfo", arg0)

	outstruct := new(struct {
		Round   *big.Int
		Commit  *big.Int
		IsVoter bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Round = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Commit = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsVoter = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// VotingInfo is a free data retrieval call binding the contract method 0x5412b3ae.
//
// Solidity: function votingInfo(address ) view returns(uint256 round, uint256 commit, bool isVoter)
func (_Oracle *OracleSession) VotingInfo(arg0 common.Address) (struct {
	Round   *big.Int
	Commit  *big.Int
	IsVoter bool
}, error) {
	return _Oracle.Contract.VotingInfo(&_Oracle.CallOpts, arg0)
}

// VotingInfo is a free data retrieval call binding the contract method 0x5412b3ae.
//
// Solidity: function votingInfo(address ) view returns(uint256 round, uint256 commit, bool isVoter)
func (_Oracle *OracleCallerSession) VotingInfo(arg0 common.Address) (struct {
	Round   *big.Int
	Commit  *big.Int
	IsVoter bool
}, error) {
	return _Oracle.Contract.VotingInfo(&_Oracle.CallOpts, arg0)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *OracleTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *OracleSession) Finalize() (*types.Transaction, error) {
	return _Oracle.Contract.Finalize(&_Oracle.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *OracleTransactorSession) Finalize() (*types.Transaction, error) {
	return _Oracle.Contract.Finalize(&_Oracle.TransactOpts)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *OracleTransactor) SetOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setOperator", _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *OracleSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetOperator(&_Oracle.TransactOpts, _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *OracleTransactorSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetOperator(&_Oracle.TransactOpts, _operator)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *OracleTransactor) SetSymbols(opts *bind.TransactOpts, _symbols []string) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setSymbols", _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *OracleSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _Oracle.Contract.SetSymbols(&_Oracle.TransactOpts, _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *OracleTransactorSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _Oracle.Contract.SetSymbols(&_Oracle.TransactOpts, _symbols)
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *OracleTransactor) SetVoters(opts *bind.TransactOpts, _newVoters []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setVoters", _newVoters)
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *OracleSession) SetVoters(_newVoters []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetVoters(&_Oracle.TransactOpts, _newVoters)
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *OracleTransactorSession) SetVoters(_newVoters []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetVoters(&_Oracle.TransactOpts, _newVoters)
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *OracleTransactor) Vote(opts *bind.TransactOpts, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "vote", _commit, _reports, _salt)
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *OracleSession) Vote(_commit *big.Int, _reports []*big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Vote(&_Oracle.TransactOpts, _commit, _reports, _salt)
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *OracleTransactorSession) Vote(_commit *big.Int, _reports []*big.Int, _salt *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Vote(&_Oracle.TransactOpts, _commit, _reports, _salt)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Oracle *OracleTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Oracle.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Oracle *OracleSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Fallback(&_Oracle.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Oracle *OracleTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Fallback(&_Oracle.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Oracle *OracleTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Oracle *OracleSession) Receive() (*types.Transaction, error) {
	return _Oracle.Contract.Receive(&_Oracle.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Oracle *OracleTransactorSession) Receive() (*types.Transaction, error) {
	return _Oracle.Contract.Receive(&_Oracle.TransactOpts)
}

// OracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the Oracle contract.
type OracleNewRoundIterator struct {
	Event *OracleNewRound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleNewRoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleNewRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleNewRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleNewRoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleNewRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleNewRound represents a NewRound event raised by the Oracle contract.
type OracleNewRound struct {
	Round      *big.Int
	Height     *big.Int
	Timestamp  *big.Int
	VotePeriod *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_Oracle *OracleFilterer) FilterNewRound(opts *bind.FilterOpts) (*OracleNewRoundIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return &OracleNewRoundIterator{contract: _Oracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
}

// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_Oracle *OracleFilterer) WatchNewRound(opts *bind.WatchOpts, sink chan<- *OracleNewRound) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleNewRound)
				if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_Oracle *OracleFilterer) ParseNewRound(log types.Log) (*OracleNewRound, error) {
	event := new(OracleNewRound)
	if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the Oracle contract.
type OracleNewSymbolsIterator struct {
	Event *OracleNewSymbols // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleNewSymbolsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleNewSymbols)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleNewSymbols)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleNewSymbolsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleNewSymbolsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleNewSymbols represents a NewSymbols event raised by the Oracle contract.
type OracleNewSymbols struct {
	Symbols []string
	Round   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_Oracle *OracleFilterer) FilterNewSymbols(opts *bind.FilterOpts) (*OracleNewSymbolsIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return &OracleNewSymbolsIterator{contract: _Oracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
}

// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_Oracle *OracleFilterer) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *OracleNewSymbols) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleNewSymbols)
				if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_Oracle *OracleFilterer) ParseNewSymbols(log types.Log) (*OracleNewSymbols, error) {
	event := new(OracleNewSymbols)
	if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Oracle contract.
type OracleVotedIterator struct {
	Event *OracleVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVoted represents a Voted event raised by the Oracle contract.
type OracleVoted struct {
	Voter common.Address
	Votes []*big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_Oracle *OracleFilterer) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*OracleVotedIterator, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return &OracleVotedIterator{contract: _Oracle.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_Oracle *OracleFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *OracleVoted, _voter []common.Address) (event.Subscription, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVoted)
				if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_Oracle *OracleFilterer) ParseVoted(log types.Log) (*OracleVoted, error) {
	event := new(OracleVoted)
	if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrecompiledMetaData contains all meta data concerning the Precompiled contract.
var PrecompiledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ACCUSATION_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPUTE_COMMITTEE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENODE_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INNOCENCE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISBEHAVIOUR_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POP_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4dc925d3": "ACCUSATION_CONTRACT()",
		"2090a442": "COMPUTE_COMMITTEE_CONTRACT()",
		"c13974e1": "ENODE_VERIFIER_CONTRACT()",
		"8e153dc3": "INNOCENCE_CONTRACT()",
		"925c5492": "MISBEHAVIOUR_CONTRACT()",
		"50d93720": "POP_VERIFIER_CONTRACT()",
		"d0a6d1a6": "SUCCESS()",
		"a4ad5d91": "UPGRADER_CONTRACT()",
	},
	Bin: "0x61012561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060885760003560e01c8063925c549211605f578063925c54921460c6578063a4ad5d911460cd578063c13974e11460d4578063d0a6d1a61460db57600080fd5b80632090a44214608d5780634dc925d31460b157806350d937201460b85780638e153dc31460bf575b600080fd5b609460fa81565b6040516001600160a01b0390911681526020015b60405180910390f35b609460fc81565b609460fb81565b609460fd81565b609460fe81565b609460f981565b609460ff81565b60e2600181565b60405190815260200160a856fea2646970667358221220a470277bc4c1e7b278582ab14c86b1a0c084269fa795894c29ef5f41b896f86e64736f6c63430008150033",
}

// PrecompiledABI is the input ABI used to generate the binding from.
// Deprecated: Use PrecompiledMetaData.ABI instead.
var PrecompiledABI = PrecompiledMetaData.ABI

// Deprecated: Use PrecompiledMetaData.Sigs instead.
// PrecompiledFuncSigs maps the 4-byte function signature to its string representation.
var PrecompiledFuncSigs = PrecompiledMetaData.Sigs

// PrecompiledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrecompiledMetaData.Bin instead.
var PrecompiledBin = PrecompiledMetaData.Bin

// DeployPrecompiled deploys a new Ethereum contract, binding an instance of Precompiled to it.
func DeployPrecompiled(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompiled, error) {
	parsed, err := PrecompiledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrecompiledBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompiled{PrecompiledCaller: PrecompiledCaller{contract: contract}, PrecompiledTransactor: PrecompiledTransactor{contract: contract}, PrecompiledFilterer: PrecompiledFilterer{contract: contract}}, nil
}

// Precompiled is an auto generated Go binding around an Ethereum contract.
type Precompiled struct {
	PrecompiledCaller     // Read-only binding to the contract
	PrecompiledTransactor // Write-only binding to the contract
	PrecompiledFilterer   // Log filterer for contract events
}

// PrecompiledCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompiledCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompiledTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompiledFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompiledSession struct {
	Contract     *Precompiled      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompiledCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompiledCallerSession struct {
	Contract *PrecompiledCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PrecompiledTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompiledTransactorSession struct {
	Contract     *PrecompiledTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PrecompiledRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompiledRaw struct {
	Contract *Precompiled // Generic contract binding to access the raw methods on
}

// PrecompiledCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompiledCallerRaw struct {
	Contract *PrecompiledCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompiledTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompiledTransactorRaw struct {
	Contract *PrecompiledTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompiled creates a new instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiled(address common.Address, backend bind.ContractBackend) (*Precompiled, error) {
	contract, err := bindPrecompiled(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompiled{PrecompiledCaller: PrecompiledCaller{contract: contract}, PrecompiledTransactor: PrecompiledTransactor{contract: contract}, PrecompiledFilterer: PrecompiledFilterer{contract: contract}}, nil
}

// NewPrecompiledCaller creates a new read-only instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledCaller(address common.Address, caller bind.ContractCaller) (*PrecompiledCaller, error) {
	contract, err := bindPrecompiled(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompiledCaller{contract: contract}, nil
}

// NewPrecompiledTransactor creates a new write-only instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompiledTransactor, error) {
	contract, err := bindPrecompiled(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompiledTransactor{contract: contract}, nil
}

// NewPrecompiledFilterer creates a new log filterer instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompiledFilterer, error) {
	contract, err := bindPrecompiled(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompiledFilterer{contract: contract}, nil
}

// bindPrecompiled binds a generic wrapper to an already deployed contract.
func bindPrecompiled(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompiledABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiled *PrecompiledRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiled.Contract.PrecompiledCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiled *PrecompiledRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiled.Contract.PrecompiledTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiled *PrecompiledRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiled.Contract.PrecompiledTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiled *PrecompiledCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiled.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiled *PrecompiledTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiled.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiled *PrecompiledTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiled.Contract.contract.Transact(opts, method, params...)
}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) ACCUSATIONCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "ACCUSATION_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) ACCUSATIONCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ACCUSATIONCONTRACT(&_Precompiled.CallOpts)
}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) ACCUSATIONCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ACCUSATIONCONTRACT(&_Precompiled.CallOpts)
}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) COMPUTECOMMITTEECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "COMPUTE_COMMITTEE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) COMPUTECOMMITTEECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.COMPUTECOMMITTEECONTRACT(&_Precompiled.CallOpts)
}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) COMPUTECOMMITTEECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.COMPUTECOMMITTEECONTRACT(&_Precompiled.CallOpts)
}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) ENODEVERIFIERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "ENODE_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) ENODEVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ENODEVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) ENODEVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ENODEVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) INNOCENCECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "INNOCENCE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) INNOCENCECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.INNOCENCECONTRACT(&_Precompiled.CallOpts)
}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) INNOCENCECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.INNOCENCECONTRACT(&_Precompiled.CallOpts)
}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) MISBEHAVIOURCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "MISBEHAVIOUR_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) MISBEHAVIOURCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.MISBEHAVIOURCONTRACT(&_Precompiled.CallOpts)
}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) MISBEHAVIOURCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.MISBEHAVIOURCONTRACT(&_Precompiled.CallOpts)
}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) POPVERIFIERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "POP_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) POPVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.POPVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) POPVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.POPVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *PrecompiledCaller) SUCCESS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "SUCCESS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *PrecompiledSession) SUCCESS() (*big.Int, error) {
	return _Precompiled.Contract.SUCCESS(&_Precompiled.CallOpts)
}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *PrecompiledCallerSession) SUCCESS() (*big.Int, error) {
	return _Precompiled.Contract.SUCCESS(&_Precompiled.CallOpts)
}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) UPGRADERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "UPGRADER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) UPGRADERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.UPGRADERCONTRACT(&_Precompiled.CallOpts)
}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) UPGRADERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.UPGRADERCONTRACT(&_Precompiled.CallOpts)
}

// ReentrancyGuardMetaData contains all meta data concerning the ReentrancyGuard contract.
var ReentrancyGuardMetaData = &bind.MetaData{
	ABI: "[]",
}

// ReentrancyGuardABI is the input ABI used to generate the binding from.
// Deprecated: Use ReentrancyGuardMetaData.ABI instead.
var ReentrancyGuardABI = ReentrancyGuardMetaData.ABI

// ReentrancyGuard is an auto generated Go binding around an Ethereum contract.
type ReentrancyGuard struct {
	ReentrancyGuardCaller     // Read-only binding to the contract
	ReentrancyGuardTransactor // Write-only binding to the contract
	ReentrancyGuardFilterer   // Log filterer for contract events
}

// ReentrancyGuardCaller is an auto generated read-only Go binding around an Ethereum contract.
type ReentrancyGuardCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ReentrancyGuardTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReentrancyGuardFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReentrancyGuardSession struct {
	Contract     *ReentrancyGuard  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReentrancyGuardCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReentrancyGuardCallerSession struct {
	Contract *ReentrancyGuardCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ReentrancyGuardTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReentrancyGuardTransactorSession struct {
	Contract     *ReentrancyGuardTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ReentrancyGuardRaw is an auto generated low-level Go binding around an Ethereum contract.
type ReentrancyGuardRaw struct {
	Contract *ReentrancyGuard // Generic contract binding to access the raw methods on
}

// ReentrancyGuardCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReentrancyGuardCallerRaw struct {
	Contract *ReentrancyGuardCaller // Generic read-only contract binding to access the raw methods on
}

// ReentrancyGuardTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReentrancyGuardTransactorRaw struct {
	Contract *ReentrancyGuardTransactor // Generic write-only contract binding to access the raw methods on
}

// NewReentrancyGuard creates a new instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuard(address common.Address, backend bind.ContractBackend) (*ReentrancyGuard, error) {
	contract, err := bindReentrancyGuard(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuard{ReentrancyGuardCaller: ReentrancyGuardCaller{contract: contract}, ReentrancyGuardTransactor: ReentrancyGuardTransactor{contract: contract}, ReentrancyGuardFilterer: ReentrancyGuardFilterer{contract: contract}}, nil
}

// NewReentrancyGuardCaller creates a new read-only instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardCaller(address common.Address, caller bind.ContractCaller) (*ReentrancyGuardCaller, error) {
	contract, err := bindReentrancyGuard(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardCaller{contract: contract}, nil
}

// NewReentrancyGuardTransactor creates a new write-only instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardTransactor(address common.Address, transactor bind.ContractTransactor) (*ReentrancyGuardTransactor, error) {
	contract, err := bindReentrancyGuard(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardTransactor{contract: contract}, nil
}

// NewReentrancyGuardFilterer creates a new log filterer instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardFilterer(address common.Address, filterer bind.ContractFilterer) (*ReentrancyGuardFilterer, error) {
	contract, err := bindReentrancyGuard(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardFilterer{contract: contract}, nil
}

// bindReentrancyGuard binds a generic wrapper to an already deployed contract.
func bindReentrancyGuard(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReentrancyGuardABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReentrancyGuard *ReentrancyGuardRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReentrancyGuard.Contract.ReentrancyGuardCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReentrancyGuard *ReentrancyGuardRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.ReentrancyGuardTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReentrancyGuard *ReentrancyGuardRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.ReentrancyGuardTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReentrancyGuard *ReentrancyGuardCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReentrancyGuard.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReentrancyGuard *ReentrancyGuardTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReentrancyGuard *ReentrancyGuardTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.contract.Transact(opts, method, params...)
}

// StabilizationMetaData contains all meta data concerning the Stabilization contract.
var StabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"internalType\":\"structStabilization.Config\",\"name\":\"config_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDue\",\"type\":\"uint256\"}],\"name\":\"interestDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"minimumCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinDebtRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"}],\"name\":\"setSupplyControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"underCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"eced5526": "SCALE()",
		"ce4b5bbe": "SCALE_FACTOR()",
		"5dcc9391": "SECONDS_IN_YEAR()",
		"68cd03f6": "accounts()",
		"c5ebeaec": "borrow(uint256)",
		"83baa174": "borrowLimit(uint256,uint256,uint256,uint256)",
		"840c7e24": "cdps(address)",
		"5891de72": "collateralPrice()",
		"79502c55": "config()",
		"54a9f42c": "debtAmount(address)",
		"50bf06bf": "debtAmount(address,uint256)",
		"b6b55f25": "deposit(uint256)",
		"15184245": "interestDue(uint256,uint256,uint256,uint256)",
		"042e02cf": "isLiquidatable(address)",
		"2f865568": "liquidate(address)",
		"08796696": "minimumCollateral(uint256,uint256,uint256)",
		"402d8883": "repay()",
		"946ce8cd": "setLiquidationRatio(uint256)",
		"7b44646a": "setMinCollateralizationRatio(uint256)",
		"53afe81d": "setMinDebtRequirement(uint256)",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"52e5a050": "setSupplyControl(address)",
		"fbbe6991": "underCollateralized(uint256,uint256,uint256,uint256)",
		"2e1a7d4d": "withdraw(uint256)",
	},
	Bin: "0x60806040523480156200001157600080fd5b506040516200270b3803806200270b83398101604081905262000034916200012e565b8560400151806000036200005b57604051630309cb8760e51b815260040160405180910390fd5b866020015187604001518082106200008657604051630309cb8760e51b815260040160405180910390fd5b5050865160005550602086015160015560408601516002556060860151600355608090950151600455600780546001600160a01b03199081166001600160a01b039687161790915560088054821694861694909417909355600a8054841692851692909217909155600b8054831691841691909117905560098054909116919092161790556200021c565b80516001600160a01b03811681146200012957600080fd5b919050565b6000806000806000808688036101408112156200014a57600080fd5b60a08112156200015957600080fd5b5060405160a081016001600160401b03811182821017156200018b57634e487b7160e01b600052604160045260246000fd5b8060405250875181526020880151602082015260408801516040820152606088015160608201526080880151608082015280965050620001ce60a0880162000111565b9450620001de60c0880162000111565b9350620001ee60e0880162000111565b9250620001ff610100880162000111565b915062000210610120880162000111565b90509295509295509295565b6124df806200022c6000396000f3fe6080604052600436106101665760003560e01c806368cd03f6116100d1578063946ce8cd1161008a578063c5ebeaec11610064578063c5ebeaec1461046b578063ce4b5bbe1461048b578063eced5526146104a0578063fbbe6991146104b557600080fd5b8063946ce8cd1461040b578063b3ab15fb1461042b578063b6b55f251461044b57600080fd5b806368cd03f6146102d857806379502c55146102fa5780637adbf973146103495780637b44646a1461036957806383baa17414610389578063840c7e24146103a957600080fd5b806350bf06bf1161012357806350bf06bf1461022b57806352e5a0501461024b57806353afe81d1461026b57806354a9f42c1461028b5780635891de72146102ab5780635dcc9391146102c057600080fd5b8063042e02cf1461016b57806308796696146101a057806315184245146101ce5780632e1a7d4d146101ee5780632f86556814610210578063402d888314610223575b600080fd5b34801561017757600080fd5b5061018b61018636600461211b565b6104d5565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101c06101bb366004612136565b61051d565b604051908152602001610197565b3480156101da57600080fd5b506101c06101e9366004612162565b610587565b3480156101fa57600080fd5b5061020e610209366004612194565b610617565b005b61020e61021e36600461211b565b6107e5565b61020e610a27565b34801561023757600080fd5b506101c06102463660046121ad565b610bff565b34801561025757600080fd5b5061020e61026636600461211b565b610c6b565b34801561027757600080fd5b5061020e610286366004612194565b610cb7565b34801561029757600080fd5b506101c06102a636600461211b565b610ce6565b3480156102b757600080fd5b506101c0610d5d565b3480156102cc57600080fd5b506101c06301e1338081565b3480156102e457600080fd5b506102ed610ffc565b60405161019791906121d7565b34801561030657600080fd5b50600054600154600254600354600454610321949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610197565b34801561035557600080fd5b5061020e61036436600461211b565b61105e565b34801561037557600080fd5b5061020e610384366004612194565b6110aa565b34801561039557600080fd5b506101c06103a4366004612162565b611122565b3480156103b557600080fd5b506103eb6103c436600461211b565b60056020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610197565b34801561041757600080fd5b5061020e610426366004612194565b611178565b34801561043757600080fd5b5061020e61044636600461211b565b6111ce565b34801561045757600080fd5b5061020e610466366004612194565b61121a565b34801561047757600080fd5b5061020e610486366004612194565b611419565b34801561049757600080fd5b506101c06115e5565b3480156104ac57600080fd5b506101c0601281565b3480156104c157600080fd5b5061018b6104d0366004612162565b6115f4565b6001600160a01b0381166000908152600560205260408120816104f8824261164b565b509050610515826001015461050b610d5d565b60015484906115f4565b949350505050565b600082806000036105405760405162bfc92160e01b815260040160405180910390fd5b83158061054b575082155b1561056957604051630309cb8760e51b815260040160405180910390fd5b83610574848761223a565b61057e9190612267565b95945050505050565b6000818311156105aa57604051630309cb8760e51b815260040160405180910390fd5b848460006105cc6301e133806105c66105c38989612289565b90565b906116c1565b905060006105e26105dd84846116e0565b6116ef565b905060006106096106026105fb6105c36012600a612380565b8490611742565b86906116e0565b9a9950505050505050505050565b80806000036106395760405163162908e360e11b815260040160405180910390fd5b336000908152600560205260409020600181015483111561066d5760405163162908e360e11b815260040160405180910390fd5b6000610679824261164b565b5090506000610686610d5d565b905061069d836001015482846000600101546115f4565b156106bb57604051636229415360e01b815260040160405180910390fd5b6106cf83600201548260006002015461051d565b8584600101546106df9190612289565b10156106fe57604051633a23d82560e01b815260040160405180910390fd5b848360010160008282546107129190612289565b909155505060095460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c919061239c565b6107a9576040516312171d8360e31b815260040160405180910390fd5b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050505050565b3460000361080657604051637c946ed760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600560205260408120600281015490910361084357604051638aa5baf360e01b815260040160405180910390fd5b600080610850834261164b565b9150915061086e8360010154610864610d5d565b60015485906115f4565b61088b57604051636ef5bcdd60e11b815260040160405180910390fd5b60006108978334612289565b905060018401805442865560009182905560028601829055600386019190915560095460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061239c565b610949576040516312171d8360e31b815260040160405180910390fd5b600b546001600160a01b03166344df8e706109648587612289565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505060008211156109e057604051339083156108fc029084906000818181858888f193505050501580156109de573d6000803e3d6000fd5b505b6040513381526001600160a01b038716907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4906020015b60405180910390a2505050505050565b34600003610a4857604051637c946ed760e01b815260040160405180910390fd5b3360009081526005602052604081206002810154909103610a7c57604051638aa5baf360e01b815260040160405180910390fd5b600080610a89834261164b565b915091508134108015610aa65750600354610aa43484612289565b105b15610ac45760405163e6bd447960e01b815260040160405180910390fd5b80836003016000828254610ad891906123b7565b909155505042835560008080610aee8634611751565b92509250925081866002016000828254610b089190612289565b9250508190555082866003016000828254610b239190612289565b90915550508115610b9857600b60009054906101000a90046001600160a01b03166001600160a01b03166344df8e70836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b50505050505b8015610bcd57604051339082156108fc029083906000818181858888f19350505050158015610bcb573d6000803e3d6000fd5b505b60405134815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423190602001610a17565b6001600160a01b0382166000908152600560205260408120805484918491821015610c3d57604051630309cb8760e51b815260040160405180910390fd5b6001600160a01b0386166000908152600560205260409020610c5f818761164b565b50979650505050505050565b6008546001600160a01b03163314610c95576040516282b42960e81b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314610ce1576040516282b42960e81b815260040160405180910390fd5b600355565b6040516350bf06bf60e01b81526001600160a01b038216600482015242602482015260009030906350bf06bf90604401602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5791906123ca565b92915050565b600a546040805180820182526007815266272a2716a0aa2760c91b602082015290516333f98c7760e01b815260009283926001600160a01b03909116916333f98c7791610dac916004016123e3565b608060405180830381865afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612431565b90508060600151610e115760405163cb08be8160e01b815260040160405180910390fd5b6000816020015113610e355760405162bfc92160e01b815260040160405180910390fd5b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eac91906123ca565b610eb86012600a612380565b1115610f6057600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3591906123ca565b610f416012600a612380565b610f4b9190612267565b8160200151610f5a919061223a565b91505090565b610f6c6012600a612380565b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906123ca565b610fed9190612267565b8160200151610f5a9190612267565b6060600680548060200260200160405190810160405280929190818152602001828054801561105457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611036575b5050505050905090565b6007546001600160a01b03163314611088576040516282b42960e81b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b80806000036110cc57604051630309cb8760e51b815260040160405180910390fd5b600154828082106110f057604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b0316331461111a576040516282b42960e81b815260040160405180910390fd5b505050600255565b600083158061112f575081155b1561114d57604051630309cb8760e51b815260040160405180910390fd5b6111596012600a612380565b611163908361223a565b8361116e868861223a565b610574919061223a565b600254819080821061119d57604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b031633146111c7576040516282b42960e81b815260040160405180910390fd5b5050600155565b6007546001600160a01b031633146111f8576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b808060000361123c5760405163162908e360e11b815260040160405180910390fd5b600954604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae91906123ca565b10156112cd576040516313be252b60e01b815260040160405180910390fd5b336000908152600560205260408120805490910361132857600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031916331790555b4281556001810180548491906000906113429084906123b7565b90915550506009546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561139e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c2919061239c565b6113df576040516312171d8360e31b815260040160405180910390fd5b60405183815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2505050565b808060000361143b5760405163162908e360e11b815260040160405180910390fd5b3360009081526005602052604081209080611456834261164b565b909250905061146585836123b7565b60035490925082101561148b5760405163e6bd447960e01b815260040160405180910390fd5b6000611495610d5d565b90506114ac846001015482856000600101546115f4565b156114ca57604051636229415360e01b815260040160405180910390fd5b60006114e6856001015483600060040154600060020154611122565b90508084111561150957604051633a23d82560e01b815260040160405180910390fd5b4285556002850180548891906000906115239084906123b7565b925050819055508285600301600082825461153e91906123b7565b9091555050600b546040516340c10f1960e01b8152336004820152602481018990526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561158f57600080fd5b505af11580156115a3573d6000803e3d6000fd5b50506040518981523392507fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750915060200160405180910390a250505050505050565b6115f16012600a612380565b81565b600083806000036116175760405162bfc92160e01b815260040160405180910390fd5b836000036116285760009150611642565b8284611634878961223a565b61163e9190612267565b1091505b50949350505050565b6000808260000361166f57604051630309cb8760e51b815260040160405180910390fd5b60008460030154856002015461168591906123b7565b8554909150840361169957600091506116ad565b60005485546116aa91839187610587565b91505b6116b782826123b7565b9250509250929050565b60006116d96105c384670de0b6b3a7640000856117c5565b9392505050565b60006116d96105c38484611898565b600081680736ea4425c11ac63081111561172457604051630d7b1d6560e11b8152600481018490526024015b60405180910390fd5b6714057b7ef767814f8102610515670de0b6b3a7640000820461194e565b60006116d96105c38385612289565b6000806000808560030154866002015461176b91906123b7565b905085600301548510611782578560030154611784565b845b93508085106117975785600201546117a1565b6117a18486612289565b92508085116117b15760006117bb565b6117bb8186612289565b9150509250925092565b60008080600019858709858702925082811083820303915050806000036117ff578382816117f5576117f5612251565b04925050506116d9565b83811061183057604051630c740aef60e31b815260048101879052602481018690526044810185905260640161171b565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050806000036118cc5750670de0b6b3a764000090049050610d57565b670de0b6b3a764000081106118fe57604051635173648d60e01b8152600481018690526024810185905260440161171b565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b600081680a688906bd8affffff81111561197e5760405163b3b6ba1f60e01b81526004810184905260240161171b565b6000611996670de0b6b3a7640000604084901b612267565b90506105156105c382600160bf1b67ff00000000000000821615611aac576780000000000000008216156119d35768016a09e667f3bcc9090260401c5b6740000000000000008216156119f2576801306fe0a31b7152df0260401c5b672000000000000000821615611a11576801172b83c7d517adce0260401c5b671000000000000000821615611a305768010b5586cf9890f62a0260401c5b670800000000000000821615611a4f576801059b0d31585743ae0260401c5b670400000000000000821615611a6e57680102c9a3e778060ee70260401c5b670200000000000000821615611a8d5768010163da9fb33356d80260401c5b670100000000000000821615611aac57680100b1afa5abcbed610260401c5b66ff000000000000821615611bab576680000000000000821615611ad95768010058c86da1c09ea20260401c5b6640000000000000821615611af7576801002c605e2e8cec500260401c5b6620000000000000821615611b1557680100162f3904051fa10260401c5b6610000000000000821615611b33576801000b175effdc76ba0260401c5b6608000000000000821615611b5157680100058ba01fb9f96d0260401c5b6604000000000000821615611b6f5768010002c5cc37da94920260401c5b6602000000000000821615611b8d576801000162e525ee05470260401c5b6601000000000000821615611bab5768010000b17255775c040260401c5b65ff0000000000821615611ca15765800000000000821615611bd6576801000058b91b5bc9ae0260401c5b65400000000000821615611bf357680100002c5c89d5ec6d0260401c5b65200000000000821615611c105768010000162e43f4f8310260401c5b65100000000000821615611c2d57680100000b1721bcfc9a0260401c5b65080000000000821615611c4a5768010000058b90cf1e6e0260401c5b65040000000000821615611c67576801000002c5c863b73f0260401c5b65020000000000821615611c8457680100000162e430e5a20260401c5b65010000000000821615611ca1576801000000b1721835510260401c5b64ff00000000821615611d8e57648000000000821615611cca57680100000058b90c0b490260401c5b644000000000821615611ce65768010000002c5c8601cc0260401c5b642000000000821615611d02576801000000162e42fff00260401c5b641000000000821615611d1e5768010000000b17217fbb0260401c5b640800000000821615611d3a576801000000058b90bfce0260401c5b640400000000821615611d5657680100000002c5c85fe30260401c5b640200000000821615611d725768010000000162e42ff10260401c5b640100000000821615611d8e57680100000000b17217f80260401c5b63ff000000821615611e72576380000000821615611db55768010000000058b90bfc0260401c5b6340000000821615611dd0576801000000002c5c85fe0260401c5b6320000000821615611deb57680100000000162e42ff0260401c5b6310000000821615611e06576801000000000b17217f0260401c5b6308000000821615611e2157680100000000058b90c00260401c5b6304000000821615611e3c5768010000000002c5c8600260401c5b6302000000821615611e57576801000000000162e4300260401c5b6301000000821615611e725768010000000000b172180260401c5b62ff0000821615611f4d5762800000821615611e97576801000000000058b90c0260401c5b62400000821615611eb157680100000000002c5c860260401c5b62200000821615611ecb5768010000000000162e430260401c5b62100000821615611ee557680100000000000b17210260401c5b62080000821615611eff5768010000000000058b910260401c5b62040000821615611f19576801000000000002c5c80260401c5b62020000821615611f3357680100000000000162e40260401c5b62010000821615611f4d576801000000000000b1720260401c5b61ff0082161561201f57618000821615611f7057680100000000000058b90260401c5b614000821615611f895768010000000000002c5d0260401c5b612000821615611fa2576801000000000000162e0260401c5b611000821615611fbb5768010000000000000b170260401c5b610800821615611fd4576801000000000000058c0260401c5b610400821615611fed57680100000000000002c60260401c5b61020082161561200657680100000000000001630260401c5b61010082161561201f57680100000000000000b10260401c5b60ff8216156120e857608082161561204057680100000000000000590260401c5b6040821615612058576801000000000000002c0260401c5b602082161561207057680100000000000000160260401c5b6010821615612088576801000000000000000b0260401c5b60088216156120a057680100000000000000060260401c5b60048216156120b857680100000000000000030260401c5b60028216156120d057680100000000000000010260401c5b60018216156120e857680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b80356001600160a01b038116811461211657600080fd5b919050565b60006020828403121561212d57600080fd5b6116d9826120ff565b60008060006060848603121561214b57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561217857600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156121a657600080fd5b5035919050565b600080604083850312156121c057600080fd5b6121c9836120ff565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156122185783516001600160a01b0316835292840192918401916001016121f3565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d5757610d57612224565b634e487b7160e01b600052601260045260246000fd5b60008261228457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610d5757610d57612224565b600181815b808511156122d75781600019048211156122bd576122bd612224565b808516156122ca57918102915b93841c93908002906122a1565b509250929050565b6000826122ee57506001610d57565b816122fb57506000610d57565b8160018114612311576002811461231b57612337565b6001915050610d57565b60ff84111561232c5761232c612224565b50506001821b610d57565b5060208310610133831016604e8410600b841016171561235a575081810a610d57565b612364838361229c565b806000190482111561237857612378612224565b029392505050565b60006116d983836122df565b8051801515811461211657600080fd5b6000602082840312156123ae57600080fd5b6116d98261238c565b80820180821115610d5757610d57612224565b6000602082840312156123dc57600080fd5b5051919050565b600060208083528351808285015260005b81811015612410578581018301518582016040015282016123f4565b506000604082860101526040601f19601f8301168501019250505092915050565b60006080828403121561244357600080fd5b6040516080810181811067ffffffffffffffff8211171561247457634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015261249d6060840161238c565b6060820152939250505056fea26469706673582212205e4bfdf4203cb01af8837cfd66ec92911a19965cd9945a1f62ad7f992027f06c64736f6c63430008150033",
}

// StabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use StabilizationMetaData.ABI instead.
var StabilizationABI = StabilizationMetaData.ABI

// Deprecated: Use StabilizationMetaData.Sigs instead.
// StabilizationFuncSigs maps the 4-byte function signature to its string representation.
var StabilizationFuncSigs = StabilizationMetaData.Sigs

// StabilizationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StabilizationMetaData.Bin instead.
var StabilizationBin = StabilizationMetaData.Bin

// DeployStabilization deploys a new Ethereum contract, binding an instance of Stabilization to it.
func DeployStabilization(auth *bind.TransactOpts, backend bind.ContractBackend, config_ StabilizationConfig, autonity common.Address, operator common.Address, oracle common.Address, supplyControl common.Address, collateralToken common.Address) (common.Address, *types.Transaction, *Stabilization, error) {
	parsed, err := StabilizationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StabilizationBin), backend, config_, autonity, operator, oracle, supplyControl, collateralToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Stabilization{StabilizationCaller: StabilizationCaller{contract: contract}, StabilizationTransactor: StabilizationTransactor{contract: contract}, StabilizationFilterer: StabilizationFilterer{contract: contract}}, nil
}

// Stabilization is an auto generated Go binding around an Ethereum contract.
type Stabilization struct {
	StabilizationCaller     // Read-only binding to the contract
	StabilizationTransactor // Write-only binding to the contract
	StabilizationFilterer   // Log filterer for contract events
}

// StabilizationCaller is an auto generated read-only Go binding around an Ethereum contract.
type StabilizationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StabilizationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StabilizationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StabilizationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StabilizationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StabilizationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StabilizationSession struct {
	Contract     *Stabilization    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StabilizationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StabilizationCallerSession struct {
	Contract *StabilizationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StabilizationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StabilizationTransactorSession struct {
	Contract     *StabilizationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StabilizationRaw is an auto generated low-level Go binding around an Ethereum contract.
type StabilizationRaw struct {
	Contract *Stabilization // Generic contract binding to access the raw methods on
}

// StabilizationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StabilizationCallerRaw struct {
	Contract *StabilizationCaller // Generic read-only contract binding to access the raw methods on
}

// StabilizationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StabilizationTransactorRaw struct {
	Contract *StabilizationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStabilization creates a new instance of Stabilization, bound to a specific deployed contract.
func NewStabilization(address common.Address, backend bind.ContractBackend) (*Stabilization, error) {
	contract, err := bindStabilization(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Stabilization{StabilizationCaller: StabilizationCaller{contract: contract}, StabilizationTransactor: StabilizationTransactor{contract: contract}, StabilizationFilterer: StabilizationFilterer{contract: contract}}, nil
}

// NewStabilizationCaller creates a new read-only instance of Stabilization, bound to a specific deployed contract.
func NewStabilizationCaller(address common.Address, caller bind.ContractCaller) (*StabilizationCaller, error) {
	contract, err := bindStabilization(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StabilizationCaller{contract: contract}, nil
}

// NewStabilizationTransactor creates a new write-only instance of Stabilization, bound to a specific deployed contract.
func NewStabilizationTransactor(address common.Address, transactor bind.ContractTransactor) (*StabilizationTransactor, error) {
	contract, err := bindStabilization(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StabilizationTransactor{contract: contract}, nil
}

// NewStabilizationFilterer creates a new log filterer instance of Stabilization, bound to a specific deployed contract.
func NewStabilizationFilterer(address common.Address, filterer bind.ContractFilterer) (*StabilizationFilterer, error) {
	contract, err := bindStabilization(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StabilizationFilterer{contract: contract}, nil
}

// bindStabilization binds a generic wrapper to an already deployed contract.
func bindStabilization(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StabilizationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stabilization *StabilizationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stabilization.Contract.StabilizationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stabilization *StabilizationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stabilization.Contract.StabilizationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stabilization *StabilizationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stabilization.Contract.StabilizationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stabilization *StabilizationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stabilization.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stabilization *StabilizationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stabilization.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stabilization *StabilizationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stabilization.Contract.contract.Transact(opts, method, params...)
}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *StabilizationCaller) SCALE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "SCALE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *StabilizationSession) SCALE() (*big.Int, error) {
	return _Stabilization.Contract.SCALE(&_Stabilization.CallOpts)
}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *StabilizationCallerSession) SCALE() (*big.Int, error) {
	return _Stabilization.Contract.SCALE(&_Stabilization.CallOpts)
}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *StabilizationCaller) SCALEFACTOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *StabilizationSession) SCALEFACTOR() (*big.Int, error) {
	return _Stabilization.Contract.SCALEFACTOR(&_Stabilization.CallOpts)
}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *StabilizationCallerSession) SCALEFACTOR() (*big.Int, error) {
	return _Stabilization.Contract.SCALEFACTOR(&_Stabilization.CallOpts)
}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *StabilizationCaller) SECONDSINYEAR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "SECONDS_IN_YEAR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *StabilizationSession) SECONDSINYEAR() (*big.Int, error) {
	return _Stabilization.Contract.SECONDSINYEAR(&_Stabilization.CallOpts)
}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *StabilizationCallerSession) SECONDSINYEAR() (*big.Int, error) {
	return _Stabilization.Contract.SECONDSINYEAR(&_Stabilization.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *StabilizationCaller) Accounts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "accounts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *StabilizationSession) Accounts() ([]common.Address, error) {
	return _Stabilization.Contract.Accounts(&_Stabilization.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *StabilizationCallerSession) Accounts() ([]common.Address, error) {
	return _Stabilization.Contract.Accounts(&_Stabilization.CallOpts)
}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCaller) BorrowLimit(opts *bind.CallOpts, collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "borrowLimit", collateral, price, targetPrice, mcr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationSession) BorrowLimit(collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.BorrowLimit(&_Stabilization.CallOpts, collateral, price, targetPrice, mcr)
}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCallerSession) BorrowLimit(collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.BorrowLimit(&_Stabilization.CallOpts, collateral, price, targetPrice, mcr)
}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *StabilizationCaller) Cdps(opts *bind.CallOpts, arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "cdps", arg0)

	outstruct := new(struct {
		Timestamp  *big.Int
		Collateral *big.Int
		Principal  *big.Int
		Interest   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Collateral = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Principal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Interest = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *StabilizationSession) Cdps(arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, error) {
	return _Stabilization.Contract.Cdps(&_Stabilization.CallOpts, arg0)
}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *StabilizationCallerSession) Cdps(arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, error) {
	return _Stabilization.Contract.Cdps(&_Stabilization.CallOpts, arg0)
}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *StabilizationCaller) CollateralPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "collateralPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *StabilizationSession) CollateralPrice() (*big.Int, error) {
	return _Stabilization.Contract.CollateralPrice(&_Stabilization.CallOpts)
}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *StabilizationCallerSession) CollateralPrice() (*big.Int, error) {
	return _Stabilization.Contract.CollateralPrice(&_Stabilization.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *StabilizationCaller) Config(opts *bind.CallOpts) (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		BorrowInterestRate        *big.Int
		LiquidationRatio          *big.Int
		MinCollateralizationRatio *big.Int
		MinDebtRequirement        *big.Int
		TargetPrice               *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.BorrowInterestRate = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LiquidationRatio = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinCollateralizationRatio = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinDebtRequirement = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TargetPrice = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *StabilizationSession) Config() (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, error) {
	return _Stabilization.Contract.Config(&_Stabilization.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *StabilizationCallerSession) Config() (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, error) {
	return _Stabilization.Contract.Config(&_Stabilization.CallOpts)
}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *StabilizationCaller) DebtAmount(opts *bind.CallOpts, account common.Address, timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "debtAmount", account, timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *StabilizationSession) DebtAmount(account common.Address, timestamp *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount(&_Stabilization.CallOpts, account, timestamp)
}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *StabilizationCallerSession) DebtAmount(account common.Address, timestamp *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount(&_Stabilization.CallOpts, account, timestamp)
}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *StabilizationCaller) DebtAmount0(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "debtAmount0", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *StabilizationSession) DebtAmount0(account common.Address) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount0(&_Stabilization.CallOpts, account)
}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *StabilizationCallerSession) DebtAmount0(account common.Address) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount0(&_Stabilization.CallOpts, account)
}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *StabilizationCaller) InterestDue(opts *bind.CallOpts, debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "interestDue", debt, rate, timeBorrow, timeDue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *StabilizationSession) InterestDue(debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.InterestDue(&_Stabilization.CallOpts, debt, rate, timeBorrow, timeDue)
}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *StabilizationCallerSession) InterestDue(debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.InterestDue(&_Stabilization.CallOpts, debt, rate, timeBorrow, timeDue)
}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *StabilizationCaller) IsLiquidatable(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "isLiquidatable", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *StabilizationSession) IsLiquidatable(account common.Address) (bool, error) {
	return _Stabilization.Contract.IsLiquidatable(&_Stabilization.CallOpts, account)
}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *StabilizationCallerSession) IsLiquidatable(account common.Address) (bool, error) {
	return _Stabilization.Contract.IsLiquidatable(&_Stabilization.CallOpts, account)
}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCaller) MinimumCollateral(opts *bind.CallOpts, principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "minimumCollateral", principal, price, mcr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationSession) MinimumCollateral(principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.MinimumCollateral(&_Stabilization.CallOpts, principal, price, mcr)
}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCallerSession) MinimumCollateral(principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.MinimumCollateral(&_Stabilization.CallOpts, principal, price, mcr)
}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *StabilizationCaller) UnderCollateralized(opts *bind.CallOpts, collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "underCollateralized", collateral, price, debt, liquidationRatio)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *StabilizationSession) UnderCollateralized(collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, error) {
	return _Stabilization.Contract.UnderCollateralized(&_Stabilization.CallOpts, collateral, price, debt, liquidationRatio)
}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *StabilizationCallerSession) UnderCollateralized(collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, error) {
	return _Stabilization.Contract.UnderCollateralized(&_Stabilization.CallOpts, collateral, price, debt, liquidationRatio)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) Borrow(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "borrow", amount)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *StabilizationSession) Borrow(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Borrow(&_Stabilization.TransactOpts, amount)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) Borrow(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Borrow(&_Stabilization.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *StabilizationSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Deposit(&_Stabilization.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Deposit(&_Stabilization.TransactOpts, amount)
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *StabilizationTransactor) Liquidate(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "liquidate", account)
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *StabilizationSession) Liquidate(account common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.Liquidate(&_Stabilization.TransactOpts, account)
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *StabilizationTransactorSession) Liquidate(account common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.Liquidate(&_Stabilization.TransactOpts, account)
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *StabilizationTransactor) Repay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "repay")
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *StabilizationSession) Repay() (*types.Transaction, error) {
	return _Stabilization.Contract.Repay(&_Stabilization.TransactOpts)
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *StabilizationTransactorSession) Repay() (*types.Transaction, error) {
	return _Stabilization.Contract.Repay(&_Stabilization.TransactOpts)
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactor) SetLiquidationRatio(opts *bind.TransactOpts, ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setLiquidationRatio", ratio)
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationSession) SetLiquidationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetLiquidationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactorSession) SetLiquidationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetLiquidationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactor) SetMinCollateralizationRatio(opts *bind.TransactOpts, ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setMinCollateralizationRatio", ratio)
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationSession) SetMinCollateralizationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinCollateralizationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactorSession) SetMinCollateralizationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinCollateralizationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) SetMinDebtRequirement(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setMinDebtRequirement", amount)
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *StabilizationSession) SetMinDebtRequirement(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinDebtRequirement(&_Stabilization.TransactOpts, amount)
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) SetMinDebtRequirement(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinDebtRequirement(&_Stabilization.TransactOpts, amount)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *StabilizationTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *StabilizationSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOperator(&_Stabilization.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *StabilizationTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOperator(&_Stabilization.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *StabilizationTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *StabilizationSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOracle(&_Stabilization.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *StabilizationTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOracle(&_Stabilization.TransactOpts, oracle)
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *StabilizationTransactor) SetSupplyControl(opts *bind.TransactOpts, supplyControl common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setSupplyControl", supplyControl)
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *StabilizationSession) SetSupplyControl(supplyControl common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetSupplyControl(&_Stabilization.TransactOpts, supplyControl)
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *StabilizationTransactorSession) SetSupplyControl(supplyControl common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetSupplyControl(&_Stabilization.TransactOpts, supplyControl)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *StabilizationSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Withdraw(&_Stabilization.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Withdraw(&_Stabilization.TransactOpts, amount)
}

// StabilizationBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the Stabilization contract.
type StabilizationBorrowIterator struct {
	Event *StabilizationBorrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationBorrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationBorrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationBorrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationBorrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationBorrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationBorrow represents a Borrow event raised by the Stabilization contract.
type StabilizationBorrow struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBorrow is a free log retrieval operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
//
// Solidity: event Borrow(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterBorrow(opts *bind.FilterOpts, account []common.Address) (*StabilizationBorrowIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Borrow", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationBorrowIterator{contract: _Stabilization.contract, event: "Borrow", logs: logs, sub: sub}, nil
}

// WatchBorrow is a free log subscription operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
//
// Solidity: event Borrow(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchBorrow(opts *bind.WatchOpts, sink chan<- *StabilizationBorrow, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Borrow", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationBorrow)
				if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrow is a log parse operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
//
// Solidity: event Borrow(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseBorrow(log types.Log) (*StabilizationBorrow, error) {
	event := new(StabilizationBorrow)
	if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Stabilization contract.
type StabilizationDepositIterator struct {
	Event *StabilizationDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationDeposit represents a Deposit event raised by the Stabilization contract.
type StabilizationDeposit struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterDeposit(opts *bind.FilterOpts, account []common.Address) (*StabilizationDepositIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Deposit", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationDepositIterator{contract: _Stabilization.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StabilizationDeposit, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Deposit", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationDeposit)
				if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseDeposit(log types.Log) (*StabilizationDeposit, error) {
	event := new(StabilizationDeposit)
	if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationLiquidateIterator is returned from FilterLiquidate and is used to iterate over the raw logs and unpacked data for Liquidate events raised by the Stabilization contract.
type StabilizationLiquidateIterator struct {
	Event *StabilizationLiquidate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationLiquidateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationLiquidate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationLiquidate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationLiquidateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationLiquidateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationLiquidate represents a Liquidate event raised by the Stabilization contract.
type StabilizationLiquidate struct {
	Account    common.Address
	Liquidator common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLiquidate is a free log retrieval operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
//
// Solidity: event Liquidate(address indexed account, address liquidator)
func (_Stabilization *StabilizationFilterer) FilterLiquidate(opts *bind.FilterOpts, account []common.Address) (*StabilizationLiquidateIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Liquidate", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationLiquidateIterator{contract: _Stabilization.contract, event: "Liquidate", logs: logs, sub: sub}, nil
}

// WatchLiquidate is a free log subscription operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
//
// Solidity: event Liquidate(address indexed account, address liquidator)
func (_Stabilization *StabilizationFilterer) WatchLiquidate(opts *bind.WatchOpts, sink chan<- *StabilizationLiquidate, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Liquidate", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationLiquidate)
				if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidate is a log parse operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
//
// Solidity: event Liquidate(address indexed account, address liquidator)
func (_Stabilization *StabilizationFilterer) ParseLiquidate(log types.Log) (*StabilizationLiquidate, error) {
	event := new(StabilizationLiquidate)
	if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the Stabilization contract.
type StabilizationRepayIterator struct {
	Event *StabilizationRepay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationRepayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationRepay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationRepay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationRepayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationRepayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationRepay represents a Repay event raised by the Stabilization contract.
type StabilizationRepay struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRepay is a free log retrieval operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
//
// Solidity: event Repay(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterRepay(opts *bind.FilterOpts, account []common.Address) (*StabilizationRepayIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Repay", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationRepayIterator{contract: _Stabilization.contract, event: "Repay", logs: logs, sub: sub}, nil
}

// WatchRepay is a free log subscription operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
//
// Solidity: event Repay(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchRepay(opts *bind.WatchOpts, sink chan<- *StabilizationRepay, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Repay", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationRepay)
				if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepay is a log parse operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
//
// Solidity: event Repay(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseRepay(log types.Log) (*StabilizationRepay, error) {
	event := new(StabilizationRepay)
	if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Stabilization contract.
type StabilizationWithdrawIterator struct {
	Event *StabilizationWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationWithdraw represents a Withdraw event raised by the Stabilization contract.
type StabilizationWithdraw struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterWithdraw(opts *bind.FilterOpts, account []common.Address) (*StabilizationWithdrawIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Withdraw", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationWithdrawIterator{contract: _Stabilization.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StabilizationWithdraw, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Withdraw", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationWithdraw)
				if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseWithdraw(log types.Log) (*StabilizationWithdraw, error) {
	event := new(StabilizationWithdraw)
	if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakableVestingMetaData contains all meta data concerning the StakableVesting contract.
var StakableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_selfDelegation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_rejected\",\"type\":\"bool\"}],\"name\":\"bondingApplied\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBondedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveATN\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredBondingGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredUnbondingGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"rewardsDistributed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setRequiredGasBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setRequiredGasUnbond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalNominal\",\"type\":\"uint256\"}],\"name\":\"setTotalNominal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNominal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_rejected\",\"type\":\"bool\"}],\"name\":\"unbondingApplied\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rejected\",\"type\":\"bool\"}],\"name\":\"unbondingReleased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnTotalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnTotalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"c0d3895e": "bond(uint256,address,uint256)",
		"9dfd1b8e": "bondingApplied(uint256,address,uint256,bool,bool)",
		"2afbbacb": "canStake(address,uint256)",
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"372500ab": "claimRewards()",
		"0962ef79": "claimRewards(uint256)",
		"6c7b69cb": "claimRewards(uint256,address)",
		"f8bbfcf3": "contractTotalValue(address,uint256)",
		"a0a8e460": "contractVersion()",
		"4b468d4c": "getBondedValidators(address,uint256)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"447ff061": "liquidBalanceOf(address,uint256,address)",
		"85e01abe": "lockedLiquidBalanceOf(address,uint256,address)",
		"2d8d17c6": "newContract(address,uint256,uint256,uint256,uint256)",
		"161605e3": "receiveATN()",
		"e69ecd2a": "releaseAllLNTN(uint256)",
		"3577a8f8": "releaseAllNTN(uint256)",
		"4d68282f": "releaseFunds(uint256)",
		"ec85303d": "releaseLNTN(uint256,address,uint256)",
		"81170628": "releaseNTN(uint256,uint256)",
		"b3d3fe8c": "requiredBondingGasCost()",
		"4d037fb6": "requiredUnbondingGasCost()",
		"d18736ab": "rewardsDistributed(address[])",
		"6a94b441": "setRequiredGasBond(uint256)",
		"2ebc0660": "setRequiredGasUnbond(uint256)",
		"995e21a4": "setTotalNominal(uint256)",
		"635bf933": "totalContracts(address)",
		"b0c93009": "totalNominal()",
		"ba19a4ae": "unbond(uint256,address,uint256)",
		"a8920241": "unbondingApplied(uint256,address,bool)",
		"3c54c290": "unbondingReleased(uint256,uint256,bool)",
		"949813b8": "unclaimedRewards(address)",
		"c8daa85d": "unclaimedRewards(address,uint256)",
		"53deba2d": "unclaimedRewards(address,uint256,address)",
		"21ec4487": "unlockedFunds(address,uint256)",
		"f73b3da1": "unlockedLiquidBalanceOf(address,uint256,address)",
		"0ba6d271": "updateFunds(address,uint256)",
	},
	Bin: "0x60806040526001600a5561c350600b5561c350600c553480156200002257600080fd5b50604051620048a0380380620048a08339810160408190526200004591620000a0565b600280546001600160a01b039384166001600160a01b0319918216811790925560038054949093169381169390931790915560058054909216179055620000df565b6001600160a01b03811681146200009d57600080fd5b50565b60008060408385031215620000b457600080fd5b8251620000c18162000087565b6020840151909250620000d48162000087565b809150509250929050565b6147b180620000ef6000396000f3fe6080604052600436106102305760003560e01c80636c7b69cb1161012e578063b0c93009116100ab578063d18736ab1161006f578063d18736ab14610675578063e69ecd2a14610695578063ec85303d146106b5578063f73b3da1146106d5578063f8bbfcf3146106f557600080fd5b8063b0c9300914610604578063b3d3fe8c1461061a578063ba19a4ae1461062f578063c0d3895e14610642578063c8daa85d1461065557600080fd5b80639dfd1b8e116100f25780639dfd1b8e14610561578063a0a8e46014610581578063a892024114610597578063a9f45b62146105b7578063aad55726146105d757600080fd5b80636c7b69cb146104c157806381170628146104e157806385e01abe14610501578063949813b814610521578063995e21a41461054157600080fd5b80633577a8f8116101bc5780634d037fb6116101805780634d037fb6146104015780634d68282f1461041657806353deba2d14610436578063635bf9331461046b5780636a94b441146104a157600080fd5b80633577a8f81461035f578063372500ab1461037f5780633c54c29014610394578063447ff061146103b45780634b468d4c146103d457600080fd5b8063213fe2b711610203578063213fe2b7146102a257806321ec4487146102cf5780632afbbacb146102ef5780632d8d17c61461031f5780632ebc06601461033f57600080fd5b80630962ef79146102355780630ba6d27114610257578063161605e314610255578063187cf4d714610277575b600080fd5b34801561024157600080fd5b50610255610250366004613ee4565b610715565b005b34801561026357600080fd5b50610255610272366004613f12565b610743565b34801561028357600080fd5b5061028f633b9aca0081565b6040519081526020015b60405180910390f35b3480156102ae57600080fd5b506102c26102bd366004613f3e565b610759565b6040516102999190613f5b565b3480156102db57600080fd5b5061028f6102ea366004613f12565b6108cd565b3480156102fb57600080fd5b5061030f61030a366004613f12565b6108ea565b6040519015158152602001610299565b34801561032b57600080fd5b5061025561033a366004613fe0565b610926565b34801561034b57600080fd5b5061025561035a366004613ee4565b610ac3565b34801561036b57600080fd5b5061025561037a366004613ee4565b610af2565b34801561038b57600080fd5b50610255610b20565b3480156103a057600080fd5b506102556103af366004614032565b610c04565b3480156103c057600080fd5b5061028f6103cf36600461406b565b610c39565b3480156103e057600080fd5b506103f46103ef366004613f12565b610c58565b60405161029991906140a2565b34801561040d57600080fd5b5061028f610c6c565b34801561042257600080fd5b50610255610431366004613ee4565b610cec565b34801561044257600080fd5b5061045661045136600461406b565b610d30565b60408051928352602083019190915201610299565b34801561047757600080fd5b5061028f610486366004613f3e565b6001600160a01b031660009081526020819052604090205490565b3480156104ad57600080fd5b506102556104bc366004613ee4565b610d58565b3480156104cd57600080fd5b506102556104dc3660046140e3565b610d87565b3480156104ed57600080fd5b506102556104fc366004614113565b610db7565b34801561050d57600080fd5b5061028f61051c36600461406b565b610e2c565b34801561052d57600080fd5b5061045661053c366004613f3e565b610e41565b34801561054d57600080fd5b5061025561055c366004613ee4565b610ed9565b34801561056d57600080fd5b5061025561057c366004614135565b610f08565b34801561058d57600080fd5b5061028f600a5481565b3480156105a357600080fd5b506102556105b2366004614194565b610f3f565b3480156105c357600080fd5b506102556105d236600461406b565b610f74565b3480156105e357600080fd5b506105f76105f2366004613f12565b61102b565b60405161029991906141cb565b34801561061057600080fd5b5061028f600d5481565b34801561062657600080fd5b5061028f6110e4565b61028f61063d366004614210565b61115f565b61028f610650366004614210565b611382565b34801561066157600080fd5b50610456610670366004613f12565b611644565b34801561068157600080fd5b506102556106903660046142b9565b61166a565b3480156106a157600080fd5b506102556106b0366004613ee4565b6116a0565b3480156106c157600080fd5b506102556106d0366004614210565b6116d3565b3480156106e157600080fd5b5061028f6106f036600461406b565b611863565b34801561070157600080fd5b5061028f610710366004613f12565b611878565b6000610721338361188c565b905060008061072f83611926565b9150915061073d82826119f3565b50505050565b610755610750838361188c565b611b39565b5050565b6001600160a01b038116600090815260208190526040812080546060929067ffffffffffffffff81111561078f5761078f614248565b6040519080825280602002602001820160405280156107fb57816020015b6107e86040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816107ad5790505b50905060005b81518110156108c557600183828154811061081e5761081e61436b565b9060005260206000200154815481106108395761083961436b565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a082015282518390839081106108a7576108a761436b565b602002602001018190525080806108bd90614397565b915050610801565b509392505050565b60006108e16108dc848461188c565b611b4b565b90505b92915050565b600060016108f8848461188c565b815481106109085761090861436b565b600091825260209091206006909102016005015460ff169392505050565b6003546001600160a01b031633146109595760405162461bcd60e51b8152600401610950906143b0565b60405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b03166389c614b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d091906143e7565b6109da8385614400565b1015610a285760405162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420636c696666206475726174696f6e2069732070617374006044820152606401610950565b83600d541015610a955760405162461bcd60e51b815260206004820152603260248201527f6e6f7420656e6f756768207374616b6520726573657276656420746f20637265604482015271185d194818481b995dc818dbdb9d1c9858dd60721b6064820152608401610950565b610aa485858585856001611bd6565b5083600d6000828254610ab79190614413565b90915550505050505050565b6003546001600160a01b03163314610aed5760405162461bcd60e51b8152600401610950906143b0565b600c55565b6000610afe338361188c565b9050610b0981611d8b565b610b1b81610b1683611b4b565b611da6565b505050565b336000908152602081815260408083206016835281842080546017909452918420805492859055849055925b8354811015610bf957610b7a848281548110610b6a57610b6a61436b565b9060005260206000200154611b39565b600080610ba2868481548110610b9257610b9261436b565b9060005260206000200154611926565b9092509050610bb18286614400565b9450610bbd8185614400565b9350610be4868481548110610bd457610bd461436b565b9060005260206000200154611e12565b50508080610bf190614397565b915050610b4c565b50610b1b82826119f3565b6002546001600160a01b03163314610c2e5760405162461bcd60e51b815260040161095090614426565b610b1b838383611f57565b6000610c4e610c48858561188c565b83611fb9565b90505b9392505050565b60606108e1610c67848461188c565b612008565b600254604080516335dce58760e11b815290516000926001600160a01b031691636bb9cb0e9160048083019260209291908290030181865afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda91906143e7565b600c54610ce7919061446e565b905090565b6000610cf8338361188c565b9050610d0381611b39565b6000610d0e82611b4b565b9050610d1a8282611da6565b9050610d268282612074565b50610b1b82611e12565b6000806000610d3f868661188c565b9050610d4b8185612229565b9097909650945050505050565b6003546001600160a01b03163314610d825760405162461bcd60e51b8152600401610950906143b0565b600b55565b6000610d93338461188c565b9050600080610da28385612330565b91509150610db082826119f3565b5050505050565b6000610dc3338461188c565b9050610dce81611d8b565b610dd781611b4b565b821115610e225760405162461bcd60e51b81526020600482015260196024820152786e6f7420656e6f75676820756e6c6f636b65642066756e647360381b6044820152606401610950565b61073d8183611da6565b6000610c4e610e3b858561188c565b836123a1565b6001600160a01b03811660009081526016602090815260408083205460178352818420549284905290832090925b8154811015610ed257600080610ea0848481548110610e9057610e9061436b565b90600052602060002001546123e1565b9092509050610eaf8287614400565b9550610ebb8186614400565b945050508080610eca90614397565b915050610e6f565b5050915091565b6003546001600160a01b03163314610f035760405162461bcd60e51b8152600401610950906143b0565b600d55565b6002546001600160a01b03163314610f325760405162461bcd60e51b815260040161095090614426565b610db085858585856124ae565b6002546001600160a01b03163314610f695760405162461bcd60e51b815260040161095090614426565b610b1b838383612597565b6003546001600160a01b03163314610f9e5760405162461bcd60e51b8152600401610950906143b0565b6000610faa848461188c565b9050600080610fb883611926565b6001600160a01b038816600090815260166020526040812080549395509193508492610fe5908490614400565b90915550506001600160a01b03861660009081526017602052604081208054839290611012908490614400565b909155506110239050838786612612565b505050505050565b6110666040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6001611072848461188c565b815481106110825761108261436b565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b600254604080516335dce58760e11b815290516000926001600160a01b031691636bb9cb0e9160048083019260209291908290030181865afa15801561112e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115291906143e7565b600b54610ce7919061446e565b6000611169610c6c565b3410156111d35760405162461bcd60e51b815260206004820152603260248201527f6e6f7420656e6f7567682067617320676976656e20666f72206e6f74696669636044820152716174696f6e206f6e20756e626f6e64696e6760701b6064820152608401610950565b60006111df338661188c565b90506111ea81611d8b565b6111f5818585612762565b6002546040516352e82ce560e11b81526001600160a01b03868116600483015260248201869052600092169063a5d059ca90349060440160206040518083038185885af115801561124a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061126f91906143e7565b905061127c826001614400565b60126000838152602001908152602001600020819055506040518060a001604052808581526020016112ac61280d565b81526001600160a01b03808816602080840191909152600060408085018290526060948501829052868252600f835280822086518155868401516001828101919091558783015160029092018054978901516080909901511515600160a81b0260ff60a81b19991515600160a01b026001600160a81b031990991693909716929092179690961796909616939093179094558584526015815281842054601382528285208186529091529220839055611366908290614400565b6000938452601560205260409093209290925595945050505050565b600061138c6110e4565b3410156113f45760405162461bcd60e51b815260206004820152603060248201527f6e6f7420656e6f7567682067617320676976656e20666f72206e6f746966696360448201526f6174696f6e206f6e20626f6e64696e6760801b6064820152608401610950565b6000611400338661188c565b905061140b81611b39565b6000600182815481106114205761142061436b565b9060005260206000209060060201905042816002015411156114845760405162461bcd60e51b815260206004820152601860248201527f636f6e7472616374206e6f7420737461727465642079657400000000000000006044820152606401610950565b80548411156114c95760405162461bcd60e51b81526020600482015260116024820152706e6f7420656e6f75676820746f6b656e7360781b6044820152606401610950565b60025460405163528a9b3560e11b81526001600160a01b03878116600483015260248201879052600092169063a515366a90349060440160206040518083038185885af115801561151e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061154391906143e7565b9050848260000160008282546115599190614413565b909155505060008381526011602090815260408220805460018181018355918452919092200182905561158d908490614400565b601060008381526020019081526020016000208190555060405180608001604052808681526020016115bd61280d565b81526001600160a01b0380891660208084019190915260006040938401819052858152600e82528390208451815590840151600182015591830151600290920180546060909401511515600160a01b026001600160a81b03199094169290911691909117919091179055611631838761287b565b61163a83611e12565b9695505050505050565b6000806000611653858561188c565b905061165e816123e1565b90969095509350505050565b6002546001600160a01b031633146116945760405162461bcd60e51b815260040161095090614426565b61169d8161297c565b50565b60006116ac338361188c565b90506116b781611b39565b6116c9816116c483611b4b565b612074565b5061075581611e12565b6000811161172f5760405162461bcd60e51b815260206004820152602360248201527f7265717569726520706f73697469766520616d6f756e7420746f207472616e736044820152623332b960e91b6064820152608401610950565b600061173b338561188c565b905061174681611b39565b600061175282856129bc565b9050828110156117a45760405162461bcd60e51b815260206004820152601860248201527f6e6f7420656e6f75676820756e6c6f636b6564204c4e544e00000000000000006044820152606401610950565b60006117b085856129fc565b90506117bb83611b4b565b8111156118065760405162461bcd60e51b81526020600482015260196024820152786e6f7420656e6f75676820756e6c6f636b65642066756e647360381b6044820152606401610950565b60006001848154811061181b5761181b61436b565b906000526020600020906006020190508181600101600082825461183f9190614400565b90915550611851905084338789612aab565b61185a84611e12565b50505050505050565b6000610c4e611872858561188c565b836129bc565b60006108e1611887848461188c565b612aca565b6001600160a01b03821660009081526020819052604081205482106118e95760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b6044820152606401610950565b6001600160a01b03831660009081526020819052604090208054839081106119135761191361436b565b9060005260206000200154905092915050565b600081815260076020908152604080832080548251818502810185019093528083528493849392919083018282801561198857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161196a575b5050505050905060005b8151811015610ed2576000806119c1878585815181106119b4576119b461436b565b6020026020010151612330565b90925090506119d08287614400565b95506119dc8186614400565b9450505080806119eb90614397565b915050611992565b604051600090339084908381818185875af1925050503d8060008114611a35576040519150601f19603f3d011682016040523d82523d6000602084013e611a3a565b606091505b5050905080611a805760405162461bcd60e51b815260206004820152601260248201527111985a5b1959081d1bc81cd95b990810555560721b6044820152606401610950565b60025460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af59190614485565b905080610b1b5760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b6044820152606401610950565b611b4281612ba3565b61169d81612d36565b60006108e482611b5a84612aca565b600260009054906101000a90046001600160a01b03166001600160a01b03166389c614b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd191906143e7565b613119565b6000838311611c275760405162461bcd60e51b815260206004820152601e60248201527f656e64206d7573742062652067726561746572207468616e20636c69666600006044820152606401610950565b50600180546040805160c08101825297885260006020808a018281528a8401998a5260608b0198895260808b0197885295151560a08b01908152848601865585835299517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600686029081019190915595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf787015597517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf886015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf985015593517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa84015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb909201805460ff1916921515929092179091556001600160a01b0395909516825281835281208054948501815581522090910181905590565b611d9481612ba3565b611d9d81612d36565b61169d81611e12565b60008060018481548110611dbc57611dbc61436b565b906000526020600020906006020190508060000154831115611dfa578054611de49084614413565b9150611df5843383600001546131ea565b611e0b565b8215611e0b57611e0b8433856131ea565b5092915050565b600081815260076020526040812090805b825481101561073d57600960008581526020019081526020016000206000848381548110611e5357611e5361436b565b60009182526020808320909101546001600160a01b03168352820192909252604001902091505b6006820154610100900460ff16158015611e95575081546001145b8015611ea5575060018260020154145b8015611eb5575060018260040154145b15611f4557611eea84848381548110611ed057611ed061436b565b6000918252602090912001546001600160a01b031661324e565b8254811015611f4557600960008581526020019081526020016000206000848381548110611f1a57611f1a61436b565b60009182526020808320909101546001600160a01b0316835282019290925260400190209150611e7a565b80611f4f81614397565b915050611e23565b600083815260126020526040812054611f7290600190614413565b90508115611f805750505050565b600060018281548110611f9557611f9561436b565b9060005260206000209060060201905083816000016000828254610ab79190614400565b60008281526009602090815260408083206001600160a01b03851684529091528120600681015460ff1615611ffe578054611ff690600190614413565b9150506108e4565b5060009392505050565b60008181526007602090815260409182902080548351818402810184019094528084526060939283018282801561206857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161204a575b50505050509050919050565b80600061208084612008565b905060005b8151811080156120955750600083115b156121d65760006120bf868484815181106120b2576120b261436b565b60200260200101516129bc565b9050806000036120cf57506121c4565b60006120f48484815181106120e6576120e661436b565b6020026020010151836129fc565b9050808510612133576121078186614413565b945061212e8733848787815181106121215761212161436b565b6020026020010151612aab565b6121c1565b600061215885858151811061214a5761214a61436b565b602002602001015187613401565b9050828111156121a35760405162461bcd60e51b8152602060048201526016602482015275636f6e76657273696f6e206e6f7420776f726b696e6760501b6044820152606401610950565b600095506121bf8833838888815181106121215761212161436b565b505b50505b806121ce81614397565b915050612085565b506000600185815481106121ec576121ec61436b565b9060005260206000209060060201905082846122089190614413565b81600101600082825461221b9190614400565b909155509295945050505050565b60008281526009602090815260408083206001600160a01b03851684529091528120600681015482919060ff161515820361226b576000809250925050612329565b6000806122778661349e565b6001600160a01b03881660009081526006602052604090208054929450909250906122a29084614400565b92508060020154826122b49190614400565b91506000600185600001546122c99190614413565b90506122da8186600301548661361b565b600186600201546122eb9190614413565b6122f59190614400565b96506123068186600501548561361b565b600186600401546123179190614413565b6123219190614400565b955050505050505b9250929050565b60008281526009602090815260408083206001600160a01b03851684529091528120600681015482919060ff1615158203612372576000809250925050612329565b61237b84613651565b6123858585613773565b6001600284018190556004909301929092559590945092505050565b60008281526009602090815260408083206001600160a01b03851684529091528120600681015460ff1615611ffe5760018160010154611ff69190614413565b600081815260076020908152604080832080548251818502810185019093528083528493849392919083018282801561244357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612425575b5050505050905060005b8151811015610ed25760008061247c8785858151811061246f5761246f61436b565b6020026020010151612229565b909250905061248b8287614400565b95506124978186614400565b9450505080806124a690614397565b91505061244d565b81156124fc5760405162461bcd60e51b815260206004820152601b60248201527f626f6e64696e672073686f756c642062652064656c65676174656400000000006044820152606401610950565b60008581526010602052604081205461251790600190614413565b6000878152600e6020526040902060028101805460ff60a01b1916600160a01b179055909150821561258c576000600183815481106125585761255861436b565b9060005260206000209060060201905081600001548160000160008282546125809190614400565b9091555061185a915050565b61185a82878761385c565b6000838152601260205260408120546125b290600190614413565b6000858152600f602052604090208054919250906125d183868361389e565b83156125f25750600201805460ff60a01b1916600160a01b17905550505050565b60028201805460ff60a81b1916600160a81b1790556110238386836138d5565b6001600160a01b0382166000908152602081905260408120805490919061263b90600190614413565b67ffffffffffffffff81111561265357612653614248565b60405190808252806020026020018201604052801561267c578160200160208202803683370190505b5090506000805b835481101561270a578684828154811061269f5761269f61436b565b906000526020600020015403156126f8578381815481106126c2576126c261436b565b90600052602060002001548383806126d990614397565b9450815181106126eb576126eb61436b565b6020026020010181815250505b8061270281614397565b915050612683565b506001600160a01b038516600090815260208181526040909120835161273292850190613e6a565b505050506001600160a01b0316600090815260208181526040822080546001810182559083529120019190915550565b60008381526009602090815260408083206001600160a01b0386168452909152902060018101548154839161279691614413565b10156127ee5760405162461bcd60e51b815260206004820152602160248201527f6e6f7420656e6f75676820756e6c6f636b6564206c697175696420746f6b656e6044820152607360f81b6064820152608401610950565b818160010160008282546128029190614400565b909155505050505050565b600254604080516332765ebd60e21b815290516000926001600160a01b03169163c9d97af49160048083019260209291908290030181865afa158015612857573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce791906143e7565b6128858282613917565b60008281526009602090815260408083206001600160a01b0385168452909152902060068101805461ff001981166101001790915560ff16156128c757505050565b5060408051610100808201835260018083526020808401828152848601838152606086018481526080870185815260a0880186815260c0890187815260e08a0188815260009d8e52600988528b8e206001600160a01b039d909d168e529b90965298909a209651875591519386019390935591516002850155905160038401559451600483015591516005820155925160069093018054925161ffff1990931693151561ff0019169390931791151502179055565b60005b8151811015610755576129aa82828151811061299d5761299d61436b565b60200260200101516139af565b806129b481614397565b91505061297f565b60008281526009602090815260408083206001600160a01b03851684529091528120600681015460ff1615611ffe5760018101548154611ff69190614413565b600254604051630c825d9760e11b81526001600160a01b0384811660048301526000928392911690631904bb2e90602401600060405180830381865afa158015612a4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a729190810190614552565b9050806101a001518161010001518260a00151612a8f9190614413565b612a99908561446e565b612aa391906146d0565b949350505050565b612ab4816139af565b612abf8482846138d5565b61073d838383613b6c565b60008060018381548110612ae057612ae061436b565b90600052602060002090600602019050600081600101548260000154612b069190614400565b90506000612b1385612008565b905060005b8151811015612b99576000612b4687848481518110612b3957612b3961436b565b6020026020010151611fb9565b905080600003612b565750612b87565b612b79838381518110612b6b57612b6b61436b565b6020026020010151826129fc565b612b839085614400565b9350505b80612b9181614397565b915050612b18565b5090949350505050565b600081815260116020526040812080549091819003612bc157505050565b600080600080612bcf61280d565b905060005b85811015612cc557868181548110612bee57612bee61436b565b90600052602060002001549450600e6000868152602001908152602001600020935081846001015403612c25575050505050505050565b600284015460008981526009602090815260408083206001600160a01b03909416835292905220600601805461ff00191690556002840154600160a01b900460ff161515600003612c7f578354612c7c9084614400565b92505b6000858152600e602090815260408083208381556001810184905560020180546001600160a81b0319169055601090915281205580612cbd81614397565b915050612bd4565b506000878152601160205260408120612cdd91613eb5565b81600003612cee5750505050505050565b600060018881548110612d0357612d0361436b565b9060005260206000209060060201905082816000016000828254612d279190614400565b90915550505050505050505050565b600081815260136020908152604080832060158352818420546014909352908320548392905b818110156131005760008181526020849052604080822054600254915163a9af105960e01b8152600481018290529097506001600160a01b039091169063a9af105990602401602060405180830381865afa158015612dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de391906146f2565b90506000816003811115612df957612df961470f565b03612e045750613100565b60008281526020858152604080832083905588835260129091528120556001816003811115612e3557612e3561470f565b03612e6a57506000858152600f60205260408120818155600181019190915560020180546001600160b01b03191690556130ee565b6000868152600f6020526040902060028101549095506001600160a01b03166003826003811115612e9d57612e9d61470f565b03612f9e576002860154600160a81b900460ff16612f185760405162461bcd60e51b815260206004820152603260248201527f756e626f6e64696e67207761732072656c656173656420627574206e6f74206160448201527170706c6965642073756363657366756c6c7960701b6064820152608401610950565b612f21816139af565b60025460405163b6ef8c6760e01b815260048101899052612f99918a9184916001600160a01b03169063b6ef8c6790602401602060405180830381865afa158015612f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9491906143e7565b61385c565b6130c1565b6002826003811115612fb257612fb261470f565b03613060576002860154600160a81b900460ff16156130395760405162461bcd60e51b815260206004820152603b60248201527f756e626f6e64696e6720776173206170706c696564207375636365737366756c60448201527f6c79206275742072656c65617365207761732072656a656374656400000000006064820152608401610950565b6002860154600160a01b900460ff161515600003612f9957612f998882886000015461389e565b60405162461bcd60e51b815260206004820152603060248201527f756e6b6e6f776e20556e626f6e64696e6752656c6561736553746174652c206e60448201526f195959081d1bc81a5b5c1b195b595b9d60821b6064820152608401610950565b50506000858152600f60205260408120818155600181019190915560020180546001600160b01b03191690555b806130f881614397565b915050612d5c565b6000958652601460205260409095209490945550505050565b6000806001858154811061312f5761312f61436b565b90600052602060002090600602019050806003015481600201546131539190614400565b8310156131a25760405162461bcd60e51b815260206004820152601c60248201527f636c69666620706572696f64206e6f74207265616368656420796574000000006044820152606401610950565b60006131b8826002015483600401548688613c6d565b905081600101548111156131de5760018201546131d59082614413565b92505050610c51565b50600095945050505050565b6000600184815481106131ff576131ff61436b565b90600052602060002090600602019050818160000160008282546132239190614413565b925050819055508181600101600082825461323e9190614400565b9091555061073d90508383613cae565b6000828152600760209081526040808320600883528184206001600160a01b038616855290925282205490919061328790600190614413565b8254909150613297826001614400565b036132f757818054806132ac576132ac614725565b60008281526020808220830160001990810180546001600160a01b03191690559092019092559481526008855260408082206001600160a01b03959095168252939094525050812055565b8154600090839061330a90600190614413565b8154811061331a5761331a61436b565b9060005260206000200160009054906101000a90046001600160a01b031690508083838154811061334d5761334d61436b565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055613381826001614400565b60008681526008602090815260408083206001600160a01b038616845290915290205582548390806133b5576133b5614725565b60008281526020808220830160001990810180546001600160a01b03191690559092019092559581526008865260408082206001600160a01b0396909616825294909552505050812055565b600254604051630c825d9760e11b81526001600160a01b0384811660048301526000928392911690631904bb2e90602401600060405180830381865afa15801561344f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134779190810190614552565b90508061010001518160a0015161348e9190614413565b6101a0820151612a99908561446e565b6001600160a01b0381811660009081526006602052604080822060048082015492516370a0823160e01b815230918101919091529293849391921690839082906370a0823190602401602060405180830381865afa158015613504573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352891906143e7565b9050801561361357604051631293027760e31b815230600482015260009081906001600160a01b0385169063949813b8906024016040805180830381865afa158015613578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359c919061473b565b9150915082633b9aca0086600101546001856135b89190614400565b6135c29190614413565b6135cc919061446e565b6135d691906146d0565b965082633b9aca0086600301546001846135f09190614400565b6135fa9190614413565b613604919061446e565b61360e91906146d0565b955050505b505050915091565b60008360000361362d57506000610c51565b633b9aca008461363d8585614413565b613647919061446e565b610c4e91906146d0565b6001600160a01b0381166000908152600660205260409020613672826139af565b60018181018190556003820155600480820154604080519283526024830181526020830180516001600160e01b031663372500ab60e01b179052516000926001600160a01b03909216916136c59161475f565b6000604051808303816000865af19150503d8060008114613702576040519150601f19603f3d011682016040523d82523d6000602084013e613707565b606091505b5050905080610b1b5760405162461bcd60e51b815260206004820152603260248201527f636c61696d5265776172647328292066726f6d206c69717569642073746174656044820152710818dbdb9d1c9858dd081c995d995c9d195960721b6064820152608401610950565b6001600160a01b0381166000818152600660209081526040808320548684526009835281842094845293909152812080549192839290919083906137b990600190614413565b90506137ca8183600301548561361b565b82600201546137d99190614400565b600283018190556003830184905594506137f4600186614413565b6001600160a01b0387166000908152600660205260409020600201546005840154919650906138259083908361361b565b83600401546138349190614400565b6004840181905560058401829055945061384f600186614413565b9450505050509250929050565b6138668383613773565b505060008381526009602090815260408083206001600160a01b03861684529091528120805490918391839190612802908490614400565b60008381526009602090815260408083206001600160a01b0386168452909152812060018101805491928492612802908490614413565b6138df8383613773565b505060008381526009602090815260408083206001600160a01b03861684529091528120805490918391839190612802908490614413565b60008281526008602090815260408083206001600160a01b038516845290915290205415613943575050565b600082815260076020908152604080832080546001810182558185528385200180546001600160a01b0319166001600160a01b0387811691821790925582548887526008865284872091875290855283862055600690935292206004015416610b1b57610b1b82613d6b565b6001600160a01b0381811660009081526006602052604080822060048082015492516370a0823160e01b81523091810191909152909391909116919082906370a0823190602401602060405180830381865afa158015613a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3791906143e7565b905080600003613a475750505050565b604051631293027760e31b815230600482015260009081906001600160a01b0385169063949813b8906024016040805180830381865afa158015613a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab3919061473b565b9092509050613ac3600183614400565b915082633b9aca00866001015484613adb9190614413565b613ae5919061446e565b613aef91906146d0565b856000016000828254613b029190614400565b90915550506001808601839055613b199082614400565b905082633b9aca00866003015483613b319190614413565b613b3b919061446e565b613b4591906146d0565b856002016000828254613b589190614400565b909155505060039094019390935550505050565b6001600160a01b038082166000908152600660205260408120600401549091166040516001600160a01b03868116602483015260448201869052919091169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b17905251613be3919061475f565b6000604051808303816000865af19150503d8060008114613c20576040519150601f19603f3d011682016040523d82523d6000602084013e613c25565b606091505b505090508061073d5760405162461bcd60e51b815260206004820152601460248201527313139513881d1c985b9cd9995c8819985a5b195960621b6044820152606401610950565b6000613c798585614400565b8310613c86575080612aa3565b83613c918685614413565b613c9b908461446e565b613ca591906146d0565b95945050505050565b60025460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb906044016020604051808303816000875af1158015613d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d269190614485565b905080610b1b5760405162461bcd60e51b8152602060048201526013602482015272139513881b9bdd081d1c985b9cd9995c9c9959606a1b6044820152606401610950565b6040805160a08101825260018082526020820181905281830181905260608201526005549151630c825d9760e11b81526001600160a01b038481166004830152919260808401921690631904bb2e90602401600060405180830381865afa158015613dda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e029190810190614552565b61018001516001600160a01b039081169091529182166000908152600660209081526040918290208351815590830151600182015590820151600282015560608201516003820155608090910151600490910180546001600160a01b03191691909216179055565b828054828255906000526020600020908101928215613ea5579160200282015b82811115613ea5578251825591602001919060010190613e8a565b50613eb1929150613ecf565b5090565b508054600082559060005260206000209081019061169d91905b5b80821115613eb15760008155600101613ed0565b600060208284031215613ef657600080fd5b5035919050565b6001600160a01b038116811461169d57600080fd5b60008060408385031215613f2557600080fd5b8235613f3081613efd565b946020939093013593505050565b600060208284031215613f5057600080fd5b8135610c5181613efd565b6020808252825182820181905260009190848201906040850190845b81811015613fd457613fc1838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c09290920191600101613f77565b50909695505050505050565b600080600080600060a08688031215613ff857600080fd5b853561400381613efd565b97602087013597506040870135966060810135965060800135945092505050565b801515811461169d57600080fd5b60008060006060848603121561404757600080fd5b8335925060208401359150604084013561406081614024565b809150509250925092565b60008060006060848603121561408057600080fd5b833561408b81613efd565b925060208401359150604084013561406081613efd565b6020808252825182820181905260009190848201906040850190845b81811015613fd45783516001600160a01b0316835292840192918401916001016140be565b600080604083850312156140f657600080fd5b82359150602083013561410881613efd565b809150509250929050565b6000806040838503121561412657600080fd5b50508035926020909101359150565b600080600080600060a0868803121561414d57600080fd5b85359450602086013561415f81613efd565b935060408601359250606086013561417681614024565b9150608086013561418681614024565b809150509295509295909350565b6000806000606084860312156141a957600080fd5b8335925060208401356141bb81613efd565b9150604084013561406081614024565b60c081016108e48284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b60008060006060848603121561422557600080fd5b83359250602084013561423781613efd565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051610280810167ffffffffffffffff8111828210171561428257614282614248565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156142b1576142b1614248565b604052919050565b600060208083850312156142cc57600080fd5b823567ffffffffffffffff808211156142e457600080fd5b818501915085601f8301126142f857600080fd5b81358181111561430a5761430a614248565b8060051b915061431b848301614288565b818152918301840191848101908884111561433557600080fd5b938501935b8385101561435f578435925061434f83613efd565b828252938501939085019061433a565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016143a9576143a9614381565b5060010190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b6000602082840312156143f957600080fd5b5051919050565b808201808211156108e4576108e4614381565b818103818111156108e4576108e4614381565b60208082526028908201527f66756e6374696f6e207265737472696374656420746f204175746f6e6974792060408201526718dbdb9d1c9858dd60c21b606082015260800190565b80820281158282048414176108e4576108e4614381565b60006020828403121561449757600080fd5b8151610c5181614024565b80516144ad81613efd565b919050565b60005b838110156144cd5781810151838201526020016144b5565b50506000910152565b600082601f8301126144e757600080fd5b815167ffffffffffffffff81111561450157614501614248565b614514601f8201601f1916602001614288565b81815284602083860101111561452957600080fd5b612aa38260208301602087016144b2565b6004811061169d57600080fd5b80516144ad8161453a565b60006020828403121561456457600080fd5b815167ffffffffffffffff8082111561457c57600080fd5b90830190610280828603121561459157600080fd5b61459961425e565b6145a2836144a2565b81526145b0602084016144a2565b60208201526145c1604084016144a2565b60408201526060830151828111156145d857600080fd5b6145e4878286016144d6565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152506101806146508185016144a2565b908201526101a083810151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240808401518381111561469f57600080fd5b6146ab888287016144d6565b82840152505061026091506146c1828401614547565b91810191909152949350505050565b6000826146ed57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561470457600080fd5b8151610c518161453a565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000806040838503121561474e57600080fd5b505080516020909101519092909150565b600082516147718184602087016144b2565b919091019291505056fea2646970667358221220b16cbb25d45fe6eac53eb2568ae256b7b40a7da5926f3b8657b5bd91486f3bb764736f6c63430008150033",
}

// StakableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakableVestingMetaData.ABI instead.
var StakableVestingABI = StakableVestingMetaData.ABI

// Deprecated: Use StakableVestingMetaData.Sigs instead.
// StakableVestingFuncSigs maps the 4-byte function signature to its string representation.
var StakableVestingFuncSigs = StakableVestingMetaData.Sigs

// StakableVestingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakableVestingMetaData.Bin instead.
var StakableVestingBin = StakableVestingMetaData.Bin

// DeployStakableVesting deploys a new Ethereum contract, binding an instance of StakableVesting to it.
func DeployStakableVesting(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _operator common.Address) (common.Address, *types.Transaction, *StakableVesting, error) {
	parsed, err := StakableVestingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakableVestingBin), backend, _autonity, _operator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakableVesting{StakableVestingCaller: StakableVestingCaller{contract: contract}, StakableVestingTransactor: StakableVestingTransactor{contract: contract}, StakableVestingFilterer: StakableVestingFilterer{contract: contract}}, nil
}

// StakableVesting is an auto generated Go binding around an Ethereum contract.
type StakableVesting struct {
	StakableVestingCaller     // Read-only binding to the contract
	StakableVestingTransactor // Write-only binding to the contract
	StakableVestingFilterer   // Log filterer for contract events
}

// StakableVestingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakableVestingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakableVestingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakableVestingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakableVestingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakableVestingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakableVestingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakableVestingSession struct {
	Contract     *StakableVesting  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakableVestingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakableVestingCallerSession struct {
	Contract *StakableVestingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// StakableVestingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakableVestingTransactorSession struct {
	Contract     *StakableVestingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// StakableVestingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakableVestingRaw struct {
	Contract *StakableVesting // Generic contract binding to access the raw methods on
}

// StakableVestingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakableVestingCallerRaw struct {
	Contract *StakableVestingCaller // Generic read-only contract binding to access the raw methods on
}

// StakableVestingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakableVestingTransactorRaw struct {
	Contract *StakableVestingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakableVesting creates a new instance of StakableVesting, bound to a specific deployed contract.
func NewStakableVesting(address common.Address, backend bind.ContractBackend) (*StakableVesting, error) {
	contract, err := bindStakableVesting(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakableVesting{StakableVestingCaller: StakableVestingCaller{contract: contract}, StakableVestingTransactor: StakableVestingTransactor{contract: contract}, StakableVestingFilterer: StakableVestingFilterer{contract: contract}}, nil
}

// NewStakableVestingCaller creates a new read-only instance of StakableVesting, bound to a specific deployed contract.
func NewStakableVestingCaller(address common.Address, caller bind.ContractCaller) (*StakableVestingCaller, error) {
	contract, err := bindStakableVesting(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakableVestingCaller{contract: contract}, nil
}

// NewStakableVestingTransactor creates a new write-only instance of StakableVesting, bound to a specific deployed contract.
func NewStakableVestingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakableVestingTransactor, error) {
	contract, err := bindStakableVesting(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakableVestingTransactor{contract: contract}, nil
}

// NewStakableVestingFilterer creates a new log filterer instance of StakableVesting, bound to a specific deployed contract.
func NewStakableVestingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakableVestingFilterer, error) {
	contract, err := bindStakableVesting(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakableVestingFilterer{contract: contract}, nil
}

// bindStakableVesting binds a generic wrapper to an already deployed contract.
func bindStakableVesting(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakableVestingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakableVesting *StakableVestingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakableVesting.Contract.StakableVestingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakableVesting *StakableVestingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakableVesting.Contract.StakableVestingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakableVesting *StakableVestingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakableVesting.Contract.StakableVestingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakableVesting *StakableVestingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakableVesting.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakableVesting *StakableVestingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakableVesting.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakableVesting *StakableVestingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakableVesting.Contract.contract.Transact(opts, method, params...)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_StakableVesting *StakableVestingCaller) FEEFACTORUNITRECIP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_StakableVesting *StakableVestingSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _StakableVesting.Contract.FEEFACTORUNITRECIP(&_StakableVesting.CallOpts)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _StakableVesting.Contract.FEEFACTORUNITRECIP(&_StakableVesting.CallOpts)
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_StakableVesting *StakableVestingCaller) CanStake(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (bool, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "canStake", _beneficiary, _id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_StakableVesting *StakableVestingSession) CanStake(_beneficiary common.Address, _id *big.Int) (bool, error) {
	return _StakableVesting.Contract.CanStake(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_StakableVesting *StakableVestingCallerSession) CanStake(_beneficiary common.Address, _id *big.Int) (bool, error) {
	return _StakableVesting.Contract.CanStake(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0xf8bbfcf3.
//
// Solidity: function contractTotalValue(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVestingCaller) ContractTotalValue(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "contractTotalValue", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractTotalValue is a free data retrieval call binding the contract method 0xf8bbfcf3.
//
// Solidity: function contractTotalValue(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVestingSession) ContractTotalValue(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _StakableVesting.Contract.ContractTotalValue(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0xf8bbfcf3.
//
// Solidity: function contractTotalValue(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) ContractTotalValue(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _StakableVesting.Contract.ContractTotalValue(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakableVesting *StakableVestingCaller) ContractVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "contractVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakableVesting *StakableVestingSession) ContractVersion() (*big.Int, error) {
	return _StakableVesting.Contract.ContractVersion(&_StakableVesting.CallOpts)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) ContractVersion() (*big.Int, error) {
	return _StakableVesting.Contract.ContractVersion(&_StakableVesting.CallOpts)
}

// GetBondedValidators is a free data retrieval call binding the contract method 0x4b468d4c.
//
// Solidity: function getBondedValidators(address _beneficiary, uint256 _id) view returns(address[])
func (_StakableVesting *StakableVestingCaller) GetBondedValidators(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "getBondedValidators", _beneficiary, _id)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetBondedValidators is a free data retrieval call binding the contract method 0x4b468d4c.
//
// Solidity: function getBondedValidators(address _beneficiary, uint256 _id) view returns(address[])
func (_StakableVesting *StakableVestingSession) GetBondedValidators(_beneficiary common.Address, _id *big.Int) ([]common.Address, error) {
	return _StakableVesting.Contract.GetBondedValidators(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// GetBondedValidators is a free data retrieval call binding the contract method 0x4b468d4c.
//
// Solidity: function getBondedValidators(address _beneficiary, uint256 _id) view returns(address[])
func (_StakableVesting *StakableVestingCallerSession) GetBondedValidators(_beneficiary common.Address, _id *big.Int) ([]common.Address, error) {
	return _StakableVesting.Contract.GetBondedValidators(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVesting *StakableVestingCaller) GetContract(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVesting *StakableVestingSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _StakableVesting.Contract.GetContract(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVesting *StakableVestingCallerSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _StakableVesting.Contract.GetContract(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakableVesting *StakableVestingCaller) GetContracts(opts *bind.CallOpts, _beneficiary common.Address) ([]ContractBaseContract, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)

	return out0, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakableVesting *StakableVestingSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _StakableVesting.Contract.GetContracts(&_StakableVesting.CallOpts, _beneficiary)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakableVesting *StakableVestingCallerSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _StakableVesting.Contract.GetContracts(&_StakableVesting.CallOpts, _beneficiary)
}

// LiquidBalanceOf is a free data retrieval call binding the contract method 0x447ff061.
//
// Solidity: function liquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingCaller) LiquidBalanceOf(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "liquidBalanceOf", _beneficiary, _id, _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiquidBalanceOf is a free data retrieval call binding the contract method 0x447ff061.
//
// Solidity: function liquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingSession) LiquidBalanceOf(_beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.LiquidBalanceOf(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// LiquidBalanceOf is a free data retrieval call binding the contract method 0x447ff061.
//
// Solidity: function liquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) LiquidBalanceOf(_beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.LiquidBalanceOf(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// LockedLiquidBalanceOf is a free data retrieval call binding the contract method 0x85e01abe.
//
// Solidity: function lockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingCaller) LockedLiquidBalanceOf(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "lockedLiquidBalanceOf", _beneficiary, _id, _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedLiquidBalanceOf is a free data retrieval call binding the contract method 0x85e01abe.
//
// Solidity: function lockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingSession) LockedLiquidBalanceOf(_beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.LockedLiquidBalanceOf(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// LockedLiquidBalanceOf is a free data retrieval call binding the contract method 0x85e01abe.
//
// Solidity: function lockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) LockedLiquidBalanceOf(_beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.LockedLiquidBalanceOf(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// RequiredBondingGasCost is a free data retrieval call binding the contract method 0xb3d3fe8c.
//
// Solidity: function requiredBondingGasCost() view returns(uint256)
func (_StakableVesting *StakableVestingCaller) RequiredBondingGasCost(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "requiredBondingGasCost")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredBondingGasCost is a free data retrieval call binding the contract method 0xb3d3fe8c.
//
// Solidity: function requiredBondingGasCost() view returns(uint256)
func (_StakableVesting *StakableVestingSession) RequiredBondingGasCost() (*big.Int, error) {
	return _StakableVesting.Contract.RequiredBondingGasCost(&_StakableVesting.CallOpts)
}

// RequiredBondingGasCost is a free data retrieval call binding the contract method 0xb3d3fe8c.
//
// Solidity: function requiredBondingGasCost() view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) RequiredBondingGasCost() (*big.Int, error) {
	return _StakableVesting.Contract.RequiredBondingGasCost(&_StakableVesting.CallOpts)
}

// RequiredUnbondingGasCost is a free data retrieval call binding the contract method 0x4d037fb6.
//
// Solidity: function requiredUnbondingGasCost() view returns(uint256)
func (_StakableVesting *StakableVestingCaller) RequiredUnbondingGasCost(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "requiredUnbondingGasCost")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredUnbondingGasCost is a free data retrieval call binding the contract method 0x4d037fb6.
//
// Solidity: function requiredUnbondingGasCost() view returns(uint256)
func (_StakableVesting *StakableVestingSession) RequiredUnbondingGasCost() (*big.Int, error) {
	return _StakableVesting.Contract.RequiredUnbondingGasCost(&_StakableVesting.CallOpts)
}

// RequiredUnbondingGasCost is a free data retrieval call binding the contract method 0x4d037fb6.
//
// Solidity: function requiredUnbondingGasCost() view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) RequiredUnbondingGasCost() (*big.Int, error) {
	return _StakableVesting.Contract.RequiredUnbondingGasCost(&_StakableVesting.CallOpts)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakableVesting *StakableVestingCaller) TotalContracts(opts *bind.CallOpts, _beneficiary common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakableVesting *StakableVestingSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.TotalContracts(&_StakableVesting.CallOpts, _beneficiary)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.TotalContracts(&_StakableVesting.CallOpts, _beneficiary)
}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_StakableVesting *StakableVestingCaller) TotalNominal(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "totalNominal")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_StakableVesting *StakableVestingSession) TotalNominal() (*big.Int, error) {
	return _StakableVesting.Contract.TotalNominal(&_StakableVesting.CallOpts)
}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) TotalNominal() (*big.Int, error) {
	return _StakableVesting.Contract.TotalNominal(&_StakableVesting.CallOpts)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x53deba2d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id, address _validator) view returns(uint256 _atnFee, uint256 _ntnFee)
func (_StakableVesting *StakableVestingCaller) UnclaimedRewards(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int, _validator common.Address) (struct {
	AtnFee *big.Int
	NtnFee *big.Int
}, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "unclaimedRewards", _beneficiary, _id, _validator)

	outstruct := new(struct {
		AtnFee *big.Int
		NtnFee *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AtnFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x53deba2d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id, address _validator) view returns(uint256 _atnFee, uint256 _ntnFee)
func (_StakableVesting *StakableVestingSession) UnclaimedRewards(_beneficiary common.Address, _id *big.Int, _validator common.Address) (struct {
	AtnFee *big.Int
	NtnFee *big.Int
}, error) {
	return _StakableVesting.Contract.UnclaimedRewards(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x53deba2d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id, address _validator) view returns(uint256 _atnFee, uint256 _ntnFee)
func (_StakableVesting *StakableVestingCallerSession) UnclaimedRewards(_beneficiary common.Address, _id *big.Int, _validator common.Address) (struct {
	AtnFee *big.Int
	NtnFee *big.Int
}, error) {
	return _StakableVesting.Contract.UnclaimedRewards(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _beneficiary) view returns(uint256 _atnTotalFee, uint256 _ntnTotalFee)
func (_StakableVesting *StakableVestingCaller) UnclaimedRewards0(opts *bind.CallOpts, _beneficiary common.Address) (struct {
	AtnTotalFee *big.Int
	NtnTotalFee *big.Int
}, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "unclaimedRewards0", _beneficiary)

	outstruct := new(struct {
		AtnTotalFee *big.Int
		NtnTotalFee *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AtnTotalFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnTotalFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _beneficiary) view returns(uint256 _atnTotalFee, uint256 _ntnTotalFee)
func (_StakableVesting *StakableVestingSession) UnclaimedRewards0(_beneficiary common.Address) (struct {
	AtnTotalFee *big.Int
	NtnTotalFee *big.Int
}, error) {
	return _StakableVesting.Contract.UnclaimedRewards0(&_StakableVesting.CallOpts, _beneficiary)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _beneficiary) view returns(uint256 _atnTotalFee, uint256 _ntnTotalFee)
func (_StakableVesting *StakableVestingCallerSession) UnclaimedRewards0(_beneficiary common.Address) (struct {
	AtnTotalFee *big.Int
	NtnTotalFee *big.Int
}, error) {
	return _StakableVesting.Contract.UnclaimedRewards0(&_StakableVesting.CallOpts, _beneficiary)
}

// UnclaimedRewards1 is a free data retrieval call binding the contract method 0xc8daa85d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id) view returns(uint256 _atnFee, uint256 _ntnFee)
func (_StakableVesting *StakableVestingCaller) UnclaimedRewards1(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (struct {
	AtnFee *big.Int
	NtnFee *big.Int
}, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "unclaimedRewards1", _beneficiary, _id)

	outstruct := new(struct {
		AtnFee *big.Int
		NtnFee *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AtnFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UnclaimedRewards1 is a free data retrieval call binding the contract method 0xc8daa85d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id) view returns(uint256 _atnFee, uint256 _ntnFee)
func (_StakableVesting *StakableVestingSession) UnclaimedRewards1(_beneficiary common.Address, _id *big.Int) (struct {
	AtnFee *big.Int
	NtnFee *big.Int
}, error) {
	return _StakableVesting.Contract.UnclaimedRewards1(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// UnclaimedRewards1 is a free data retrieval call binding the contract method 0xc8daa85d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id) view returns(uint256 _atnFee, uint256 _ntnFee)
func (_StakableVesting *StakableVestingCallerSession) UnclaimedRewards1(_beneficiary common.Address, _id *big.Int) (struct {
	AtnFee *big.Int
	NtnFee *big.Int
}, error) {
	return _StakableVesting.Contract.UnclaimedRewards1(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVestingCaller) UnlockedFunds(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "unlockedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVestingSession) UnlockedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _StakableVesting.Contract.UnlockedFunds(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) UnlockedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _StakableVesting.Contract.UnlockedFunds(&_StakableVesting.CallOpts, _beneficiary, _id)
}

// UnlockedLiquidBalanceOf is a free data retrieval call binding the contract method 0xf73b3da1.
//
// Solidity: function unlockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingCaller) UnlockedLiquidBalanceOf(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakableVesting.contract.Call(opts, &out, "unlockedLiquidBalanceOf", _beneficiary, _id, _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedLiquidBalanceOf is a free data retrieval call binding the contract method 0xf73b3da1.
//
// Solidity: function unlockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingSession) UnlockedLiquidBalanceOf(_beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.UnlockedLiquidBalanceOf(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// UnlockedLiquidBalanceOf is a free data retrieval call binding the contract method 0xf73b3da1.
//
// Solidity: function unlockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVestingCallerSession) UnlockedLiquidBalanceOf(_beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, error) {
	return _StakableVesting.Contract.UnlockedLiquidBalanceOf(&_StakableVesting.CallOpts, _beneficiary, _id, _validator)
}

// Bond is a paid mutator transaction binding the contract method 0xc0d3895e.
//
// Solidity: function bond(uint256 _id, address _validator, uint256 _amount) payable returns(uint256)
func (_StakableVesting *StakableVestingTransactor) Bond(opts *bind.TransactOpts, _id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "bond", _id, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xc0d3895e.
//
// Solidity: function bond(uint256 _id, address _validator, uint256 _amount) payable returns(uint256)
func (_StakableVesting *StakableVestingSession) Bond(_id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.Bond(&_StakableVesting.TransactOpts, _id, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xc0d3895e.
//
// Solidity: function bond(uint256 _id, address _validator, uint256 _amount) payable returns(uint256)
func (_StakableVesting *StakableVestingTransactorSession) Bond(_id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.Bond(&_StakableVesting.TransactOpts, _id, _validator, _amount)
}

// BondingApplied is a paid mutator transaction binding the contract method 0x9dfd1b8e.
//
// Solidity: function bondingApplied(uint256 _bondingID, address _validator, uint256 _liquid, bool _selfDelegation, bool _rejected) returns()
func (_StakableVesting *StakableVestingTransactor) BondingApplied(opts *bind.TransactOpts, _bondingID *big.Int, _validator common.Address, _liquid *big.Int, _selfDelegation bool, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "bondingApplied", _bondingID, _validator, _liquid, _selfDelegation, _rejected)
}

// BondingApplied is a paid mutator transaction binding the contract method 0x9dfd1b8e.
//
// Solidity: function bondingApplied(uint256 _bondingID, address _validator, uint256 _liquid, bool _selfDelegation, bool _rejected) returns()
func (_StakableVesting *StakableVestingSession) BondingApplied(_bondingID *big.Int, _validator common.Address, _liquid *big.Int, _selfDelegation bool, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.Contract.BondingApplied(&_StakableVesting.TransactOpts, _bondingID, _validator, _liquid, _selfDelegation, _rejected)
}

// BondingApplied is a paid mutator transaction binding the contract method 0x9dfd1b8e.
//
// Solidity: function bondingApplied(uint256 _bondingID, address _validator, uint256 _liquid, bool _selfDelegation, bool _rejected) returns()
func (_StakableVesting *StakableVestingTransactorSession) BondingApplied(_bondingID *big.Int, _validator common.Address, _liquid *big.Int, _selfDelegation bool, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.Contract.BondingApplied(&_StakableVesting.TransactOpts, _bondingID, _validator, _liquid, _selfDelegation, _rejected)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakableVesting *StakableVestingTransactor) ChangeContractBeneficiary(opts *bind.TransactOpts, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakableVesting *StakableVestingSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _StakableVesting.Contract.ChangeContractBeneficiary(&_StakableVesting.TransactOpts, _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakableVesting *StakableVestingTransactorSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _StakableVesting.Contract.ChangeContractBeneficiary(&_StakableVesting.TransactOpts, _beneficiary, _id, _recipient)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x0962ef79.
//
// Solidity: function claimRewards(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactor) ClaimRewards(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "claimRewards", _id)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x0962ef79.
//
// Solidity: function claimRewards(uint256 _id) returns()
func (_StakableVesting *StakableVestingSession) ClaimRewards(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ClaimRewards(&_StakableVesting.TransactOpts, _id)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x0962ef79.
//
// Solidity: function claimRewards(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactorSession) ClaimRewards(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ClaimRewards(&_StakableVesting.TransactOpts, _id)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakableVesting *StakableVestingTransactor) ClaimRewards0(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "claimRewards0")
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakableVesting *StakableVestingSession) ClaimRewards0() (*types.Transaction, error) {
	return _StakableVesting.Contract.ClaimRewards0(&_StakableVesting.TransactOpts)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakableVesting *StakableVestingTransactorSession) ClaimRewards0() (*types.Transaction, error) {
	return _StakableVesting.Contract.ClaimRewards0(&_StakableVesting.TransactOpts)
}

// ClaimRewards1 is a paid mutator transaction binding the contract method 0x6c7b69cb.
//
// Solidity: function claimRewards(uint256 _id, address _validator) returns()
func (_StakableVesting *StakableVestingTransactor) ClaimRewards1(opts *bind.TransactOpts, _id *big.Int, _validator common.Address) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "claimRewards1", _id, _validator)
}

// ClaimRewards1 is a paid mutator transaction binding the contract method 0x6c7b69cb.
//
// Solidity: function claimRewards(uint256 _id, address _validator) returns()
func (_StakableVesting *StakableVestingSession) ClaimRewards1(_id *big.Int, _validator common.Address) (*types.Transaction, error) {
	return _StakableVesting.Contract.ClaimRewards1(&_StakableVesting.TransactOpts, _id, _validator)
}

// ClaimRewards1 is a paid mutator transaction binding the contract method 0x6c7b69cb.
//
// Solidity: function claimRewards(uint256 _id, address _validator) returns()
func (_StakableVesting *StakableVestingTransactorSession) ClaimRewards1(_id *big.Int, _validator common.Address) (*types.Transaction, error) {
	return _StakableVesting.Contract.ClaimRewards1(&_StakableVesting.TransactOpts, _id, _validator)
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVesting *StakableVestingTransactor) NewContract(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVesting *StakableVestingSession) NewContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.NewContract(&_StakableVesting.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVesting *StakableVestingTransactorSession) NewContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.NewContract(&_StakableVesting.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_StakableVesting *StakableVestingTransactor) ReceiveATN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "receiveATN")
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_StakableVesting *StakableVestingSession) ReceiveATN() (*types.Transaction, error) {
	return _StakableVesting.Contract.ReceiveATN(&_StakableVesting.TransactOpts)
}

// ReceiveATN is a paid mutator transaction binding the contract method 0x161605e3.
//
// Solidity: function receiveATN() payable returns()
func (_StakableVesting *StakableVestingTransactorSession) ReceiveATN() (*types.Transaction, error) {
	return _StakableVesting.Contract.ReceiveATN(&_StakableVesting.TransactOpts)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0xe69ecd2a.
//
// Solidity: function releaseAllLNTN(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactor) ReleaseAllLNTN(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "releaseAllLNTN", _id)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0xe69ecd2a.
//
// Solidity: function releaseAllLNTN(uint256 _id) returns()
func (_StakableVesting *StakableVestingSession) ReleaseAllLNTN(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseAllLNTN(&_StakableVesting.TransactOpts, _id)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0xe69ecd2a.
//
// Solidity: function releaseAllLNTN(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactorSession) ReleaseAllLNTN(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseAllLNTN(&_StakableVesting.TransactOpts, _id)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactor) ReleaseAllNTN(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "releaseAllNTN", _id)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_StakableVesting *StakableVestingSession) ReleaseAllNTN(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseAllNTN(&_StakableVesting.TransactOpts, _id)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactorSession) ReleaseAllNTN(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseAllNTN(&_StakableVesting.TransactOpts, _id)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x4d68282f.
//
// Solidity: function releaseFunds(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactor) ReleaseFunds(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "releaseFunds", _id)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x4d68282f.
//
// Solidity: function releaseFunds(uint256 _id) returns()
func (_StakableVesting *StakableVestingSession) ReleaseFunds(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseFunds(&_StakableVesting.TransactOpts, _id)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x4d68282f.
//
// Solidity: function releaseFunds(uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactorSession) ReleaseFunds(_id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseFunds(&_StakableVesting.TransactOpts, _id)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0xec85303d.
//
// Solidity: function releaseLNTN(uint256 _id, address _validator, uint256 _amount) returns()
func (_StakableVesting *StakableVestingTransactor) ReleaseLNTN(opts *bind.TransactOpts, _id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "releaseLNTN", _id, _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0xec85303d.
//
// Solidity: function releaseLNTN(uint256 _id, address _validator, uint256 _amount) returns()
func (_StakableVesting *StakableVestingSession) ReleaseLNTN(_id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseLNTN(&_StakableVesting.TransactOpts, _id, _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0xec85303d.
//
// Solidity: function releaseLNTN(uint256 _id, address _validator, uint256 _amount) returns()
func (_StakableVesting *StakableVestingTransactorSession) ReleaseLNTN(_id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseLNTN(&_StakableVesting.TransactOpts, _id, _validator, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_StakableVesting *StakableVestingTransactor) ReleaseNTN(opts *bind.TransactOpts, _id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "releaseNTN", _id, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_StakableVesting *StakableVestingSession) ReleaseNTN(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseNTN(&_StakableVesting.TransactOpts, _id, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_StakableVesting *StakableVestingTransactorSession) ReleaseNTN(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.ReleaseNTN(&_StakableVesting.TransactOpts, _id, _amount)
}

// RewardsDistributed is a paid mutator transaction binding the contract method 0xd18736ab.
//
// Solidity: function rewardsDistributed(address[] _validators) returns()
func (_StakableVesting *StakableVestingTransactor) RewardsDistributed(opts *bind.TransactOpts, _validators []common.Address) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "rewardsDistributed", _validators)
}

// RewardsDistributed is a paid mutator transaction binding the contract method 0xd18736ab.
//
// Solidity: function rewardsDistributed(address[] _validators) returns()
func (_StakableVesting *StakableVestingSession) RewardsDistributed(_validators []common.Address) (*types.Transaction, error) {
	return _StakableVesting.Contract.RewardsDistributed(&_StakableVesting.TransactOpts, _validators)
}

// RewardsDistributed is a paid mutator transaction binding the contract method 0xd18736ab.
//
// Solidity: function rewardsDistributed(address[] _validators) returns()
func (_StakableVesting *StakableVestingTransactorSession) RewardsDistributed(_validators []common.Address) (*types.Transaction, error) {
	return _StakableVesting.Contract.RewardsDistributed(&_StakableVesting.TransactOpts, _validators)
}

// SetRequiredGasBond is a paid mutator transaction binding the contract method 0x6a94b441.
//
// Solidity: function setRequiredGasBond(uint256 _gas) returns()
func (_StakableVesting *StakableVestingTransactor) SetRequiredGasBond(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "setRequiredGasBond", _gas)
}

// SetRequiredGasBond is a paid mutator transaction binding the contract method 0x6a94b441.
//
// Solidity: function setRequiredGasBond(uint256 _gas) returns()
func (_StakableVesting *StakableVestingSession) SetRequiredGasBond(_gas *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.SetRequiredGasBond(&_StakableVesting.TransactOpts, _gas)
}

// SetRequiredGasBond is a paid mutator transaction binding the contract method 0x6a94b441.
//
// Solidity: function setRequiredGasBond(uint256 _gas) returns()
func (_StakableVesting *StakableVestingTransactorSession) SetRequiredGasBond(_gas *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.SetRequiredGasBond(&_StakableVesting.TransactOpts, _gas)
}

// SetRequiredGasUnbond is a paid mutator transaction binding the contract method 0x2ebc0660.
//
// Solidity: function setRequiredGasUnbond(uint256 _gas) returns()
func (_StakableVesting *StakableVestingTransactor) SetRequiredGasUnbond(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "setRequiredGasUnbond", _gas)
}

// SetRequiredGasUnbond is a paid mutator transaction binding the contract method 0x2ebc0660.
//
// Solidity: function setRequiredGasUnbond(uint256 _gas) returns()
func (_StakableVesting *StakableVestingSession) SetRequiredGasUnbond(_gas *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.SetRequiredGasUnbond(&_StakableVesting.TransactOpts, _gas)
}

// SetRequiredGasUnbond is a paid mutator transaction binding the contract method 0x2ebc0660.
//
// Solidity: function setRequiredGasUnbond(uint256 _gas) returns()
func (_StakableVesting *StakableVestingTransactorSession) SetRequiredGasUnbond(_gas *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.SetRequiredGasUnbond(&_StakableVesting.TransactOpts, _gas)
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _newTotalNominal) returns()
func (_StakableVesting *StakableVestingTransactor) SetTotalNominal(opts *bind.TransactOpts, _newTotalNominal *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "setTotalNominal", _newTotalNominal)
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _newTotalNominal) returns()
func (_StakableVesting *StakableVestingSession) SetTotalNominal(_newTotalNominal *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.SetTotalNominal(&_StakableVesting.TransactOpts, _newTotalNominal)
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _newTotalNominal) returns()
func (_StakableVesting *StakableVestingTransactorSession) SetTotalNominal(_newTotalNominal *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.SetTotalNominal(&_StakableVesting.TransactOpts, _newTotalNominal)
}

// Unbond is a paid mutator transaction binding the contract method 0xba19a4ae.
//
// Solidity: function unbond(uint256 _id, address _validator, uint256 _amount) payable returns(uint256)
func (_StakableVesting *StakableVestingTransactor) Unbond(opts *bind.TransactOpts, _id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "unbond", _id, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xba19a4ae.
//
// Solidity: function unbond(uint256 _id, address _validator, uint256 _amount) payable returns(uint256)
func (_StakableVesting *StakableVestingSession) Unbond(_id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.Unbond(&_StakableVesting.TransactOpts, _id, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xba19a4ae.
//
// Solidity: function unbond(uint256 _id, address _validator, uint256 _amount) payable returns(uint256)
func (_StakableVesting *StakableVestingTransactorSession) Unbond(_id *big.Int, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.Unbond(&_StakableVesting.TransactOpts, _id, _validator, _amount)
}

// UnbondingApplied is a paid mutator transaction binding the contract method 0xa8920241.
//
// Solidity: function unbondingApplied(uint256 _unbondingID, address _validator, bool _rejected) returns()
func (_StakableVesting *StakableVestingTransactor) UnbondingApplied(opts *bind.TransactOpts, _unbondingID *big.Int, _validator common.Address, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "unbondingApplied", _unbondingID, _validator, _rejected)
}

// UnbondingApplied is a paid mutator transaction binding the contract method 0xa8920241.
//
// Solidity: function unbondingApplied(uint256 _unbondingID, address _validator, bool _rejected) returns()
func (_StakableVesting *StakableVestingSession) UnbondingApplied(_unbondingID *big.Int, _validator common.Address, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.Contract.UnbondingApplied(&_StakableVesting.TransactOpts, _unbondingID, _validator, _rejected)
}

// UnbondingApplied is a paid mutator transaction binding the contract method 0xa8920241.
//
// Solidity: function unbondingApplied(uint256 _unbondingID, address _validator, bool _rejected) returns()
func (_StakableVesting *StakableVestingTransactorSession) UnbondingApplied(_unbondingID *big.Int, _validator common.Address, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.Contract.UnbondingApplied(&_StakableVesting.TransactOpts, _unbondingID, _validator, _rejected)
}

// UnbondingReleased is a paid mutator transaction binding the contract method 0x3c54c290.
//
// Solidity: function unbondingReleased(uint256 _unbondingID, uint256 _amount, bool _rejected) returns()
func (_StakableVesting *StakableVestingTransactor) UnbondingReleased(opts *bind.TransactOpts, _unbondingID *big.Int, _amount *big.Int, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "unbondingReleased", _unbondingID, _amount, _rejected)
}

// UnbondingReleased is a paid mutator transaction binding the contract method 0x3c54c290.
//
// Solidity: function unbondingReleased(uint256 _unbondingID, uint256 _amount, bool _rejected) returns()
func (_StakableVesting *StakableVestingSession) UnbondingReleased(_unbondingID *big.Int, _amount *big.Int, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.Contract.UnbondingReleased(&_StakableVesting.TransactOpts, _unbondingID, _amount, _rejected)
}

// UnbondingReleased is a paid mutator transaction binding the contract method 0x3c54c290.
//
// Solidity: function unbondingReleased(uint256 _unbondingID, uint256 _amount, bool _rejected) returns()
func (_StakableVesting *StakableVestingTransactorSession) UnbondingReleased(_unbondingID *big.Int, _amount *big.Int, _rejected bool) (*types.Transaction, error) {
	return _StakableVesting.Contract.UnbondingReleased(&_StakableVesting.TransactOpts, _unbondingID, _amount, _rejected)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0x0ba6d271.
//
// Solidity: function updateFunds(address _beneficiary, uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactor) UpdateFunds(opts *bind.TransactOpts, _beneficiary common.Address, _id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.contract.Transact(opts, "updateFunds", _beneficiary, _id)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0x0ba6d271.
//
// Solidity: function updateFunds(address _beneficiary, uint256 _id) returns()
func (_StakableVesting *StakableVestingSession) UpdateFunds(_beneficiary common.Address, _id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.UpdateFunds(&_StakableVesting.TransactOpts, _beneficiary, _id)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0x0ba6d271.
//
// Solidity: function updateFunds(address _beneficiary, uint256 _id) returns()
func (_StakableVesting *StakableVestingTransactorSession) UpdateFunds(_beneficiary common.Address, _id *big.Int) (*types.Transaction, error) {
	return _StakableVesting.Contract.UpdateFunds(&_StakableVesting.TransactOpts, _beneficiary, _id)
}

// SupplyControlMetaData contains all meta data concerning the SupplyControl contract.
var SupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
	Bin: "0x6080604052604051610512380380610512833981016040819052610022916100a5565b3460000361004357604051637c946ed760e01b815260040160405180910390fd5b600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560008054919093169116179055346001556100e8565b80516001600160a01b03811681146100a057600080fd5b919050565b6000806000606084860312156100ba57600080fd5b6100c384610089565b92506100d160208501610089565b91506100df60408501610089565b90509250925092565b61041b806100f76000396000f3fe6080604052600436106100705760003560e01c80637e47961c1161004e5780637e47961c146100c85780637ecc2b5614610100578063b3ab15fb14610113578063db7f521a1461013357600080fd5b806318160ddd1461007557806340c10f191461009e57806344df8e70146100c0575b600080fd5b34801561008157600080fd5b5061008b60015481565b6040519081526020015b60405180910390f35b3480156100aa57600080fd5b506100be6100b9366004610399565b610153565b005b6100be610265565b3480156100d457600080fd5b506000546100e8906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b34801561010c57600080fd5b504761008b565b34801561011f57600080fd5b506100be61012e3660046103c3565b6102e5565b34801561013f57600080fd5b506100be61014e3660046103c3565b610331565b6000546001600160a01b0316331461017d576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821615806101a057506000546001600160a01b038381169116145b156101be57604051634e46966960e11b815260040160405180910390fd5b8015806101ca57504781115b156101e85760405163162908e360e11b815260040160405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561021e573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a15050565b3460000361028657604051637c946ed760e01b815260040160405180910390fd5b6000546001600160a01b031633146102b0576040516282b42960e81b815260040160405180910390fd5b6040513481527fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9060200160405180910390a1565b6002546001600160a01b0316331461030f576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461035b576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461039457600080fd5b919050565b600080604083850312156103ac57600080fd5b6103b58361037d565b946020939093013593505050565b6000602082840312156103d557600080fd5b6103de8261037d565b939250505056fea26469706673582212207646b2e6881a2d6269951386532b4fc6a3409fe50e89f6a55b709c4060cd997f64736f6c63430008150033",
}

// SupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use SupplyControlMetaData.ABI instead.
var SupplyControlABI = SupplyControlMetaData.ABI

// Deprecated: Use SupplyControlMetaData.Sigs instead.
// SupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var SupplyControlFuncSigs = SupplyControlMetaData.Sigs

// SupplyControlBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SupplyControlMetaData.Bin instead.
var SupplyControlBin = SupplyControlMetaData.Bin

// DeploySupplyControl deploys a new Ethereum contract, binding an instance of SupplyControl to it.
func DeploySupplyControl(auth *bind.TransactOpts, backend bind.ContractBackend, autonity common.Address, operator common.Address, stabilizer_ common.Address) (common.Address, *types.Transaction, *SupplyControl, error) {
	parsed, err := SupplyControlMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SupplyControlBin), backend, autonity, operator, stabilizer_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SupplyControl{SupplyControlCaller: SupplyControlCaller{contract: contract}, SupplyControlTransactor: SupplyControlTransactor{contract: contract}, SupplyControlFilterer: SupplyControlFilterer{contract: contract}}, nil
}

// SupplyControl is an auto generated Go binding around an Ethereum contract.
type SupplyControl struct {
	SupplyControlCaller     // Read-only binding to the contract
	SupplyControlTransactor // Write-only binding to the contract
	SupplyControlFilterer   // Log filterer for contract events
}

// SupplyControlCaller is an auto generated read-only Go binding around an Ethereum contract.
type SupplyControlCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyControlTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SupplyControlTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyControlFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SupplyControlFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyControlSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SupplyControlSession struct {
	Contract     *SupplyControl    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SupplyControlCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SupplyControlCallerSession struct {
	Contract *SupplyControlCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// SupplyControlTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SupplyControlTransactorSession struct {
	Contract     *SupplyControlTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// SupplyControlRaw is an auto generated low-level Go binding around an Ethereum contract.
type SupplyControlRaw struct {
	Contract *SupplyControl // Generic contract binding to access the raw methods on
}

// SupplyControlCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SupplyControlCallerRaw struct {
	Contract *SupplyControlCaller // Generic read-only contract binding to access the raw methods on
}

// SupplyControlTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SupplyControlTransactorRaw struct {
	Contract *SupplyControlTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSupplyControl creates a new instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControl(address common.Address, backend bind.ContractBackend) (*SupplyControl, error) {
	contract, err := bindSupplyControl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SupplyControl{SupplyControlCaller: SupplyControlCaller{contract: contract}, SupplyControlTransactor: SupplyControlTransactor{contract: contract}, SupplyControlFilterer: SupplyControlFilterer{contract: contract}}, nil
}

// NewSupplyControlCaller creates a new read-only instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControlCaller(address common.Address, caller bind.ContractCaller) (*SupplyControlCaller, error) {
	contract, err := bindSupplyControl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SupplyControlCaller{contract: contract}, nil
}

// NewSupplyControlTransactor creates a new write-only instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControlTransactor(address common.Address, transactor bind.ContractTransactor) (*SupplyControlTransactor, error) {
	contract, err := bindSupplyControl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SupplyControlTransactor{contract: contract}, nil
}

// NewSupplyControlFilterer creates a new log filterer instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControlFilterer(address common.Address, filterer bind.ContractFilterer) (*SupplyControlFilterer, error) {
	contract, err := bindSupplyControl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SupplyControlFilterer{contract: contract}, nil
}

// bindSupplyControl binds a generic wrapper to an already deployed contract.
func bindSupplyControl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SupplyControlABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SupplyControl *SupplyControlRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SupplyControl.Contract.SupplyControlCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SupplyControl *SupplyControlRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SupplyControl.Contract.SupplyControlTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SupplyControl *SupplyControlRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SupplyControl.Contract.SupplyControlTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SupplyControl *SupplyControlCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SupplyControl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SupplyControl *SupplyControlTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SupplyControl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SupplyControl *SupplyControlTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SupplyControl.Contract.contract.Transact(opts, method, params...)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCaller) AvailableSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SupplyControl.contract.Call(opts, &out, "availableSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControlSession) AvailableSupply() (*big.Int, error) {
	return _SupplyControl.Contract.AvailableSupply(&_SupplyControl.CallOpts)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCallerSession) AvailableSupply() (*big.Int, error) {
	return _SupplyControl.Contract.AvailableSupply(&_SupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControlCaller) Stabilizer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SupplyControl.contract.Call(opts, &out, "stabilizer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControlSession) Stabilizer() (common.Address, error) {
	return _SupplyControl.Contract.Stabilizer(&_SupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControlCallerSession) Stabilizer() (common.Address, error) {
	return _SupplyControl.Contract.Stabilizer(&_SupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SupplyControl.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControlSession) TotalSupply() (*big.Int, error) {
	return _SupplyControl.Contract.TotalSupply(&_SupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCallerSession) TotalSupply() (*big.Int, error) {
	return _SupplyControl.Contract.TotalSupply(&_SupplyControl.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControlTransactor) Burn(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "burn")
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControlSession) Burn() (*types.Transaction, error) {
	return _SupplyControl.Contract.Burn(&_SupplyControl.TransactOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControlTransactorSession) Burn() (*types.Transaction, error) {
	return _SupplyControl.Contract.Burn(&_SupplyControl.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControlTransactor) Mint(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "mint", recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControlSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyControl.Contract.Mint(&_SupplyControl.TransactOpts, recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControlTransactorSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyControl.Contract.Mint(&_SupplyControl.TransactOpts, recipient, amount)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControlTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControlSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetOperator(&_SupplyControl.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControlTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetOperator(&_SupplyControl.TransactOpts, operator)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControlTransactor) SetStabilizer(opts *bind.TransactOpts, stabilizer_ common.Address) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "setStabilizer", stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControlSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetStabilizer(&_SupplyControl.TransactOpts, stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControlTransactorSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetStabilizer(&_SupplyControl.TransactOpts, stabilizer_)
}

// SupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the SupplyControl contract.
type SupplyControlBurnIterator struct {
	Event *SupplyControlBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyControlBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyControlBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyControlBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyControlBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyControlBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyControlBurn represents a Burn event raised by the SupplyControl contract.
type SupplyControlBurn struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_SupplyControl *SupplyControlFilterer) FilterBurn(opts *bind.FilterOpts) (*SupplyControlBurnIterator, error) {

	logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return &SupplyControlBurnIterator{contract: _SupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_SupplyControl *SupplyControlFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *SupplyControlBurn) (event.Subscription, error) {

	logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyControlBurn)
				if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_SupplyControl *SupplyControlFilterer) ParseBurn(log types.Log) (*SupplyControlBurn, error) {
	event := new(SupplyControlBurn)
	if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the SupplyControl contract.
type SupplyControlMintIterator struct {
	Event *SupplyControlMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyControlMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyControlMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyControlMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyControlMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyControlMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyControlMint represents a Mint event raised by the SupplyControl contract.
type SupplyControlMint struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_SupplyControl *SupplyControlFilterer) FilterMint(opts *bind.FilterOpts) (*SupplyControlMintIterator, error) {

	logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &SupplyControlMintIterator{contract: _SupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_SupplyControl *SupplyControlFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *SupplyControlMint) (event.Subscription, error) {

	logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyControlMint)
				if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_SupplyControl *SupplyControlFilterer) ParseMint(log types.Log) (*SupplyControlMint, error) {
	event := new(SupplyControlMint)
	if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestBaseMetaData contains all meta data concerning the TestBase contract.
var TestBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"bfb4ebcf": "Foo()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161041238038061041283398101604081905261002f91610058565b600061003b82826101aa565b5050610269565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006b57600080fd5b82516001600160401b038082111561008257600080fd5b818501915085601f83011261009657600080fd5b8151818111156100a8576100a8610042565b604051601f8201601f19908116603f011681019083821181831017156100d0576100d0610042565b8160405282815288868487010111156100e857600080fd5b600093505b8284101561010a57848401860151818501870152928501926100ed565b600086848301015280965050505050505092915050565b600181811c9082168061013557607f821691505b60208210810361015557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101a557600081815260208120601f850160051c810160208610156101825750805b601f850160051c820191505b818110156101a15782815560010161018e565b5050505b505050565b81516001600160401b038111156101c3576101c3610042565b6101d7816101d18454610121565b8461015b565b602080601f83116001811461020c57600084156101f45750858301515b600019600386901b1c1916600185901b1785556101a1565b600085815260208120601f198616915b8281101561023b5788860151825594840194600190910190840161021c565b50858210156102595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806102786000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bfb4ebcf14610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220294794472529671edd6ab86268ef456ac8836071f3b31a89f181f3cc10be6b2664736f6c63430008150033",
}

// TestBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use TestBaseMetaData.ABI instead.
var TestBaseABI = TestBaseMetaData.ABI

// Deprecated: Use TestBaseMetaData.Sigs instead.
// TestBaseFuncSigs maps the 4-byte function signature to its string representation.
var TestBaseFuncSigs = TestBaseMetaData.Sigs

// TestBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestBaseMetaData.Bin instead.
var TestBaseBin = TestBaseMetaData.Bin

// DeployTestBase deploys a new Ethereum contract, binding an instance of TestBase to it.
func DeployTestBase(auth *bind.TransactOpts, backend bind.ContractBackend, _foo string) (common.Address, *types.Transaction, *TestBase, error) {
	parsed, err := TestBaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestBaseBin), backend, _foo)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestBase{TestBaseCaller: TestBaseCaller{contract: contract}, TestBaseTransactor: TestBaseTransactor{contract: contract}, TestBaseFilterer: TestBaseFilterer{contract: contract}}, nil
}

// TestBase is an auto generated Go binding around an Ethereum contract.
type TestBase struct {
	TestBaseCaller     // Read-only binding to the contract
	TestBaseTransactor // Write-only binding to the contract
	TestBaseFilterer   // Log filterer for contract events
}

// TestBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestBaseSession struct {
	Contract     *TestBase         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestBaseCallerSession struct {
	Contract *TestBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TestBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestBaseTransactorSession struct {
	Contract     *TestBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TestBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestBaseRaw struct {
	Contract *TestBase // Generic contract binding to access the raw methods on
}

// TestBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestBaseCallerRaw struct {
	Contract *TestBaseCaller // Generic read-only contract binding to access the raw methods on
}

// TestBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestBaseTransactorRaw struct {
	Contract *TestBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestBase creates a new instance of TestBase, bound to a specific deployed contract.
func NewTestBase(address common.Address, backend bind.ContractBackend) (*TestBase, error) {
	contract, err := bindTestBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestBase{TestBaseCaller: TestBaseCaller{contract: contract}, TestBaseTransactor: TestBaseTransactor{contract: contract}, TestBaseFilterer: TestBaseFilterer{contract: contract}}, nil
}

// NewTestBaseCaller creates a new read-only instance of TestBase, bound to a specific deployed contract.
func NewTestBaseCaller(address common.Address, caller bind.ContractCaller) (*TestBaseCaller, error) {
	contract, err := bindTestBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestBaseCaller{contract: contract}, nil
}

// NewTestBaseTransactor creates a new write-only instance of TestBase, bound to a specific deployed contract.
func NewTestBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*TestBaseTransactor, error) {
	contract, err := bindTestBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestBaseTransactor{contract: contract}, nil
}

// NewTestBaseFilterer creates a new log filterer instance of TestBase, bound to a specific deployed contract.
func NewTestBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*TestBaseFilterer, error) {
	contract, err := bindTestBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestBaseFilterer{contract: contract}, nil
}

// bindTestBase binds a generic wrapper to an already deployed contract.
func bindTestBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBase *TestBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBase.Contract.TestBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBase *TestBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBase.Contract.TestBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBase *TestBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBase.Contract.TestBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBase *TestBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBase *TestBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBase *TestBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBase.Contract.contract.Transact(opts, method, params...)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBaseCaller) Foo(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestBase.contract.Call(opts, &out, "Foo")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBaseSession) Foo() (string, error) {
	return _TestBase.Contract.Foo(&_TestBase.CallOpts)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBaseCallerSession) Foo() (string, error) {
	return _TestBase.Contract.Foo(&_TestBase.CallOpts)
}

// TestUpgradedMetaData contains all meta data concerning the TestUpgraded contract.
var TestUpgradedMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Bar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"name\":\"FooBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b0a378b0": "Bar()",
		"bfb4ebcf": "Foo()",
		"1e4f3395": "FooBar(string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161068838038061068883398101604081905261002f9161010e565b80600061003c82826101fa565b506001905061004b83826101fa565b5050506102b9565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261007a57600080fd5b81516001600160401b038082111561009457610094610053565b604051601f8301601f19908116603f011681019082821181831017156100bc576100bc610053565b816040528381526020925086838588010111156100d857600080fd5b600091505b838210156100fa57858201830151818301840152908201906100dd565b600093810190920192909252949350505050565b6000806040838503121561012157600080fd5b82516001600160401b038082111561013857600080fd5b61014486838701610069565b9350602085015191508082111561015a57600080fd5b5061016785828601610069565b9150509250929050565b600181811c9082168061018557607f821691505b6020821081036101a557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101f557600081815260208120601f850160051c810160208610156101d25750805b601f850160051c820191505b818110156101f1578281556001016101de565b5050505b505050565b81516001600160401b0381111561021357610213610053565b610227816102218454610171565b846101ab565b602080601f83116001811461025c57600084156102445750858301515b600019600386901b1c1916600185901b1785556101f1565b600085815260208120601f198616915b8281101561028b5788860151825594840194600190910190840161026c565b50858210156102a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6103c0806102c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e4f339514610046578063b0a378b01461005b578063bfb4ebcf14610079575b600080fd5b610059610054366004610142565b610081565b005b610063610091565b60405161007091906101f3565b60405180910390f35b61006361011f565b600061008d82826102ca565b5050565b6001805461009e90610241565b80601f01602080910402602001604051908101604052809291908181526020018280546100ca90610241565b80156101175780601f106100ec57610100808354040283529160200191610117565b820191906000526020600020905b8154815290600101906020018083116100fa57829003601f168201915b505050505081565b6000805461009e90610241565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561015457600080fd5b813567ffffffffffffffff8082111561016c57600080fd5b818401915084601f83011261018057600080fd5b8135818111156101925761019261012c565b604051601f8201601f19908116603f011681019083821181831017156101ba576101ba61012c565b816040528281528760208487010111156101d357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561022057858101830151858201604001528201610204565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061025557607f821691505b60208210810361027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102c557600081815260208120601f850160051c810160208610156102a25750805b601f850160051c820191505b818110156102c1578281556001016102ae565b5050505b505050565b815167ffffffffffffffff8111156102e4576102e461012c565b6102f8816102f28454610241565b8461027b565b602080601f83116001811461032d57600084156103155750858301515b600019600386901b1c1916600185901b1785556102c1565b600085815260208120601f198616915b8281101561035c5788860151825594840194600190910190840161033d565b508582101561037a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220eb0ea9ac5e8e13efbd5b063bc8a956eb6912d1d3c1de21eb0c417f3c0de7d3e464736f6c63430008150033",
}

// TestUpgradedABI is the input ABI used to generate the binding from.
// Deprecated: Use TestUpgradedMetaData.ABI instead.
var TestUpgradedABI = TestUpgradedMetaData.ABI

// Deprecated: Use TestUpgradedMetaData.Sigs instead.
// TestUpgradedFuncSigs maps the 4-byte function signature to its string representation.
var TestUpgradedFuncSigs = TestUpgradedMetaData.Sigs

// TestUpgradedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestUpgradedMetaData.Bin instead.
var TestUpgradedBin = TestUpgradedMetaData.Bin

// DeployTestUpgraded deploys a new Ethereum contract, binding an instance of TestUpgraded to it.
func DeployTestUpgraded(auth *bind.TransactOpts, backend bind.ContractBackend, _bar string, _foo string) (common.Address, *types.Transaction, *TestUpgraded, error) {
	parsed, err := TestUpgradedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestUpgradedBin), backend, _bar, _foo)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestUpgraded{TestUpgradedCaller: TestUpgradedCaller{contract: contract}, TestUpgradedTransactor: TestUpgradedTransactor{contract: contract}, TestUpgradedFilterer: TestUpgradedFilterer{contract: contract}}, nil
}

// TestUpgraded is an auto generated Go binding around an Ethereum contract.
type TestUpgraded struct {
	TestUpgradedCaller     // Read-only binding to the contract
	TestUpgradedTransactor // Write-only binding to the contract
	TestUpgradedFilterer   // Log filterer for contract events
}

// TestUpgradedCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestUpgradedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestUpgradedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestUpgradedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestUpgradedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestUpgradedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestUpgradedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestUpgradedSession struct {
	Contract     *TestUpgraded     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestUpgradedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestUpgradedCallerSession struct {
	Contract *TestUpgradedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TestUpgradedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestUpgradedTransactorSession struct {
	Contract     *TestUpgradedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TestUpgradedRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestUpgradedRaw struct {
	Contract *TestUpgraded // Generic contract binding to access the raw methods on
}

// TestUpgradedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestUpgradedCallerRaw struct {
	Contract *TestUpgradedCaller // Generic read-only contract binding to access the raw methods on
}

// TestUpgradedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestUpgradedTransactorRaw struct {
	Contract *TestUpgradedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestUpgraded creates a new instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgraded(address common.Address, backend bind.ContractBackend) (*TestUpgraded, error) {
	contract, err := bindTestUpgraded(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestUpgraded{TestUpgradedCaller: TestUpgradedCaller{contract: contract}, TestUpgradedTransactor: TestUpgradedTransactor{contract: contract}, TestUpgradedFilterer: TestUpgradedFilterer{contract: contract}}, nil
}

// NewTestUpgradedCaller creates a new read-only instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgradedCaller(address common.Address, caller bind.ContractCaller) (*TestUpgradedCaller, error) {
	contract, err := bindTestUpgraded(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestUpgradedCaller{contract: contract}, nil
}

// NewTestUpgradedTransactor creates a new write-only instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgradedTransactor(address common.Address, transactor bind.ContractTransactor) (*TestUpgradedTransactor, error) {
	contract, err := bindTestUpgraded(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestUpgradedTransactor{contract: contract}, nil
}

// NewTestUpgradedFilterer creates a new log filterer instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgradedFilterer(address common.Address, filterer bind.ContractFilterer) (*TestUpgradedFilterer, error) {
	contract, err := bindTestUpgraded(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestUpgradedFilterer{contract: contract}, nil
}

// bindTestUpgraded binds a generic wrapper to an already deployed contract.
func bindTestUpgraded(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestUpgradedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestUpgraded *TestUpgradedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestUpgraded.Contract.TestUpgradedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestUpgraded *TestUpgradedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestUpgraded.Contract.TestUpgradedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestUpgraded *TestUpgradedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestUpgraded.Contract.TestUpgradedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestUpgraded *TestUpgradedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestUpgraded.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestUpgraded *TestUpgradedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestUpgraded.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestUpgraded *TestUpgradedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestUpgraded.Contract.contract.Transact(opts, method, params...)
}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgradedCaller) Bar(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestUpgraded.contract.Call(opts, &out, "Bar")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgradedSession) Bar() (string, error) {
	return _TestUpgraded.Contract.Bar(&_TestUpgraded.CallOpts)
}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgradedCallerSession) Bar() (string, error) {
	return _TestUpgraded.Contract.Bar(&_TestUpgraded.CallOpts)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgradedCaller) Foo(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestUpgraded.contract.Call(opts, &out, "Foo")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgradedSession) Foo() (string, error) {
	return _TestUpgraded.Contract.Foo(&_TestUpgraded.CallOpts)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgradedCallerSession) Foo() (string, error) {
	return _TestUpgraded.Contract.Foo(&_TestUpgraded.CallOpts)
}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgradedTransactor) FooBar(opts *bind.TransactOpts, _foo string) (*types.Transaction, error) {
	return _TestUpgraded.contract.Transact(opts, "FooBar", _foo)
}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgradedSession) FooBar(_foo string) (*types.Transaction, error) {
	return _TestUpgraded.Contract.FooBar(&_TestUpgraded.TransactOpts, _foo)
}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgradedTransactorSession) FooBar(_foo string) (*types.Transaction, error) {
	return _TestUpgraded.Contract.FooBar(&_TestUpgraded.TransactOpts, _foo)
}

// UpgradeManagerMetaData contains all meta data concerning the UpgradeManager contract.
var UpgradeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"autonity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"55463ceb": "autonity()",
		"570ca735": "operator()",
		"b3ab15fb": "setOperator(address)",
		"6e3d9ff0": "upgrade(address,string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161044338038061044383398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610385806100be6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355463ceb14610051578063570ca735146100805780636e3d9ff014610093578063b3ab15fb146100a8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610064906001600160a01b031681565b6100a66100a1366004610220565b6100bb565b005b6100a66100b63660046102e2565b610166565b6001546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064015b60405180910390fd5b60405160f9906000906101339085908590602001610304565b6040516020818303038152906040529050600080825160208401855af43d6000803e808015610161573d6000f35b3d6000fd5b6000546001600160a01b031633146101cc5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f7420746865204175746f6e69747920636f6e74726044820152621858dd60ea1b6064820152608401610111565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461020557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561023357600080fd5b61023c836101ee565b9150602083013567ffffffffffffffff8082111561025957600080fd5b818501915085601f83011261026d57600080fd5b81358181111561027f5761027f61020a565b604051601f8201601f19908116603f011681019083821181831017156102a7576102a761020a565b816040528281528860208487010111156102c057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156102f457600080fd5b6102fd826101ee565b9392505050565b6bffffffffffffffffffffffff198360601b1681526000825160005b8181101561033d5760208186018101516014868401015201610320565b5060009201601401918252509291505056fea26469706673582212207cb99b8c663b7b3f7201f7c37a4ee5d8f83506bfd644debc45c05e5883ef0c7064736f6c63430008150033",
}

// UpgradeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeManagerMetaData.ABI instead.
var UpgradeManagerABI = UpgradeManagerMetaData.ABI

// Deprecated: Use UpgradeManagerMetaData.Sigs instead.
// UpgradeManagerFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeManagerFuncSigs = UpgradeManagerMetaData.Sigs

// UpgradeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UpgradeManagerMetaData.Bin instead.
var UpgradeManagerBin = UpgradeManagerMetaData.Bin

// DeployUpgradeManager deploys a new Ethereum contract, binding an instance of UpgradeManager to it.
func DeployUpgradeManager(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _operator common.Address) (common.Address, *types.Transaction, *UpgradeManager, error) {
	parsed, err := UpgradeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UpgradeManagerBin), backend, _autonity, _operator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpgradeManager{UpgradeManagerCaller: UpgradeManagerCaller{contract: contract}, UpgradeManagerTransactor: UpgradeManagerTransactor{contract: contract}, UpgradeManagerFilterer: UpgradeManagerFilterer{contract: contract}}, nil
}

// UpgradeManager is an auto generated Go binding around an Ethereum contract.
type UpgradeManager struct {
	UpgradeManagerCaller     // Read-only binding to the contract
	UpgradeManagerTransactor // Write-only binding to the contract
	UpgradeManagerFilterer   // Log filterer for contract events
}

// UpgradeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradeManagerSession struct {
	Contract     *UpgradeManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UpgradeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradeManagerCallerSession struct {
	Contract *UpgradeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// UpgradeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradeManagerTransactorSession struct {
	Contract     *UpgradeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// UpgradeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradeManagerRaw struct {
	Contract *UpgradeManager // Generic contract binding to access the raw methods on
}

// UpgradeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradeManagerCallerRaw struct {
	Contract *UpgradeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradeManagerTransactorRaw struct {
	Contract *UpgradeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradeManager creates a new instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManager(address common.Address, backend bind.ContractBackend) (*UpgradeManager, error) {
	contract, err := bindUpgradeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpgradeManager{UpgradeManagerCaller: UpgradeManagerCaller{contract: contract}, UpgradeManagerTransactor: UpgradeManagerTransactor{contract: contract}, UpgradeManagerFilterer: UpgradeManagerFilterer{contract: contract}}, nil
}

// NewUpgradeManagerCaller creates a new read-only instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManagerCaller(address common.Address, caller bind.ContractCaller) (*UpgradeManagerCaller, error) {
	contract, err := bindUpgradeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeManagerCaller{contract: contract}, nil
}

// NewUpgradeManagerTransactor creates a new write-only instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradeManagerTransactor, error) {
	contract, err := bindUpgradeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeManagerTransactor{contract: contract}, nil
}

// NewUpgradeManagerFilterer creates a new log filterer instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradeManagerFilterer, error) {
	contract, err := bindUpgradeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradeManagerFilterer{contract: contract}, nil
}

// bindUpgradeManager binds a generic wrapper to an already deployed contract.
func bindUpgradeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeManager *UpgradeManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeManager.Contract.UpgradeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeManager *UpgradeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeManager.Contract.UpgradeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeManager *UpgradeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeManager.Contract.UpgradeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeManager *UpgradeManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeManager *UpgradeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeManager *UpgradeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeManager.Contract.contract.Transact(opts, method, params...)
}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManagerCaller) Autonity(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradeManager.contract.Call(opts, &out, "autonity")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManagerSession) Autonity() (common.Address, error) {
	return _UpgradeManager.Contract.Autonity(&_UpgradeManager.CallOpts)
}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManagerCallerSession) Autonity() (common.Address, error) {
	return _UpgradeManager.Contract.Autonity(&_UpgradeManager.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManagerCaller) Operator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradeManager.contract.Call(opts, &out, "operator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManagerSession) Operator() (common.Address, error) {
	return _UpgradeManager.Contract.Operator(&_UpgradeManager.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManagerCallerSession) Operator() (common.Address, error) {
	return _UpgradeManager.Contract.Operator(&_UpgradeManager.CallOpts)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManagerTransactor) SetOperator(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _UpgradeManager.contract.Transact(opts, "setOperator", _account)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManagerSession) SetOperator(_account common.Address) (*types.Transaction, error) {
	return _UpgradeManager.Contract.SetOperator(&_UpgradeManager.TransactOpts, _account)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManagerTransactorSession) SetOperator(_account common.Address) (*types.Transaction, error) {
	return _UpgradeManager.Contract.SetOperator(&_UpgradeManager.TransactOpts, _account)
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManagerTransactor) Upgrade(opts *bind.TransactOpts, _target common.Address, _data string) (*types.Transaction, error) {
	return _UpgradeManager.contract.Transact(opts, "upgrade", _target, _data)
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManagerSession) Upgrade(_target common.Address, _data string) (*types.Transaction, error) {
	return _UpgradeManager.Contract.Upgrade(&_UpgradeManager.TransactOpts, _target, _data)
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManagerTransactorSession) Upgrade(_target common.Address, _data string) (*types.Transaction, error) {
	return _UpgradeManager.Contract.Upgrade(&_UpgradeManager.TransactOpts, _target, _data)
}

// UpgradeableMetaData contains all meta data concerning the Upgradeable contract.
var UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"872cf059": "completeContractUpgrade()",
		"b66b3e79": "getNewContract()",
		"cf9c5719": "resetContractUpgrade()",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
}

// UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeableMetaData.ABI instead.
var UpgradeableABI = UpgradeableMetaData.ABI

// Deprecated: Use UpgradeableMetaData.Sigs instead.
// UpgradeableFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeableFuncSigs = UpgradeableMetaData.Sigs

// Upgradeable is an auto generated Go binding around an Ethereum contract.
type Upgradeable struct {
	UpgradeableCaller     // Read-only binding to the contract
	UpgradeableTransactor // Write-only binding to the contract
	UpgradeableFilterer   // Log filterer for contract events
}

// UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradeableSession struct {
	Contract     *Upgradeable      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradeableCallerSession struct {
	Contract *UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradeableTransactorSession struct {
	Contract     *UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradeableRaw struct {
	Contract *Upgradeable // Generic contract binding to access the raw methods on
}

// UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradeableCallerRaw struct {
	Contract *UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradeableTransactorRaw struct {
	Contract *UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradeable creates a new instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeable(address common.Address, backend bind.ContractBackend) (*Upgradeable, error) {
	contract, err := bindUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Upgradeable{UpgradeableCaller: UpgradeableCaller{contract: contract}, UpgradeableTransactor: UpgradeableTransactor{contract: contract}, UpgradeableFilterer: UpgradeableFilterer{contract: contract}}, nil
}

// NewUpgradeableCaller creates a new read-only instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*UpgradeableCaller, error) {
	contract, err := bindUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeableCaller{contract: contract}, nil
}

// NewUpgradeableTransactor creates a new write-only instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradeableTransactor, error) {
	contract, err := bindUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeableTransactor{contract: contract}, nil
}

// NewUpgradeableFilterer creates a new log filterer instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradeableFilterer, error) {
	contract, err := bindUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradeableFilterer{contract: contract}, nil
}

// bindUpgradeable binds a generic wrapper to an already deployed contract.
func bindUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Upgradeable *UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Upgradeable.Contract.UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Upgradeable *UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Upgradeable *UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Upgradeable *UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Upgradeable *UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Upgradeable *UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *UpgradeableCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _Upgradeable.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *UpgradeableSession) GetNewContract() ([]byte, string, error) {
	return _Upgradeable.Contract.GetNewContract(&_Upgradeable.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *UpgradeableCallerSession) GetNewContract() ([]byte, string, error) {
	return _Upgradeable.Contract.GetNewContract(&_Upgradeable.CallOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *UpgradeableSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.CompleteContractUpgrade(&_Upgradeable.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.CompleteContractUpgrade(&_Upgradeable.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *UpgradeableSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.ResetContractUpgrade(&_Upgradeable.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.ResetContractUpgrade(&_Upgradeable.TransactOpts)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *UpgradeableTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Upgradeable.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *UpgradeableSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeContract(&_Upgradeable.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *UpgradeableTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeContract(&_Upgradeable.TransactOpts, _bytecode, _abi)
}
