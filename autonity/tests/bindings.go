// Code generated for internal testing purposes only - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tests

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/autonity/autonity"
	"github.com/autonity/autonity/accounts/abi"
	"github.com/autonity/autonity/accounts/abi/bind"
	"github.com/autonity/autonity/common"
	"github.com/autonity/autonity/core/types"
	"github.com/autonity/autonity/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccountabilityConfig is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityConfig struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}

// AccountabilityEvent is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityEvent struct {
	Chunks         uint8
	ChunkId        uint8
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}

// AutonityCommitteeMember is an auto generated low-level Go binding around an user-defined struct.
type AutonityCommitteeMember struct {
	Addr         common.Address
	VotingPower  *big.Int
	ConsensusKey []byte
}

// AutonityConfig is an auto generated low-level Go binding around an user-defined struct.
type AutonityConfig struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}

// AutonityContracts is an auto generated low-level Go binding around an user-defined struct.
type AutonityContracts struct {
	AccountabilityContract      common.Address
	OracleContract              common.Address
	AcuContract                 common.Address
	SupplyControlContract       common.Address
	StabilizationContract       common.Address
	UpgradeManagerContract      common.Address
	InflationControllerContract common.Address
	NonStakableVestingContract  common.Address
}

// AutonityPolicy is an auto generated low-level Go binding around an user-defined struct.
type AutonityPolicy struct {
	TreasuryFee             *big.Int
	MinBaseFee              *big.Int
	DelegationRate          *big.Int
	UnbondingPeriod         *big.Int
	InitialInflationReserve *big.Int
	TreasuryAccount         common.Address
}

// AutonityProtocol is an auto generated low-level Go binding around an user-defined struct.
type AutonityProtocol struct {
	OperatorAccount common.Address
	EpochPeriod     *big.Int
	BlockPeriod     *big.Int
	CommitteeSize   *big.Int
}

// AutonityValidator is an auto generated low-level Go binding around an user-defined struct.
type AutonityValidator struct {
	Treasury                 common.Address
	NodeAddress              common.Address
	OracleAddress            common.Address
	Enode                    string
	CommissionRate           *big.Int
	BondedStake              *big.Int
	UnbondingStake           *big.Int
	UnbondingShares          *big.Int
	SelfBondedStake          *big.Int
	SelfUnbondingStake       *big.Int
	SelfUnbondingShares      *big.Int
	SelfUnbondingStakeLocked *big.Int
	LiquidStateContract      common.Address
	LiquidSupply             *big.Int
	RegistrationBlock        *big.Int
	TotalSlashed             *big.Int
	JailReleaseBlock         *big.Int
	ProvableFaultCount       *big.Int
	ConsensusKey             []byte
	State                    uint8
}

// ContractBaseContract is an auto generated low-level Go binding around an user-defined struct.
type ContractBaseContract struct {
	CurrentNTNAmount *big.Int
	WithdrawnValue   *big.Int
	Start            *big.Int
	CliffDuration    *big.Int
	TotalDuration    *big.Int
	CanStake         bool
}

// IOracleRoundData is an auto generated low-level Go binding around an user-defined struct.
type IOracleRoundData struct {
	Round     *big.Int
	Price     *big.Int
	Timestamp *big.Int
	Success   bool
}

// InflationControllerParams is an auto generated low-level Go binding around an user-defined struct.
type InflationControllerParams struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}

// LiquidRewardManagerRewardEvent is an auto generated low-level Go binding around an user-defined struct.
type LiquidRewardManagerRewardEvent struct {
	EpochID          *big.Int
	TotalLiquid      *big.Int
	StakingRequestID *big.Int
	IsBonding        bool
	EventExist       bool
	Applied          bool
}

// NonStakableVestingSchedule is an auto generated low-level Go binding around an user-defined struct.
type NonStakableVestingSchedule struct {
	Start                     *big.Int
	CliffDuration             *big.Int
	TotalDuration             *big.Int
	Amount                    *big.Int
	UnsubscribedAmount        *big.Int
	TotalUnlocked             *big.Int
	TotalUnlockedUnsubscribed *big.Int
	LastUnlockTime            *big.Int
}

// StabilizationConfig is an auto generated low-level Go binding around an user-defined struct.
type StabilizationConfig struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}

// ACUMetaData contains all meta data concerning the ACU contract.
var ACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidBasket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoACUValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"BasketModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"}],\"name\":\"modifyBasket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"44b4708a": "modifyBasket(string[],uint256[],uint256)",
		"d54d2799": "quantities()",
		"146ca531": "round()",
		"f51e181a": "scale()",
		"683dd191": "scaleFactor()",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"07039ff9": "symbols()",
		"a2e62045": "update()",
		"3fa4f245": "value()",
	},
	Bin: "",
}

// ACUABI is the input ABI used to generate the binding from.
// Deprecated: Use ACUMetaData.ABI instead.
var ACUABI = ACUMetaData.ABI

// Deprecated: Use ACUMetaData.Sigs instead.
// ACUFuncSigs maps the 4-byte function signature to its string representation.
var ACUFuncSigs = ACUMetaData.Sigs

// ACUBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ACUMetaData.Bin instead.
var ACUBin = ACUMetaData.Bin

// DeployACU deploys a new Ethereum contract, binding an instance of ACU to it.
func (r *Runner) DeployACU(opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int, autonity common.Address, operator common.Address, oracle common.Address) (common.Address, uint64, *ACU, error) {
	parsed, err := ACUMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(ACUBin), symbols_, quantities_, scale_, autonity, operator, oracle)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &ACU{contract: c}, nil
}

// ACU is an auto generated Go binding around an Ethereum contract.
type ACU struct {
	*contract
}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACU) Quantities(opts *runOptions) ([]*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "quantities")

	if err != nil {
		return *new([]*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	return out0, consumed, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACU) Round(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "round")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACU) Scale(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "scale")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACU) ScaleFactor(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "scaleFactor")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACU) Symbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _ACU.call(opts, "symbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACU) Value(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "value")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ModifyBasket is a free data retrieval call for a paid mutator transaction binding the contract method 0x44b4708a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACU) CallModifyBasket(r *Runner, opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "modifyBasket", symbols_, quantities_, scale_)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACU) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACU) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// Update is a free data retrieval call for a paid mutator transaction binding the contract method 0xa2e62045.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function update() returns(bool status)
func (_ACU *ACU) CallUpdate(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ACU.call(opts, "update")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACU) ModifyBasket(opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "modifyBasket", symbols_, quantities_, scale_)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACU) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACU) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "setOracle", oracle)
	return consumed, err
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACU) Update(opts *runOptions) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "update")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ACUBasketModifiedIterator is returned from FilterBasketModified and is used to iterate over the raw logs and unpacked data for BasketModified events raised by the ACU contract.
		type ACUBasketModifiedIterator struct {
			Event *ACUBasketModified // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ACUBasketModifiedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ACUBasketModified)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ACUBasketModified)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ACUBasketModifiedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ACUBasketModifiedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ACUBasketModified represents a BasketModified event raised by the ACU contract.
		type ACUBasketModified struct {
			Symbols []string;
			Quantities []*big.Int;
			Scale *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBasketModified is a free log retrieval operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
 		func (_ACU *ACU) FilterBasketModified(opts *bind.FilterOpts) (*ACUBasketModifiedIterator, error) {





			logs, sub, err := _ACU.contract.FilterLogs(opts, "BasketModified")
			if err != nil {
				return nil, err
			}
			return &ACUBasketModifiedIterator{contract: _ACU.contract, event: "BasketModified", logs: logs, sub: sub}, nil
 		}

		// WatchBasketModified is a free log subscription operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
		func (_ACU *ACU) WatchBasketModified(opts *bind.WatchOpts, sink chan<- *ACUBasketModified) (event.Subscription, error) {





			logs, sub, err := _ACU.contract.WatchLogs(opts, "BasketModified")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ACUBasketModified)
						if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBasketModified is a log parse operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
		func (_ACU *ACU) ParseBasketModified(log types.Log) (*ACUBasketModified, error) {
			event := new(ACUBasketModified)
			if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ACUUpdatedIterator is returned from FilterUpdated and is used to iterate over the raw logs and unpacked data for Updated events raised by the ACU contract.
		type ACUUpdatedIterator struct {
			Event *ACUUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ACUUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ACUUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ACUUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ACUUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ACUUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ACUUpdated represents a Updated event raised by the ACU contract.
		type ACUUpdated struct {
			Height *big.Int;
			Timestamp *big.Int;
			Round *big.Int;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterUpdated is a free log retrieval operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
 		func (_ACU *ACU) FilterUpdated(opts *bind.FilterOpts) (*ACUUpdatedIterator, error) {






			logs, sub, err := _ACU.contract.FilterLogs(opts, "Updated")
			if err != nil {
				return nil, err
			}
			return &ACUUpdatedIterator{contract: _ACU.contract, event: "Updated", logs: logs, sub: sub}, nil
 		}

		// WatchUpdated is a free log subscription operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
		func (_ACU *ACU) WatchUpdated(opts *bind.WatchOpts, sink chan<- *ACUUpdated) (event.Subscription, error) {






			logs, sub, err := _ACU.contract.WatchLogs(opts, "Updated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ACUUpdated)
						if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseUpdated is a log parse operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
		func (_ACU *ACU) ParseUpdated(log types.Log) (*ACUUpdated, error) {
			event := new(ACUUpdated)
			if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AccountabilityMetaData contains all meta data concerning the Accountability contract.
var AccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chunks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chunkId\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"b5b7a184": "epochPeriod()",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"c50d21f0": "handleEvent((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"6b5f444c": "setEpochPeriod(uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "0x608060405260006011553480156200001657600080fd5b5060405162003e2d38038062003e2d8339810160408190526200003991620000f7565b600180546001600160a01b0319166001600160a01b03841690811790915560408051636fd8d26960e11b8152905163dfb1a4d2916004808201926020929091908290030181865afa15801562000093573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b99190620001bf565b6000558051600355602081015160045560408101516005556060810151600655608081015160075560a081015160085560c0015160095550620001d9565b6000808284036101008112156200010d57600080fd5b83516001600160a01b03811681146200012557600080fd5b925060e0601f19820112156200013a57600080fd5b5060405160e081016001600160401b03811182821017156200016c57634e487b7160e01b600052604160045260246000fd5b80604052506020840151815260408401516020820152606084015160408201526080840151606082015260a0840151608082015260c084015160a082015260e084015160c0820152809150509250929050565b600060208284031215620001d257600080fd5b5051919050565b613c4480620001e96000396000f3fe6080604052600436106100c25760003560e01c80637ccecadd1161007f578063b5b7a18411610059578063b5b7a1841461029f578063bebaa8fc146102c3578063c50d21f0146102f0578063e7bb0b521461031057600080fd5b80637ccecadd146102285780639cb22b061461025f578063a8031a1d1461028c57600080fd5b806301567739146100c75780630b7914301461011a5780634108a95a146101525780636b5f444c146101825780636c9789b0146101a457806379502c55146101c4575b600080fd5b3480156100d357600080fd5b506100fd6100e2366004612ff6565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012657600080fd5b5061013a61013536600461301a565b610348565b6040516101119c9b9a999897969594939291906130bd565b34801561015e57600080fd5b5061017261016d366004613158565b61045b565b6040519015158152602001610111565b34801561018e57600080fd5b506101a261019d36600461301a565b61050b565b005b3480156101b057600080fd5b506101a26101bf3660046131a4565b610543565b3480156101d057600080fd5b506003546004546005546006546007546008546009546101f39695949392919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610111565b34801561023457600080fd5b50610248610243366004613158565b610586565b604080519215158352602083019190915201610111565b34801561026b57600080fd5b5061027f61027a366004612ff6565b6106db565b6040516101119190613297565b6101a261029a3660046132aa565b610902565b3480156102ab57600080fd5b506102b560005481565b604051908152602001610111565b3480156102cf57600080fd5b506102e36102de366004612ff6565b610b80565b60405161011191906132d6565b3480156102fc57600080fd5b506101a261030b36600461346b565b610e1f565b34801561031c57600080fd5b506102b561032b3660046132aa565b600e60209081526000928352604080842090915290825290205481565b6002818154811061035857600080fd5b600091825260209091206008909102018054600182015460028301805460ff8085169650610100850481169562010000860482169563010000008104909216946001600160a01b03600160201b9093048316949216929091906103ba90613577565b80601f01602080910402602001604051908101604052809291908181526020018280546103e690613577565b80156104335780601f1061040857610100808354040283529160200191610433565b820191906000526020600020905b81548152906001019060200180831161041657829003601f168201915b505050505090806003015490806004015490806005015490806006015490806007015490508c565b6000806104678461118c565b6001546040516396b477cb60e01b8152600481018690529192506000916001600160a01b03909116906396b477cb90602401602060405180830381865afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da91906135b1565b6001600160a01b0387166000908152600e602090815260408083209383529290522054919091109150509392505050565b6001546001600160a01b0316331461053e5760405162461bcd60e51b8152600401610535906135ca565b60405180910390fd5b600055565b6001546001600160a01b0316331461056d5760405162461bcd60e51b8152600401610535906135ca565b6105756111f7565b80156105835761058361154f565b50565b60008060006105948561118c565b6001546040516396b477cb60e01b8152600481018790529192506000916001600160a01b03909116906396b477cb90602401602060405180830381865afa1580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060791906135b1565b6001600160a01b0388166000908152600e6020908152604080832084845290915290205490915082116106415760009350600092506106d1565b6001600160a01b0387166000908152600c6020526040902054156106c8576001600160a01b0387166000908152600c602052604081205460029061068790600190613624565b8154811061069757610697613637565b906000526020600020906008020190506000945060036000015481600401546106c0919061364d565b9350506106d1565b60019350600092505b5050935093915050565b6106e3612f09565b6001600160a01b0382166000908152600c60205260409020546107385760405162461bcd60e51b815260206004820152600d60248201526c37379030b1b1bab9b0ba34b7b760991b6044820152606401610535565b6001600160a01b0382166000908152600c602052604090205460029061076090600190613624565b8154811061077057610770613637565b600091825260209182902060408051610180810182526008909302909101805460ff8082168552610100820481169585019590955292939092918401916201000090041660028111156107c5576107c5613033565b60028111156107d6576107d6613033565b815281546020909101906301000000900460ff1660098111156107fb576107fb613033565b600981111561080c5761080c613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161084790613577565b80601f016020809104026020016040519081016040528092919081815260200182805461087390613577565b80156108c05780601f10610895576101008083540402835291602001916108c0565b820191906000526020600020905b8154815290600101906020018083116108a357829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b6001546001600160a01b0316331461092c5760405162461bcd60e51b8152600401610535906135ca565b6001546001600160a01b038381166000908152600a6020526040808220549051630c825d9760e11b8152908316600482015290929190911690631904bb2e90602401600060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b391908101906136c7565b5160015460405163a9059cbb60e01b81526001600160a01b0380841660048301526024820186905292935091169063a9059cbb906044016020604051808303816000875af1925050508015610a25575060408051601f3d908101601f19168201909252610a2291810190613845565b60015b15610a2c57505b6000816001600160a01b0316346108fc90604051600060405180830381858888f193505050503d8060008114610a7e576040519150601f19603f3d011682016040523d82523d6000602084013e610a83565b606091505b5050905080610b5657600160009054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190613862565b6001600160a01b03163460405160006040518083038185875af1925050503d8060008114610b4d576040519150601f19603f3d011682016040523d82523d6000602084013e610b52565b606091505b5050505b5050506001600160a01b03166000908152600a6020526040902080546001600160a01b0319169055565b6001600160a01b0381166000908152600b60205260408120546060919067ffffffffffffffff811115610bb557610bb5613338565b604051908082528060200260200182016040528015610bee57816020015b610bdb612f09565b815260200190600190039081610bd35790505b50905060005b6001600160a01b0384166000908152600b6020526040902054811015610e18576001600160a01b0384166000908152600b6020526040902080546002919083908110610c4257610c42613637565b906000526020600020015481548110610c5d57610c5d613637565b600091825260209182902060408051610180810182526008909302909101805460ff808216855261010082048116958501959095529293909291840191620100009004166002811115610cb257610cb2613033565b6002811115610cc357610cc3613033565b815281546020909101906301000000900460ff166009811115610ce857610ce8613033565b6009811115610cf957610cf9613033565b815281546001600160a01b03600160201b909104811660208301526001830154166040820152600282018054606090920191610d3490613577565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6090613577565b8015610dad5780601f10610d8257610100808354040283529160200191610dad565b820191906000526020600020905b815481529060010190602001808311610d9057829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050828281518110610dfa57610dfa613637565b60200260200101819052508080610e109061387f565b915050610bf4565b5092915050565b600154604051630c825d9760e11b81523360048201526000916001600160a01b031690631904bb2e90602401600060405180830381865afa158015610e68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e9091908101906136c7565b60208101519091506001600160a01b03163314610f055760405162461bcd60e51b815260206004820152602d60248201527f66756e6374696f6e207265737472696374656420746f2061207265676973746560448201526c3932b2103b30b634b230ba37b960991b6064820152608401610535565b60808201516001600160a01b03163314610f615760405162461bcd60e51b815260206004820152601d60248201527f6576656e74207265706f72746572206d7573742062652063616c6c65720000006044820152606401610535565b6001826000015160ff161115611116576000610f7c83611831565b905080610f8857505050565b336000908152600d6020908152604091829020825161018081018452815460ff80821683526101008204811694830194909452909391929184019162010000909104166002811115610fdc57610fdc613033565b6002811115610fed57610fed613033565b815281546020909101906301000000900460ff16600981111561101257611012613033565b600981111561102357611023613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161105e90613577565b80601f016020809104026020016040519081016040528092919081815260200182805461108a90613577565b80156110d75780601f106110ac576101008083540402835291602001916110d7565b820191906000526020600020905b8154815290600101906020018083116110ba57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509250505b60008260400151600281111561112e5761112e613033565b036111405761113c82611a6a565b5050565b60018260400151600281111561115857611158613033565b036111665761113c82611c70565b60028260400151600281111561117e5761117e613033565b0361113c5761113c82611ddf565b600060098260098111156111a2576111a2613033565b036111b05760025b92915050565b60008260098111156111c4576111c4613033565b036111d05760026111aa565b60018260098111156111e4576111e4613033565b036111f05760026111aa565b60026111aa565b6011545b60105481101561154a5760006010828154811061121a5761121a613637565b90600052602060002001549050806000036112355750611538565b611240600182613624565b905060006002828154811061125757611257613637565b600091825260209182902060408051610180810182526008909302909101805460ff8082168552610100820481169585019590955292939092918401916201000090041660028111156112ac576112ac613033565b60028111156112bd576112bd613033565b815281546020909101906301000000900460ff1660098111156112e2576112e2613033565b60098111156112f3576112f3613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161132e90613577565b80601f016020809104026020016040519081016040528092919081815260200182805461135a90613577565b80156113a75780601f1061137c576101008083540402835291602001916113a7565b820191906000526020600020905b81548152906001019060200180831161138a57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050436003600001548261014001516113fb919061364d565b1115611408575050601155565b60a08101516001600160a01b03166000908152600c6020526040812081905560608201516114359061118c565b60a08301516001600160a01b03166000908152600e602090815260408083206101208701518452909152902054909150811161147357505050611538565b60a0820180516001600160a01b039081166000908152600e6020908152604080832061012088015184528252808320869055845184168352600b825280832080546001808201835591855283852001899055600f805491820181559093527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290920187905592518151858152938401879052909116917f6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f910160405180910390a25050505b806115428161387f565b9150506111fb565b601155565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663c9d97af46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c991906135b1565b905060005b600f5481101561164057816002600f83815481106115ee576115ee613637565b90600052602060002001548154811061160957611609613637565b9060005260206000209060080201600501540361162e5761162b60018461364d565b92505b806116388161387f565b9150506115ce565b5060005b600f54811015611824576118126002600f838154811061166657611666613637565b90600052602060002001548154811061168157611681613637565b600091825260209182902060408051610180810182526008909302909101805460ff8082168552610100820481169585019590955292939092918401916201000090041660028111156116d6576116d6613033565b60028111156116e7576116e7613033565b815281546020909101906301000000900460ff16600981111561170c5761170c613033565b600981111561171d5761171d613033565b815281546001600160a01b03600160201b90910481166020830152600183015416604082015260028201805460609092019161175890613577565b80601f016020809104026020016040519081016040528092919081815260200182805461178490613577565b80156117d15780601f106117a6576101008083540402835291602001916117d1565b820191906000526020600020905b8154815290600101906020018083116117b457829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505084611f1f565b8061181c8161387f565b915050611644565b5061113c600f6000612f7c565b6000816020015160ff1660000361196657336000908152600d6020908152604091829020845181549286015160ff9081166101000261ffff1990941691161791909117808255918401518492829062ff000019166201000083600281111561189b5761189b613033565b021790555060608201518154829063ff000000191663010000008360098111156118c7576118c7613033565b021790555060808201518154640100000000600160c01b031916600160201b6001600160a01b039283160217825560a08301516001830180546001600160a01b0319169190921617905560c0820151600282019061192590826138e3565b5060e0820151600382015561010082015160048201556101208201516005820155610140820151600682015561016090910151600790910155506000919050565b602080830151336000908152600d90925260409091205460ff918216916119949161010090041660016139a3565b60ff16146119e45760405162461bcd60e51b815260206004820152601960248201527f6368756e6b73206d75737420626520636f6e746967756f7573000000000000006044820152606401610535565b336000908152600d6020526040902060c0830151611a0591600201906124b9565b336000908152600d602052604090208054600191908290611a2f908290610100900460ff166139a3565b92506101000a81548160ff021916908360ff160217905550816000015160ff1682602001516001611a6091906139a3565b60ff161492915050565b6000806000806000611a8160fe8760c00151612603565b9450945094509450945084611ad85760405162461bcd60e51b815260206004820152601960248201527f6661696c65642070726f6f6620766572696669636174696f6e000000000000006044820152606401610535565b8560a001516001600160a01b0316846001600160a01b031614611b0d5760405162461bcd60e51b8152600401610535906139bc565b85606001516009811115611b2357611b23613033565b8314611b415760405162461bcd60e51b8152600401610535906139e7565b438210611b895760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b6044820152606401610535565b60008211611bcf5760405162461bcd60e51b815260206004820152601360248201527263616e27742062652061742067656e6573697360681b6044820152606401610535565b6001546040516396b477cb60e01b8152600481018490526000916001600160a01b0316906396b477cb90602401602060405180830381865afa158015611c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3d91906135b1565b610100880184905261012088018190524361014089015261016088018390529050611c678761266a565b50505050505050565b6000806000806000611c8760fc8760c00151612603565b9450945094509450945084611cde5760405162461bcd60e51b815260206004820152601e60248201527f6661696c65642061636375736174696f6e20766572696669636174696f6e00006044820152606401610535565b8560a001516001600160a01b0316846001600160a01b031614611d135760405162461bcd60e51b8152600401610535906139bc565b85606001516009811115611d2957611d29613033565b8314611d475760405162461bcd60e51b8152600401610535906139e7565b6001546040516396b477cb60e01b8152600481018490526000916001600160a01b0316906396b477cb90602401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906135b1565b610100880184905261012088018190524361014089015261016088018390529050611c67876128ee565b6000806000806000611df660fd8760c00151612603565b9450945094509450945084611e4d5760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420696e6e6f63656e636520766572696669636174696f6e0000006044820152606401610535565b8560a001516001600160a01b0316846001600160a01b031614611e825760405162461bcd60e51b8152600401610535906139bc565b85606001516009811115611e9857611e98613033565b8314611eb65760405162461bcd60e51b8152600401610535906139e7565b438210611efe5760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b6044820152606401610535565b61010086018290526101608601819052611f1786612ba5565b505050505050565b60015460a0830151604051630c825d9760e11b81526001600160a01b0391821660048201526000929190911690631904bb2e90602401600060405180830381865afa158015611f72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f9a91908101906136c7565b608084015160a08501516001600160a01b039081166000908152600a6020526040902080546001600160a01b03191691909216179055905060038161026001516003811115611feb57611feb613033565b03611ff557505050565b600061200c612007856060015161118c565b612eb0565b610220830151600754919250906000906120269083613a11565b6006546120339087613a11565b61203d908561364d565b612047919061364d565b60095490915081111561205957506009545b60008461012001518560c001518660a00151612075919061364d565b61207f919061364d565b6009549091506000906120928385613a11565b61209c9190613a28565b90506000811180156120ad57508181145b156121dd57600060a087018190526101008701819052610120870181905260c08701526101e0860180518291906120e590839061364d565b90525061022086018051600191906120fe90839061364d565b905250600361026087015260006102008701526001546040516301adf0b760e51b81526001600160a01b03909116906335be16e090612141908990600401613a5a565b600060405180830381600087803b15801561215b57600080fd5b505af115801561216f573d6000803e3d6000fd5b5050505060208681015160e08a0151604080516001600160a01b03909316835292820184905260008284015260016060830152608082015290517f6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f99181900360a00190a15050505050505050565b6101208601518190811161220a578087610120018181516121fe9190613624565b90525060009050612225565b61012087015161221a9082613624565b600061012089015290505b80156122a257808761010001511061226d5780876101000181815161224a9190613624565b90525060a087018051829190612261908390613624565b905250600090506122a2565b61010087015161227d9082613624565b90508661010001518760a0018181516122969190613624565b90525060006101008801525b6000811180156122c5575060008760a001518860c001516122c3919061364d565b115b156123715760008760a001518860c001516122e0919061364d565b60c08901516122ef9084613a11565b6122f99190613a28565b905060008860a001518960c00151612311919061364d565b60a08a01516123209085613a11565b61232a9190613a28565b9050818960c00181815161233e9190613624565b90525060a089018051829190612355908390613624565b905250612362818361364d565b61236c9084613624565b925050505b61237b8183613624565b915081876101e001818151612390919061364d565b90525061022087018051600191906123a990839061364d565b9052506000546102208801516008546123c29190613a11565b6123cc9190613a11565b6123d6904361364d565b61020088015260026102608801526001546040516301adf0b760e51b81526001600160a01b03909116906335be16e090612414908a90600401613a5a565b600060405180830381600087803b15801561242e57600080fd5b505af1158015612442573d6000803e3d6000fd5b5050506020808901516102008a015160e08d0151604080516001600160a01b039094168452938301879052928201526000606082015260808101919091527f6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9915060a00160405180910390a1505050505050505050565b8154600260018083161561010002038216048251808201602081106020841001600281146125635760018114612588578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b8082101561254d5781518455600184019350602082019150612530565b815191036101000a908190040290915550611c67565b60028302826020036101000a846020036101000a602089015104020185018755611c67565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b808210156125e957815184556001840193506020820191506125cc565b815191036101000a90819004029091555050505050505050565b6000806000806000808651602061261a919061364d565b9050612624612f9a565b60a081838a8c5afa61263557600080fd5b805160010361264357600196505b602081015160408201516060830151608090930151989b919a509850909695509350505050565b6000612679826060015161118c565b60a08301516001600160a01b03166000908152600e60209081526040808320610120870151845290915290205490915081116126c75760405162461bcd60e51b815260040161053590613bca565b6002805460e084018190526001810182556000829052835160089091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054602086015160ff9081166101000261ffff1990921693169290921791909117808255604085015185939091839162ff000019909116906201000090849081111561275457612754613033565b021790555060608201518154829063ff0000001916630100000083600981111561278057612780613033565b021790555060808201518154640100000000600160c01b031916600160201b6001600160a01b039283160217825560a08301516001830180546001600160a01b0319169190921617905560c082015160028201906127de90826138e3565b5060e0828101516003830155610100830151600483015561012080840151600584015561014084015160068401556101609093015160079092019190915560a0840180516001600160a01b039081166000908152600b602090815260408083209589018051875460018181018a5598865284862001558051600f8054988901815585527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290970196909655845184168352600e82528083209689015183529590528490208590559051915192519116917f6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f916128e291858252602082015260400190565b60405180910390a25050565b60a08101516001600160a01b03166000908152600c6020526040902054156129585760405162461bcd60e51b815260206004820181905260248201527f616c72656164792070726f63657373696e6720616e2061636375736174696f6e6044820152606401610535565b6000612967826060015161118c565b60a08301516001600160a01b03166000908152600e60209081526040808320610120870151845290915290205490915081116129b55760405162461bcd60e51b815260040161053590613bca565b6002805460e084018190526001810182556000829052835160089091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054602086015160ff9081166101000261ffff1990921693169290921791909117808255604085015185939091839162ff0000199091169062010000908490811115612a4257612a42613033565b021790555060608201518154829063ff00000019166301000000836009811115612a6e57612a6e613033565b021790555060808201518154640100000000600160c01b031916600160201b6001600160a01b039283160217825560a08301516001830180546001600160a01b0319169190921617905560c08201516002820190612acc90826138e3565b5060e082810151600383015561010083015160048301556101208301516005830155610140830151600683015561016090920151600790910155820151612b1490600161364d565b60a08301516001600160a01b03166000908152600c602052604090205560e0820151601090612b4490600161364d565b81546001810183556000928352602092839020015560a083015160e084015160408051858152938401919091526001600160a01b03909116917f2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba4035191016128e2565b60a08101516001600160a01b03166000908152600c602052604081205490819003612c125760405162461bcd60e51b815260206004820152601860248201527f6e6f206173736f6369617465642061636375736174696f6e00000000000000006044820152606401610535565b81606001516009811115612c2857612c28613033565b6002612c35600184613624565b81548110612c4557612c45613637565b60009182526020909120600890910201546301000000900460ff166009811115612c7157612c71613033565b14612cce5760405162461bcd60e51b815260206004820152602760248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152661c9d5b19481a5960ca1b6064820152608401610535565b6101008201516002612ce1600184613624565b81548110612cf157612cf1613637565b90600052602060002090600802016004015414612d5e5760405162461bcd60e51b815260206004820152602560248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e20604482015264626c6f636b60d81b6064820152608401610535565b6101608201516002612d71600184613624565b81548110612d8157612d81613637565b90600052602060002090600802016007015414612dec5760405162461bcd60e51b8152602060048201526024808201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152630d0c2e6d60e31b6064820152608401610535565b6011545b601054811015612e56578160108281548110612e0e57612e0e613637565b906000526020600020015403612e4457600060108281548110612e3357612e33613637565b600091825260209091200155612e56565b80612e4e8161387f565b915050612df0565b5060a0820180516001600160a01b039081166000908152600c602090815260408083208390559351935191825292909116917f1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f91016128e2565b600081612ebf57505060055490565b60018203612ecf57505060055490565b60028203612edf57505060055490565b60038203612eef57505060055490565b60048203612f005750612710919050565b50612710919050565b6040805161018081018252600080825260208201819052909182019081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b50805460008255906000526020600020908101906105839190612fb8565b6040518060a001604052806005906020820280368337509192915050565b5b80821115612fcd5760008155600101612fb9565b5090565b6001600160a01b038116811461058357600080fd5b8035612ff181612fd1565b919050565b60006020828403121561300857600080fd5b813561301381612fd1565b9392505050565b60006020828403121561302c57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061305957613059613033565b9052565b600a811061305957613059613033565b60005b83811015613088578181015183820152602001613070565b50506000910152565b600081518084526130a981602086016020860161306d565b601f01601f19169290920160200192915050565b600061018060ff8f16835260ff8e1660208401526130de604084018e613049565b6130eb606084018d61305d565b6001600160a01b038b811660808501528a1660a084015260c083018190526131158184018a613091565b60e0840198909852505061010081019490945261012084019290925261014083015261016090910152979650505050505050565b8035600a8110612ff157600080fd5b60008060006060848603121561316d57600080fd5b833561317881612fd1565b925061318660208501613149565b9150604084013590509250925092565b801515811461058357600080fd5b6000602082840312156131b657600080fd5b813561301381613196565b805160ff168252600061018060208301516131e1602086018260ff169052565b5060408301516131f46040860182613049565b506060830151613207606086018261305d565b50608083015161322260808601826001600160a01b03169052565b5060a083015161323d60a08601826001600160a01b03169052565b5060c08301518160c086015261325582860182613091565b60e08581015190870152610100808601519087015261012080860151908701526101408086015190870152610160948501519490950193909352509192915050565b60208152600061301360208301846131c1565b600080604083850312156132bd57600080fd5b82356132c881612fd1565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561332b57603f198886030184526133198583516131c1565b945092850192908501906001016132fd565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561337257613372613338565b60405290565b604051610280810167ffffffffffffffff8111828210171561337257613372613338565b604051601f8201601f1916810167ffffffffffffffff811182821017156133c5576133c5613338565b604052919050565b803560ff81168114612ff157600080fd5b803560038110612ff157600080fd5b600067ffffffffffffffff82111561340757613407613338565b50601f01601f191660200190565b600082601f83011261342657600080fd5b8135613439613434826133ed565b61339c565b81815284602083860101111561344e57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561347d57600080fd5b813567ffffffffffffffff8082111561349557600080fd5b9083019061018082860312156134aa57600080fd5b6134b261334e565b6134bb836133cd565b81526134c9602084016133cd565b60208201526134da604084016133de565b60408201526134eb60608401613149565b60608201526134fc60808401612fe6565b608082015261350d60a08401612fe6565b60a082015260c08301358281111561352457600080fd5b61353087828601613415565b60c08301525060e083810135908201526101008084013590820152610120808401359082015261014080840135908201526101609283013592810192909252509392505050565b600181811c9082168061358b57607f821691505b6020821081036135ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156135c357600080fd5b5051919050565b60208082526024908201527f66756e6374696f6e207265737472696374656420746f207468652076616c696460408201526330ba37b960e11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b818103818111156111aa576111aa61360e565b634e487b7160e01b600052603260045260246000fd5b808201808211156111aa576111aa61360e565b8051612ff181612fd1565b600082601f83011261367c57600080fd5b815161368a613434826133ed565b81815284602083860101111561369f57600080fd5b6136b082602083016020870161306d565b949350505050565b805160048110612ff157600080fd5b6000602082840312156136d957600080fd5b815167ffffffffffffffff808211156136f157600080fd5b90830190610280828603121561370657600080fd5b61370e613378565b61371783613660565b815261372560208401613660565b602082015261373660408401613660565b604082015260608301518281111561374d57600080fd5b6137598782860161366b565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152506101806137c5818501613660565b908201526101a083810151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240808401518381111561381457600080fd5b6138208882870161366b565b82840152505061026091506138368284016136b8565b91810191909152949350505050565b60006020828403121561385757600080fd5b815161301381613196565b60006020828403121561387457600080fd5b815161301381612fd1565b6000600182016138915761389161360e565b5060010190565b601f8211156138de57600081815260208120601f850160051c810160208610156138bf5750805b601f850160051c820191505b81811015611f17578281556001016138cb565b505050565b815167ffffffffffffffff8111156138fd576138fd613338565b6139118161390b8454613577565b84613898565b602080601f831160018114613946576000841561392e5750858301515b600019600386901b1c1916600185901b178555611f17565b600085815260208120601f198616915b8281101561397557888601518255948401946001909101908401613956565b50858210156139935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff81811683821601908111156111aa576111aa61360e565b6020808252601190820152700decccccadcc8cae440dad2e6dac2e8c6d607b1b604082015260600190565b60208082526010908201526f0e4ead8ca40d2c840dad2e6dac2e8c6d60831b604082015260600190565b80820281158282048414176111aa576111aa61360e565b600082613a4557634e487b7160e01b600052601260045260246000fd5b500490565b6004811061305957613059613033565b60208152613a746020820183516001600160a01b03169052565b60006020830151613a9060408401826001600160a01b03169052565b5060408301516001600160a01b0381166060840152506060830151610280806080850152613ac26102a0850183613091565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a0613b49818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f190161026080880191909152909150613bab8483613091565b935080870151915050613bc082860182613a4a565b5090949350505050565b60208082526024908201527f616c726561647920736c6173686564206174207468652070726f6f66277320656040820152630e0dec6d60e31b60608201526080019056fea2646970667358221220f0ed5889e67717ecebeca54b3e65e8dc4cac760aa76d9e1a710615cb1d24da6264736f6c63430008150033",
}

// AccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityMetaData.ABI instead.
var AccountabilityABI = AccountabilityMetaData.ABI

// Deprecated: Use AccountabilityMetaData.Sigs instead.
// AccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityFuncSigs = AccountabilityMetaData.Sigs

// AccountabilityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityMetaData.Bin instead.
var AccountabilityBin = AccountabilityMetaData.Bin

// DeployAccountability deploys a new Ethereum contract, binding an instance of Accountability to it.
func (r *Runner) DeployAccountability(opts *runOptions, _autonity common.Address, _config AccountabilityConfig) (common.Address, uint64, *Accountability, error) {
	parsed, err := AccountabilityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AccountabilityBin), _autonity, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Accountability{contract: c}, nil
}

// Accountability is an auto generated Go binding around an Ethereum contract.
type Accountability struct {
	*contract
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *Accountability) Beneficiaries(opts *runOptions, arg0 common.Address) (common.Address, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *Accountability) CanAccuse(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *Accountability) CanSlash(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (bool, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor, uint256 slashingRatePrecision)
func (_Accountability *Accountability) Config(opts *runOptions) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRateLow            *big.Int
		BaseSlashingRateMid            *big.Int
		CollusionFactor                *big.Int
		HistoryFactor                  *big.Int
		JailFactor                     *big.Int
		SlashingRatePrecision          *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateLow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateMid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CollusionFactor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.HistoryFactor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.JailFactor = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.SlashingRatePrecision = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_Accountability *Accountability) EpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "epochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 chunks, uint8 chunkId, uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *Accountability) Events(opts *runOptions, arg0 *big.Int) (struct {
	Chunks         uint8
	ChunkId        uint8
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "events", arg0)

	outstruct := new(struct {
		Chunks         uint8
		ChunkId        uint8
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Chunks = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.ChunkId = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.EventType = *abi.ConvertType(out[2], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[3], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[6], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[10], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[11], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *Accountability) GetValidatorAccusation(opts *runOptions, _val common.Address) (AccountabilityEvent, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)
	return out0, consumed, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *Accountability) GetValidatorFaults(opts *runOptions, _val common.Address) ([]AccountabilityEvent, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)
	return out0, consumed, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *Accountability) SlashingHistory(opts *runOptions, arg0 common.Address, arg1 *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *Accountability) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *Accountability) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleEvent is a free data retrieval call for a paid mutator transaction binding the contract method 0xc50d21f0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleEvent((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) CallHandleEvent(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "handleEvent", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *Accountability) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *Accountability) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *Accountability) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// HandleEvent is a paid mutator transaction binding the contract method 0xc50d21f0.
//
// Solidity: function handleEvent((uint8,uint8,uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) HandleEvent(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "handleEvent", _event)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *Accountability) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the Accountability contract.
		type AccountabilityInnocenceProvenIterator struct {
			Event *AccountabilityInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityInnocenceProven represents a InnocenceProven event raised by the Accountability contract.
		type AccountabilityInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_Accountability *Accountability) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _Accountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityInnocenceProvenIterator{contract: _Accountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_Accountability *Accountability) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _Accountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityInnocenceProven)
						if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_Accountability *Accountability) ParseInnocenceProven(log types.Log) (*AccountabilityInnocenceProven, error) {
			event := new(AccountabilityInnocenceProven)
			if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the Accountability contract.
		type AccountabilityNewAccusationIterator struct {
			Event *AccountabilityNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityNewAccusation represents a NewAccusation event raised by the Accountability contract.
		type AccountabilityNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_Accountability *Accountability) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityNewAccusationIterator{contract: _Accountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityNewAccusation)
						if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) ParseNewAccusation(log types.Log) (*AccountabilityNewAccusation, error) {
			event := new(AccountabilityNewAccusation)
			if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the Accountability contract.
		type AccountabilityNewFaultProofIterator struct {
			Event *AccountabilityNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityNewFaultProof represents a NewFaultProof event raised by the Accountability contract.
		type AccountabilityNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_Accountability *Accountability) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityNewFaultProofIterator{contract: _Accountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityNewFaultProof)
						if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) ParseNewFaultProof(log types.Log) (*AccountabilityNewFaultProof, error) {
			event := new(AccountabilityNewFaultProof)
			if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the Accountability contract.
		type AccountabilitySlashingEventIterator struct {
			Event *AccountabilitySlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilitySlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilitySlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilitySlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilitySlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilitySlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilitySlashingEvent represents a SlashingEvent event raised by the Accountability contract.
		type AccountabilitySlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_Accountability *Accountability) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilitySlashingEventIterator, error) {







			logs, sub, err := _Accountability.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &AccountabilitySlashingEventIterator{contract: _Accountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_Accountability *Accountability) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilitySlashingEvent) (event.Subscription, error) {







			logs, sub, err := _Accountability.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilitySlashingEvent)
						if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_Accountability *Accountability) ParseSlashingEvent(log types.Log) (*AccountabilitySlashingEvent, error) {
			event := new(AccountabilitySlashingEvent)
			if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AutonityMetaData contains all meta data concerning the Autonity contract.
var AutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquidLogic\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator[]\",\"name\":\"_validators\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"nonStakableVestingContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBeAppliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochTime\",\"type\":\"uint256\"}],\"name\":\"UnlockingScheduleFailed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atnTotalRedistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"nonStakableVestingContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriodToBeApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"getBondedLiquid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getCommitteeByHeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getReleasedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"getRewardsTillBonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"getRewardsTillUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquidLogic\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"isBondingRejected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNonStakableVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquidLogic\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"}],\"name\":\"updateValidatorAndTransferSlashedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"e98712b2": "atnTotalRedistributed()",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"573963b8": "epochPeriodToBeApplied()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"d861b0e8": "finalizeInitialization()",
		"43645969": "getBlockPeriod()",
		"ff9831b6": "getBondedLiquid(uint256)",
		"ab8f6ffe": "getCommittee()",
		"070e720a": "getCommitteeByHeight(uint256)",
		"a8b2216e": "getCommitteeEnodes()",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"f1b47e4b": "getReleasedStake(uint256)",
		"c3d802f4": "getRewardsTillBonding(uint256)",
		"eb386749": "getRewardsTillUnbonding(uint256)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"1904bb2e": "getValidator(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"cc4269bb": "isBondingRejected(uint256)",
		"e294df7c": "isUnbondingReleased(uint256)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"1a0cf2e5": "setNonStakableVestingContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"35be16e0": "updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600c556000600d553480156200001b57600080fd5b506040516200b03f3803806200b03f8339810160408190526200003e9162001006565b6020546000036200006757603280546001600160a01b031916331790556200006782826200006f565b5050620014cd565b80518051600e55602080820151600f55604080830151601055606080840151601155608080850151601281905560a095860151601380546001600160a01b03199081166001600160a01b0393841617909155868901518051601480548416918516919091179055808801516015805484169185169190911790558087015160168054841691851691909117905580860151601780548416918516919091179055938401516018805483169184169190911790559683015160198054891691831691909117905560c0830151601a8054891691831691909117905560e090920151601b80548816918416919091179055838701518051601c805490981693169290921790955580840151601d81905581840151601e5590820151601f559085015190925560249190915560319190915551620001aa9062000c54565b604051809103906000f080158015620001c7573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b039290921691909117905560005b8251811015620004ae5760008382815181106200020c576200020c62001243565b602002602001015160a001519050600084838151811062000231576200023162001243565b60200260200101516101a0018181525050600084838151811062000259576200025962001243565b602002602001015161018001906001600160a01b031690816001600160a01b031681525050600084838151811062000295576200029562001243565b602002602001015160a00181815250506000848381518110620002bc57620002bc62001243565b60209081029190910101516101c001526010548451859084908110620002e657620002e662001243565b6020026020010151608001818152505060008483815181106200030d576200030d62001243565b6020026020010151610260019060038111156200032e576200032e62001259565b9081600381111562000344576200034462001259565b8152505060008483815181106200035f576200035f62001243565b60200260200101516101600181815250506200039d84838151811062000389576200038962001243565b6020026020010151620004b360201b60201c565b620003ca848381518110620003b657620003b662001243565b6020026020010151620005ee60201b60201c565b80602e6000868581518110620003e457620003e462001243565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600082825462000421919062001285565b9250508190555080603060008282546200043c919062001285565b92505081905550620004968483815181106200045c576200045c62001243565b602002602001015160200151828685815181106200047e576200047e62001243565b6020026020010151600001516200089b60201b60201c565b50508080620004a590620012a1565b915050620001eb565b505050565b6000620004ca826060015162000ae660201b60201c565b6001600160a01b039091166020840152905080156200051e5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064015b60405180910390fd5b6020808301516001600160a01b039081166000908152602f9092526040909120600101541615620005925760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162000515565b61271082608001511115620005ea5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162000515565b5050565b6101808101516001600160a01b0316620006ed576033546001600160a01b0316620006675760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162000515565b602154600090620006789062000b34565b905081602001518260000151836080015183603360009054906101000a90046001600160a01b0316604051620006ae9062000c62565b620006be959493929190620012bd565b604051809103906000f080158015620006db573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602180546001808201835560009283527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b57090910180546001600160a01b03199081166001600160a01b0395861617909155845184168352602f909552604091829020865181548716908516178155935190840180548616918416919091179055840151600283018054909416911617909155606082015182919060038201906200079f9082620013a7565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f820155610200820151601082015561022082015160118201556102408201516012820190620008699082620013a7565b5061026082015160138201805460ff1916600183600381111562000891576200089162001259565b0217905550505050565b6000808311620008fa5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162000515565b6001600160a01b0382166000908152602e6020526040902054831115620009645760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162000515565b6001600160a01b0382166000908152602e6020526040812080548592906200098e90849062001473565b909155505060408051610100810182526001600160a01b0380851682528681166020808401918252838501888152436060860190815260006080870181815260a0880182815260c0890183815260e08a018481526006805486526004988990529b85208b518154908c166001600160a01b0319918216178255995160018201805491909c169a169990991790995594516002880155925160038701555193850193909355516005840155518286015591516007909101805491151560ff19909216919091179055825491929062000a6583620012a1565b90915550506001600160a01b038581166000818152602f6020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160065462000adc919062001473565b9695505050505050565b60008062000af362000c70565b60008060ff9050604083875160208901845afa62000b1057600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000b5c5750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000b8c578062000b7381620012a1565b915062000b849050600a836200149f565b915062000b60565b6000816001600160401b0381111562000ba95762000ba962000c8e565b6040519080825280601f01601f19166020018201604052801562000bd4576020820181803683370190505b5090505b841562000c4c5762000bec60018362001473565b915062000bfb600a86620014b6565b62000c0890603062001285565b60f81b81838151811062000c205762000c2062001243565b60200101906001600160f81b031916908160001a90535062000c44600a866200149f565b945062000bd8565b949350505050565b611732806200934b83390190565b6105c2806200aa7d83390190565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000cc95762000cc962000c8e565b60405290565b60405160c081016001600160401b038111828210171562000cc95762000cc962000c8e565b60405161028081016001600160401b038111828210171562000cc95762000cc962000c8e565b604051601f8201601f191681016001600160401b038111828210171562000d455762000d4562000c8e565b604052919050565b6001600160a01b038116811462000d6357600080fd5b50565b805162000d738162000d4d565b919050565b60005b8381101562000d9557818101518382015260200162000d7b565b50506000910152565b600082601f83011262000db057600080fd5b81516001600160401b0381111562000dcc5762000dcc62000c8e565b62000de1601f8201601f191660200162000d1a565b81815284602083860101111562000df757600080fd5b62000c4c82602083016020870162000d78565b80516004811062000d7357600080fd5b600061010080838503121562000e2f57600080fd5b604051908101906001600160401b038211818310171562000e545762000e5462000c8e565b816040528092508351915062000e6a8262000d4d565b81815262000e7b6020850162000d66565b602082015262000e8e6040850162000d66565b604082015262000ea16060850162000d66565b606082015262000eb46080850162000d66565b608082015262000ec760a0850162000d66565b60a082015262000eda60c0850162000d66565b60c082015262000eed60e0850162000d66565b60e0820152505092915050565b60006080828403121562000f0d57600080fd5b62000f1762000ca4565b9050815162000f268162000d4d565b8082525060208201516020820152604082015160408201526060820151606082015292915050565b600081830361026081121562000f6357600080fd5b62000f6d62000ca4565b915060c081121562000f7e57600080fd5b5062000f8962000ccf565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015162000fc58162000d4d565b60a0820152815262000fdb8360c0840162000e1a565b602082015262000ff0836101c0840162000efa565b6040820152610240820151606082015292915050565b6000806102808084860312156200101c57600080fd5b83516001600160401b03808211156200103457600080fd5b818601915086601f8301126200104957600080fd5b815160208282111562001060576200106062000c8e565b8160051b6200107182820162000d1a565b928352848101820192828101908b8511156200108c57600080fd5b83870192505b848310156200122157825186811115620010ab57600080fd5b8701808d03601f1901891315620010c157600080fd5b620010cb62000cf4565b620010d886830162000d66565b8152620010e86040830162000d66565b86820152620010fa6060830162000d66565b60408201526080820151888111156200111257600080fd5b620011228f888386010162000d9e565b60608301525060a0820151608082015260c082015160a082015260e082015160c082015261010082015160e0820152610120820151610100820152610140820151610120820152610160820151610140820152610180820151610160820152620011906101a0830162000d66565b6101808201526101c08201516101a08201526101e08201516101c08201526102008201516101e082015261022082015161020082015261024082015161022082015261026082015188811115620011e657600080fd5b620011f68f888386010162000d9e565b610240830152506200120a8a830162000e0a565b610260820152835250918301919083019062001092565b8099505050506200123589828a0162000f4e565b955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156200129b576200129b6200126f565b92915050565b600060018201620012b657620012b66200126f565b5060010190565b600060018060a01b038088168352808716602084015285604084015260a0606084015284518060a0850152620012fb8160c086016020890162000d78565b9316608083015250601f91909101601f19160160c001949350505050565b600181811c908216806200132e57607f821691505b6020821081036200134f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ae57600081815260208120601f850160051c810160208610156200137e5750805b601f850160051c820191505b818110156200139f578281556001016200138a565b505050505050565b81516001600160401b03811115620013c357620013c362000c8e565b620013db81620013d4845462001319565b8462001355565b602080601f831160018114620014135760008415620013fa5750858301515b600019600386901b1c1916600185901b1785556200139f565b600085815260208120601f198616915b82811015620014445788860151825594840194600190910190840162001423565b5085821015620014635787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156200129b576200129b6200126f565b634e487b7160e01b600052601260045260246000fd5b600082620014b157620014b162001489565b500490565b600082620014c857620014c862001489565b500690565b617e6e80620014dd6000396000f3fe6080604052600436106200049b5760003560e01c806396b477cb1162000263578063cb696f541162000147578063dfb1a4d211620000bf578063f03b959d1162000081578063f03b959d14620010ea578063f1b47e4b146200110f578063f1d592a71462001143578063f7866ee31462001168578063ff9831b6146200118857005b8063dfb1a4d21462001027578063e294df7c146200103f578063e7f43c681462001076578063e98712b21462001096578063eb38674914620010ae57005b8063d372c07e1162000109578063d372c07e1462000f59578063d5f394881462000f7e578063d861b0e81462000fa0578063d886f8a21462000fb8578063dd62ed3e1462000fdd57005b8063cb696f541462000e9b578063cc4269bb1462000ec0578063ceaad4551462000ef7578063cf9c57191462000f1c578063cfd19fb91462000f3457005b8063ab8f6ffe11620001db578063b46e5520116200019d578063b46e55201462000dcc578063b66b3e791462000df1578063b7ab4db51462000e19578063c3d802f41462000e31578063c9d97af41462000e8357005b8063ab8f6ffe1462000d2b578063ae1da0b51462000d43578063ae1f5fa01462000d5b578063b2ea9adb1462000d82578063b3ecbadd1462000da757005b8063a515366a1162000225578063a515366a1462000c6b578063a5d059ca1462000c90578063a8b2216e1462000cb5578063a9059cbb1462000cdc578063a9fd1a8f1462000d0157005b806396b477cb1462000bcf57806396f18a321462000bf45780639ac310741462000c165780639c98e4711462000c2e5780639dc29fac1462000c4657005b806343645969116200038b578063784304b51162000303578063852c484911620002c5578063852c48491462000b27578063872cf0591462000b4c57806389c614b81462000b645780638bac7dad1462000b7c57806395d89b411462000ba157005b8063784304b514620008cf57806379502c5514620008f4578063819b64631462000ab7578063833b1fce1462000ace57806384467fdb1462000b0257005b80636b5f444c116200034d5780636b5f444c146200080b5780636fd2c80b146200083057806370a082311462000847578063731b3a03146200088157806377e741c714620008aa57005b8063436459691462000767578063496ccd9b146200077e5780634bb278f314620007a3578063520fdbbc14620007ce578063573963b814620007f357005b806318160ddd116200041f57806329070c6d11620003e157806329070c6d14620006d05780632f2c3f2e14620006e7578063313ce56714620006ff57806335be16e0146200071d57806340c10f19146200074257005b806318160ddd14620006125780631904bb2e14620006295780631a0cf2e5146200065d57806323b872dd146200068257806325ce1bb914620006a757005b80630d8e6e2c11620004695780630d8e6e2c1462000578578063112206331462000599578063114eaf5514620005b05780631250a28d14620005d55780631604e41614620005fa57005b806306fdde0314620004a5578063070e720a14620004e9578063095ea7b3146200051d5780630ae65e7a146200055357005b36620004a357005b005b348015620004b257600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b604051620004e0919062006831565b60405180910390f35b348015620004f657600080fd5b506200050e6200050836600462006846565b620011bd565b604051620004e09190620068e5565b3480156200052a57600080fd5b50620005426200053c36600462006910565b6200147e565b6040519015158152602001620004e0565b3480156200056057600080fd5b50620004a3620005723660046200693f565b62001497565b3480156200058557600080fd5b506020545b604051908152602001620004e0565b348015620005a657600080fd5b50600f546200058a565b348015620005bd57600080fd5b50620004a3620005cf36600462006846565b62001535565b348015620005e257600080fd5b50620004a3620005f43660046200693f565b62001567565b3480156200060757600080fd5b506200058a602b5481565b3480156200061f57600080fd5b506030546200058a565b3480156200063657600080fd5b506200064e620006483660046200693f565b620015b6565b604051620004e0919062006998565b3480156200066a57600080fd5b50620004a36200067c3660046200693f565b62001864565b3480156200068f57600080fd5b5062000542620006a136600462006b11565b620018b3565b348015620006b457600080fd5b506022546000908152602860205260409020600301546200058a565b348015620006dd57600080fd5b50600e546200058a565b348015620006f457600080fd5b506200058a61271081565b3480156200070c57600080fd5b5060405160128152602001620004e0565b3480156200072a57600080fd5b50620004a36200073c36600462006b57565b6200195d565b3480156200074f57600080fd5b50620004a36200076136600462006910565b62001b39565b3480156200077457600080fd5b50601e546200058a565b3480156200078b57600080fd5b50620004a36200079d3660046200693f565b62001b76565b348015620007b057600080fd5b50620007bb62001c80565b604051620004e095949392919062006b96565b348015620007db57600080fd5b50620004a3620007ed3660046200693f565b6200241e565b3480156200080057600080fd5b506200058a60245481565b3480156200081857600080fd5b50620004a36200082a36600462006846565b62002619565b3480156200083d57600080fd5b506011546200058a565b3480156200085457600080fd5b506200058a620008663660046200693f565b6001600160a01b03166000908152602e602052604090205490565b3480156200088e57600080fd5b506022546000908152602860205260409020600201546200058a565b348015620008b757600080fd5b50620004a3620008c936600462006846565b6200269f565b348015620008dc57600080fd5b50620004a3620008ee36600462006c7a565b620026d1565b3480156200090157600080fd5b506040805160c08082018352600e548252600f54602080840191909152601054838501526011546060808501919091526012546080808601919091526013546001600160a01b0390811660a080880191909152875161010081018952601454831681526015548316818701526016548316818a0152601754831681860152601854831681850152601954831691810191909152601a54821695810195909552601b54811660e086015286519182018752601c54168152601d5481840152601e5495810195909552601f549085015254620009d9939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0988901516001600160a01b039081168a8601528851811660c080870191909152848a0151821660e0808801919091528a8801518316610100880152848b01518316610120880152928a015182166101408701529989015181166101608601529888015189166101808501529096015187166101a083015284519096166101c0820152948301516101e086015282015161020085015291015161022083015261024082015261026001620004e0565b34801562000ac457600080fd5b50601f546200058a565b34801562000adb57600080fd5b506015546001600160a01b03165b6040516001600160a01b039091168152602001620004e0565b34801562000b0f57600080fd5b50620004a362000b2136600462006cd0565b6200287c565b34801562000b3457600080fd5b50620004a362000b4636600462006910565b620029ab565b34801562000b5957600080fd5b50620004a362002b3c565b34801562000b7157600080fd5b506200058a60265481565b34801562000b8957600080fd5b50620004a362000b9b36600462006846565b62002b78565b34801562000bae57600080fd5b50604080518082019091526003815262272a2760e91b6020820152620004d1565b34801562000bdc57600080fd5b506200058a62000bee36600462006846565b62002bfc565b34801562000c0157600080fd5b5060335462000ae9906001600160a01b031681565b34801562000c2357600080fd5b506200058a60315481565b34801562000c3b57600080fd5b506200058a60275481565b34801562000c5357600080fd5b50620004a362000c6536600462006910565b62002c81565b34801562000c7857600080fd5b506200058a62000c8a36600462006910565b62002d9e565b34801562000c9d57600080fd5b506200058a62000caf36600462006910565b62002e85565b34801562000cc257600080fd5b5062000ccd62002f28565b604051620004e0919062006d79565b34801562000ce957600080fd5b506200054262000cfb36600462006910565b6200300b565b34801562000d0e57600080fd5b5062000d1962003063565b604051620004e0949392919062006dd2565b34801562000d3857600080fd5b506200050e620031c7565b34801562000d5057600080fd5b506200058a60255481565b34801562000d6857600080fd5b5062000d73620032d9565b604051620004e0919062006e03565b34801562000d8f57600080fd5b50620004a362000da136600462006e52565b6200351f565b34801562000db457600080fd5b50620004a362000dc63660046200693f565b62003566565b34801562000dd957600080fd5b50620004a362000deb3660046200693f565b620035b5565b34801562000dfe57600080fd5b5062000e0962003806565b604051620004e092919062006eb3565b34801562000e2657600080fd5b5062000d736200393d565b34801562000e3e57600080fd5b5062000e6d62000e5036600462006846565b600090815260046020526040902060058101546006909101549091565b60408051928352602083019190915201620004e0565b34801562000e9057600080fd5b506200058a60225481565b34801562000ea857600080fd5b50620004a362000eba36600462006846565b620039a1565b34801562000ecd57600080fd5b506200054262000edf36600462006846565b60009081526004602052604090206007015460ff1690565b34801562000f0457600080fd5b50620004a362000f163660046200693f565b62003a09565b34801562000f2957600080fd5b50620004a362003a58565b34801562000f4157600080fd5b50620004a362000f533660046200693f565b62003aad565b34801562000f6657600080fd5b50620004a362000f783660046200693f565b62003afc565b34801562000f8b57600080fd5b5060325462000ae9906001600160a01b031681565b34801562000fad57600080fd5b50620004a362003b4b565b34801562000fc557600080fd5b50620004a362000fd73660046200693f565b62003d01565b34801562000fea57600080fd5b506200058a62000ffc36600462006ee5565b6001600160a01b039182166000908152602d6020908152604080832093909416825291909152205490565b3480156200103457600080fd5b506200058a62003d50565b3480156200104c57600080fd5b50620005426200105e36600462006846565b60009081526007602052604090206008015460ff1690565b3480156200108357600080fd5b50601c546001600160a01b031662000ae9565b348015620010a357600080fd5b506200058a602a5481565b348015620010bb57600080fd5b5062000e6d620010cd36600462006846565b600090815260076020526040902060058101546006909101549091565b348015620010f757600080fd5b50620004a3620011093660046200693f565b62003d6d565b3480156200111c57600080fd5b506200058a6200112e36600462006846565b60009081526007602052604090206004015490565b3480156200115057600080fd5b50620004a3620011623660046200693f565b62003dbc565b3480156200117557600080fd5b506013546001600160a01b031662000ae9565b3480156200119557600080fd5b506200058a620011a736600462006846565b6000908152600460208190526040909120015490565b606043821115620012265760405162461bcd60e51b815260206004820152602860248201527f63616e6e6f742067657420636f6d6d697474656520666f72206120667574757260448201526719481a195a59da1d60c21b60648201526084015b60405180910390fd5b60255482116200136357600082815260236020908152604080832054808452602883528184208054835181860281018601909452808452919493909190849084015b8282101562001356576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620012be9062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620012ec9062006f23565b80156200133d5780601f1062001311576101008083540402835291602001916200133d565b820191906000526020600020905b8154815290600101906020018083116200131f57829003601f168201915b5050505050815250508152602001906001019062001268565b5092979650505050505050565b6029805480602002602001604051908101604052809291908181526020016000905b8282101562001473576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620013db9062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620014099062006f23565b80156200145a5780601f106200142e576101008083540402835291602001916200145a565b820191906000526020600020905b8154815290600101906020018083116200143c57829003601f168201915b5050505050815250508152602001906001019062001385565b505050509050919050565b60006200148d33848462003e75565b5060015b92915050565b620014a162003f9e565b6001600160a01b038082166000818152602f602052604090206001015490911614620014e15760405162461bcd60e51b81526004016200121d9062006f5f565b6001600160a01b038181166000908152602f60205260409020541633146200151d5760405162461bcd60e51b81526004016200121d9062006f96565b620015288162003fed565b6200153260008055565b50565b601c546001600160a01b03163314620015625760405162461bcd60e51b81526004016200121d9062006fe2565b601155565b601c546001600160a01b03163314620015945760405162461bcd60e51b81526004016200121d9062006fe2565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b620015c06200660a565b6001600160a01b038083166000818152602f602052604090206001015490911614620016005760405162461bcd60e51b81526004016200121d9062007019565b6001600160a01b038083166000908152602f60209081526040918290208251610280810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620016639062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620016919062006f23565b8015620016e25780601f10620016b657610100808354040283529160200191620016e2565b820191906000526020600020905b815481529060010190602001808311620016c457829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a082015260118201546101c08201526012820180546101e0909201916200179e9062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620017cc9062006f23565b80156200181d5780601f10620017f1576101008083540402835291602001916200181d565b820191906000526020600020905b815481529060010190602001808311620017ff57829003601f168201915b5050509183525050601382015460209091019060ff1660038111156200184757620018476200695f565b60038111156200185b576200185b6200695f565b90525092915050565b601c546001600160a01b03163314620018915760405162461bcd60e51b81526004016200121d9062006fe2565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000620018c2848484620040dd565b6001600160a01b0384166000908152602d60209081526040808320338452909152812054620018f390849062007066565b90506200190285338362003e75565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516200194891815260200190565b60405180910390a360019150505b9392505050565b6014546001600160a01b03163314620019c55760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f742074686520736c617368696e6720636f6e74726044820152621858dd60ea1b60648201526084016200121d565b6000610120820135602f82620019e260408601602087016200693f565b6001600160a01b03166001600160a01b031681526020019081526020016000206009015462001a12919062007066565b60c0830135602f600062001a2d60408701602088016200693f565b6001600160a01b03166001600160a01b031681526020019081526020016000206006015462001a5d919062007066565b60a0840135602f600062001a7860408801602089016200693f565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015462001aa8919062007066565b62001ab491906200707c565b62001ac091906200707c565b6013546001600160a01b03166000908152602e602052604081208054929350839290919062001af19084906200707c565b90915550829050602f600062001b0e60408401602085016200693f565b6001600160a01b03168152602081019190915260400160002062001b3382826200727e565b50505050565b601c546001600160a01b0316331462001b665760405162461bcd60e51b81526004016200121d9062006fe2565b62001b728282620041a3565b5050565b601c546001600160a01b0316331462001ba35760405162461bcd60e51b81526004016200121d9062006fe2565b601580546001600160a01b0319166001600160a01b03838116918217909255601654604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b15801562001c0257600080fd5b505af115801562001c17573d6000803e3d6000fd5b5050601854604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b15801562001c6457600080fd5b505af115801562001c79573d6000803e3d6000fd5b5050505050565b6032546000908190606090829081906001600160a01b0316331462001cb95760405162461bcd60e51b81526004016200121d90620073d4565b62001cc362003f9e565b4360258190556022546000828152602360209081526040808320849055928252602890528190206003015460145491516306c9789b60e41b815292101560048301819052916001600160a01b0390911690636c9789b090602401600060405180830381600087803b15801562001d3857600080fd5b505af115801562001d4d573d6000803e3d6000fd5b505050508015620021d657601a546030546031546026546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562001dc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001de6919062007417565b905080603154101562001df857506031545b62001e043082620041a3565b806031600082825462001e18919062007066565b9091555050601b546040805163f968f49360e01b815281516001600160a01b039093169263f968f4939260048084019391929182900301816000875af192505050801562001e85575060408051601f3d908101601f1916820190925262001e829181019062007431565b60015b62001ec3576040514281527ff1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c99060200160405180910390a162001ef6565b60135462001edb906001600160a01b031682620041a3565b601b5462001ef3906001600160a01b031683620041a3565b50505b62001f02478262004229565b62001f0c62004770565b62001f1662004860565b600062001f22620032d9565b60155460405163422811f960e11b81529192506001600160a01b03169063845023f29062001f5590849060040162006e03565b600060405180830381600087803b15801562001f7057600080fd5b505af115801562001f85573d6000803e3d6000fd5b5050602254600090815260286020526040902060020154602454601d54919350148015915062001fb6575060245415155b15620020235760248054601d819055601454604051631ad7d11360e21b815260048101929092526001600160a01b031691636b5f444c9101600060405180830381600087803b1580156200200957600080fd5b505af11580156200201e573d6000803e3d6000fd5b505050505b601d546000906200203590436200707c565b9050426026819055506001602260008282546200205391906200707c565b9091555050602254604080516029805460a0602082028401810190945260808301818152620021959594849391929060009085015b8282101562002176576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620020de9062006f23565b80601f01602080910402602001604051908101604052809291908181526020018280546200210c9062006f23565b80156200215d5780601f1062002131576101008083540402835291602001916200215d565b820191906000526020600020905b8154815290600101906020018083116200213f57829003601f168201915b5050505050815250508152602001906001019062002088565b505050508152602001858152602001438152602001848152506200497b565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335602254604051620021c991815260200190565b60405180910390a1505050505b60155460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af115801562002222573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002248919062007456565b90508015620022c4576016546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af1925050508015620022bc575060408051601f3d908101601f19168201909252620022b99181019062007456565b60015b15620022c457505b60038054602254600090815260286020908152604080832060018101549501546029805483518186028101860190945280845260ff909616968996919590949293928692919084015b82821015620023fb576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620023639062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620023919062006f23565b8015620023e25780601f10620023b657610100808354040283529160200191620023e2565b820191906000526020600020905b815481529060010190602001808311620023c457829003601f168201915b505050505081525050815260200190600101906200230d565b5050505092509650965096509650965050506200241760008055565b9091929394565b601c546001600160a01b031633146200244b5760405162461bcd60e51b81526004016200121d9062006fe2565b601c80546001600160a01b0319166001600160a01b0383811691821790925560155460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b158015620024aa57600080fd5b505af1158015620024bf573d6000803e3d6000fd5b505060165460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200250b57600080fd5b505af115801562002520573d6000803e3d6000fd5b505060175460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200256c57600080fd5b505af115801562002581573d6000803e3d6000fd5b505060185460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b158015620025cd57600080fd5b505af1158015620025e2573d6000803e3d6000fd5b505060195460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb915060240162001c49565b601c546001600160a01b03163314620026465760405162461bcd60e51b81526004016200121d9062006fe2565b6024819055602254600090815260286020908152604091829020600301548251848152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7910160405180910390a15050565b601c546001600160a01b03163314620026cc5760405162461bcd60e51b81526004016200121d9062006fe2565b600e55565b6001600160a01b038083166000818152602f60205260409020600181015490921614620027125760405162461bcd60e51b81526004016200121d9062007019565b80546001600160a01b031633146200273e5760405162461bcd60e51b81526004016200121d906200747a565b620027498362004a4b565b15620027a35760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b60648201526084016200121d565b600080620027b18462004abc565b925090508115620027f35760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200121d565b60018301546001600160a01b03828116911614620028645760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b60648201526084016200121d565b60038301620028748582620074c9565b505050505050565b6000604051806102800160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b03168152602001868152602001600e6000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001438152602001600081526020016000815260200160008152602001848152602001600060038111156200294b576200294b6200695f565b905290506200295b818362004b01565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200299c92339289918b9162007592565b60405180910390a15050505050565b6001600160a01b038083166000818152602f602052604090206001015490911614620029eb5760405162461bcd60e51b81526004016200121d9062006f5f565b6001600160a01b038281166000908152602f602052604090205416331462002a275760405162461bcd60e51b81526004016200121d9062006f96565b61271081111562002a7b5760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e20726174650060448201526064016200121d565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600d80546000908152600b909352958220855181546001600160a01b03191695169490941784559151600180850191909155915160029093019290925583549293909290919062002af49084906200707c565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b601c546001600160a01b0316331462002b695760405162461bcd60e51b81526004016200121d9062006fe2565b6003805460ff19166001179055565b601c546001600160a01b0316331462002ba55760405162461bcd60e51b81526004016200121d9062006fe2565b6000811162002bf75760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e277420626520300000000000000060448201526064016200121d565b601f55565b60004382111562002c5c5760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b60648201526084016200121d565b602554821162002c79575060009081526023602052604090205490565b505060225490565b601c546001600160a01b0316331462002cae5760405162461bcd60e51b81526004016200121d9062006fe2565b6001600160a01b0382166000908152602e602052604090205481111562002d115760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b60448201526064016200121d565b6001600160a01b0382166000908152602e60205260408120805483929062002d3b90849062007066565b92505081905550806030600082825462002d56919062007066565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062002daa62003f9e565b6001600160a01b038084166000818152602f60205260409020600101549091161462002dea5760405162461bcd60e51b81526004016200121d9062007019565b6001600160a01b0383166000908152602f602052604081206013015460ff16600381111562002e1d5762002e1d6200695f565b1462002e6c5760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f20626520616374697665000000000060448201526064016200121d565b62002e7983833362004f5b565b90506200149160008055565b600062002e9162003f9e565b6001600160a01b038084166000818152602f60205260409020600101549091161462002ed15760405162461bcd60e51b81526004016200121d9062007019565b6000821162002f1b5760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b60448201526064016200121d565b62002e79838333620051a6565b6060602c805480602002602001604051908101604052809291908181526020016000905b828210156200300257838290600052602060002001805462002f6e9062006f23565b80601f016020809104026020016040519081016040528092919081815260200182805462002f9c9062006f23565b801562002fed5780601f1062002fc15761010080835404028352916020019162002fed565b820191906000526020600020905b81548152906001019060200180831162002fcf57829003601f168201915b50505050508152602001906001019062002f4c565b50505050905090565b60006200301a338484620040dd565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6060600080600080602860006022548152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b8282101562003191576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620030f99062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620031279062006f23565b8015620031785780601f106200314c5761010080835404028352916020019162003178565b820191906000526020600020905b8154815290600101906020018083116200315a57829003601f168201915b50505050508152505081526020019060010190620030a3565b50506022546000908152602860205260409020600181015460028201546003909201549499509750955091935050505090919293565b60606029805480602002602001604051908101604052809291908181526020016000905b8282101562003002576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620032419062006f23565b80601f01602080910402602001604051908101604052809291908181526020018280546200326f9062006f23565b8015620032c05780601f106200329457610100808354040283529160200191620032c0565b820191906000526020600020905b815481529060010190602001808311620032a257829003601f168201915b50505050508152505081526020019060010190620031eb565b6032546060906001600160a01b03163314620033095760405162461bcd60e51b81526004016200121d90620073d4565b6021546200335a5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f7273000000000000000060448201526064016200121d565b62003364620066da565b601f54608082015260218152602f602082015260296040820152602760608201526200339081620055b0565b6200339e602c6000620066f8565b60295480620033e55760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b60448201526064016200121d565b60008167ffffffffffffffff81111562003403576200340362006bcf565b6040519080825280602002602001820160405280156200342d578160200160208202803683370190505b50905060005b8281101562003517576000602f600060298481548110620034585762003458620075db565b60009182526020808320600392830201546001600160a01b0316845283019390935260409091018120602c8054600181018255925292507f7416c943b4a09859521022fd2e90eac0dd9026dad28fa317782a135f28a860910190620034c090830182620075f1565b50600281015483516001600160a01b0390911690849084908110620034e957620034e9620075db565b6001600160a01b039092166020928302919091019091015250806200350e81620076cf565b91505062003433565b509250505090565b601c546001600160a01b031633146200354c5760405162461bcd60e51b81526004016200121d9062006fe2565b62003559600183620055d0565b62001b72600282620055d0565b601c546001600160a01b03163314620035935760405162461bcd60e51b81526004016200121d9062006fe2565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b620035bf62003f9e565b6001600160a01b038082166000818152602f602052604090206001015490911614620035ff5760405162461bcd60e51b81526004016200121d9062006f5f565b6001600160a01b038082166000908152602f60205260409020805490911633146200363e5760405162461bcd60e51b81526004016200121d906200747a565b6000601382015460ff1660038111156200365c576200365c6200695f565b03620036ab5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c726561647920616374697665000000000000000060448201526064016200121d565b6002601382015460ff166003811115620036c957620036c96200695f565b148015620036da5750438160100154115b15620037295760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c00000000000000000060448201526064016200121d565b6003601382015460ff1660038111156200374757620037476200695f565b03620037965760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c790000000060448201526064016200121d565b60138101805460ff1916905580546022546000908152602860209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200153260008055565b606080600160028180546200381b9062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620038499062006f23565b80156200389a5780601f106200386e576101008083540402835291602001916200389a565b820191906000526020600020905b8154815290600101906020018083116200387c57829003601f168201915b50505050509150808054620038af9062006f23565b80601f0160208091040260200160405190810160405280929190818152602001828054620038dd9062006f23565b80156200392e5780601f1062003902576101008083540402835291602001916200392e565b820191906000526020600020905b8154815290600101906020018083116200391057829003601f168201915b50505050509050915091509091565b606060218054806020026020016040519081016040528092919081815260200182805480156200399757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003978575b5050505050905090565b601c546001600160a01b03163314620039ce5760405162461bcd60e51b81526004016200121d9062006fe2565b600f8190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b601c546001600160a01b0316331462003a365760405162461bcd60e51b81526004016200121d9062006fe2565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331462003a855760405162461bcd60e51b81526004016200121d9062006fe2565b62003a936001600062006718565b62003aa16002600062006718565b6003805460ff19169055565b601c546001600160a01b0316331462003ada5760405162461bcd60e51b81526004016200121d9062006fe2565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331462003b295760405162461bcd60e51b81526004016200121d9062006fe2565b601680546001600160a01b0319166001600160a01b0392909216919091179055565b6032546001600160a01b0316331462003b785760405162461bcd60e51b81526004016200121d90620073d4565b62003b8262003f9e565b62003b8c62004770565b62003b96620032d9565b5042602655436025819055600090815260236020908152604080832083905560225481516029805460a0958102830186019094526080820184815262003cf596939592948594919390919085015b8282101562003cd2576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003c3a9062006f23565b80601f016020809104026020016040519081016040528092919081815260200182805462003c689062006f23565b801562003cb95780601f1062003c8d5761010080835404028352916020019162003cb9565b820191906000526020600020905b81548152906001019060200180831162003c9b57829003601f168201915b5050505050815250508152602001906001019062003be4565b5050509082525060006020820152436040820152601d546060909101526200497b565b62003cff60008055565b565b601c546001600160a01b0316331462003d2e5760405162461bcd60e51b81526004016200121d9062006fe2565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b602454601d546000911462003d66575060245490565b50601d5490565b601c546001600160a01b0316331462003d9a5760405162461bcd60e51b81526004016200121d9062006fe2565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331462003de95760405162461bcd60e51b81526004016200121d9062006fe2565b6001600160a01b03811662003e535760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b60648201526084016200121d565b603380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831662003ed95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016200121d565b6001600160a01b03821662003f3c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016200121d565b6001600160a01b038381166000818152602d602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000541562003fe65760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b60448201526064016200121d565b6001600055565b6001600160a01b0381166000908152602f6020526040812090601382015460ff1660038111156200402257620040226200695f565b14620040715760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d75737420626520616374697665000000000000000060448201526064016200121d565b60138101805460ff1916600117905580546022546000908152602860209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b0383166000908152602e6020526040902054811115620041405760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b60448201526064016200121d565b6001600160a01b0383166000908152602e6020526040812080548392906200416a90849062007066565b90915550506001600160a01b0382166000908152602e602052604081208054839290620041999084906200707c565b9091555050505050565b6001600160a01b0382166000908152602e602052604081208054839290620041cd9084906200707c565b925050819055508060306000828254620041e891906200707c565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162002d92565b8115801562004236575080155b1562004240575050565b600e54600090670de0b6b3a7640000906200425d908590620076eb565b6200426991906200771b565b90508015620042e7576013546040516000916001600160a01b03169083908381818185875af1925050503d8060008114620042c1576040519150601f19603f3d011682016040523d82523d6000602084013e620042c6565b606091505b5090915050801515600103620042e557620042e2828562007066565b93505b505b82602a6000828254620042fb91906200707c565b90915550600090505b60295481101562001b33576000602f6000602984815481106200432b576200432b620075db565b600091825260208083206003909202909101546001600160a01b03168352820192909252604001812060275460298054929450909188919086908110620043765762004376620075db565b906000526020600020906003020160010154620043949190620076eb565b620043a091906200771b565b905060006027548660298681548110620043be57620043be620075db565b906000526020600020906003020160010154620043dc9190620076eb565b620043e891906200771b565b90506000821180620043fa5750600081115b1562004757576002601384015460ff1660038111156200441e576200441e6200695f565b14806200444657506003601384015460ff1660038111156200444457620044446200695f565b145b156200451057601454620044669030906001600160a01b031683620040dd565b601454602980546001600160a01b039092169163a8031a1d91859188908110620044945762004494620075db565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b158015620044ed57600080fd5b505af115801562004502573d6000803e3d6000fd5b50505050505050506200475b565b60008360050154838560080154620045299190620076eb565b6200453591906200771b565b90508015620045f757835460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d806000811462004595576040519150601f19603f3d011682016040523d82523d6000602084013e6200459a565b606091505b509092509050811515600003620045f45785546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d35291620045eb916001600160a01b0390911690849062007732565b60405180910390a15b50505b60008460050154838660080154620046109190620076eb565b6200461c91906200771b565b905080156200463e5784546200463e9030906001600160a01b031683620040dd565b60006200464c828562007066565b905060006200465c848762007066565b905060008111806200466e5750600082115b156200470857600c870154620046909030906001600160a01b031684620040dd565b600c87015460405163a0ce552d60e01b8152600481018490526001600160a01b039091169063a0ce552d908390602401604080518083038185885af1158015620046de573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062004705919062007431565b50505b600187015460408051888152602081018890526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a2505050505b5050505b806200476781620076cf565b91505062004304565b6005545b6006548110156200479d5762004797816200478f81620076cf565b925062005723565b62004774565b5060065460055560095460085403620047b257565b600a545b600954811015620047df57620047d981620047d181620076cf565b925062005a70565b620047b6565b50600954600a55600854805b6009548110156200485a5760115460008281526007602081905260409091200154439162004819916200707c565b116200483f576200482a8162005dee565b620048376001836200707c565b915062004845565b6200485a565b806200485181620076cf565b915050620047eb565b50600855565b600d54600c54101562003cff57600c546000908152600b602052604090206011546001820154439162004893916200707c565b11156200489d5750565b80546001600160a01b039081166000908152602f60205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd92620048f592910190815260200190565b600060405180830381600087803b1580156200491057600080fd5b505af115801562004925573d6000803e3d6000fd5b5050600c80546000908152600b6020526040812080546001600160a01b0319168155600180820183905560029091018290558254909450919250906200496d9084906200707c565b909155506200486092505050565b6000828152602860209081526040808320918401516001830155830151600282015560608301516003820155905b82515181101562001b33578251805183919083908110620049ce57620049ce620075db565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b0390921691909117815591810151928201929092556040820151600282019062004a329082620074c9565b505050808062004a4290620076cf565b915050620049a9565b6000805b60295481101562004ab3576029818154811062004a705762004a70620075db565b60009182526020909120600390910201546001600160a01b039081169084160362004a9e5750600192915050565b8062004aaa81620076cf565b91505062004a4f565b50600092915050565b60008062004ac962006757565b60008060ff9050604083875160208901845afa62004ae657600080fd5b50508051602090910151600160601b90910494909350915050565b60e281511462004b4b5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064016200121d565b6030826102400151511462004ba35760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e6774680000000060448201526064016200121d565b62004bae8262005f50565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262004c11920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262004c3183516200607d565b8360405160200162004c469392919062007763565b60408051601f198184030181528282528051602091820120600280855260608501845290945060009392909183019080368337019050509050600080808062004c9e898262004c9860416002620076eb565b6200619e565b9050600062004cbd8a62004cb560416002620076eb565b60606200619e565b905060205b825181101562004d8e5762004cd88382620062b7565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa15801562004d34573d6000803e3d6000fd5b5050604051601f19015190508762004d4e6041846200771b565b8151811062004d615762004d61620075db565b6001600160a01b039092166020928302919091019091015262004d866041826200707c565b905062004cc2565b508a602001516001600160a01b03168660008151811062004db35762004db3620075db565b60200260200101516001600160a01b03161462004e255760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b60648201526084016200121d565b8a604001516001600160a01b03168660018151811062004e495762004e49620075db565b60200260200101516001600160a01b03161462004ebd5760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b60648201526084016200121d565b600162004ed58c6102400151838e60000151620062ee565b1462004f435760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b60648201526084016200121d565b62004f4e8b6200635d565b5050505050505050505050565b600080831162004fba5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b60648201526084016200121d565b6001600160a01b0382166000908152602e6020526040902054831115620050245760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e6365000000000060448201526064016200121d565b6001600160a01b0382166000908152602e6020526040812080548592906200504e90849062007066565b909155505060408051610100810182526001600160a01b0380851682528681166020808401918252838501888152436060860190815260006080870181815260a0880182815260c0890183815260e08a018481526006805486526004988990529b85208b518154908c166001600160a01b0319918216178255995160018201805491909c169a169990991790995594516002880155925160038701555193850193909355516005840155518286015591516007909101805491151560ff1990921691909117905582549192906200512583620076cf565b90915550506001600160a01b038581166000818152602f6020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a360016006546200519c919062007066565b9695505050505050565b6001600160a01b038084166000908152602f60205260408120805491929091848216911614806200531e57600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa1580156200521f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005245919062007417565b905085811015620052ad5760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b60648201526084016200121d565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b158015620052fe57600080fd5b505af115801562005313573d6000803e3d6000fd5b5050505050620053b1565b8482600b0154836008015462005335919062007066565b1015620053955760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b60648201526084016200121d565b8482600b016000828254620053ab91906200707c565b90915550505b604051806101600160405280856001600160a01b03168152602001876001600160a01b031681526020018681526020016000815260200160008152602001600081526020016000815260200143815260200160001515815260200160001515815260200182151581525060076000600954815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff0219169083151502179055506101408201518160080160026101000a81548160ff021916908315150217905550905050600960008154809291906200554190620076cf565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc8388604051620055979291909115158252602082015260400190565b60405180910390a360016009546200519c919062007066565b60fa60a06000808285855af4620055cb573d6000803e3d6000fd5b505050565b8154600260018083161561010002038216048251808201602081106020841001600281146200567f5760018114620056a5578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b8082101562005668578151845560018401935060208201915062005649565b815191036101000a9081900402909155506200571a565b60028302826020036101000a846020036101000a6020890151040201850187556200571a565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015620057085781518455600184019350602082019150620056e9565b815191036101000a9081900402909155505b50505050505050565b600081815260046020908152604080832060018101546001600160a01b03168452602f90925282209091601382015460ff1660038111156200576957620057696200695f565b146200588b57600282015482546001600160a01b03166000908152602e6020526040812080549091906200579f9084906200707c565b9091555050600c810154825460405163162bd9cb60e21b81526001600160a01b0391821660048201529116906358af672c906024016040805180830381865afa158015620057f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005817919062007431565b6006840155600583015560078201805460ff19166001908117909155825490830154600284015460138401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f8783429262003f9192909160ff90911690620077ac565b805482546001600160a01b03908116911614620059ab5760008082600801548360050154620058bb919062007066565b905080600003620058d35783600201549150620058f9565b80846002015484600d0154620058ea9190620076eb565b620058f691906200771b565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b1580156200594b57600080fd5b505af115801562005960573d6000803e3d6000fd5b505050508183600d0160008282546200597a91906200707c565b909155505060028401546005840180546000906200599a9084906200707c565b9091555050506004830155620059eb565b8160020154816008016000828254620059c591906200707c565b90915550506002820154600582018054600090620059e59084906200707c565b90915550505b600c810154825460405163162bd9cb60e21b81526001600160a01b0391821660048201529116906358af672c906024016040805180830381865afa15801562005a38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005a5e919062007431565b60068401556005909201919091555050565b600081815260076020908152604080832060018101546001600160a01b03168452602f909252822060088201549192909162010000900460ff1662005c65576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b15801562005b0657600080fd5b505af115801562005b1b573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801562005b7157600080fd5b505af115801562005b86573d6000803e3d6000fd5b5050505060008360080154846005015462005ba2919062007066565b600d85015490915062005bb68284620076eb565b62005bc291906200771b565b92508184600d01600082825462005bda919062007066565b9091555050600684015460000362005bf9576003850183905562005c21565b6006840154600785015462005c0f9085620076eb565b62005c1b91906200771b565b60038601555b8284600601600082825462005c3791906200707c565b9091555050600385015460078501805460009062005c579084906200707c565b9091555062005d3a92505050565b506002820154600882015481111562005c7f575060088101545b816009015460000362005c99576003830181905562005cc1565b6009820154600a83015462005caf9083620076eb565b62005cbb91906200771b565b60038401555b8082600901600082825462005cd791906200707c565b90915550506003830154600a8301805460009062005cf79084906200707c565b925050819055508082600801600082825462005d14919062007066565b90915550506002830154600b8301805460009062005d3490849062007066565b90915550505b600c820154835460405163162bd9cb60e21b81526001600160a01b0391821660048201529116906358af672c906024016040805180830381865afa15801562005d87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005dad919062007431565b600685015560058085019190915560088401805461ff0019166101001790558201805482919060009062005de390849062007066565b909155505050505050565b600081815260076020526040812060088101805460ff19166001179055600381015490910362005e1c575050565b60018101546001600160a01b03166000908152602f60205260408120600883015490919062010000900460ff1662005eb95781600701548260060154846003015462005e699190620076eb565b62005e7591906200771b565b90508082600601600082825462005e8d919062007066565b9091555050600383015460078301805460009062005ead90849062007066565b9091555062005f1e9050565b81600a01548260090154846003015462005ed49190620076eb565b62005ee091906200771b565b90508082600901600082825462005ef8919062007066565b90915550506003830154600a8301805460009062005f1890849062007066565b90915550505b6004830181905582546001600160a01b03166000908152602e60205260408120805483929062005de39084906200707c565b600062005f61826060015162004abc565b6001600160a01b0390911660208401529050801562005fb15760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200121d565b6020808301516001600160a01b039081166000908152602f9092526040909120600101541615620060255760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c726561647920726567697374657265640000000060448201526064016200121d565b6127108260800151111562001b725760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e207261746500000000000000000060448201526064016200121d565b606081600003620060a55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620060d55780620060bc81620076cf565b9150620060cd9050600a836200771b565b9150620060a9565b60008167ffffffffffffffff811115620060f357620060f362006bcf565b6040519080825280601f01601f1916602001820160405280156200611e576020820181803683370190505b5090505b841562006196576200613660018362007066565b915062006145600a86620077c2565b620061529060306200707c565b60f81b8183815181106200616a576200616a620075db565b60200101906001600160f81b031916908160001a9053506200618e600a866200771b565b945062006122565b949350505050565b606081620061ae81601f6200707c565b1015620061ef5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016200121d565b620061fb82846200707c565b84511015620062415760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016200121d565b606082158015620062625760405191506000825260208201604052620062ae565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200629d57805183526020928301920162006283565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b811015620062e757620062e4601b82620077d9565b90505b9250925092565b6000620062fa62006775565b60008585856040516020016200631393929190620077f5565b6040516020818303038152906040529050600060fb90506000825160206200633c91906200707c565b90506020848285855afa6200635057600080fd5b5050905195945050505050565b6101808101516001600160a01b03166200645c576033546001600160a01b0316620063d65760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b60648201526084016200121d565b602154600090620063e7906200607d565b905081602001518260000151836080015183603360009054906101000a90046001600160a01b03166040516200641d9062006793565b6200642d95949392919062007844565b604051809103906000f0801580156200644a573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602180546001808201835560009283527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b57090910180546001600160a01b03199081166001600160a01b0395861617909155845184168352602f909552604091829020865181548716908516178155935190840180548616918416919091179055840151600283018054909416911617909155606082015182919060038201906200650e9082620074c9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f820155610200820151601082015561022082015160118201556102408201516012820190620065d89082620074c9565b5061026082015160138201805460ff191660018360038111156200660057620066006200695f565b0217905550505050565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160006003811115620066d557620066d56200695f565b905290565b6040518060a001604052806005906020820280368337509192915050565b5080546000825590600052602060002090810190620015329190620067a1565b508054620067269062006f23565b6000825580601f1062006737575050565b601f016020900490600052602060002090810190620015329190620067c6565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105c2806200787783390190565b80821115620067c2576000620067b8828262006718565b50600101620067a1565b5090565b5b80821115620067c25760008155600101620067c7565b60005b83811015620067fa578181015183820152602001620067e0565b50506000910152565b600081518084526200681d816020860160208601620067dd565b601f01601f19169290920160200192915050565b60208152600062001956602083018462006803565b6000602082840312156200685957600080fd5b5035919050565b600082825180855260208086019550808260051b84010181860160005b84811015620068d857858303601f19018952815180516001600160a01b031684528481015185850152604090810151606091850182905290620068c38186018362006803565b9a86019a94505050908301906001016200687d565b5090979650505050505050565b60208152600062001956602083018462006860565b6001600160a01b03811681146200153257600080fd5b600080604083850312156200692457600080fd5b82356200693181620068fa565b946020939093013593505050565b6000602082840312156200695257600080fd5b81356200195681620068fa565b634e487b7160e01b600052602160045260246000fd5b600481106200699457634e487b7160e01b600052602160045260246000fd5b9052565b60208152620069b36020820183516001600160a01b03169052565b60006020830151620069d060408401826001600160a01b03169052565b5060408301516001600160a01b038116606084015250606083015161028080608085015262006a046102a085018362006803565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a062006a8c818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f19016102608088019190915290915062006af0848362006803565b93508087015191505062006b078286018262006975565b5090949350505050565b60008060006060848603121562006b2757600080fd5b833562006b3481620068fa565b9250602084013562006b4681620068fa565b929592945050506040919091013590565b60006020828403121562006b6a57600080fd5b813567ffffffffffffffff81111562006b8257600080fd5b820161028081850312156200195657600080fd5b8515158152841515602082015260a06040820152600062006bbb60a083018662006860565b606083019490945250608001529392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262006bf757600080fd5b813567ffffffffffffffff8082111562006c155762006c1562006bcf565b604051601f8301601f19908116603f0116810190828211818310171562006c405762006c4062006bcf565b8160405283815286602085880101111562006c5a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121562006c8e57600080fd5b823562006c9b81620068fa565b9150602083013567ffffffffffffffff81111562006cb857600080fd5b62006cc68582860162006be5565b9150509250929050565b6000806000806080858703121562006ce757600080fd5b843567ffffffffffffffff8082111562006d0057600080fd5b62006d0e8883890162006be5565b95506020870135915062006d2282620068fa565b9093506040860135908082111562006d3957600080fd5b62006d478883890162006be5565b9350606087013591508082111562006d5e57600080fd5b5062006d6d8782880162006be5565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200135657603f1988860301845262006dbf85835162006803565b9450928501929085019060010162006da0565b60808152600062006de7608083018762006860565b6020830195909552506040810192909252606090910152919050565b6020808252825182820181905260009190848201906040850190845b8181101562006e465783516001600160a01b03168352928401929184019160010162006e1f565b50909695505050505050565b6000806040838503121562006e6657600080fd5b823567ffffffffffffffff8082111562006e7f57600080fd5b62006e8d8683870162006be5565b9350602085013591508082111562006ea457600080fd5b5062006cc68582860162006be5565b60408152600062006ec8604083018562006803565b828103602084015262006edc818562006803565b95945050505050565b6000806040838503121562006ef957600080fd5b823562006f0681620068fa565b9150602083013562006f1881620068fa565b809150509250929050565b600181811c9082168062006f3857607f821691505b60208210810362006f5957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111562001491576200149162007050565b8082018082111562001491576200149162007050565b600081356200149181620068fa565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808335601e19843603018112620070d957600080fd5b83018035915067ffffffffffffffff821115620070f557600080fd5b6020019150368190038213156200710b57600080fd5b9250929050565b601f821115620055cb57600081815260208120601f850160051c810160208610156200713b5750805b601f850160051c820191505b81811015620028745782815560010162007147565b600019600383901b1c191660019190911b1790565b67ffffffffffffffff8311156200718c576200718c62006bcf565b620071a4836200719d835462006f23565b8362007112565b6000601f841160018114620071d75760008515620071c25750838201355b620071ce86826200715c565b84555062001c79565b600083815260209020601f19861690835b828110156200720a5786850135825560209485019460019092019101620071e8565b5086821015620072285760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60008135600481106200149157600080fd5b600482106200726b57634e487b7160e01b600052602160045260246000fd5b60ff1981541660ff831681178255505050565b620072946200728d8362007092565b82620070a1565b620072b0620072a66020840162007092565b60018301620070a1565b620072cc620072c26040840162007092565b60028301620070a1565b620072db6060830183620070c1565b620072eb81836003860162007171565b50506080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610160820135600b8201556200735e62007354610180840162007092565b600c8301620070a1565b6101a0820135600d8201556101c0820135600e8201556101e0820135600f82015561020082013560108201556102208201356011820155620073a5610240830183620070c1565b620073b581836012860162007171565b505062001b72620073ca61026084016200723a565b601383016200724c565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b6000602082840312156200742a57600080fd5b5051919050565b600080604083850312156200744557600080fd5b505080516020909101519092909150565b6000602082840312156200746957600080fd5b815180151581146200195657600080fd5b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b815167ffffffffffffffff811115620074e657620074e662006bcf565b620074fe81620074f7845462006f23565b8462007112565b602080601f8311600181146200753257600084156200751d5750858301515b6200752985826200715c565b86555062002874565b600085815260208120601f198616915b82811015620075635788860151825594840194600190910190840162007542565b5085821015620075825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018060a01b0380881683528087166020840152808616604084015260a06060840152620075c660a084018662006803565b91508084166080840152509695505050505050565b634e487b7160e01b600052603260045260246000fd5b818103620075fd575050565b62007609825462006f23565b67ffffffffffffffff81111562007624576200762462006bcf565b6200763581620074f7845462006f23565b6000601f821160018114620076685760008315620076535750848201545b6200765f84826200715c565b85555062001c79565b600085815260209020601f19841690600086815260209020845b83811015620076a4578286015482556001958601959091019060200162007682565b5085831015620075825793015460001960f8600387901b161c19169092555050600190811b01905550565b600060018201620076e457620076e462007050565b5060010190565b808202811582820484141762001491576200149162007050565b634e487b7160e01b600052601260045260246000fd5b6000826200772d576200772d62007705565b500490565b60018060a01b0383168152606060208201526000606082015260806040820152600062006196608083018462006803565b6000845162007777818460208901620067dd565b8451908301906200778d818360208901620067dd565b8451910190620077a2818360208801620067dd565b0195945050505050565b8281526040810162001956602083018462006975565b600082620077d457620077d462007705565b500690565b60ff818116838216019081111562001491576200149162007050565b6000845162007809818460208901620067dd565b8451908301906200781f818360208901620067dd565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a06060840152620075c660a08401866200680356fe608060405234801561001057600080fd5b506040516105c23803806105c283398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101868061043c6000396000f3fe60806040523661001b57610019610014610022565b6100fd565b005b6100196100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009c9190610120565b90506001600160a01b0381166100f85760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e8061011a573d6000fd5b503d6000f35b60006020828403121561013257600080fd5b81516001600160a01b038116811461014957600080fd5b939250505056fea26469706673582212209a75da0350dfc1a208a35175851bcd7988a0dcb079ef84c93d9ea49a25303b2064736f6c63430008150033a26469706673582212200a66e429eae002828359ac0ce7a2b2daaf3768036415418f4443c04a6fd9c70364736f6c63430008150033608060405234801561001057600080fd5b50601080546001600160a01b03191633179055611700806100326000396000f3fe6080604052600436106101a05760003560e01c80633e4eb36c116100ec578063949813b81161008a578063a0ce552d11610064578063a0ce552d14610533578063a9059cbb14610546578063bd96102f14610566578063dd62ed3e1461057b576101a7565b8063949813b8146104de57806395d89b41146104fe5780639dc29fac14610513576101a7565b806359355736116100c6578063593557361461043257806370a08231146104685780637eee288d1461049e57806384955c88146104be576101a7565b80633e4eb36c146103a557806340c10f19146103ba57806358af672c146103da576101a7565b80631eeffad0116101595780632f2c3f2e116101335780632f2c3f2e14610340578063313ce56714610356578063372500ab146103725780633b19e84a14610387576101a7565b80631eeffad0146102eb57806323b872dd14610300578063282d3fdf14610320576101a7565b806306fdde0314610205578063095ea7b3146102305780631195e07e1461026057806318160ddd14610292578063187cf4d7146102b157806319fac8fd146102c9576101a7565b366101a757005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b34801561021157600080fd5b5061021a6105c1565b604051610227919061145a565b60405180910390f35b34801561023c57600080fd5b5061025061024b3660046114c4565b610653565b6040519015158152602001610227565b34801561026c57600080fd5b50600c546001600160a01b03165b6040516001600160a01b039091168152602001610227565b34801561029e57600080fd5b506003545b604051908152602001610227565b3480156102bd57600080fd5b506102a3633b9aca0081565b3480156102d557600080fd5b506102e96102e43660046114ee565b61066a565b005b3480156102f757600080fd5b50600f546102a3565b34801561030c57600080fd5b5061025061031b366004611507565b610699565b34801561032c57600080fd5b506102e961033b3660046114c4565b61078e565b34801561034c57600080fd5b506102a361271081565b34801561036257600080fd5b5060405160128152602001610227565b34801561037e57600080fd5b506102e9610872565b34801561039357600080fd5b50600d546001600160a01b031661027a565b3480156103b157600080fd5b50600e546102a3565b3480156103c657600080fd5b506102e96103d53660046114c4565b6109f3565b3480156103e657600080fd5b5061041d6103f5366004611543565b6001600160a01b03166000908152600460209081526040808320546007909252909120549091565b60408051928352602083019190915201610227565b34801561043e57600080fd5b506102a361044d366004611543565b6001600160a01b031660009081526001602052604090205490565b34801561047457600080fd5b506102a3610483366004611543565b6001600160a01b031660009081526020819052604090205490565b3480156104aa57600080fd5b506102e96104b93660046114c4565b610a5b565b3480156104ca57600080fd5b506102a36104d9366004611543565b610b21565b3480156104ea57600080fd5b5061041d6104f9366004611543565b610b4e565b34801561050a57600080fd5b5061021a610c06565b34801561051f57600080fd5b506102e961052e3660046114c4565b610c15565b61041d6105413660046114ee565b610c75565b34801561055257600080fd5b506102506105613660046114c4565b610f69565b34801561057257600080fd5b506102e9610fb6565b34801561058757600080fd5b506102a361059636600461155e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6060600a80546105d090611591565b80601f01602080910402602001604051908101604052809291908181526020018280546105fc90611591565b80156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b5050505050905090565b60006106603384846110bd565b5060015b92915050565b6010546001600160a01b031633146106945760405162461bcd60e51b81526004016101fc906115cb565b600e55565b6001600160a01b03831660009081526002602090815260408083203384529091528120548281101561071e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101fc565b610732853361072d8685611629565b6110bd565b61073c85846111e1565b61074684846112d5565b836001600160a01b0316856001600160a01b03166000805160206116ab8339815191528560405161077991815260200190565b60405180910390a360019150505b9392505050565b6010546001600160a01b031633146107b85760405162461bcd60e51b81526004016101fc906115cb565b6001600160a01b038216600090815260016020908152604080832054918390529091205482916107e791611629565b10156108415760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101fc565b6001600160a01b0382166000908152600160205260408120805483929061086990849061163c565b90915550505050565b60008061087e33611321565b33600090815260046020908152604080832083905560079091528120819055919350915081156109615760105460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d919061164f565b9050806109615760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101fc565b60405133908490600081818185875af1925050503d80600081146109a1576040519150601f19603f3d011682016040523d82523d6000602084013e6109a6565b606091505b505080915050806109ee5760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b505050565b6010546001600160a01b03163314610a1d5760405162461bcd60e51b81526004016101fc906115cb565b610a2782826112d5565b6040518181526001600160a01b038316906000906000805160206116ab833981519152906020015b60405180910390a35050565b6010546001600160a01b03163314610a855760405162461bcd60e51b81526004016101fc906115cb565b6001600160a01b038216600090815260016020526040902054811115610af95760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101fc565b6001600160a01b03821660009081526001602052604081208054839290610869908490611629565b6001600160a01b038116600090815260016020908152604080832054918390528220546106649190611629565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205483928391610b8391849161141c565b6001600160a01b038616600090815260046020526040902054909150610baa90829061163c565b6009546001600160a01b03871660009081526008602052604081205492965091610bd591859161141c565b6001600160a01b038716600090815260076020526040902054909150610bfc90829061163c565b9350505050915091565b6060600b80546105d090611591565b6010546001600160a01b03163314610c3f5760405162461bcd60e51b81526004016101fc906115cb565b610c4982826111e1565b6040518181526000906001600160a01b038416906000805160206116ab83398151915290602001610a4f565b60105460009081906001600160a01b03163314610ca45760405162461bcd60e51b81526004016101fc906115cb565b600e54349060009061271090610cba9084611671565b610cc49190611688565b905081811115610d165760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610d208183611629565b600d546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610d77576040519150601f19603f3d011682016040523d82523d6000602084013e610d7c565b606091505b5090915050801515600003610da35781600f6000828254610d9d919061163c565b90915550505b6000612710600e5488610db69190611671565b610dc09190611688565b905086811115610e125760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610e1c8188611629565b96508015610e9f57601054600d5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d919061164f565b505b600354600090610eb3633b9aca0087611671565b610ebd9190611688565b905080600654610ecd919061163c565b600655600354600090610ee4633b9aca008b611671565b610eee9190611688565b905080600954610efe919061163c565b600955600354600090633b9aca0090610f179085611671565b610f219190611688565b90506000633b9aca0060035484610f389190611671565b610f429190611688565b9050610f4e828861163c565b610f58828761163c565b995099505050505050505050915091565b6000610f7533836111e1565b610f7f83836112d5565b6040518281526001600160a01b0384169033906000805160206116ab8339815191529060200160405180910390a350600192915050565b600d546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101fc565b600d54600f546040516000926001600160a01b031691908381818185875af1925050503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b50509050806110b55760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b506000600f55565b6001600160a01b03831661111f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101fc565b6001600160a01b0382166111805760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101fc565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6111ea82611321565b50506001600160a01b038216600090815260208181526040808320546001909252909120546112199082611629565b8211156112685760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101fc565b6112728282611629565b6001600160a01b0384166000908152602081905260409020558082036112b9576001600160a01b038316600090815260056020908152604080832083905560089091528120555b81600360008282546112cb9190611629565b9091555050505050565b6112de82611321565b50506001600160a01b0382166000908152602081905260408120805483929061130890849061163c565b925050819055508060036000828254610869919061163c565b6001600160a01b038116600090815260208181526040808320546006546005909352908320548392839161135691849161141c565b6001600160a01b03861660009081526004602052604090205490915061137d90829061163c565b6001600160a01b03861660009081526004602090815260408083208490556006546005835281842055600954600890925282205492965090916113c191859161141c565b6001600160a01b0387166000908152600760205260409020549091506113e890829061163c565b6001600160a01b03909616600090815260076020908152604080832089905560095460089092529091205550929492505050565b60008360000361142e57506000610787565b633b9aca008461143e8486611629565b6114489190611671565b6114529190611688565b949350505050565b600060208083528351808285015260005b818110156114875785810183015185820160400152820161146b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146114bf57600080fd5b919050565b600080604083850312156114d757600080fd5b6114e0836114a8565b946020939093013593505050565b60006020828403121561150057600080fd5b5035919050565b60008060006060848603121561151c57600080fd5b611525846114a8565b9250611533602085016114a8565b9150604084013590509250925092565b60006020828403121561155557600080fd5b610787826114a8565b6000806040838503121561157157600080fd5b61157a836114a8565b9150611588602084016114a8565b90509250929050565b600181811c908216806115a557607f821691505b6020821081036115c557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561066457610664611613565b8082018082111561066457610664611613565b60006020828403121561166157600080fd5b8151801515811461078757600080fd5b808202811582820484141761066457610664611613565b6000826116a557634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203477e4d22883280ba018c43a93da88c9e7c80e78dd590c9108759ee00c06e15c64736f6c63430008150033608060405234801561001057600080fd5b506040516105c23803806105c283398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101868061043c6000396000f3fe60806040523661001b57610019610014610022565b6100fd565b005b6100196100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009c9190610120565b90506001600160a01b0381166100f85760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e8061011a573d6000fd5b503d6000f35b60006020828403121561013257600080fd5b81516001600160a01b038116811461014957600080fd5b939250505056fea26469706673582212209a75da0350dfc1a208a35175851bcd7988a0dcb079ef84c93d9ea49a25303b2064736f6c63430008150033",
}

// AutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityMetaData.ABI instead.
var AutonityABI = AutonityMetaData.ABI

// Deprecated: Use AutonityMetaData.Sigs instead.
// AutonityFuncSigs maps the 4-byte function signature to its string representation.
var AutonityFuncSigs = AutonityMetaData.Sigs

// AutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityMetaData.Bin instead.
var AutonityBin = AutonityMetaData.Bin

// DeployAutonity deploys a new Ethereum contract, binding an instance of Autonity to it.
func (r *Runner) DeployAutonity(opts *runOptions, _validators []AutonityValidator, _config AutonityConfig) (common.Address, uint64, *Autonity, error) {
	parsed, err := AutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AutonityBin), _validators, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Autonity{contract: c}, nil
}

// Autonity is an auto generated Go binding around an Ethereum contract.
type Autonity struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_Autonity *Autonity) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *Autonity) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_Autonity *Autonity) AtnTotalRedistributed(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "atnTotalRedistributed")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *Autonity) BalanceOf(opts *runOptions, _addr common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *Autonity) Config(opts *runOptions) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *Autonity) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *Autonity) Deployer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "deployer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *Autonity) EpochID(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochID")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochPeriodToBeApplied is a free data retrieval call binding the contract method 0x573963b8.
//
// Solidity: function epochPeriodToBeApplied() view returns(uint256)
func (_Autonity *Autonity) EpochPeriodToBeApplied(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochPeriodToBeApplied")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_Autonity *Autonity) EpochReward(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochReward")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *Autonity) EpochTotalBondedStake(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *Autonity) GetBlockPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBondedLiquid is a free data retrieval call binding the contract method 0xff9831b6.
//
// Solidity: function getBondedLiquid(uint256 _bondingID) view returns(uint256)
func (_Autonity *Autonity) GetBondedLiquid(opts *runOptions, _bondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getBondedLiquid", _bondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *Autonity) GetCommittee(opts *runOptions) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeByHeight is a free data retrieval call binding the contract method 0x070e720a.
//
// Solidity: function getCommitteeByHeight(uint256 _height) view returns((address,uint256,bytes)[])
func (_Autonity *Autonity) GetCommitteeByHeight(opts *runOptions, _height *big.Int) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCommitteeByHeight", _height)

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *Autonity) GetCommitteeEnodes(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *Autonity) GetEpochFromBlock(opts *runOptions, _block *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns((address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *Autonity) GetEpochInfo(opts *runOptions) ([]AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochInfo")

	if err != nil {
		return *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, consumed, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *Autonity) GetEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *Autonity) GetLastEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *Autonity) GetMaxCommitteeSize(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *Autonity) GetMinimumBaseFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *Autonity) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_Autonity *Autonity) GetNextEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *Autonity) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *Autonity) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetReleasedStake is a free data retrieval call binding the contract method 0xf1b47e4b.
//
// Solidity: function getReleasedStake(uint256 _unbondingID) view returns(uint256)
func (_Autonity *Autonity) GetReleasedStake(opts *runOptions, _unbondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getReleasedStake", _unbondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRewardsTillBonding is a free data retrieval call binding the contract method 0xc3d802f4.
//
// Solidity: function getRewardsTillBonding(uint256 _bondingID) view returns(uint256, uint256)
func (_Autonity *Autonity) GetRewardsTillBonding(opts *runOptions, _bondingID *big.Int) (*big.Int, *big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getRewardsTillBonding", _bondingID)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// GetRewardsTillUnbonding is a free data retrieval call binding the contract method 0xeb386749.
//
// Solidity: function getRewardsTillUnbonding(uint256 _bondingID) view returns(uint256, uint256)
func (_Autonity *Autonity) GetRewardsTillUnbonding(opts *runOptions, _bondingID *big.Int) (*big.Int, *big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getRewardsTillUnbonding", _bondingID)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *Autonity) GetTreasuryAccount(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *Autonity) GetTreasuryFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *Autonity) GetUnbondingPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *Autonity) GetValidator(opts *runOptions, _addr common.Address) (AutonityValidator, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *Autonity) GetValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *Autonity) GetVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *Autonity) InflationReserve(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "inflationReserve")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsBondingRejected is a free data retrieval call binding the contract method 0xcc4269bb.
//
// Solidity: function isBondingRejected(uint256 _bondingID) view returns(bool)
func (_Autonity *Autonity) IsBondingRejected(opts *runOptions, _bondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "isBondingRejected", _bondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_Autonity *Autonity) IsUnbondingReleased(opts *runOptions, _unbondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *Autonity) LastEpochTime(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_Autonity *Autonity) LastFinalizedBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *Autonity) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *Autonity) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *Autonity) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *Autonity) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetLiquidLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf1d592a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *Autonity) CallSetLiquidLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "SetLiquidLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ActivateValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb46e5520.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *Autonity) CallActivateValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "activateValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *Autonity) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) CallBurn(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "burn", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x852c4849.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *Autonity) CallChangeCommissionRate(r *Runner, opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "changeCommissionRate", _validator, _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *Autonity) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ComputeCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xae1f5fa0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function computeCommittee() returns(address[])
func (_Autonity *Autonity) CallComputeCommittee(r *Runner, opts *runOptions) ([]common.Address, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "computeCommittee")
	r.revertSnapshot(snap)

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_Autonity *Autonity) CallFinalize(r *Runner, opts *runOptions) (bool, bool, []AutonityCommitteeMember, *big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), *new(bool), *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, out4, consumed, err

}

// FinalizeInitialization is a free data retrieval call for a paid mutator transaction binding the contract method 0xd861b0e8.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalizeInitialization() returns()
func (_Autonity *Autonity) CallFinalizeInitialization(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "finalizeInitialization")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) CallMint(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "mint", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// PauseValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae65e7a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *Autonity) CallPauseValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "pauseValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// RegisterValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x84467fdb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *Autonity) CallRegisterValidator(r *Runner, opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *Autonity) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1250a28d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) CallSetAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAcuContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xd372c07e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *Autonity) CallSetAcuContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setAcuContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommitteeSize is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bac7dad.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *Autonity) CallSetCommitteeSize(r *Runner, opts *runOptions, _size *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setCommitteeSize", _size)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *Autonity) CallSetEpochPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setEpochPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInflationControllerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf03b959d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *Autonity) CallSetInflationControllerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setInflationControllerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinimumBaseFee is a free data retrieval call for a paid mutator transaction binding the contract method 0xcb696f54.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *Autonity) CallSetMinimumBaseFee(r *Runner, opts *runOptions, _price *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setMinimumBaseFee", _price)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetNonStakableVestingContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1a0cf2e5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_Autonity *Autonity) CallSetNonStakableVestingContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setNonStakableVestingContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperatorAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0x520fdbbc.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *Autonity) CallSetOperatorAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setOperatorAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracleContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x496ccd9b.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *Autonity) CallSetOracleContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setOracleContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizationContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfd19fb9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *Autonity) CallSetStabilizationContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setStabilizationContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControlContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ecbadd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *Autonity) CallSetSupplyControlContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setSupplyControlContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0xd886f8a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *Autonity) CallSetTreasuryAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setTreasuryAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryFee is a free data retrieval call for a paid mutator transaction binding the contract method 0x77e741c7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *Autonity) CallSetTreasuryFee(r *Runner, opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setTreasuryFee", _treasuryFee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUnbondingPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x114eaf55.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *Autonity) CallSetUnbondingPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setUnbondingPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUpgradeManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xceaad455.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *Autonity) CallSetUpgradeManagerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setUpgradeManagerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) CallTransfer(r *Runner, opts *runOptions, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "transfer", _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateEnode is a free data retrieval call for a paid mutator transaction binding the contract method 0x784304b5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *Autonity) CallUpdateEnode(r *Runner, opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "updateEnode", _nodeAddress, _enode)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateValidatorAndTransferSlashedFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x35be16e0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_Autonity *Autonity) CallUpdateValidatorAndTransferSlashedFunds(r *Runner, opts *runOptions, _val AutonityValidator) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *Autonity) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *Autonity) SetLiquidLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "SetLiquidLogicContract", _contract)
	return consumed, err
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *Autonity) ActivateValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "activateValidator", _address)
	return consumed, err
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *Autonity) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "approve", spender, amount)
	return consumed, err
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) Burn(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "burn", _addr, _amount)
	return consumed, err
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *Autonity) ChangeCommissionRate(opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "changeCommissionRate", _validator, _rate)
	return consumed, err
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *Autonity) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_Autonity *Autonity) ComputeCommittee(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "computeCommittee")
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_Autonity *Autonity) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "finalize")
	return consumed, err
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_Autonity *Autonity) FinalizeInitialization(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "finalizeInitialization")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) Mint(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "mint", _addr, _amount)
	return consumed, err
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *Autonity) PauseValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "pauseValidator", _address)
	return consumed, err
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *Autonity) RegisterValidator(opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *Autonity) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "resetContractUpgrade")
	return consumed, err
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) SetAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setAccountabilityContract", _address)
	return consumed, err
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *Autonity) SetAcuContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setAcuContract", _address)
	return consumed, err
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *Autonity) SetCommitteeSize(opts *runOptions, _size *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setCommitteeSize", _size)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *Autonity) SetEpochPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setEpochPeriod", _period)
	return consumed, err
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *Autonity) SetInflationControllerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setInflationControllerContract", _address)
	return consumed, err
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *Autonity) SetMinimumBaseFee(opts *runOptions, _price *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setMinimumBaseFee", _price)
	return consumed, err
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_Autonity *Autonity) SetNonStakableVestingContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setNonStakableVestingContract", _address)
	return consumed, err
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *Autonity) SetOperatorAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setOperatorAccount", _account)
	return consumed, err
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *Autonity) SetOracleContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setOracleContract", _address)
	return consumed, err
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *Autonity) SetStabilizationContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setStabilizationContract", _address)
	return consumed, err
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *Autonity) SetSupplyControlContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setSupplyControlContract", _address)
	return consumed, err
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *Autonity) SetTreasuryAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setTreasuryAccount", _account)
	return consumed, err
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *Autonity) SetTreasuryFee(opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setTreasuryFee", _treasuryFee)
	return consumed, err
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *Autonity) SetUnbondingPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setUnbondingPeriod", _period)
	return consumed, err
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *Autonity) SetUpgradeManagerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setUpgradeManagerContract", _address)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) Transfer(opts *runOptions, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "transfer", _recipient, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *Autonity) UpdateEnode(opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "updateEnode", _nodeAddress, _enode)
	return consumed, err
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_Autonity *Autonity) UpdateValidatorAndTransferSlashedFunds(opts *runOptions, _val AutonityValidator) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *Autonity) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_Autonity *Autonity) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_Autonity *Autonity) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AutonityActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the Autonity contract.
		type AutonityActivatedValidatorIterator struct {
			Event *AutonityActivatedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityActivatedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityActivatedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityActivatedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityActivatedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityActivatedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityActivatedValidator represents a ActivatedValidator event raised by the Autonity contract.
		type AutonityActivatedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_Autonity *Autonity) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityActivatedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityActivatedValidatorIterator{contract: _Autonity.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityActivatedValidator)
						if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) ParseActivatedValidator(log types.Log) (*AutonityActivatedValidator, error) {
			event := new(AutonityActivatedValidator)
			if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Autonity contract.
		type AutonityApprovalIterator struct {
			Event *AutonityApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityApproval represents a Approval event raised by the Autonity contract.
		type AutonityApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_Autonity *Autonity) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &AutonityApprovalIterator{contract: _Autonity.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_Autonity *Autonity) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityApproval)
						if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_Autonity *Autonity) ParseApproval(log types.Log) (*AutonityApproval, error) {
			event := new(AutonityApproval)
			if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the Autonity contract.
		type AutonityBondingRejectedIterator struct {
			Event *AutonityBondingRejected // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityBondingRejectedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityBondingRejected)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityBondingRejected)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityBondingRejectedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityBondingRejectedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityBondingRejected represents a BondingRejected event raised by the Autonity contract.
		type AutonityBondingRejected struct {
			Validator common.Address;
			Delegator common.Address;
			Amount *big.Int;
			State uint8;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
 		func (_Autonity *Autonity) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityBondingRejectedIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityBondingRejectedIterator{contract: _Autonity.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
 		}

		// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_Autonity *Autonity) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityBondingRejected)
						if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_Autonity *Autonity) ParseBondingRejected(log types.Log) (*AutonityBondingRejected, error) {
			event := new(AutonityBondingRejected)
			if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the Autonity contract.
		type AutonityBurnedStakeIterator struct {
			Event *AutonityBurnedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityBurnedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityBurnedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityBurnedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityBurnedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityBurnedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityBurnedStake represents a BurnedStake event raised by the Autonity contract.
		type AutonityBurnedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
 		func (_Autonity *Autonity) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityBurnedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityBurnedStakeIterator{contract: _Autonity.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
 		}

		// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityBurnedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityBurnedStake)
						if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) ParseBurnedStake(log types.Log) (*AutonityBurnedStake, error) {
			event := new(AutonityBurnedStake)
			if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the Autonity contract.
		type AutonityCallFailedIterator struct {
			Event *AutonityCallFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityCallFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityCallFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityCallFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityCallFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityCallFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityCallFailed represents a CallFailed event raised by the Autonity contract.
		type AutonityCallFailed struct {
			To common.Address;
			MethodSignature string;
			ReturnData []byte;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
 		func (_Autonity *Autonity) FilterCallFailed(opts *bind.FilterOpts) (*AutonityCallFailedIterator, error) {





			logs, sub, err := _Autonity.contract.FilterLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityCallFailedIterator{contract: _Autonity.contract, event: "CallFailed", logs: logs, sub: sub}, nil
 		}

		// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_Autonity *Autonity) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityCallFailed) (event.Subscription, error) {





			logs, sub, err := _Autonity.contract.WatchLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityCallFailed)
						if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_Autonity *Autonity) ParseCallFailed(log types.Log) (*AutonityCallFailed, error) {
			event := new(AutonityCallFailed)
			if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the Autonity contract.
		type AutonityCommissionRateChangeIterator struct {
			Event *AutonityCommissionRateChange // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityCommissionRateChangeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityCommissionRateChange)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityCommissionRateChange)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityCommissionRateChangeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityCommissionRateChangeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityCommissionRateChange represents a CommissionRateChange event raised by the Autonity contract.
		type AutonityCommissionRateChange struct {
			Validator common.Address;
			Rate *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
 		func (_Autonity *Autonity) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityCommissionRateChangeIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityCommissionRateChangeIterator{contract: _Autonity.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
 		}

		// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_Autonity *Autonity) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityCommissionRateChange, validator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityCommissionRateChange)
						if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_Autonity *Autonity) ParseCommissionRateChange(log types.Log) (*AutonityCommissionRateChange, error) {
			event := new(AutonityCommissionRateChange)
			if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the Autonity contract.
		type AutonityEpochPeriodUpdatedIterator struct {
			Event *AutonityEpochPeriodUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityEpochPeriodUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityEpochPeriodUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityEpochPeriodUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityEpochPeriodUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityEpochPeriodUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the Autonity contract.
		type AutonityEpochPeriodUpdated struct {
			Period *big.Int;
			ToBeAppliedAtBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
 		func (_Autonity *Autonity) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityEpochPeriodUpdatedIterator, error) {




			logs, sub, err := _Autonity.contract.FilterLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityEpochPeriodUpdatedIterator{contract: _Autonity.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_Autonity *Autonity) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityEpochPeriodUpdated) (event.Subscription, error) {




			logs, sub, err := _Autonity.contract.WatchLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityEpochPeriodUpdated)
						if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_Autonity *Autonity) ParseEpochPeriodUpdated(log types.Log) (*AutonityEpochPeriodUpdated, error) {
			event := new(AutonityEpochPeriodUpdated)
			if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the Autonity contract.
		type AutonityMinimumBaseFeeUpdatedIterator struct {
			Event *AutonityMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityMinimumBaseFeeUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityMinimumBaseFeeUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the Autonity contract.
		type AutonityMinimumBaseFeeUpdated struct {
			GasPrice *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
 		func (_Autonity *Autonity) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityMinimumBaseFeeUpdatedIterator, error) {



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityMinimumBaseFeeUpdatedIterator{contract: _Autonity.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_Autonity *Autonity) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityMinimumBaseFeeUpdated) (event.Subscription, error) {



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityMinimumBaseFeeUpdated)
						if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_Autonity *Autonity) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityMinimumBaseFeeUpdated, error) {
			event := new(AutonityMinimumBaseFeeUpdated)
			if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the Autonity contract.
		type AutonityMintedStakeIterator struct {
			Event *AutonityMintedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityMintedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityMintedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityMintedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityMintedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityMintedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityMintedStake represents a MintedStake event raised by the Autonity contract.
		type AutonityMintedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
 		func (_Autonity *Autonity) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityMintedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityMintedStakeIterator{contract: _Autonity.contract, event: "MintedStake", logs: logs, sub: sub}, nil
 		}

		// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityMintedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityMintedStake)
						if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) ParseMintedStake(log types.Log) (*AutonityMintedStake, error) {
			event := new(AutonityMintedStake)
			if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the Autonity contract.
		type AutonityNewBondingRequestIterator struct {
			Event *AutonityNewBondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewBondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewBondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewBondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewBondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewBondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewBondingRequest represents a NewBondingRequest event raised by the Autonity contract.
		type AutonityNewBondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_Autonity *Autonity) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewBondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityNewBondingRequestIterator{contract: _Autonity.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewBondingRequest)
						if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) ParseNewBondingRequest(log types.Log) (*AutonityNewBondingRequest, error) {
			event := new(AutonityNewBondingRequest)
			if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Autonity contract.
		type AutonityNewEpochIterator struct {
			Event *AutonityNewEpoch // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewEpochIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewEpoch)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewEpoch)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewEpochIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewEpochIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewEpoch represents a NewEpoch event raised by the Autonity contract.
		type AutonityNewEpoch struct {
			Epoch *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
 		func (_Autonity *Autonity) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityNewEpochIterator, error) {



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return &AutonityNewEpochIterator{contract: _Autonity.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
 		}

		// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_Autonity *Autonity) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityNewEpoch) (event.Subscription, error) {



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewEpoch)
						if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_Autonity *Autonity) ParseNewEpoch(log types.Log) (*AutonityNewEpoch, error) {
			event := new(AutonityNewEpoch)
			if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the Autonity contract.
		type AutonityNewUnbondingRequestIterator struct {
			Event *AutonityNewUnbondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewUnbondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewUnbondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewUnbondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewUnbondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewUnbondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewUnbondingRequest represents a NewUnbondingRequest event raised by the Autonity contract.
		type AutonityNewUnbondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_Autonity *Autonity) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewUnbondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityNewUnbondingRequestIterator{contract: _Autonity.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewUnbondingRequest)
						if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) ParseNewUnbondingRequest(log types.Log) (*AutonityNewUnbondingRequest, error) {
			event := new(AutonityNewUnbondingRequest)
			if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the Autonity contract.
		type AutonityPausedValidatorIterator struct {
			Event *AutonityPausedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityPausedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityPausedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityPausedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityPausedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityPausedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityPausedValidator represents a PausedValidator event raised by the Autonity contract.
		type AutonityPausedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_Autonity *Autonity) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityPausedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityPausedValidatorIterator{contract: _Autonity.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityPausedValidator)
						if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) ParsePausedValidator(log types.Log) (*AutonityPausedValidator, error) {
			event := new(AutonityPausedValidator)
			if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the Autonity contract.
		type AutonityRegisteredValidatorIterator struct {
			Event *AutonityRegisteredValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityRegisteredValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityRegisteredValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityRegisteredValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityRegisteredValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityRegisteredValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityRegisteredValidator represents a RegisteredValidator event raised by the Autonity contract.
		type AutonityRegisteredValidator struct {
			Treasury common.Address;
			Addr common.Address;
			OracleAddress common.Address;
			Enode string;
			LiquidStateContract common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
 		func (_Autonity *Autonity) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityRegisteredValidatorIterator, error) {







			logs, sub, err := _Autonity.contract.FilterLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return &AutonityRegisteredValidatorIterator{contract: _Autonity.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
 		}

		// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_Autonity *Autonity) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityRegisteredValidator) (event.Subscription, error) {







			logs, sub, err := _Autonity.contract.WatchLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityRegisteredValidator)
						if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_Autonity *Autonity) ParseRegisteredValidator(log types.Log) (*AutonityRegisteredValidator, error) {
			event := new(AutonityRegisteredValidator)
			if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the Autonity contract.
		type AutonityRewardedIterator struct {
			Event *AutonityRewarded // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityRewardedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityRewarded)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityRewarded)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityRewardedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityRewardedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityRewarded represents a Rewarded event raised by the Autonity contract.
		type AutonityRewarded struct {
			Addr common.Address;
			AtnAmount *big.Int;
			NtnAmount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
 		func (_Autonity *Autonity) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityRewardedIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityRewardedIterator{contract: _Autonity.contract, event: "Rewarded", logs: logs, sub: sub}, nil
 		}

		// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_Autonity *Autonity) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityRewarded, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityRewarded)
						if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_Autonity *Autonity) ParseRewarded(log types.Log) (*AutonityRewarded, error) {
			event := new(AutonityRewarded)
			if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Autonity contract.
		type AutonityTransferIterator struct {
			Event *AutonityTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityTransfer represents a Transfer event raised by the Autonity contract.
		type AutonityTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_Autonity *Autonity) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &AutonityTransferIterator{contract: _Autonity.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_Autonity *Autonity) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityTransfer)
						if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_Autonity *Autonity) ParseTransfer(log types.Log) (*AutonityTransfer, error) {
			event := new(AutonityTransfer)
			if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUnlockingScheduleFailedIterator is returned from FilterUnlockingScheduleFailed and is used to iterate over the raw logs and unpacked data for UnlockingScheduleFailed events raised by the Autonity contract.
		type AutonityUnlockingScheduleFailedIterator struct {
			Event *AutonityUnlockingScheduleFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUnlockingScheduleFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUnlockingScheduleFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUnlockingScheduleFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUnlockingScheduleFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUnlockingScheduleFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUnlockingScheduleFailed represents a UnlockingScheduleFailed event raised by the Autonity contract.
		type AutonityUnlockingScheduleFailed struct {
			EpochTime *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterUnlockingScheduleFailed is a free log retrieval operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
		//
		// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
 		func (_Autonity *Autonity) FilterUnlockingScheduleFailed(opts *bind.FilterOpts) (*AutonityUnlockingScheduleFailedIterator, error) {



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "UnlockingScheduleFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityUnlockingScheduleFailedIterator{contract: _Autonity.contract, event: "UnlockingScheduleFailed", logs: logs, sub: sub}, nil
 		}

		// WatchUnlockingScheduleFailed is a free log subscription operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
		//
		// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
		func (_Autonity *Autonity) WatchUnlockingScheduleFailed(opts *bind.WatchOpts, sink chan<- *AutonityUnlockingScheduleFailed) (event.Subscription, error) {



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "UnlockingScheduleFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUnlockingScheduleFailed)
						if err := _Autonity.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseUnlockingScheduleFailed is a log parse operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
		//
		// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
		func (_Autonity *Autonity) ParseUnlockingScheduleFailed(log types.Log) (*AutonityUnlockingScheduleFailed, error) {
			event := new(AutonityUnlockingScheduleFailed)
			if err := _Autonity.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AutonityUpgradeTestMetaData contains all meta data concerning the AutonityUpgradeTest contract.
var AutonityUpgradeTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBeAppliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochTime\",\"type\":\"uint256\"}],\"name\":\"UnlockingScheduleFailed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atnTotalRedistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"nonStakableVestingContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriodToBeApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"getBondedLiquid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getCommitteeByHeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getReleasedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"getRewardsTillBonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"getRewardsTillUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquidLogic\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingID\",\"type\":\"uint256\"}],\"name\":\"isBondingRejected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractINonStakableVestingVault\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNonStakableVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquidLogic\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"}],\"name\":\"updateValidatorAndTransferSlashedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"e98712b2": "atnTotalRedistributed()",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"573963b8": "epochPeriodToBeApplied()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"d861b0e8": "finalizeInitialization()",
		"43645969": "getBlockPeriod()",
		"ff9831b6": "getBondedLiquid(uint256)",
		"ab8f6ffe": "getCommittee()",
		"070e720a": "getCommitteeByHeight(uint256)",
		"a8b2216e": "getCommitteeEnodes()",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"f1b47e4b": "getReleasedStake(uint256)",
		"c3d802f4": "getRewardsTillBonding(uint256)",
		"eb386749": "getRewardsTillUnbonding(uint256)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"1904bb2e": "getValidator(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"cc4269bb": "isBondingRejected(uint256)",
		"e294df7c": "isUnbondingReleased(uint256)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"1a0cf2e5": "setNonStakableVestingContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"35be16e0": "updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600c556000600d553480156200001b57600080fd5b50604080516000808252602082019092529062000051565b6200003d62000eda565b815260200190600190039081620000335790505b506040805161014081018252600e546080808301918252600f5460a08085019190915260105460c08086019190915260115460e080870191909152601254610100808801919091526013546001600160a01b03908116610120890152958752875190810188526014548616815260155486166020828101919091526016548716828a01526017548716606080840191909152601854881683880152601954881695830195909552601a54871693820193909352601b548616918101919091528186015285519283018652601c549093168252601d5482840152601e5482860152601f54828201529383015254918101829052906000036200016a57603280546001600160a01b031916331790556200016a828262000187565b5050602054600103620001815762000181620005cb565b62001305565b80518051600e55602080820151600f55604080830151601055606080840151601155608080850151601281905560a095860151601380546001600160a01b03199081166001600160a01b0393841617909155868901518051601480548416918516919091179055808801516015805484169185169190911790558087015160168054841691851691909117905580860151601780548416918516919091179055938401516018805483169184169190911790559683015160198054891691831691909117905560c0830151601a8054891691831691909117905560e090920151601b80548816918416919091179055838701518051601c805490981693169290921790955580840151601d81905581840151601e5590820151601f559085015190925560249190915560319190915551620002c29062000faa565b604051809103906000f080158015620002df573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b039290921691909117905560005b8251811015620005c657600083828151811062000324576200032462001057565b602002602001015160a001519050600084838151811062000349576200034962001057565b60200260200101516101a0018181525050600084838151811062000371576200037162001057565b602002602001015161018001906001600160a01b031690816001600160a01b0316815250506000848381518110620003ad57620003ad62001057565b602002602001015160a00181815250506000848381518110620003d457620003d462001057565b60209081029190910101516101c001526010548451859084908110620003fe57620003fe62001057565b60200260200101516080018181525050600084838151811062000425576200042562001057565b6020026020010151610260019060038111156200044657620004466200106d565b908160038111156200045c576200045c6200106d565b81525050600084838151811062000477576200047762001057565b6020026020010151610160018181525050620004b5848381518110620004a157620004a162001057565b60200260200101516200073d60201b60201c565b620004e2848381518110620004ce57620004ce62001057565b60200260200101516200087460201b60201c565b80602e6000868581518110620004fc57620004fc62001057565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600082825462000539919062001099565b92505081905550806030600082825462000554919062001099565b92505081905550620005ae84838151811062000574576200057462001057565b6020026020010151602001518286858151811062000596576200059662001057565b60200260200101516000015162000b2160201b60201c565b50508080620005bd90620010b5565b91505062000303565b505050565b6032546001600160a01b03163314620006375760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60448201526218dbdb60ea1b60648201526084015b60405180910390fd5b6002602f6000602160018154811062000654576200065462001057565b60009182526020808320909101546001600160a01b03168352820192909252604001812060050180549091906200068d908490620010e7565b925050819055506002602f60006021600181548110620006b157620006b162001057565b60009182526020808320909101546001600160a01b0316835282019290925260400181206008018054909190620006ea908490620010e7565b909155505060026020908155601c546001600160a01b03166000908152602e909152604081206103e89055620007239060019062000fb8565b620007316002600062000fb8565b6003805460ff19169055565b600062000754826060015162000d6c60201b60201c565b6001600160a01b03909116602084015290508015620007a45760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200062e565b6020808301516001600160a01b039081166000908152602f9092526040909120600101541615620008185760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c726561647920726567697374657265640000000060448201526064016200062e565b61271082608001511115620008705760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e207261746500000000000000000060448201526064016200062e565b5050565b6101808101516001600160a01b031662000973576033546001600160a01b0316620008ed5760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b60648201526084016200062e565b602154600090620008fe9062000dba565b905081602001518260000151836080015183603360009054906101000a90046001600160a01b0316604051620009349062000ffa565b62000944959493929190620010fe565b604051809103906000f08015801562000961573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602180546001808201835560009283527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b57090910180546001600160a01b03199081166001600160a01b0395861617909155845184168352602f9095526040918290208651815487169085161781559351908401805486169184169190911790558401516002830180549094169116179091556060820151829190600382019062000a2590826200120c565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820155610240820151601282019062000aef90826200120c565b5061026082015160138201805460ff1916600183600381111562000b175762000b176200106d565b0217905550505050565b600080831162000b805760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b60648201526084016200062e565b6001600160a01b0382166000908152602e602052604090205483111562000bea5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e6365000000000060448201526064016200062e565b6001600160a01b0382166000908152602e60205260408120805485929062000c14908490620012d8565b909155505060408051610100810182526001600160a01b0380851682528681166020808401918252838501888152436060860190815260006080870181815260a0880182815260c0890183815260e08a018481526006805486526004988990529b85208b518154908c166001600160a01b0319918216178255995160018201805491909c169a169990991790995594516002880155925160038701555193850193909355516005840155518286015591516007909101805491151560ff19909216919091179055825491929062000ceb83620010b5565b90915550506001600160a01b038581166000818152602f6020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160065462000d629190620012d8565b9695505050505050565b60008062000d7962001008565b60008060ff9050604083875160208901845afa62000d9657600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000de25750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000e12578062000df981620010b5565b915062000e0a9050600a83620010e7565b915062000de6565b6000816001600160401b0381111562000e2f5762000e2f62001041565b6040519080825280601f01601f19166020018201604052801562000e5a576020820181803683370190505b5090505b841562000ed25762000e72600183620012d8565b915062000e81600a86620012ee565b62000e8e90603062001099565b60f81b81838151811062000ea65762000ea662001057565b60200101906001600160f81b031916908160001a90535062000eca600a86620010e7565b945062000e5e565b949350505050565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000600381111562000fa55762000fa56200106d565b905290565b61173280620091ef83390190565b50805462000fc6906200117e565b6000825580601f1062000fd7575050565b601f01602090049060005260206000209081019062000ff7919062001026565b50565b6105c2806200a92183390190565b60405180604001604052806002906020820280368337509192915050565b5b808211156200103d576000815560010162001027565b5090565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620010af57620010af62001083565b92915050565b600060018201620010ca57620010ca62001083565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082620010f957620010f9620010d1565b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b828110156200114d5786810182015185820160c0015281016200112f565b5050600060c0828501015260c0601f19601f83011684010191505062000d6260808301846001600160a01b03169052565b600181811c908216806200119357607f821691505b602082108103620011b457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005c657600081815260208120601f850160051c81016020861015620011e35750805b601f850160051c820191505b818110156200120457828155600101620011ef565b505050505050565b81516001600160401b0381111562001228576200122862001041565b62001240816200123984546200117e565b84620011ba565b602080601f8311600181146200127857600084156200125f5750858301515b600019600386901b1c1916600185901b17855562001204565b600085815260208120601f198616915b82811015620012a95788860151825594840194600190910190840162001288565b5085821015620012c85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115620010af57620010af62001083565b600082620013005762001300620010d1565b500690565b617eda80620013156000396000f3fe6080604052600436106200049b5760003560e01c806396b477cb1162000263578063cb696f541162000147578063dfb1a4d211620000bf578063f03b959d1162000081578063f03b959d14620010ea578063f1b47e4b146200110f578063f1d592a71462001143578063f7866ee31462001168578063ff9831b6146200118857005b8063dfb1a4d21462001027578063e294df7c146200103f578063e7f43c681462001076578063e98712b21462001096578063eb38674914620010ae57005b8063d372c07e1162000109578063d372c07e1462000f59578063d5f394881462000f7e578063d861b0e81462000fa0578063d886f8a21462000fb8578063dd62ed3e1462000fdd57005b8063cb696f541462000e9b578063cc4269bb1462000ec0578063ceaad4551462000ef7578063cf9c57191462000f1c578063cfd19fb91462000f3457005b8063ab8f6ffe11620001db578063b46e5520116200019d578063b46e55201462000dcc578063b66b3e791462000df1578063b7ab4db51462000e19578063c3d802f41462000e31578063c9d97af41462000e8357005b8063ab8f6ffe1462000d2b578063ae1da0b51462000d43578063ae1f5fa01462000d5b578063b2ea9adb1462000d82578063b3ecbadd1462000da757005b8063a515366a1162000225578063a515366a1462000c6b578063a5d059ca1462000c90578063a8b2216e1462000cb5578063a9059cbb1462000cdc578063a9fd1a8f1462000d0157005b806396b477cb1462000bcf57806396f18a321462000bf45780639ac310741462000c165780639c98e4711462000c2e5780639dc29fac1462000c4657005b806343645969116200038b578063784304b51162000303578063852c484911620002c5578063852c48491462000b27578063872cf0591462000b4c57806389c614b81462000b645780638bac7dad1462000b7c57806395d89b411462000ba157005b8063784304b514620008cf57806379502c5514620008f4578063819b64631462000ab7578063833b1fce1462000ace57806384467fdb1462000b0257005b80636b5f444c116200034d5780636b5f444c146200080b5780636fd2c80b146200083057806370a082311462000847578063731b3a03146200088157806377e741c714620008aa57005b8063436459691462000767578063496ccd9b146200077e5780634bb278f314620007a3578063520fdbbc14620007ce578063573963b814620007f357005b806318160ddd116200041f57806329070c6d11620003e157806329070c6d14620006d05780632f2c3f2e14620006e7578063313ce56714620006ff57806335be16e0146200071d57806340c10f19146200074257005b806318160ddd14620006125780631904bb2e14620006295780631a0cf2e5146200065d57806323b872dd146200068257806325ce1bb914620006a757005b80630d8e6e2c11620004695780630d8e6e2c1462000578578063112206331462000599578063114eaf5514620005b05780631250a28d14620005d55780631604e41614620005fa57005b806306fdde0314620004a5578063070e720a14620004e9578063095ea7b3146200051d5780630ae65e7a146200055357005b36620004a357005b005b348015620004b257600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b604051620004e091906200689d565b60405180910390f35b348015620004f657600080fd5b506200050e62000508366004620068b2565b620011bd565b604051620004e0919062006951565b3480156200052a57600080fd5b50620005426200053c3660046200697c565b6200147e565b6040519015158152602001620004e0565b3480156200056057600080fd5b50620004a362000572366004620069ab565b62001497565b3480156200058557600080fd5b506020545b604051908152602001620004e0565b348015620005a657600080fd5b50600f546200058a565b348015620005bd57600080fd5b50620004a3620005cf366004620068b2565b62001535565b348015620005e257600080fd5b50620004a3620005f4366004620069ab565b62001567565b3480156200060757600080fd5b506200058a602b5481565b3480156200061f57600080fd5b506030546200058a565b3480156200063657600080fd5b506200064e62000648366004620069ab565b620015b6565b604051620004e0919062006a04565b3480156200066a57600080fd5b50620004a36200067c366004620069ab565b62001864565b3480156200068f57600080fd5b5062000542620006a136600462006b7d565b620018b3565b348015620006b457600080fd5b506022546000908152602860205260409020600301546200058a565b348015620006dd57600080fd5b50600e546200058a565b348015620006f457600080fd5b506200058a61271081565b3480156200070c57600080fd5b5060405160128152602001620004e0565b3480156200072a57600080fd5b50620004a36200073c36600462006bc3565b6200195d565b3480156200074f57600080fd5b50620004a3620007613660046200697c565b62001b39565b3480156200077457600080fd5b50601e546200058a565b3480156200078b57600080fd5b50620004a36200079d366004620069ab565b62001b76565b348015620007b057600080fd5b50620007bb62001c80565b604051620004e095949392919062006c02565b348015620007db57600080fd5b50620004a3620007ed366004620069ab565b6200241e565b3480156200080057600080fd5b506200058a60245481565b3480156200081857600080fd5b50620004a36200082a366004620068b2565b62002619565b3480156200083d57600080fd5b506011546200058a565b3480156200085457600080fd5b506200058a62000866366004620069ab565b6001600160a01b03166000908152602e602052604090205490565b3480156200088e57600080fd5b506022546000908152602860205260409020600201546200058a565b348015620008b757600080fd5b50620004a3620008c9366004620068b2565b6200269f565b348015620008dc57600080fd5b50620004a3620008ee36600462006ce6565b620026d1565b3480156200090157600080fd5b506040805160c08082018352600e548252600f54602080840191909152601054838501526011546060808501919091526012546080808601919091526013546001600160a01b0390811660a080880191909152875161010081018952601454831681526015548316818701526016548316818a0152601754831681860152601854831681850152601954831691810191909152601a54821695810195909552601b54811660e086015286519182018752601c54168152601d5481840152601e5495810195909552601f549085015254620009d9939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0988901516001600160a01b039081168a8601528851811660c080870191909152848a0151821660e0808801919091528a8801518316610100880152848b01518316610120880152928a015182166101408701529989015181166101608601529888015189166101808501529096015187166101a083015284519096166101c0820152948301516101e086015282015161020085015291015161022083015261024082015261026001620004e0565b34801562000ac457600080fd5b50601f546200058a565b34801562000adb57600080fd5b506015546001600160a01b03165b6040516001600160a01b039091168152602001620004e0565b34801562000b0f57600080fd5b50620004a362000b2136600462006d3c565b6200287c565b34801562000b3457600080fd5b50620004a362000b463660046200697c565b620029ab565b34801562000b5957600080fd5b50620004a362002b3c565b34801562000b7157600080fd5b506200058a60265481565b34801562000b8957600080fd5b50620004a362000b9b366004620068b2565b62002b78565b34801562000bae57600080fd5b50604080518082019091526003815262272a2760e91b6020820152620004d1565b34801562000bdc57600080fd5b506200058a62000bee366004620068b2565b62002bfc565b34801562000c0157600080fd5b5060335462000ae9906001600160a01b031681565b34801562000c2357600080fd5b506200058a60315481565b34801562000c3b57600080fd5b506200058a60275481565b34801562000c5357600080fd5b50620004a362000c653660046200697c565b62002c81565b34801562000c7857600080fd5b506200058a62000c8a3660046200697c565b62002d9e565b34801562000c9d57600080fd5b506200058a62000caf3660046200697c565b62002e85565b34801562000cc257600080fd5b5062000ccd62002f28565b604051620004e0919062006de5565b34801562000ce957600080fd5b506200054262000cfb3660046200697c565b6200300b565b34801562000d0e57600080fd5b5062000d1962003063565b604051620004e0949392919062006e3e565b34801562000d3857600080fd5b506200050e620031c7565b34801562000d5057600080fd5b506200058a60255481565b34801562000d6857600080fd5b5062000d73620032d9565b604051620004e0919062006e6f565b34801562000d8f57600080fd5b50620004a362000da136600462006ebe565b6200351f565b34801562000db457600080fd5b50620004a362000dc6366004620069ab565b62003566565b34801562000dd957600080fd5b50620004a362000deb366004620069ab565b620035b5565b34801562000dfe57600080fd5b5062000e0962003806565b604051620004e092919062006f1f565b34801562000e2657600080fd5b5062000d736200393d565b34801562000e3e57600080fd5b5062000e6d62000e50366004620068b2565b600090815260046020526040902060058101546006909101549091565b60408051928352602083019190915201620004e0565b34801562000e9057600080fd5b506200058a60225481565b34801562000ea857600080fd5b50620004a362000eba366004620068b2565b620039a1565b34801562000ecd57600080fd5b506200054262000edf366004620068b2565b60009081526004602052604090206007015460ff1690565b34801562000f0457600080fd5b50620004a362000f16366004620069ab565b62003a09565b34801562000f2957600080fd5b50620004a362003a58565b34801562000f4157600080fd5b50620004a362000f53366004620069ab565b62003aad565b34801562000f6657600080fd5b50620004a362000f78366004620069ab565b62003afc565b34801562000f8b57600080fd5b5060325462000ae9906001600160a01b031681565b34801562000fad57600080fd5b50620004a362003b4b565b34801562000fc557600080fd5b50620004a362000fd7366004620069ab565b62003d01565b34801562000fea57600080fd5b506200058a62000ffc36600462006f51565b6001600160a01b039182166000908152602d6020908152604080832093909416825291909152205490565b3480156200103457600080fd5b506200058a62003d50565b3480156200104c57600080fd5b50620005426200105e366004620068b2565b60009081526007602052604090206008015460ff1690565b3480156200108357600080fd5b50601c546001600160a01b031662000ae9565b348015620010a357600080fd5b506200058a602a5481565b348015620010bb57600080fd5b5062000e6d620010cd366004620068b2565b600090815260076020526040902060058101546006909101549091565b348015620010f757600080fd5b50620004a362001109366004620069ab565b62003d6d565b3480156200111c57600080fd5b506200058a6200112e366004620068b2565b60009081526007602052604090206004015490565b3480156200115057600080fd5b50620004a362001162366004620069ab565b62003dbc565b3480156200117557600080fd5b506013546001600160a01b031662000ae9565b3480156200119557600080fd5b506200058a620011a7366004620068b2565b6000908152600460208190526040909120015490565b606043821115620012265760405162461bcd60e51b815260206004820152602860248201527f63616e6e6f742067657420636f6d6d697474656520666f72206120667574757260448201526719481a195a59da1d60c21b60648201526084015b60405180910390fd5b60255482116200136357600082815260236020908152604080832054808452602883528184208054835181860281018601909452808452919493909190849084015b8282101562001356576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620012be9062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620012ec9062006f8f565b80156200133d5780601f1062001311576101008083540402835291602001916200133d565b820191906000526020600020905b8154815290600101906020018083116200131f57829003601f168201915b5050505050815250508152602001906001019062001268565b5092979650505050505050565b6029805480602002602001604051908101604052809291908181526020016000905b8282101562001473576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620013db9062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620014099062006f8f565b80156200145a5780601f106200142e576101008083540402835291602001916200145a565b820191906000526020600020905b8154815290600101906020018083116200143c57829003601f168201915b5050505050815250508152602001906001019062001385565b505050509050919050565b60006200148d33848462003e75565b5060015b92915050565b620014a162003f9e565b6001600160a01b038082166000818152602f602052604090206001015490911614620014e15760405162461bcd60e51b81526004016200121d9062006fcb565b6001600160a01b038181166000908152602f60205260409020541633146200151d5760405162461bcd60e51b81526004016200121d9062007002565b620015288162003fed565b6200153260008055565b50565b601c546001600160a01b03163314620015625760405162461bcd60e51b81526004016200121d906200704e565b601155565b601c546001600160a01b03163314620015945760405162461bcd60e51b81526004016200121d906200704e565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b620015c062006676565b6001600160a01b038083166000818152602f602052604090206001015490911614620016005760405162461bcd60e51b81526004016200121d9062007085565b6001600160a01b038083166000908152602f60209081526040918290208251610280810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620016639062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620016919062006f8f565b8015620016e25780601f10620016b657610100808354040283529160200191620016e2565b820191906000526020600020905b815481529060010190602001808311620016c457829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a082015260118201546101c08201526012820180546101e0909201916200179e9062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620017cc9062006f8f565b80156200181d5780601f10620017f1576101008083540402835291602001916200181d565b820191906000526020600020905b815481529060010190602001808311620017ff57829003601f168201915b5050509183525050601382015460209091019060ff166003811115620018475762001847620069cb565b60038111156200185b576200185b620069cb565b90525092915050565b601c546001600160a01b03163314620018915760405162461bcd60e51b81526004016200121d906200704e565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000620018c2848484620040dd565b6001600160a01b0384166000908152602d60209081526040808320338452909152812054620018f3908490620070d2565b90506200190285338362003e75565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516200194891815260200190565b60405180910390a360019150505b9392505050565b6014546001600160a01b03163314620019c55760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f742074686520736c617368696e6720636f6e74726044820152621858dd60ea1b60648201526084016200121d565b6000610120820135602f82620019e26040860160208701620069ab565b6001600160a01b03166001600160a01b031681526020019081526020016000206009015462001a129190620070d2565b60c0830135602f600062001a2d6040870160208801620069ab565b6001600160a01b03166001600160a01b031681526020019081526020016000206006015462001a5d9190620070d2565b60a0840135602f600062001a786040880160208901620069ab565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015462001aa89190620070d2565b62001ab49190620070e8565b62001ac09190620070e8565b6013546001600160a01b03166000908152602e602052604081208054929350839290919062001af1908490620070e8565b90915550829050602f600062001b0e6040840160208501620069ab565b6001600160a01b03168152602081019190915260400160002062001b338282620072ea565b50505050565b601c546001600160a01b0316331462001b665760405162461bcd60e51b81526004016200121d906200704e565b62001b7282826200420f565b5050565b601c546001600160a01b0316331462001ba35760405162461bcd60e51b81526004016200121d906200704e565b601580546001600160a01b0319166001600160a01b03838116918217909255601654604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b15801562001c0257600080fd5b505af115801562001c17573d6000803e3d6000fd5b5050601854604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b15801562001c6457600080fd5b505af115801562001c79573d6000803e3d6000fd5b5050505050565b6032546000908190606090829081906001600160a01b0316331462001cb95760405162461bcd60e51b81526004016200121d9062007440565b62001cc362003f9e565b4360258190556022546000828152602360209081526040808320849055928252602890528190206003015460145491516306c9789b60e41b815292101560048301819052916001600160a01b0390911690636c9789b090602401600060405180830381600087803b15801562001d3857600080fd5b505af115801562001d4d573d6000803e3d6000fd5b505050508015620021d657601a546030546031546026546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562001dc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001de6919062007483565b905080603154101562001df857506031545b62001e0430826200420f565b806031600082825462001e189190620070d2565b9091555050601b546040805163f968f49360e01b815281516001600160a01b039093169263f968f4939260048084019391929182900301816000875af192505050801562001e85575060408051601f3d908101601f1916820190925262001e82918101906200749d565b60015b62001ec3576040514281527ff1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c99060200160405180910390a162001ef6565b60135462001edb906001600160a01b0316826200420f565b601b5462001ef3906001600160a01b0316836200420f565b50505b62001f02478262004295565b62001f0c620047dc565b62001f16620048cc565b600062001f22620032d9565b60155460405163422811f960e11b81529192506001600160a01b03169063845023f29062001f5590849060040162006e6f565b600060405180830381600087803b15801562001f7057600080fd5b505af115801562001f85573d6000803e3d6000fd5b5050602254600090815260286020526040902060020154602454601d54919350148015915062001fb6575060245415155b15620020235760248054601d819055601454604051631ad7d11360e21b815260048101929092526001600160a01b031691636b5f444c9101600060405180830381600087803b1580156200200957600080fd5b505af11580156200201e573d6000803e3d6000fd5b505050505b601d54600090620020359043620070e8565b905042602681905550600160226000828254620020539190620070e8565b9091555050602254604080516029805460a0602082028401810190945260808301818152620021959594849391929060009085015b8282101562002176576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620020de9062006f8f565b80601f01602080910402602001604051908101604052809291908181526020018280546200210c9062006f8f565b80156200215d5780601f1062002131576101008083540402835291602001916200215d565b820191906000526020600020905b8154815290600101906020018083116200213f57829003601f168201915b5050505050815250508152602001906001019062002088565b50505050815260200185815260200143815260200184815250620049e7565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335602254604051620021c991815260200190565b60405180910390a1505050505b60155460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af115801562002222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022489190620074c2565b90508015620022c4576016546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af1925050508015620022bc575060408051601f3d908101601f19168201909252620022b991810190620074c2565b60015b15620022c457505b60038054602254600090815260286020908152604080832060018101549501546029805483518186028101860190945280845260ff909616968996919590949293928692919084015b82821015620023fb576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620023639062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620023919062006f8f565b8015620023e25780601f10620023b657610100808354040283529160200191620023e2565b820191906000526020600020905b815481529060010190602001808311620023c457829003601f168201915b505050505081525050815260200190600101906200230d565b5050505092509650965096509650965050506200241760008055565b9091929394565b601c546001600160a01b031633146200244b5760405162461bcd60e51b81526004016200121d906200704e565b601c80546001600160a01b0319166001600160a01b0383811691821790925560155460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b158015620024aa57600080fd5b505af1158015620024bf573d6000803e3d6000fd5b505060165460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200250b57600080fd5b505af115801562002520573d6000803e3d6000fd5b505060175460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200256c57600080fd5b505af115801562002581573d6000803e3d6000fd5b505060185460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b158015620025cd57600080fd5b505af1158015620025e2573d6000803e3d6000fd5b505060195460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb915060240162001c49565b601c546001600160a01b03163314620026465760405162461bcd60e51b81526004016200121d906200704e565b6024819055602254600090815260286020908152604091829020600301548251848152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7910160405180910390a15050565b601c546001600160a01b03163314620026cc5760405162461bcd60e51b81526004016200121d906200704e565b600e55565b6001600160a01b038083166000818152602f60205260409020600181015490921614620027125760405162461bcd60e51b81526004016200121d9062007085565b80546001600160a01b031633146200273e5760405162461bcd60e51b81526004016200121d90620074e6565b620027498362004ab7565b15620027a35760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b60648201526084016200121d565b600080620027b18462004b28565b925090508115620027f35760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200121d565b60018301546001600160a01b03828116911614620028645760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b60648201526084016200121d565b6003830162002874858262007535565b505050505050565b6000604051806102800160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b03168152602001868152602001600e6000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001438152602001600081526020016000815260200160008152602001848152602001600060038111156200294b576200294b620069cb565b905290506200295b818362004b6d565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200299c92339289918b91620075fe565b60405180910390a15050505050565b6001600160a01b038083166000818152602f602052604090206001015490911614620029eb5760405162461bcd60e51b81526004016200121d9062006fcb565b6001600160a01b038281166000908152602f602052604090205416331462002a275760405162461bcd60e51b81526004016200121d9062007002565b61271081111562002a7b5760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e20726174650060448201526064016200121d565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600d80546000908152600b909352958220855181546001600160a01b03191695169490941784559151600180850191909155915160029093019290925583549293909290919062002af4908490620070e8565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b601c546001600160a01b0316331462002b695760405162461bcd60e51b81526004016200121d906200704e565b6003805460ff19166001179055565b601c546001600160a01b0316331462002ba55760405162461bcd60e51b81526004016200121d906200704e565b6000811162002bf75760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e277420626520300000000000000060448201526064016200121d565b601f55565b60004382111562002c5c5760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b60648201526084016200121d565b602554821162002c79575060009081526023602052604090205490565b505060225490565b601c546001600160a01b0316331462002cae5760405162461bcd60e51b81526004016200121d906200704e565b6001600160a01b0382166000908152602e602052604090205481111562002d115760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b60448201526064016200121d565b6001600160a01b0382166000908152602e60205260408120805483929062002d3b908490620070d2565b92505081905550806030600082825462002d569190620070d2565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062002daa62003f9e565b6001600160a01b038084166000818152602f60205260409020600101549091161462002dea5760405162461bcd60e51b81526004016200121d9062007085565b6001600160a01b0383166000908152602f602052604081206013015460ff16600381111562002e1d5762002e1d620069cb565b1462002e6c5760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f20626520616374697665000000000060448201526064016200121d565b62002e7983833362004fc7565b90506200149160008055565b600062002e9162003f9e565b6001600160a01b038084166000818152602f60205260409020600101549091161462002ed15760405162461bcd60e51b81526004016200121d9062007085565b6000821162002f1b5760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b60448201526064016200121d565b62002e7983833362005212565b6060602c805480602002602001604051908101604052809291908181526020016000905b828210156200300257838290600052602060002001805462002f6e9062006f8f565b80601f016020809104026020016040519081016040528092919081815260200182805462002f9c9062006f8f565b801562002fed5780601f1062002fc15761010080835404028352916020019162002fed565b820191906000526020600020905b81548152906001019060200180831162002fcf57829003601f168201915b50505050508152602001906001019062002f4c565b50505050905090565b60006200301a338484620040dd565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6060600080600080602860006022548152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b8282101562003191576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620030f99062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620031279062006f8f565b8015620031785780601f106200314c5761010080835404028352916020019162003178565b820191906000526020600020905b8154815290600101906020018083116200315a57829003601f168201915b50505050508152505081526020019060010190620030a3565b50506022546000908152602860205260409020600181015460028201546003909201549499509750955091935050505090919293565b60606029805480602002602001604051908101604052809291908181526020016000905b8282101562003002576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620032419062006f8f565b80601f01602080910402602001604051908101604052809291908181526020018280546200326f9062006f8f565b8015620032c05780601f106200329457610100808354040283529160200191620032c0565b820191906000526020600020905b815481529060010190602001808311620032a257829003601f168201915b50505050508152505081526020019060010190620031eb565b6032546060906001600160a01b03163314620033095760405162461bcd60e51b81526004016200121d9062007440565b6021546200335a5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f7273000000000000000060448201526064016200121d565b6200336462006746565b601f54608082015260218152602f6020820152602960408201526027606082015262003390816200561c565b6200339e602c600062006764565b60295480620033e55760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b60448201526064016200121d565b60008167ffffffffffffffff81111562003403576200340362006c3b565b6040519080825280602002602001820160405280156200342d578160200160208202803683370190505b50905060005b8281101562003517576000602f60006029848154811062003458576200345862007647565b60009182526020808320600392830201546001600160a01b0316845283019390935260409091018120602c8054600181018255925292507f7416c943b4a09859521022fd2e90eac0dd9026dad28fa317782a135f28a860910190620034c0908301826200765d565b50600281015483516001600160a01b0390911690849084908110620034e957620034e962007647565b6001600160a01b039092166020928302919091019091015250806200350e816200773b565b91505062003433565b509250505090565b601c546001600160a01b031633146200354c5760405162461bcd60e51b81526004016200121d906200704e565b620035596001836200563c565b62001b726002826200563c565b601c546001600160a01b03163314620035935760405162461bcd60e51b81526004016200121d906200704e565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b620035bf62003f9e565b6001600160a01b038082166000818152602f602052604090206001015490911614620035ff5760405162461bcd60e51b81526004016200121d9062006fcb565b6001600160a01b038082166000908152602f60205260409020805490911633146200363e5760405162461bcd60e51b81526004016200121d90620074e6565b6000601382015460ff1660038111156200365c576200365c620069cb565b03620036ab5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c726561647920616374697665000000000000000060448201526064016200121d565b6002601382015460ff166003811115620036c957620036c9620069cb565b148015620036da5750438160100154115b15620037295760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c00000000000000000060448201526064016200121d565b6003601382015460ff166003811115620037475762003747620069cb565b03620037965760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c790000000060448201526064016200121d565b60138101805460ff1916905580546022546000908152602860209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200153260008055565b606080600160028180546200381b9062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620038499062006f8f565b80156200389a5780601f106200386e576101008083540402835291602001916200389a565b820191906000526020600020905b8154815290600101906020018083116200387c57829003601f168201915b50505050509150808054620038af9062006f8f565b80601f0160208091040260200160405190810160405280929190818152602001828054620038dd9062006f8f565b80156200392e5780601f1062003902576101008083540402835291602001916200392e565b820191906000526020600020905b8154815290600101906020018083116200391057829003601f168201915b50505050509050915091509091565b606060218054806020026020016040519081016040528092919081815260200182805480156200399757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003978575b5050505050905090565b601c546001600160a01b03163314620039ce5760405162461bcd60e51b81526004016200121d906200704e565b600f8190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b601c546001600160a01b0316331462003a365760405162461bcd60e51b81526004016200121d906200704e565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331462003a855760405162461bcd60e51b81526004016200121d906200704e565b62003a936001600062006784565b62003aa16002600062006784565b6003805460ff19169055565b601c546001600160a01b0316331462003ada5760405162461bcd60e51b81526004016200121d906200704e565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331462003b295760405162461bcd60e51b81526004016200121d906200704e565b601680546001600160a01b0319166001600160a01b0392909216919091179055565b6032546001600160a01b0316331462003b785760405162461bcd60e51b81526004016200121d9062007440565b62003b8262003f9e565b62003b8c620047dc565b62003b96620032d9565b5042602655436025819055600090815260236020908152604080832083905560225481516029805460a0958102830186019094526080820184815262003cf596939592948594919390919085015b8282101562003cd2576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003c3a9062006f8f565b80601f016020809104026020016040519081016040528092919081815260200182805462003c689062006f8f565b801562003cb95780601f1062003c8d5761010080835404028352916020019162003cb9565b820191906000526020600020905b81548152906001019060200180831162003c9b57829003601f168201915b5050505050815250508152602001906001019062003be4565b5050509082525060006020820152436040820152601d54606090910152620049e7565b62003cff60008055565b565b601c546001600160a01b0316331462003d2e5760405162461bcd60e51b81526004016200121d906200704e565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b602454601d546000911462003d66575060245490565b50601d5490565b601c546001600160a01b0316331462003d9a5760405162461bcd60e51b81526004016200121d906200704e565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601c546001600160a01b0316331462003de95760405162461bcd60e51b81526004016200121d906200704e565b6001600160a01b03811662003e535760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b60648201526084016200121d565b603380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831662003ed95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016200121d565b6001600160a01b03821662003f3c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016200121d565b6001600160a01b038381166000818152602d602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000541562003fe65760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b60448201526064016200121d565b6001600055565b6001600160a01b0381166000908152602f6020526040812090601382015460ff166003811115620040225762004022620069cb565b14620040715760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d75737420626520616374697665000000000000000060448201526064016200121d565b60138101805460ff1916600117905580546022546000908152602860209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b0383166000908152602e6020526040902054811115620041405760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b60448201526064016200121d565b6001600160a01b0383166000908152602e6020526040812080548392906200416a908490620070d2565b925050819055508060306000828254620041859190620070e8565b9091555062004198905081600262007757565b6001600160a01b0383166000908152602e602052604081208054909190620041c2908490620070e8565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162003f9191815260200190565b6001600160a01b0382166000908152602e60205260408120805483929062004239908490620070e8565b925050819055508060306000828254620042549190620070e8565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162002d92565b81158015620042a2575080155b15620042ac575050565b600e54600090670de0b6b3a764000090620042c990859062007757565b620042d5919062007787565b9050801562004353576013546040516000916001600160a01b03169083908381818185875af1925050503d80600081146200432d576040519150601f19603f3d011682016040523d82523d6000602084013e62004332565b606091505b509091505080151560010362004351576200434e8285620070d2565b93505b505b82602a6000828254620043679190620070e8565b90915550600090505b60295481101562001b33576000602f60006029848154811062004397576200439762007647565b600091825260208083206003909202909101546001600160a01b03168352820192909252604001812060275460298054929450909188919086908110620043e257620043e262007647565b90600052602060002090600302016001015462004400919062007757565b6200440c919062007787565b9050600060275486602986815481106200442a576200442a62007647565b90600052602060002090600302016001015462004448919062007757565b62004454919062007787565b90506000821180620044665750600081115b15620047c3576002601384015460ff1660038111156200448a576200448a620069cb565b1480620044b257506003601384015460ff166003811115620044b057620044b0620069cb565b145b156200457c57601454620044d29030906001600160a01b031683620040dd565b601454602980546001600160a01b039092169163a8031a1d9185918890811062004500576200450062007647565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b1580156200455957600080fd5b505af11580156200456e573d6000803e3d6000fd5b5050505050505050620047c7565b6000836005015483856008015462004595919062007757565b620045a1919062007787565b905080156200466357835460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d806000811462004601576040519150601f19603f3d011682016040523d82523d6000602084013e62004606565b606091505b509092509050811515600003620046605785546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162004657916001600160a01b039091169084906200779e565b60405180910390a15b50505b600084600501548386600801546200467c919062007757565b62004688919062007787565b90508015620046aa578454620046aa9030906001600160a01b031683620040dd565b6000620046b88285620070d2565b90506000620046c88487620070d2565b90506000811180620046da5750600082115b156200477457600c870154620046fc9030906001600160a01b031684620040dd565b600c87015460405163a0ce552d60e01b8152600481018490526001600160a01b039091169063a0ce552d908390602401604080518083038185885af11580156200474a573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200477191906200749d565b50505b600187015460408051888152602081018890526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a2505050505b5050505b80620047d3816200773b565b91505062004370565b6005545b60065481101562004809576200480381620047fb816200773b565b92506200578f565b620047e0565b50600654600555600954600854036200481e57565b600a545b6009548110156200484b5762004845816200483d816200773b565b925062005adc565b62004822565b50600954600a55600854805b600954811015620048c6576011546000828152600760208190526040909120015443916200488591620070e8565b11620048ab57620048968162005e5a565b620048a3600183620070e8565b9150620048b1565b620048c6565b80620048bd816200773b565b91505062004857565b50600855565b600d54600c54101562003cff57600c546000908152600b6020526040902060115460018201544391620048ff91620070e8565b1115620049095750565b80546001600160a01b039081166000908152602f60205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd926200496192910190815260200190565b600060405180830381600087803b1580156200497c57600080fd5b505af115801562004991573d6000803e3d6000fd5b5050600c80546000908152600b6020526040812080546001600160a01b031916815560018082018390556002909101829055825490945091925090620049d9908490620070e8565b90915550620048cc92505050565b6000828152602860209081526040808320918401516001830155830151600282015560608301516003820155905b82515181101562001b3357825180518391908390811062004a3a5762004a3a62007647565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b0390921691909117815591810151928201929092556040820151600282019062004a9e908262007535565b505050808062004aae906200773b565b91505062004a15565b6000805b60295481101562004b1f576029818154811062004adc5762004adc62007647565b60009182526020909120600390910201546001600160a01b039081169084160362004b0a5750600192915050565b8062004b16816200773b565b91505062004abb565b50600092915050565b60008062004b35620067c3565b60008060ff9050604083875160208901845afa62004b5257600080fd5b50508051602090910151600160601b90910494909350915050565b60e281511462004bb75760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064016200121d565b6030826102400151511462004c0f5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e6774680000000060448201526064016200121d565b62004c1a8262005fbc565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262004c7d920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262004c9d8351620060e9565b8360405160200162004cb293929190620077cf565b60408051601f198184030181528282528051602091820120600280855260608501845290945060009392909183019080368337019050509050600080808062004d0a898262004d046041600262007757565b6200620a565b9050600062004d298a62004d216041600262007757565b60606200620a565b905060205b825181101562004dfa5762004d44838262006323565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa15801562004da0573d6000803e3d6000fd5b5050604051601f19015190508762004dba60418462007787565b8151811062004dcd5762004dcd62007647565b6001600160a01b039092166020928302919091019091015262004df2604182620070e8565b905062004d2e565b508a602001516001600160a01b03168660008151811062004e1f5762004e1f62007647565b60200260200101516001600160a01b03161462004e915760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b60648201526084016200121d565b8a604001516001600160a01b03168660018151811062004eb55762004eb562007647565b60200260200101516001600160a01b03161462004f295760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b60648201526084016200121d565b600162004f418c6102400151838e600001516200635a565b1462004faf5760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b60648201526084016200121d565b62004fba8b620063c9565b5050505050505050505050565b6000808311620050265760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b60648201526084016200121d565b6001600160a01b0382166000908152602e6020526040902054831115620050905760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e6365000000000060448201526064016200121d565b6001600160a01b0382166000908152602e602052604081208054859290620050ba908490620070d2565b909155505060408051610100810182526001600160a01b0380851682528681166020808401918252838501888152436060860190815260006080870181815260a0880182815260c0890183815260e08a018481526006805486526004988990529b85208b518154908c166001600160a01b0319918216178255995160018201805491909c169a169990991790995594516002880155925160038701555193850193909355516005840155518286015591516007909101805491151560ff19909216919091179055825491929062005191836200773b565b90915550506001600160a01b038581166000818152602f6020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a36001600654620052089190620070d2565b9695505050505050565b6001600160a01b038084166000908152602f60205260408120805491929091848216911614806200538a57600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa1580156200528b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620052b1919062007483565b905085811015620053195760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b60648201526084016200121d565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b1580156200536a57600080fd5b505af11580156200537f573d6000803e3d6000fd5b50505050506200541d565b8482600b01548360080154620053a19190620070d2565b1015620054015760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b60648201526084016200121d565b8482600b016000828254620054179190620070e8565b90915550505b604051806101600160405280856001600160a01b03168152602001876001600160a01b031681526020018681526020016000815260200160008152602001600081526020016000815260200143815260200160001515815260200160001515815260200182151581525060076000600954815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff0219169083151502179055506101408201518160080160026101000a81548160ff02191690831515021790555090505060096000815480929190620055ad906200773b565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc8388604051620056039291909115158252602082015260400190565b60405180910390a36001600954620052089190620070d2565b60fa60a06000808285855af462005637573d6000803e3d6000fd5b505050565b815460026001808316156101000203821604825180820160208110602084100160028114620056eb576001811462005711578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b80821015620056d45781518455600184019350602082019150620056b5565b815191036101000a90819004029091555062005786565b60028302826020036101000a846020036101000a60208901510402018501875562005786565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101562005774578151845560018401935060208201915062005755565b815191036101000a9081900402909155505b50505050505050565b600081815260046020908152604080832060018101546001600160a01b03168452602f90925282209091601382015460ff166003811115620057d557620057d5620069cb565b14620058f757600282015482546001600160a01b03166000908152602e6020526040812080549091906200580b908490620070e8565b9091555050600c810154825460405163162bd9cb60e21b81526001600160a01b0391821660048201529116906358af672c906024016040805180830381865afa1580156200585d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200588391906200749d565b6006840155600583015560078201805460ff19166001908117909155825490830154600284015460138401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f8783429262003f9192909160ff9091169062007818565b805482546001600160a01b0390811691161462005a175760008082600801548360050154620059279190620070d2565b9050806000036200593f578360020154915062005965565b80846002015484600d015462005956919062007757565b62005962919062007787565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b158015620059b757600080fd5b505af1158015620059cc573d6000803e3d6000fd5b505050508183600d016000828254620059e69190620070e8565b9091555050600284015460058401805460009062005a06908490620070e8565b909155505050600483015562005a57565b816002015481600801600082825462005a319190620070e8565b9091555050600282015460058201805460009062005a51908490620070e8565b90915550505b600c810154825460405163162bd9cb60e21b81526001600160a01b0391821660048201529116906358af672c906024016040805180830381865afa15801562005aa4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005aca91906200749d565b60068401556005909201919091555050565b600081815260076020908152604080832060018101546001600160a01b03168452602f909252822060088201549192909162010000900460ff1662005cd1576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b15801562005b7257600080fd5b505af115801562005b87573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801562005bdd57600080fd5b505af115801562005bf2573d6000803e3d6000fd5b5050505060008360080154846005015462005c0e9190620070d2565b600d85015490915062005c22828462007757565b62005c2e919062007787565b92508184600d01600082825462005c469190620070d2565b9091555050600684015460000362005c65576003850183905562005c8d565b6006840154600785015462005c7b908562007757565b62005c87919062007787565b60038601555b8284600601600082825462005ca39190620070e8565b9091555050600385015460078501805460009062005cc3908490620070e8565b9091555062005da692505050565b506002820154600882015481111562005ceb575060088101545b816009015460000362005d05576003830181905562005d2d565b6009820154600a83015462005d1b908362007757565b62005d27919062007787565b60038401555b8082600901600082825462005d439190620070e8565b90915550506003830154600a8301805460009062005d63908490620070e8565b925050819055508082600801600082825462005d809190620070d2565b90915550506002830154600b8301805460009062005da0908490620070d2565b90915550505b600c820154835460405163162bd9cb60e21b81526001600160a01b0391821660048201529116906358af672c906024016040805180830381865afa15801562005df3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005e1991906200749d565b600685015560058085019190915560088401805461ff0019166101001790558201805482919060009062005e4f908490620070d2565b909155505050505050565b600081815260076020526040812060088101805460ff19166001179055600381015490910362005e88575050565b60018101546001600160a01b03166000908152602f60205260408120600883015490919062010000900460ff1662005f255781600701548260060154846003015462005ed5919062007757565b62005ee1919062007787565b90508082600601600082825462005ef99190620070d2565b9091555050600383015460078301805460009062005f19908490620070d2565b9091555062005f8a9050565b81600a01548260090154846003015462005f40919062007757565b62005f4c919062007787565b90508082600901600082825462005f649190620070d2565b90915550506003830154600a8301805460009062005f84908490620070d2565b90915550505b6004830181905582546001600160a01b03166000908152602e60205260408120805483929062005e4f908490620070e8565b600062005fcd826060015162004b28565b6001600160a01b039091166020840152905080156200601d5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200121d565b6020808301516001600160a01b039081166000908152602f9092526040909120600101541615620060915760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c726561647920726567697374657265640000000060448201526064016200121d565b6127108260800151111562001b725760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e207261746500000000000000000060448201526064016200121d565b606081600003620061115750506040805180820190915260018152600360fc1b602082015290565b8160005b811562006141578062006128816200773b565b9150620061399050600a8362007787565b915062006115565b60008167ffffffffffffffff8111156200615f576200615f62006c3b565b6040519080825280601f01601f1916602001820160405280156200618a576020820181803683370190505b5090505b84156200620257620061a2600183620070d2565b9150620061b1600a866200782e565b620061be906030620070e8565b60f81b818381518110620061d657620061d662007647565b60200101906001600160f81b031916908160001a905350620061fa600a8662007787565b94506200618e565b949350505050565b6060816200621a81601f620070e8565b10156200625b5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016200121d565b620062678284620070e8565b84511015620062ad5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016200121d565b606082158015620062ce57604051915060008252602082016040526200631a565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101562006309578051835260209283019201620062ef565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b811015620063535762006350601b8262007845565b90505b9250925092565b600062006366620067e1565b60008585856040516020016200637f9392919062007861565b6040516020818303038152906040529050600060fb9050600082516020620063a89190620070e8565b90506020848285855afa620063bc57600080fd5b5050905195945050505050565b6101808101516001600160a01b0316620064c8576033546001600160a01b0316620064425760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b60648201526084016200121d565b6021546000906200645390620060e9565b905081602001518260000151836080015183603360009054906101000a90046001600160a01b03166040516200648990620067ff565b62006499959493929190620078b0565b604051809103906000f080158015620064b6573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602180546001808201835560009283527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b57090910180546001600160a01b03199081166001600160a01b0395861617909155845184168352602f909552604091829020865181548716908516178155935190840180548616918416919091179055840151600283018054909416911617909155606082015182919060038201906200657a908262007535565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820155610240820151601282019062006644908262007535565b5061026082015160138201805460ff191660018360038111156200666c576200666c620069cb565b0217905550505050565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160006003811115620067415762006741620069cb565b905290565b6040518060a001604052806005906020820280368337509192915050565b50805460008255906000526020600020908101906200153291906200680d565b508054620067929062006f8f565b6000825580601f10620067a3575050565b601f01602090049060005260206000209081019062001532919062006832565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105c280620078e383390190565b808211156200682e57600062006824828262006784565b506001016200680d565b5090565b5b808211156200682e576000815560010162006833565b60005b83811015620068665781810151838201526020016200684c565b50506000910152565b600081518084526200688981602086016020860162006849565b601f01601f19169290920160200192915050565b6020815260006200195660208301846200686f565b600060208284031215620068c557600080fd5b5035919050565b600082825180855260208086019550808260051b84010181860160005b848110156200694457858303601f19018952815180516001600160a01b0316845284810151858501526040908101516060918501829052906200692f818601836200686f565b9a86019a9450505090830190600101620068e9565b5090979650505050505050565b602081526000620019566020830184620068cc565b6001600160a01b03811681146200153257600080fd5b600080604083850312156200699057600080fd5b82356200699d8162006966565b946020939093013593505050565b600060208284031215620069be57600080fd5b8135620019568162006966565b634e487b7160e01b600052602160045260246000fd5b6004811062006a0057634e487b7160e01b600052602160045260246000fd5b9052565b6020815262006a1f6020820183516001600160a01b03169052565b6000602083015162006a3c60408401826001600160a01b03169052565b5060408301516001600160a01b038116606084015250606083015161028080608085015262006a706102a08501836200686f565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a062006af8818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f19016102608088019190915290915062006b5c84836200686f565b93508087015191505062006b7382860182620069e1565b5090949350505050565b60008060006060848603121562006b9357600080fd5b833562006ba08162006966565b9250602084013562006bb28162006966565b929592945050506040919091013590565b60006020828403121562006bd657600080fd5b813567ffffffffffffffff81111562006bee57600080fd5b820161028081850312156200195657600080fd5b8515158152841515602082015260a06040820152600062006c2760a0830186620068cc565b606083019490945250608001529392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262006c6357600080fd5b813567ffffffffffffffff8082111562006c815762006c8162006c3b565b604051601f8301601f19908116603f0116810190828211818310171562006cac5762006cac62006c3b565b8160405283815286602085880101111562006cc657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121562006cfa57600080fd5b823562006d078162006966565b9150602083013567ffffffffffffffff81111562006d2457600080fd5b62006d328582860162006c51565b9150509250929050565b6000806000806080858703121562006d5357600080fd5b843567ffffffffffffffff8082111562006d6c57600080fd5b62006d7a8883890162006c51565b95506020870135915062006d8e8262006966565b9093506040860135908082111562006da557600080fd5b62006db38883890162006c51565b9350606087013591508082111562006dca57600080fd5b5062006dd98782880162006c51565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200135657603f1988860301845262006e2b8583516200686f565b9450928501929085019060010162006e0c565b60808152600062006e536080830187620068cc565b6020830195909552506040810192909252606090910152919050565b6020808252825182820181905260009190848201906040850190845b8181101562006eb25783516001600160a01b03168352928401929184019160010162006e8b565b50909695505050505050565b6000806040838503121562006ed257600080fd5b823567ffffffffffffffff8082111562006eeb57600080fd5b62006ef98683870162006c51565b9350602085013591508082111562006f1057600080fd5b5062006d328582860162006c51565b60408152600062006f3460408301856200686f565b828103602084015262006f4881856200686f565b95945050505050565b6000806040838503121562006f6557600080fd5b823562006f728162006966565b9150602083013562006f848162006966565b809150509250929050565b600181811c9082168062006fa457607f821691505b60208210810362006fc557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115620014915762001491620070bc565b80820180821115620014915762001491620070bc565b60008135620014918162006966565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808335601e198436030181126200714557600080fd5b83018035915067ffffffffffffffff8211156200716157600080fd5b6020019150368190038213156200717757600080fd5b9250929050565b601f8211156200563757600081815260208120601f850160051c81016020861015620071a75750805b601f850160051c820191505b818110156200287457828155600101620071b3565b600019600383901b1c191660019190911b1790565b67ffffffffffffffff831115620071f857620071f862006c3b565b620072108362007209835462006f8f565b836200717e565b6000601f8411600181146200724357600085156200722e5750838201355b6200723a8682620071c8565b84555062001c79565b600083815260209020601f19861690835b8281101562007276578685013582556020948501946001909201910162007254565b5086821015620072945760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60008135600481106200149157600080fd5b60048210620072d757634e487b7160e01b600052602160045260246000fd5b60ff1981541660ff831681178255505050565b62007300620072f983620070fe565b826200710d565b6200731c6200731260208401620070fe565b600183016200710d565b620073386200732e60408401620070fe565b600283016200710d565b6200734760608301836200712d565b62007357818360038601620071dd565b50506080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610160820135600b820155620073ca620073c06101808401620070fe565b600c83016200710d565b6101a0820135600d8201556101c0820135600e8201556101e0820135600f82015561020082013560108201556102208201356011820155620074116102408301836200712d565b62007421818360128601620071dd565b505062001b72620074366102608401620072a6565b60138301620072b8565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b6000602082840312156200749657600080fd5b5051919050565b60008060408385031215620074b157600080fd5b505080516020909101519092909150565b600060208284031215620074d557600080fd5b815180151581146200195657600080fd5b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b815167ffffffffffffffff81111562007552576200755262006c3b565b6200756a8162007563845462006f8f565b846200717e565b602080601f8311600181146200759e5760008415620075895750858301515b620075958582620071c8565b86555062002874565b600085815260208120601f198616915b82811015620075cf57888601518255948401946001909101908401620075ae565b5085821015620075ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018060a01b0380881683528087166020840152808616604084015260a060608401526200763260a08401866200686f565b91508084166080840152509695505050505050565b634e487b7160e01b600052603260045260246000fd5b81810362007669575050565b62007675825462006f8f565b67ffffffffffffffff81111562007690576200769062006c3b565b620076a18162007563845462006f8f565b6000601f821160018114620076d45760008315620076bf5750848201545b620076cb8482620071c8565b85555062001c79565b600085815260209020601f19841690600086815260209020845b83811015620077105782860154825560019586019590910190602001620076ee565b5085831015620075ee5793015460001960f8600387901b161c19169092555050600190811b01905550565b600060018201620077505762007750620070bc565b5060010190565b8082028115828204841417620014915762001491620070bc565b634e487b7160e01b600052601260045260246000fd5b60008262007799576200779962007771565b500490565b60018060a01b038316815260606020820152600060608201526080604082015260006200620260808301846200686f565b60008451620077e381846020890162006849565b845190830190620077f981836020890162006849565b84519101906200780e81836020880162006849565b0195945050505050565b82815260408101620019566020830184620069e1565b60008262007840576200784062007771565b500690565b60ff8181168382160190811115620014915762001491620070bc565b600084516200787581846020890162006849565b8451908301906200788b81836020890162006849565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a060608401526200763260a08401866200686f56fe608060405234801561001057600080fd5b506040516105c23803806105c283398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101868061043c6000396000f3fe60806040523661001b57610019610014610022565b6100fd565b005b6100196100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009c9190610120565b90506001600160a01b0381166100f85760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e8061011a573d6000fd5b503d6000f35b60006020828403121561013257600080fd5b81516001600160a01b038116811461014957600080fd5b939250505056fea26469706673582212209a75da0350dfc1a208a35175851bcd7988a0dcb079ef84c93d9ea49a25303b2064736f6c63430008150033a264697066735822122016c4b43c6f595f368de2fa7ade97579917882b91ea1d5b3788c82e5fa3ba89d464736f6c63430008150033608060405234801561001057600080fd5b50601080546001600160a01b03191633179055611700806100326000396000f3fe6080604052600436106101a05760003560e01c80633e4eb36c116100ec578063949813b81161008a578063a0ce552d11610064578063a0ce552d14610533578063a9059cbb14610546578063bd96102f14610566578063dd62ed3e1461057b576101a7565b8063949813b8146104de57806395d89b41146104fe5780639dc29fac14610513576101a7565b806359355736116100c6578063593557361461043257806370a08231146104685780637eee288d1461049e57806384955c88146104be576101a7565b80633e4eb36c146103a557806340c10f19146103ba57806358af672c146103da576101a7565b80631eeffad0116101595780632f2c3f2e116101335780632f2c3f2e14610340578063313ce56714610356578063372500ab146103725780633b19e84a14610387576101a7565b80631eeffad0146102eb57806323b872dd14610300578063282d3fdf14610320576101a7565b806306fdde0314610205578063095ea7b3146102305780631195e07e1461026057806318160ddd14610292578063187cf4d7146102b157806319fac8fd146102c9576101a7565b366101a757005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b34801561021157600080fd5b5061021a6105c1565b604051610227919061145a565b60405180910390f35b34801561023c57600080fd5b5061025061024b3660046114c4565b610653565b6040519015158152602001610227565b34801561026c57600080fd5b50600c546001600160a01b03165b6040516001600160a01b039091168152602001610227565b34801561029e57600080fd5b506003545b604051908152602001610227565b3480156102bd57600080fd5b506102a3633b9aca0081565b3480156102d557600080fd5b506102e96102e43660046114ee565b61066a565b005b3480156102f757600080fd5b50600f546102a3565b34801561030c57600080fd5b5061025061031b366004611507565b610699565b34801561032c57600080fd5b506102e961033b3660046114c4565b61078e565b34801561034c57600080fd5b506102a361271081565b34801561036257600080fd5b5060405160128152602001610227565b34801561037e57600080fd5b506102e9610872565b34801561039357600080fd5b50600d546001600160a01b031661027a565b3480156103b157600080fd5b50600e546102a3565b3480156103c657600080fd5b506102e96103d53660046114c4565b6109f3565b3480156103e657600080fd5b5061041d6103f5366004611543565b6001600160a01b03166000908152600460209081526040808320546007909252909120549091565b60408051928352602083019190915201610227565b34801561043e57600080fd5b506102a361044d366004611543565b6001600160a01b031660009081526001602052604090205490565b34801561047457600080fd5b506102a3610483366004611543565b6001600160a01b031660009081526020819052604090205490565b3480156104aa57600080fd5b506102e96104b93660046114c4565b610a5b565b3480156104ca57600080fd5b506102a36104d9366004611543565b610b21565b3480156104ea57600080fd5b5061041d6104f9366004611543565b610b4e565b34801561050a57600080fd5b5061021a610c06565b34801561051f57600080fd5b506102e961052e3660046114c4565b610c15565b61041d6105413660046114ee565b610c75565b34801561055257600080fd5b506102506105613660046114c4565b610f69565b34801561057257600080fd5b506102e9610fb6565b34801561058757600080fd5b506102a361059636600461155e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6060600a80546105d090611591565b80601f01602080910402602001604051908101604052809291908181526020018280546105fc90611591565b80156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b5050505050905090565b60006106603384846110bd565b5060015b92915050565b6010546001600160a01b031633146106945760405162461bcd60e51b81526004016101fc906115cb565b600e55565b6001600160a01b03831660009081526002602090815260408083203384529091528120548281101561071e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101fc565b610732853361072d8685611629565b6110bd565b61073c85846111e1565b61074684846112d5565b836001600160a01b0316856001600160a01b03166000805160206116ab8339815191528560405161077991815260200190565b60405180910390a360019150505b9392505050565b6010546001600160a01b031633146107b85760405162461bcd60e51b81526004016101fc906115cb565b6001600160a01b038216600090815260016020908152604080832054918390529091205482916107e791611629565b10156108415760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101fc565b6001600160a01b0382166000908152600160205260408120805483929061086990849061163c565b90915550505050565b60008061087e33611321565b33600090815260046020908152604080832083905560079091528120819055919350915081156109615760105460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d919061164f565b9050806109615760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101fc565b60405133908490600081818185875af1925050503d80600081146109a1576040519150601f19603f3d011682016040523d82523d6000602084013e6109a6565b606091505b505080915050806109ee5760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b505050565b6010546001600160a01b03163314610a1d5760405162461bcd60e51b81526004016101fc906115cb565b610a2782826112d5565b6040518181526001600160a01b038316906000906000805160206116ab833981519152906020015b60405180910390a35050565b6010546001600160a01b03163314610a855760405162461bcd60e51b81526004016101fc906115cb565b6001600160a01b038216600090815260016020526040902054811115610af95760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101fc565b6001600160a01b03821660009081526001602052604081208054839290610869908490611629565b6001600160a01b038116600090815260016020908152604080832054918390528220546106649190611629565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205483928391610b8391849161141c565b6001600160a01b038616600090815260046020526040902054909150610baa90829061163c565b6009546001600160a01b03871660009081526008602052604081205492965091610bd591859161141c565b6001600160a01b038716600090815260076020526040902054909150610bfc90829061163c565b9350505050915091565b6060600b80546105d090611591565b6010546001600160a01b03163314610c3f5760405162461bcd60e51b81526004016101fc906115cb565b610c4982826111e1565b6040518181526000906001600160a01b038416906000805160206116ab83398151915290602001610a4f565b60105460009081906001600160a01b03163314610ca45760405162461bcd60e51b81526004016101fc906115cb565b600e54349060009061271090610cba9084611671565b610cc49190611688565b905081811115610d165760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610d208183611629565b600d546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610d77576040519150601f19603f3d011682016040523d82523d6000602084013e610d7c565b606091505b5090915050801515600003610da35781600f6000828254610d9d919061163c565b90915550505b6000612710600e5488610db69190611671565b610dc09190611688565b905086811115610e125760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101fc565b610e1c8188611629565b96508015610e9f57601054600d5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d919061164f565b505b600354600090610eb3633b9aca0087611671565b610ebd9190611688565b905080600654610ecd919061163c565b600655600354600090610ee4633b9aca008b611671565b610eee9190611688565b905080600954610efe919061163c565b600955600354600090633b9aca0090610f179085611671565b610f219190611688565b90506000633b9aca0060035484610f389190611671565b610f429190611688565b9050610f4e828861163c565b610f58828761163c565b995099505050505050505050915091565b6000610f7533836111e1565b610f7f83836112d5565b6040518281526001600160a01b0384169033906000805160206116ab8339815191529060200160405180910390a350600192915050565b600d546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101fc565b600d54600f546040516000926001600160a01b031691908381818185875af1925050503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b50509050806110b55760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101fc565b506000600f55565b6001600160a01b03831661111f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101fc565b6001600160a01b0382166111805760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101fc565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6111ea82611321565b50506001600160a01b038216600090815260208181526040808320546001909252909120546112199082611629565b8211156112685760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101fc565b6112728282611629565b6001600160a01b0384166000908152602081905260409020558082036112b9576001600160a01b038316600090815260056020908152604080832083905560089091528120555b81600360008282546112cb9190611629565b9091555050505050565b6112de82611321565b50506001600160a01b0382166000908152602081905260408120805483929061130890849061163c565b925050819055508060036000828254610869919061163c565b6001600160a01b038116600090815260208181526040808320546006546005909352908320548392839161135691849161141c565b6001600160a01b03861660009081526004602052604090205490915061137d90829061163c565b6001600160a01b03861660009081526004602090815260408083208490556006546005835281842055600954600890925282205492965090916113c191859161141c565b6001600160a01b0387166000908152600760205260409020549091506113e890829061163c565b6001600160a01b03909616600090815260076020908152604080832089905560095460089092529091205550929492505050565b60008360000361142e57506000610787565b633b9aca008461143e8486611629565b6114489190611671565b6114529190611688565b949350505050565b600060208083528351808285015260005b818110156114875785810183015185820160400152820161146b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146114bf57600080fd5b919050565b600080604083850312156114d757600080fd5b6114e0836114a8565b946020939093013593505050565b60006020828403121561150057600080fd5b5035919050565b60008060006060848603121561151c57600080fd5b611525846114a8565b9250611533602085016114a8565b9150604084013590509250925092565b60006020828403121561155557600080fd5b610787826114a8565b6000806040838503121561157157600080fd5b61157a836114a8565b9150611588602084016114a8565b90509250929050565b600181811c908216806115a557607f821691505b6020821081036115c557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561066457610664611613565b8082018082111561066457610664611613565b60006020828403121561166157600080fd5b8151801515811461078757600080fd5b808202811582820484141761066457610664611613565b6000826116a557634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203477e4d22883280ba018c43a93da88c9e7c80e78dd590c9108759ee00c06e15c64736f6c63430008150033608060405234801561001057600080fd5b506040516105c23803806105c283398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101868061043c6000396000f3fe60806040523661001b57610019610014610022565b6100fd565b005b6100196100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009c9190610120565b90506001600160a01b0381166100f85760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e8061011a573d6000fd5b503d6000f35b60006020828403121561013257600080fd5b81516001600160a01b038116811461014957600080fd5b939250505056fea26469706673582212209a75da0350dfc1a208a35175851bcd7988a0dcb079ef84c93d9ea49a25303b2064736f6c63430008150033",
}

// AutonityUpgradeTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityUpgradeTestMetaData.ABI instead.
var AutonityUpgradeTestABI = AutonityUpgradeTestMetaData.ABI

// Deprecated: Use AutonityUpgradeTestMetaData.Sigs instead.
// AutonityUpgradeTestFuncSigs maps the 4-byte function signature to its string representation.
var AutonityUpgradeTestFuncSigs = AutonityUpgradeTestMetaData.Sigs

// AutonityUpgradeTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityUpgradeTestMetaData.Bin instead.
var AutonityUpgradeTestBin = AutonityUpgradeTestMetaData.Bin

// DeployAutonityUpgradeTest deploys a new Ethereum contract, binding an instance of AutonityUpgradeTest to it.
func (r *Runner) DeployAutonityUpgradeTest(opts *runOptions) (common.Address, uint64, *AutonityUpgradeTest, error) {
	parsed, err := AutonityUpgradeTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AutonityUpgradeTestBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &AutonityUpgradeTest{contract: c}, nil
}

// AutonityUpgradeTest is an auto generated Go binding around an Ethereum contract.
type AutonityUpgradeTest struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) AtnTotalRedistributed(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "atnTotalRedistributed")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) BalanceOf(opts *runOptions, _addr common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Config(opts *runOptions) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Deployer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "deployer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochID(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochID")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochPeriodToBeApplied is a free data retrieval call binding the contract method 0x573963b8.
//
// Solidity: function epochPeriodToBeApplied() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochPeriodToBeApplied(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochPeriodToBeApplied")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochReward(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochReward")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochTotalBondedStake(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetBlockPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBondedLiquid is a free data retrieval call binding the contract method 0xff9831b6.
//
// Solidity: function getBondedLiquid(uint256 _bondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetBondedLiquid(opts *runOptions, _bondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getBondedLiquid", _bondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCommittee(opts *runOptions) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeByHeight is a free data retrieval call binding the contract method 0x070e720a.
//
// Solidity: function getCommitteeByHeight(uint256 _height) view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCommitteeByHeight(opts *runOptions, _height *big.Int) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCommitteeByHeight", _height)

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCommitteeEnodes(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochFromBlock(opts *runOptions, _block *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns((address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochInfo(opts *runOptions) ([]AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochInfo")

	if err != nil {
		return *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, consumed, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetLastEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMaxCommitteeSize(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMinimumBaseFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetNextEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetReleasedStake is a free data retrieval call binding the contract method 0xf1b47e4b.
//
// Solidity: function getReleasedStake(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetReleasedStake(opts *runOptions, _unbondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getReleasedStake", _unbondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRewardsTillBonding is a free data retrieval call binding the contract method 0xc3d802f4.
//
// Solidity: function getRewardsTillBonding(uint256 _bondingID) view returns(uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetRewardsTillBonding(opts *runOptions, _bondingID *big.Int) (*big.Int, *big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getRewardsTillBonding", _bondingID)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// GetRewardsTillUnbonding is a free data retrieval call binding the contract method 0xeb386749.
//
// Solidity: function getRewardsTillUnbonding(uint256 _bondingID) view returns(uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetRewardsTillUnbonding(opts *runOptions, _bondingID *big.Int) (*big.Int, *big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getRewardsTillUnbonding", _bondingID)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTreasuryAccount(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTreasuryFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetUnbondingPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetValidator(opts *runOptions, _addr common.Address) (AutonityValidator, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) InflationReserve(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "inflationReserve")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsBondingRejected is a free data retrieval call binding the contract method 0xcc4269bb.
//
// Solidity: function isBondingRejected(uint256 _bondingID) view returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) IsBondingRejected(opts *runOptions, _bondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "isBondingRejected", _bondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) IsUnbondingReleased(opts *runOptions, _unbondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LastEpochTime(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LastFinalizedBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetLiquidLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf1d592a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetLiquidLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "SetLiquidLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ActivateValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb46e5520.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallActivateValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "activateValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallBurn(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "burn", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x852c4849.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallChangeCommissionRate(r *Runner, opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "changeCommissionRate", _validator, _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ComputeCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xae1f5fa0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function computeCommittee() returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallComputeCommittee(r *Runner, opts *runOptions) ([]common.Address, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "computeCommittee")
	r.revertSnapshot(snap)

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallFinalize(r *Runner, opts *runOptions) (bool, bool, []AutonityCommitteeMember, *big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), *new(bool), *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, out4, consumed, err

}

// FinalizeInitialization is a free data retrieval call for a paid mutator transaction binding the contract method 0xd861b0e8.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalizeInitialization() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallFinalizeInitialization(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalizeInitialization")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallMint(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "mint", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// PauseValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae65e7a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallPauseValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "pauseValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// RegisterValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x84467fdb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallRegisterValidator(r *Runner, opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1250a28d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAcuContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xd372c07e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetAcuContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAcuContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommitteeSize is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bac7dad.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetCommitteeSize(r *Runner, opts *runOptions, _size *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setCommitteeSize", _size)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetEpochPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setEpochPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInflationControllerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf03b959d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetInflationControllerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setInflationControllerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinimumBaseFee is a free data retrieval call for a paid mutator transaction binding the contract method 0xcb696f54.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetMinimumBaseFee(r *Runner, opts *runOptions, _price *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMinimumBaseFee", _price)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetNonStakableVestingContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1a0cf2e5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetNonStakableVestingContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setNonStakableVestingContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperatorAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0x520fdbbc.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetOperatorAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOperatorAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracleContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x496ccd9b.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetOracleContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOracleContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizationContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfd19fb9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetStabilizationContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setStabilizationContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControlContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ecbadd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetSupplyControlContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSupplyControlContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0xd886f8a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetTreasuryAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryFee is a free data retrieval call for a paid mutator transaction binding the contract method 0x77e741c7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetTreasuryFee(r *Runner, opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryFee", _treasuryFee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUnbondingPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x114eaf55.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetUnbondingPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUnbondingPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUpgradeManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xceaad455.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetUpgradeManagerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUpgradeManagerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallTransfer(r *Runner, opts *runOptions, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "transfer", _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateEnode is a free data retrieval call for a paid mutator transaction binding the contract method 0x784304b5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpdateEnode(r *Runner, opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateEnode", _nodeAddress, _enode)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateValidatorAndTransferSlashedFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x35be16e0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpdateValidatorAndTransferSlashedFunds(r *Runner, opts *runOptions, _val AutonityValidator) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetLiquidLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "SetLiquidLogicContract", _contract)
	return consumed, err
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ActivateValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "activateValidator", _address)
	return consumed, err
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "approve", spender, amount)
	return consumed, err
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Burn(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "burn", _addr, _amount)
	return consumed, err
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ChangeCommissionRate(opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "changeCommissionRate", _validator, _rate)
	return consumed, err
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) ComputeCommittee(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "computeCommittee")
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalize")
	return consumed, err
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) FinalizeInitialization(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalizeInitialization")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Mint(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "mint", _addr, _amount)
	return consumed, err
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) PauseValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "pauseValidator", _address)
	return consumed, err
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) RegisterValidator(opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "resetContractUpgrade")
	return consumed, err
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAccountabilityContract", _address)
	return consumed, err
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetAcuContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAcuContract", _address)
	return consumed, err
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetCommitteeSize(opts *runOptions, _size *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setCommitteeSize", _size)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetEpochPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setEpochPeriod", _period)
	return consumed, err
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetInflationControllerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setInflationControllerContract", _address)
	return consumed, err
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetMinimumBaseFee(opts *runOptions, _price *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMinimumBaseFee", _price)
	return consumed, err
}

// SetNonStakableVestingContract is a paid mutator transaction binding the contract method 0x1a0cf2e5.
//
// Solidity: function setNonStakableVestingContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetNonStakableVestingContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setNonStakableVestingContract", _address)
	return consumed, err
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetOperatorAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOperatorAccount", _account)
	return consumed, err
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetOracleContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOracleContract", _address)
	return consumed, err
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetStabilizationContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setStabilizationContract", _address)
	return consumed, err
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetSupplyControlContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSupplyControlContract", _address)
	return consumed, err
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetTreasuryAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryAccount", _account)
	return consumed, err
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetTreasuryFee(opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryFee", _treasuryFee)
	return consumed, err
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetUnbondingPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUnbondingPeriod", _period)
	return consumed, err
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetUpgradeManagerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUpgradeManagerContract", _address)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Transfer(opts *runOptions, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "transfer", _recipient, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpdateEnode(opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateEnode", _nodeAddress, _enode)
	return consumed, err
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpdateValidatorAndTransferSlashedFunds(opts *runOptions, _val AutonityValidator) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AutonityUpgradeTestActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestActivatedValidatorIterator struct {
			Event *AutonityUpgradeTestActivatedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestActivatedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestActivatedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestActivatedValidator represents a ActivatedValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestActivatedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestActivatedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestActivatedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestActivatedValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseActivatedValidator(log types.Log) (*AutonityUpgradeTestActivatedValidator, error) {
			event := new(AutonityUpgradeTestActivatedValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestApprovalIterator struct {
			Event *AutonityUpgradeTestApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestApproval represents a Approval event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityUpgradeTestApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestApprovalIterator{contract: _AutonityUpgradeTest.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestApproval)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseApproval(log types.Log) (*AutonityUpgradeTestApproval, error) {
			event := new(AutonityUpgradeTestApproval)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBondingRejectedIterator struct {
			Event *AutonityUpgradeTestBondingRejected // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestBondingRejected)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestBondingRejected)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestBondingRejected represents a BondingRejected event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBondingRejected struct {
			Validator common.Address;
			Delegator common.Address;
			Amount *big.Int;
			State uint8;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestBondingRejectedIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestBondingRejectedIterator{contract: _AutonityUpgradeTest.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
 		}

		// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestBondingRejected)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseBondingRejected(log types.Log) (*AutonityUpgradeTestBondingRejected, error) {
			event := new(AutonityUpgradeTestBondingRejected)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBurnedStakeIterator struct {
			Event *AutonityUpgradeTestBurnedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestBurnedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestBurnedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestBurnedStake represents a BurnedStake event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBurnedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestBurnedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestBurnedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
 		}

		// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBurnedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestBurnedStake)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseBurnedStake(log types.Log) (*AutonityUpgradeTestBurnedStake, error) {
			event := new(AutonityUpgradeTestBurnedStake)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCallFailedIterator struct {
			Event *AutonityUpgradeTestCallFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestCallFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestCallFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestCallFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestCallFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestCallFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestCallFailed represents a CallFailed event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCallFailed struct {
			To common.Address;
			MethodSignature string;
			ReturnData []byte;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterCallFailed(opts *bind.FilterOpts) (*AutonityUpgradeTestCallFailedIterator, error) {





			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestCallFailedIterator{contract: _AutonityUpgradeTest.contract, event: "CallFailed", logs: logs, sub: sub}, nil
 		}

		// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCallFailed) (event.Subscription, error) {





			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestCallFailed)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseCallFailed(log types.Log) (*AutonityUpgradeTestCallFailed, error) {
			event := new(AutonityUpgradeTestCallFailed)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCommissionRateChangeIterator struct {
			Event *AutonityUpgradeTestCommissionRateChange // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestCommissionRateChange)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestCommissionRateChange)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestCommissionRateChange represents a CommissionRateChange event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCommissionRateChange struct {
			Validator common.Address;
			Rate *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityUpgradeTestCommissionRateChangeIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestCommissionRateChangeIterator{contract: _AutonityUpgradeTest.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
 		}

		// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCommissionRateChange, validator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestCommissionRateChange)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseCommissionRateChange(log types.Log) (*AutonityUpgradeTestCommissionRateChange, error) {
			event := new(AutonityUpgradeTestCommissionRateChange)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestEpochPeriodUpdatedIterator struct {
			Event *AutonityUpgradeTestEpochPeriodUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestEpochPeriodUpdated struct {
			Period *big.Int;
			ToBeAppliedAtBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestEpochPeriodUpdatedIterator, error) {




			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestEpochPeriodUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestEpochPeriodUpdated) (event.Subscription, error) {




			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestEpochPeriodUpdated)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseEpochPeriodUpdated(log types.Log) (*AutonityUpgradeTestEpochPeriodUpdated, error) {
			event := new(AutonityUpgradeTestEpochPeriodUpdated)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMinimumBaseFeeUpdatedIterator struct {
			Event *AutonityUpgradeTestMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMinimumBaseFeeUpdated struct {
			GasPrice *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestMinimumBaseFeeUpdatedIterator, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestMinimumBaseFeeUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMinimumBaseFeeUpdated) (event.Subscription, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityUpgradeTestMinimumBaseFeeUpdated, error) {
			event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMintedStakeIterator struct {
			Event *AutonityUpgradeTestMintedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestMintedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestMintedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestMintedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestMintedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestMintedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestMintedStake represents a MintedStake event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMintedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestMintedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestMintedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "MintedStake", logs: logs, sub: sub}, nil
 		}

		// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMintedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestMintedStake)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseMintedStake(log types.Log) (*AutonityUpgradeTestMintedStake, error) {
			event := new(AutonityUpgradeTestMintedStake)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewBondingRequestIterator struct {
			Event *AutonityUpgradeTestNewBondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewBondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewBondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewBondingRequest represents a NewBondingRequest event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewBondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewBondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewBondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewBondingRequest)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewBondingRequest(log types.Log) (*AutonityUpgradeTestNewBondingRequest, error) {
			event := new(AutonityUpgradeTestNewBondingRequest)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewEpochIterator struct {
			Event *AutonityUpgradeTestNewEpoch // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewEpochIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewEpoch)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewEpoch)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewEpochIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewEpochIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewEpoch represents a NewEpoch event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewEpoch struct {
			Epoch *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityUpgradeTestNewEpochIterator, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewEpochIterator{contract: _AutonityUpgradeTest.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
 		}

		// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewEpoch) (event.Subscription, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewEpoch)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewEpoch(log types.Log) (*AutonityUpgradeTestNewEpoch, error) {
			event := new(AutonityUpgradeTestNewEpoch)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewUnbondingRequestIterator struct {
			Event *AutonityUpgradeTestNewUnbondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewUnbondingRequest represents a NewUnbondingRequest event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewUnbondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewUnbondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewUnbondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewUnbondingRequest)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewUnbondingRequest(log types.Log) (*AutonityUpgradeTestNewUnbondingRequest, error) {
			event := new(AutonityUpgradeTestNewUnbondingRequest)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestPausedValidatorIterator struct {
			Event *AutonityUpgradeTestPausedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestPausedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestPausedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestPausedValidator represents a PausedValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestPausedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestPausedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestPausedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestPausedValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParsePausedValidator(log types.Log) (*AutonityUpgradeTestPausedValidator, error) {
			event := new(AutonityUpgradeTestPausedValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRegisteredValidatorIterator struct {
			Event *AutonityUpgradeTestRegisteredValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestRegisteredValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestRegisteredValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestRegisteredValidator represents a RegisteredValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRegisteredValidator struct {
			Treasury common.Address;
			Addr common.Address;
			OracleAddress common.Address;
			Enode string;
			LiquidStateContract common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityUpgradeTestRegisteredValidatorIterator, error) {







			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestRegisteredValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
 		}

		// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRegisteredValidator) (event.Subscription, error) {







			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestRegisteredValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseRegisteredValidator(log types.Log) (*AutonityUpgradeTestRegisteredValidator, error) {
			event := new(AutonityUpgradeTestRegisteredValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRewardedIterator struct {
			Event *AutonityUpgradeTestRewarded // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestRewardedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestRewarded)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestRewarded)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestRewardedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestRewardedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestRewarded represents a Rewarded event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRewarded struct {
			Addr common.Address;
			AtnAmount *big.Int;
			NtnAmount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestRewardedIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestRewardedIterator{contract: _AutonityUpgradeTest.contract, event: "Rewarded", logs: logs, sub: sub}, nil
 		}

		// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRewarded, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestRewarded)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseRewarded(log types.Log) (*AutonityUpgradeTestRewarded, error) {
			event := new(AutonityUpgradeTestRewarded)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestTransferIterator struct {
			Event *AutonityUpgradeTestTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestTransfer represents a Transfer event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityUpgradeTestTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestTransferIterator{contract: _AutonityUpgradeTest.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestTransfer)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseTransfer(log types.Log) (*AutonityUpgradeTestTransfer, error) {
			event := new(AutonityUpgradeTestTransfer)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestUnlockingScheduleFailedIterator is returned from FilterUnlockingScheduleFailed and is used to iterate over the raw logs and unpacked data for UnlockingScheduleFailed events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestUnlockingScheduleFailedIterator struct {
			Event *AutonityUpgradeTestUnlockingScheduleFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestUnlockingScheduleFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestUnlockingScheduleFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestUnlockingScheduleFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestUnlockingScheduleFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestUnlockingScheduleFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestUnlockingScheduleFailed represents a UnlockingScheduleFailed event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestUnlockingScheduleFailed struct {
			EpochTime *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterUnlockingScheduleFailed is a free log retrieval operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
		//
		// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterUnlockingScheduleFailed(opts *bind.FilterOpts) (*AutonityUpgradeTestUnlockingScheduleFailedIterator, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "UnlockingScheduleFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestUnlockingScheduleFailedIterator{contract: _AutonityUpgradeTest.contract, event: "UnlockingScheduleFailed", logs: logs, sub: sub}, nil
 		}

		// WatchUnlockingScheduleFailed is a free log subscription operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
		//
		// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchUnlockingScheduleFailed(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestUnlockingScheduleFailed) (event.Subscription, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "UnlockingScheduleFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestUnlockingScheduleFailed)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseUnlockingScheduleFailed is a log parse operation binding the contract event 0xf1217bb194383aa5c937c81cbbb445990a478c7511b080df329f9b0fb64233c9.
		//
		// Solidity: event UnlockingScheduleFailed(uint256 epochTime)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseUnlockingScheduleFailed(log types.Log) (*AutonityUpgradeTestUnlockingScheduleFailed, error) {
			event := new(AutonityUpgradeTestUnlockingScheduleFailed)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "UnlockingScheduleFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// BytesLibMetaData contains all meta data concerning the BytesLib contract.
var BytesLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220831cbf1d093207c822ca0bb8903ee29676712d9a6abe4b340d9c5562c8a851e464736f6c63430008150033",
}

// BytesLibABI is the input ABI used to generate the binding from.
// Deprecated: Use BytesLibMetaData.ABI instead.
var BytesLibABI = BytesLibMetaData.ABI

// BytesLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BytesLibMetaData.Bin instead.
var BytesLibBin = BytesLibMetaData.Bin

// DeployBytesLib deploys a new Ethereum contract, binding an instance of BytesLib to it.
func (r *Runner) DeployBytesLib(opts *runOptions) (common.Address, uint64, *BytesLib, error) {
	parsed, err := BytesLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(BytesLibBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &BytesLib{contract: c}, nil
}

// BytesLib is an auto generated Go binding around an Ethereum contract.
type BytesLib struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ContractBaseMetaData contains all meta data concerning the ContractBase contract.
var ContractBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"2afbbacb": "canStake(address,uint256)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"635bf933": "totalContracts(address)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161067938038061067983398101604081905261002f91610078565b600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b6105b8806100c16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063213fe2b7146100515780632afbbacb1461007a578063635bf9331461009d578063aad55726146100d4575b600080fd5b61006461005f366004610419565b6100f4565b604051610071919061043b565b60405180910390f35b61008d6100883660046104c0565b610268565b6040519015158152602001610071565b6100c66100ab366004610419565b6001600160a01b031660009081526020819052604090205490565b604051908152602001610071565b6100e76100e23660046104c0565b6102a6565b60405161007191906104ea565b6001600160a01b038116600090815260208190526040812080546060929067ffffffffffffffff81111561012a5761012a61052f565b60405190808252806020026020018201604052801561019657816020015b6101836040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816101485790505b50905060005b81518110156102605760018382815481106101b9576101b9610545565b9060005260206000200154815481106101d4576101d4610545565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152825183908390811061024257610242610545565b602002602001018190525080806102589061055b565b91505061019c565b509392505050565b60006001610276848461035f565b8154811061028657610286610545565b600091825260209091206005600690920201015460ff1690505b92915050565b6102e16040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60016102ed848461035f565b815481106102fd576102fd610545565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b6001600160a01b03821660009081526020819052604081205482106103c05760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b604482015260640160405180910390fd5b6001600160a01b03831660009081526020819052604090208054839081106103ea576103ea610545565b9060005260206000200154905092915050565b80356001600160a01b038116811461041457600080fd5b919050565b60006020828403121561042b57600080fd5b610434826103fd565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156104b4576104a1838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c09290920191600101610457565b50909695505050505050565b600080604083850312156104d357600080fd5b6104dc836103fd565b946020939093013593505050565b60c081016102a08284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161057b57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220f693a018e07750a04127f8055436dd685c68bf9e767e2a9a7df89c8a5859e88064736f6c63430008150033",
}

// ContractBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractBaseMetaData.ABI instead.
var ContractBaseABI = ContractBaseMetaData.ABI

// Deprecated: Use ContractBaseMetaData.Sigs instead.
// ContractBaseFuncSigs maps the 4-byte function signature to its string representation.
var ContractBaseFuncSigs = ContractBaseMetaData.Sigs

// ContractBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractBaseMetaData.Bin instead.
var ContractBaseBin = ContractBaseMetaData.Bin

// DeployContractBase deploys a new Ethereum contract, binding an instance of ContractBase to it.
func (r *Runner) DeployContractBase(opts *runOptions, _autonity common.Address, _operator common.Address) (common.Address, uint64, *ContractBase, error) {
	parsed, err := ContractBaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(ContractBaseBin), _autonity, _operator)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &ContractBase{contract: c}, nil
}

// ContractBase is an auto generated Go binding around an Ethereum contract.
type ContractBase struct {
	*contract
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_ContractBase *ContractBase) CanStake(opts *runOptions, _beneficiary common.Address, _id *big.Int) (bool, uint64, error) {
	out, consumed, err := _ContractBase.call(opts, "canStake", _beneficiary, _id)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_ContractBase *ContractBase) GetContract(opts *runOptions, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, uint64, error) {
	out, consumed, err := _ContractBase.call(opts, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_ContractBase *ContractBase) GetContracts(opts *runOptions, _beneficiary common.Address) ([]ContractBaseContract, uint64, error) {
	out, consumed, err := _ContractBase.call(opts, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_ContractBase *ContractBase) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ContractBase.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// HelpersMetaData contains all meta data concerning the Helpers contract.
var HelpersMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f08ec662b3647da9f8d9adbbfb5ae571333af0be6a27cf20a23d7dccab133b1b64736f6c63430008150033",
}

// HelpersABI is the input ABI used to generate the binding from.
// Deprecated: Use HelpersMetaData.ABI instead.
var HelpersABI = HelpersMetaData.ABI

// HelpersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HelpersMetaData.Bin instead.
var HelpersBin = HelpersMetaData.Bin

// DeployHelpers deploys a new Ethereum contract, binding an instance of Helpers to it.
func (r *Runner) DeployHelpers(opts *runOptions) (common.Address, uint64, *Helpers, error) {
	parsed, err := HelpersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(HelpersBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Helpers{contract: c}, nil
}

// Helpers is an auto generated Go binding around an Ethereum contract.
type Helpers struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IACUMetaData contains all meta data concerning the IACU contract.
var IACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"a2e62045": "update()",
	},
}

// IACUABI is the input ABI used to generate the binding from.
// Deprecated: Use IACUMetaData.ABI instead.
var IACUABI = IACUMetaData.ABI

// Deprecated: Use IACUMetaData.Sigs instead.
// IACUFuncSigs maps the 4-byte function signature to its string representation.
var IACUFuncSigs = IACUMetaData.Sigs

// IACU is an auto generated Go binding around an Ethereum contract.
type IACU struct {
	*contract
}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACU) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IACU.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACU) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IACU.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// Update is a free data retrieval call for a paid mutator transaction binding the contract method 0xa2e62045.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function update() returns(bool status)
func (_IACU *IACU) CallUpdate(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IACU.call(opts, "update")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACU) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACU) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "setOracle", oracle)
	return consumed, err
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACU) Update(opts *runOptions) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "update")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IAccountabilityMetaData contains all meta data concerning the IAccountability contract.
var IAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a8031a1d": "distributeRewards(address,uint256)",
		"6c9789b0": "finalize(bool)",
		"6b5f444c": "setEpochPeriod(uint256)",
	},
}

// IAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAccountabilityMetaData.ABI instead.
var IAccountabilityABI = IAccountabilityMetaData.ABI

// Deprecated: Use IAccountabilityMetaData.Sigs instead.
// IAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var IAccountabilityFuncSigs = IAccountabilityMetaData.Sigs

// IAccountability is an auto generated Go binding around an Ethereum contract.
type IAccountability struct {
	*contract
}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountability) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountability) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountability) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountability) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountability) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountability) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IAccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the IAccountability contract.
		type IAccountabilityInnocenceProvenIterator struct {
			Event *IAccountabilityInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityInnocenceProven represents a InnocenceProven event raised by the IAccountability contract.
		type IAccountabilityInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_IAccountability *IAccountability) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityInnocenceProvenIterator{contract: _IAccountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_IAccountability *IAccountability) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *IAccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityInnocenceProven)
						if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_IAccountability *IAccountability) ParseInnocenceProven(log types.Log) (*IAccountabilityInnocenceProven, error) {
			event := new(IAccountabilityInnocenceProven)
			if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the IAccountability contract.
		type IAccountabilityNewAccusationIterator struct {
			Event *IAccountabilityNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityNewAccusation represents a NewAccusation event raised by the IAccountability contract.
		type IAccountabilityNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_IAccountability *IAccountability) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityNewAccusationIterator{contract: _IAccountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityNewAccusation)
						if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) ParseNewAccusation(log types.Log) (*IAccountabilityNewAccusation, error) {
			event := new(IAccountabilityNewAccusation)
			if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the IAccountability contract.
		type IAccountabilityNewFaultProofIterator struct {
			Event *IAccountabilityNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityNewFaultProof represents a NewFaultProof event raised by the IAccountability contract.
		type IAccountabilityNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_IAccountability *IAccountability) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityNewFaultProofIterator{contract: _IAccountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityNewFaultProof)
						if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) ParseNewFaultProof(log types.Log) (*IAccountabilityNewFaultProof, error) {
			event := new(IAccountabilityNewFaultProof)
			if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the IAccountability contract.
		type IAccountabilitySlashingEventIterator struct {
			Event *IAccountabilitySlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilitySlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilitySlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilitySlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilitySlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilitySlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilitySlashingEvent represents a SlashingEvent event raised by the IAccountability contract.
		type IAccountabilitySlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_IAccountability *IAccountability) FilterSlashingEvent(opts *bind.FilterOpts) (*IAccountabilitySlashingEventIterator, error) {







			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &IAccountabilitySlashingEventIterator{contract: _IAccountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_IAccountability *IAccountability) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *IAccountabilitySlashingEvent) (event.Subscription, error) {







			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilitySlashingEvent)
						if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_IAccountability *IAccountability) ParseSlashingEvent(log types.Log) (*IAccountabilitySlashingEvent, error) {
			event := new(IAccountabilitySlashingEvent)
			if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IAutonityMetaData contains all meta data concerning the IAutonity contract.
var IAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
	},
}

// IAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAutonityMetaData.ABI instead.
var IAutonityABI = IAutonityMetaData.ABI

// Deprecated: Use IAutonityMetaData.Sigs instead.
// IAutonityFuncSigs maps the 4-byte function signature to its string representation.
var IAutonityFuncSigs = IAutonityMetaData.Sigs

// IAutonity is an auto generated Go binding around an Ethereum contract.
type IAutonity struct {
	*contract
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonity) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IAutonity.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonity) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IAutonity.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// Deprecated: Use IERC20MetaData.Sigs instead.
// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = IERC20MetaData.Sigs

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	*contract
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20) BalanceOf(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallTransfer(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "transfer", recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallTransferFrom(r *Runner, opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "transferFrom", sender, recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "approve", spender, amount)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) Transfer(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "transfer", recipient, amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) TransferFrom(opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "transferFrom", sender, recipient, amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
		type IERC20ApprovalIterator struct {
			Event *IERC20Approval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IERC20ApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IERC20Approval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IERC20Approval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IERC20ApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IERC20ApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IERC20Approval represents a Approval event raised by the IERC20 contract.
		type IERC20Approval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_IERC20 *IERC20) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_IERC20 *IERC20) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IERC20Approval)
						if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_IERC20 *IERC20) ParseApproval(log types.Log) (*IERC20Approval, error) {
			event := new(IERC20Approval)
			if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
		type IERC20TransferIterator struct {
			Event *IERC20Transfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IERC20TransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IERC20Transfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IERC20Transfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IERC20TransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IERC20TransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
		type IERC20Transfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_IERC20 *IERC20) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_IERC20 *IERC20) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IERC20Transfer)
						if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_IERC20 *IERC20) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
			event := new(IERC20Transfer)
			if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IInflationControllerMetaData contains all meta data concerning the IInflationController contract.
var IInflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
	},
}

// IInflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use IInflationControllerMetaData.ABI instead.
var IInflationControllerABI = IInflationControllerMetaData.ABI

// Deprecated: Use IInflationControllerMetaData.Sigs instead.
// IInflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var IInflationControllerFuncSigs = IInflationControllerMetaData.Sigs

// IInflationController is an auto generated Go binding around an Ethereum contract.
type IInflationController struct {
	*contract
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationController) CalculateSupplyDelta(opts *runOptions, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _IInflationController.call(opts, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ILiquidLogicMetaData contains all meta data concerning the ILiquidLogic contract.
var ILiquidLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"realisedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"58af672c": "realisedFees(address)",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
}

// ILiquidLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use ILiquidLogicMetaData.ABI instead.
var ILiquidLogicABI = ILiquidLogicMetaData.ABI

// Deprecated: Use ILiquidLogicMetaData.Sigs instead.
// ILiquidLogicFuncSigs maps the 4-byte function signature to its string representation.
var ILiquidLogicFuncSigs = ILiquidLogicMetaData.Sigs

// ILiquidLogic is an auto generated Go binding around an Ethereum contract.
type ILiquidLogic struct {
	*contract
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ILiquidLogic *ILiquidLogic) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ILiquidLogic *ILiquidLogic) BalanceOf(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_ILiquidLogic *ILiquidLogic) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_ILiquidLogic *ILiquidLogic) GetCommissionRate(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_ILiquidLogic *ILiquidLogic) GetTreasury(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "getTreasury")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_ILiquidLogic *ILiquidLogic) GetTreasuryUnclaimedATN(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_ILiquidLogic *ILiquidLogic) GetValidator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "getValidator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquidLogic *ILiquidLogic) LockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ILiquidLogic *ILiquidLogic) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// RealisedFees is a free data retrieval call binding the contract method 0x58af672c.
//
// Solidity: function realisedFees(address _account) view returns(uint256, uint256)
func (_ILiquidLogic *ILiquidLogic) RealisedFees(opts *runOptions, _account common.Address) (*big.Int, *big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "realisedFees", _account)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ILiquidLogic *ILiquidLogic) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ILiquidLogic *ILiquidLogic) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_ILiquidLogic *ILiquidLogic) UnclaimedRewards(opts *runOptions, _account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "unclaimedRewards", _account)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquidLogic *ILiquidLogic) UnlockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquidLogic.call(opts, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquidLogic *ILiquidLogic) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquidLogic.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) CallBurn(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquidLogic.call(opts, "burn", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_ILiquidLogic *ILiquidLogic) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquidLogic.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimTreasuryATN is a free data retrieval call for a paid mutator transaction binding the contract method 0xbd96102f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimTreasuryATN() returns()
func (_ILiquidLogic *ILiquidLogic) CallClaimTreasuryATN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquidLogic.call(opts, "claimTreasuryATN")
	r.revertSnapshot(snap)
	return consumed, err

}

// Lock is a free data retrieval call for a paid mutator transaction binding the contract method 0x282d3fdf.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) CallLock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquidLogic.call(opts, "lock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) CallMint(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquidLogic.call(opts, "mint", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Redistribute is a free data retrieval call for a paid mutator transaction binding the contract method 0xa0ce552d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_ILiquidLogic *ILiquidLogic) CallRedistribute(r *Runner, opts *runOptions, _ntnReward *big.Int) (*big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquidLogic.call(opts, "redistribute", _ntnReward)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SetCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x19fac8fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquidLogic *ILiquidLogic) CallSetCommissionRate(r *Runner, opts *runOptions, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquidLogic.call(opts, "setCommissionRate", _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquidLogic *ILiquidLogic) CallTransfer(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquidLogic.call(opts, "transfer", recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquidLogic *ILiquidLogic) CallTransferFrom(r *Runner, opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquidLogic.call(opts, "transferFrom", sender, recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unlock is a free data retrieval call for a paid mutator transaction binding the contract method 0x7eee288d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) CallUnlock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquidLogic.call(opts, "unlock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquidLogic *ILiquidLogic) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "approve", spender, amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) Burn(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "burn", _account, _amount)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_ILiquidLogic *ILiquidLogic) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "claimRewards")
	return consumed, err
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_ILiquidLogic *ILiquidLogic) ClaimTreasuryATN(opts *runOptions) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "claimTreasuryATN")
	return consumed, err
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) Lock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "lock", _account, _amount)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) Mint(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "mint", _account, _amount)
	return consumed, err
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_ILiquidLogic *ILiquidLogic) Redistribute(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "redistribute", _ntnReward)
	return consumed, err
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquidLogic *ILiquidLogic) SetCommissionRate(opts *runOptions, _rate *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "setCommissionRate", _rate)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquidLogic *ILiquidLogic) Transfer(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "transfer", recipient, amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquidLogic *ILiquidLogic) TransferFrom(opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "transferFrom", sender, recipient, amount)
	return consumed, err
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquidLogic *ILiquidLogic) Unlock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquidLogic.call(opts, "unlock", _account, _amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ILiquidLogicApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ILiquidLogic contract.
		type ILiquidLogicApprovalIterator struct {
			Event *ILiquidLogicApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ILiquidLogicApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ILiquidLogicApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ILiquidLogicApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ILiquidLogicApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ILiquidLogicApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ILiquidLogicApproval represents a Approval event raised by the ILiquidLogic contract.
		type ILiquidLogicApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_ILiquidLogic *ILiquidLogic) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ILiquidLogicApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _ILiquidLogic.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &ILiquidLogicApprovalIterator{contract: _ILiquidLogic.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_ILiquidLogic *ILiquidLogic) WatchApproval(opts *bind.WatchOpts, sink chan<- *ILiquidLogicApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _ILiquidLogic.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ILiquidLogicApproval)
						if err := _ILiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_ILiquidLogic *ILiquidLogic) ParseApproval(log types.Log) (*ILiquidLogicApproval, error) {
			event := new(ILiquidLogicApproval)
			if err := _ILiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ILiquidLogicTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ILiquidLogic contract.
		type ILiquidLogicTransferIterator struct {
			Event *ILiquidLogicTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ILiquidLogicTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ILiquidLogicTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ILiquidLogicTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ILiquidLogicTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ILiquidLogicTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ILiquidLogicTransfer represents a Transfer event raised by the ILiquidLogic contract.
		type ILiquidLogicTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_ILiquidLogic *ILiquidLogic) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ILiquidLogicTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _ILiquidLogic.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &ILiquidLogicTransferIterator{contract: _ILiquidLogic.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_ILiquidLogic *ILiquidLogic) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ILiquidLogicTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _ILiquidLogic.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ILiquidLogicTransfer)
						if err := _ILiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_ILiquidLogic *ILiquidLogic) ParseTransfer(log types.Log) (*ILiquidLogicTransfer, error) {
			event := new(ILiquidLogicTransfer)
			if err := _ILiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// INonStakableVestingVaultMetaData contains all meta data concerning the INonStakableVestingVault contract.
var INonStakableVestingVaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnlockedSubscribed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newUnlockedUnsubscribed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"f968f493": "unlockTokens()",
	},
}

// INonStakableVestingVaultABI is the input ABI used to generate the binding from.
// Deprecated: Use INonStakableVestingVaultMetaData.ABI instead.
var INonStakableVestingVaultABI = INonStakableVestingVaultMetaData.ABI

// Deprecated: Use INonStakableVestingVaultMetaData.Sigs instead.
// INonStakableVestingVaultFuncSigs maps the 4-byte function signature to its string representation.
var INonStakableVestingVaultFuncSigs = INonStakableVestingVaultMetaData.Sigs

// INonStakableVestingVault is an auto generated Go binding around an Ethereum contract.
type INonStakableVestingVault struct {
	*contract
}

// UnlockTokens is a free data retrieval call for a paid mutator transaction binding the contract method 0xf968f493.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_INonStakableVestingVault *INonStakableVestingVault) CallUnlockTokens(r *Runner, opts *runOptions) (struct {
	NewUnlockedSubscribed   *big.Int
	NewUnlockedUnsubscribed *big.Int
}, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _INonStakableVestingVault.call(opts, "unlockTokens")
	r.revertSnapshot(snap)

	outstruct := new(struct {
		NewUnlockedSubscribed   *big.Int
		NewUnlockedUnsubscribed *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.NewUnlockedSubscribed = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NewUnlockedUnsubscribed = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_INonStakableVestingVault *INonStakableVestingVault) UnlockTokens(opts *runOptions) (uint64, error) {
	_, consumed, err := _INonStakableVestingVault.call(opts, "unlockTokens")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IOracleMetaData contains all meta data concerning the IOracle contract.
var IOracleMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"33f98c77": "latestRoundData(string)",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"307de9b6": "vote(uint256,int256[],uint256)",
	},
}

// IOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use IOracleMetaData.ABI instead.
var IOracleABI = IOracleMetaData.ABI

// Deprecated: Use IOracleMetaData.Sigs instead.
// IOracleFuncSigs maps the 4-byte function signature to its string representation.
var IOracleFuncSigs = IOracleMetaData.Sigs

// IOracle is an auto generated Go binding around an Ethereum contract.
type IOracle struct {
	*contract
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_IOracle *IOracle) GetPrecision(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getPrecision")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracle) GetRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracle) GetRoundData(opts *runOptions, _round *big.Int, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracle) GetSymbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getSymbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracle) GetVotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracle) GetVoters(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getVoters")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracle) LatestRoundData(opts *runOptions, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracle) CallFinalize(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IOracle.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracle) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSymbols is a free data retrieval call for a paid mutator transaction binding the contract method 0x8d4f75d2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracle) CallSetSymbols(r *Runner, opts *runOptions, _symbols []string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setSymbols", _symbols)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetVoters is a free data retrieval call for a paid mutator transaction binding the contract method 0x845023f2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracle) CallSetVoters(r *Runner, opts *runOptions, _newVoters []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setVoters", _newVoters)
	r.revertSnapshot(snap)
	return consumed, err

}

// Vote is a free data retrieval call for a paid mutator transaction binding the contract method 0x307de9b6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracle) CallVote(r *Runner, opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "vote", _commit, _reports, _salt)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracle) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "finalize")
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracle) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setOperator", _operator)
	return consumed, err
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracle) SetSymbols(opts *runOptions, _symbols []string) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setSymbols", _symbols)
	return consumed, err
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracle) SetVoters(opts *runOptions, _newVoters []common.Address) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setVoters", _newVoters)
	return consumed, err
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracle) Vote(opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "vote", _commit, _reports, _salt)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IOracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the IOracle contract.
		type IOracleNewRoundIterator struct {
			Event *IOracleNewRound // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleNewRoundIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleNewRound)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleNewRound)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleNewRoundIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleNewRoundIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleNewRound represents a NewRound event raised by the IOracle contract.
		type IOracleNewRound struct {
			Round *big.Int;
			Height *big.Int;
			Timestamp *big.Int;
			VotePeriod *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
 		func (_IOracle *IOracle) FilterNewRound(opts *bind.FilterOpts) (*IOracleNewRoundIterator, error) {






			logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return &IOracleNewRoundIterator{contract: _IOracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
 		}

		// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_IOracle *IOracle) WatchNewRound(opts *bind.WatchOpts, sink chan<- *IOracleNewRound) (event.Subscription, error) {






			logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleNewRound)
						if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_IOracle *IOracle) ParseNewRound(log types.Log) (*IOracleNewRound, error) {
			event := new(IOracleNewRound)
			if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IOracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the IOracle contract.
		type IOracleNewSymbolsIterator struct {
			Event *IOracleNewSymbols // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleNewSymbolsIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleNewSymbols)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleNewSymbols)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleNewSymbolsIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleNewSymbolsIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleNewSymbols represents a NewSymbols event raised by the IOracle contract.
		type IOracleNewSymbols struct {
			Symbols []string;
			Round *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
 		func (_IOracle *IOracle) FilterNewSymbols(opts *bind.FilterOpts) (*IOracleNewSymbolsIterator, error) {




			logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return &IOracleNewSymbolsIterator{contract: _IOracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
 		}

		// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_IOracle *IOracle) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *IOracleNewSymbols) (event.Subscription, error) {




			logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleNewSymbols)
						if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_IOracle *IOracle) ParseNewSymbols(log types.Log) (*IOracleNewSymbols, error) {
			event := new(IOracleNewSymbols)
			if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IOracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the IOracle contract.
		type IOracleVotedIterator struct {
			Event *IOracleVoted // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleVotedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleVoted)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleVoted)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleVotedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleVotedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleVoted represents a Voted event raised by the IOracle contract.
		type IOracleVoted struct {
			Voter common.Address;
			Votes []*big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
 		func (_IOracle *IOracle) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*IOracleVotedIterator, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _IOracle.contract.FilterLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return &IOracleVotedIterator{contract: _IOracle.contract, event: "Voted", logs: logs, sub: sub}, nil
 		}

		// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_IOracle *IOracle) WatchVoted(opts *bind.WatchOpts, sink chan<- *IOracleVoted, _voter []common.Address) (event.Subscription, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _IOracle.contract.WatchLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleVoted)
						if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_IOracle *IOracle) ParseVoted(log types.Log) (*IOracleVoted, error) {
			event := new(IOracleVoted)
			if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IStabilizationMetaData contains all meta data concerning the IStabilization contract.
var IStabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
	},
}

// IStabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use IStabilizationMetaData.ABI instead.
var IStabilizationABI = IStabilizationMetaData.ABI

// Deprecated: Use IStabilizationMetaData.Sigs instead.
// IStabilizationFuncSigs maps the 4-byte function signature to its string representation.
var IStabilizationFuncSigs = IStabilizationMetaData.Sigs

// IStabilization is an auto generated Go binding around an Ethereum contract.
type IStabilization struct {
	*contract
}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilization) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStabilization.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilization) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStabilization.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilization) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _IStabilization.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilization) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _IStabilization.call(opts, "setOracle", oracle)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ISupplyControlMetaData contains all meta data concerning the ISupplyControl contract.
var ISupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
}

// ISupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use ISupplyControlMetaData.ABI instead.
var ISupplyControlABI = ISupplyControlMetaData.ABI

// Deprecated: Use ISupplyControlMetaData.Sigs instead.
// ISupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var ISupplyControlFuncSigs = ISupplyControlMetaData.Sigs

// ISupplyControl is an auto generated Go binding around an Ethereum contract.
type ISupplyControl struct {
	*contract
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControl) AvailableSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "availableSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControl) Stabilizer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "stabilizer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControl) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x44df8e70.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControl) CallBurn(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "burn")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControl) CallMint(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "mint", recipient, amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControl) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizer is a free data retrieval call for a paid mutator transaction binding the contract method 0xdb7f521a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControl) CallSetStabilizer(r *Runner, opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "setStabilizer", stabilizer_)
	r.revertSnapshot(snap)
	return consumed, err

}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControl) Burn(opts *runOptions) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "burn")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControl) Mint(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "mint", recipient, amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControl) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "setOperator", operator)
	return consumed, err
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControl) SetStabilizer(opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "setStabilizer", stabilizer_)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ISupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the ISupplyControl contract.
		type ISupplyControlBurnIterator struct {
			Event *ISupplyControlBurn // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ISupplyControlBurnIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ISupplyControlBurn)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ISupplyControlBurn)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ISupplyControlBurnIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ISupplyControlBurnIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ISupplyControlBurn represents a Burn event raised by the ISupplyControl contract.
		type ISupplyControlBurn struct {
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
 		func (_ISupplyControl *ISupplyControl) FilterBurn(opts *bind.FilterOpts) (*ISupplyControlBurnIterator, error) {



			logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return &ISupplyControlBurnIterator{contract: _ISupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
 		}

		// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_ISupplyControl *ISupplyControl) WatchBurn(opts *bind.WatchOpts, sink chan<- *ISupplyControlBurn) (event.Subscription, error) {



			logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ISupplyControlBurn)
						if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_ISupplyControl *ISupplyControl) ParseBurn(log types.Log) (*ISupplyControlBurn, error) {
			event := new(ISupplyControlBurn)
			if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ISupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the ISupplyControl contract.
		type ISupplyControlMintIterator struct {
			Event *ISupplyControlMint // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ISupplyControlMintIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ISupplyControlMint)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ISupplyControlMint)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ISupplyControlMintIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ISupplyControlMintIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ISupplyControlMint represents a Mint event raised by the ISupplyControl contract.
		type ISupplyControlMint struct {
			Recipient common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
 		func (_ISupplyControl *ISupplyControl) FilterMint(opts *bind.FilterOpts) (*ISupplyControlMintIterator, error) {




			logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return &ISupplyControlMintIterator{contract: _ISupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
 		}

		// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_ISupplyControl *ISupplyControl) WatchMint(opts *bind.WatchOpts, sink chan<- *ISupplyControlMint) (event.Subscription, error) {




			logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ISupplyControlMint)
						if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_ISupplyControl *ISupplyControl) ParseMint(log types.Log) (*ISupplyControlMint, error) {
			event := new(ISupplyControlMint)
			if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// InflationControllerMetaData contains all meta data concerning the InflationController contract.
var InflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"internalType\":\"structInflationController.Params\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Div_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Div_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Mul_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Mul_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
		"cff0ab96": "params()",
	},
	Bin: "0x608060405234801561001057600080fd5b506040516110c43803806110c483398101604081905261002f9161005c565b805160005560208101516001556040810151600255606081015160035560800151600455426005556100d9565b600060a0828403121561006e57600080fd5b60405160a081016001600160401b038111828210171561009e57634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b610fdc806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806392eff3cd1461003b578063cff0ab9614610061575b600080fd5b61004e610049366004610e97565b6100a3565b6040519081526020015b60405180910390f35b60005460015460025460035460045461007b949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610058565b6000806100bc600554856100b79190610edf565b610150565b905060006100d1600554856100b79190610edf565b60035490915081136100f1576100e88783836101da565b92505050610148565b60035482121561013857600061010d88846000600301546101da565b9050600061012188600060030154856102da565b905061012d8183610ef2565b945050505050610148565b6101438683836102da565b925050505b949350505050565b6000610168670de0b6b3a7640000600160ff1b610f1b565b821215610190576040516399474eeb60e01b8152600481018390526024015b60405180910390fd5b6101a9670de0b6b3a76400006001600160ff1b03610f1b565b8213156101cc57604051639d58109160e01b815260048101839052602401610187565b50670de0b6b3a76400000290565b6000806101f46000600201546101f06000610150565b1490565b156102305760005460015461022991906102249061021c9061021690846102fe565b8861030d565b6003546103d8565b610485565b90506102a2565b600061024461021c6000600201548761030d565b9050600061027c6102666102578461049a565b6102616001610150565b6102fe565b61027761025760006002015461049a565b6103d8565b60005460015491925061029d916102249061029790836102fe565b8461030d565b925050505b60006102c36102b9836102b489610150565b61030d565b6102b486886102fe565b90506102ce816104ef565b925050505b9392505050565b60006101486102f66102ee6102b987610150565b60045461030d565b6104ef565b90565b60006102d36102fb8385610f57565b60008282600160ff1b8214806103265750600160ff1b81145b156103445760405163a6070c2560e01b815260040160405180910390fd5b60008060008412610355578361035a565b836000035b91506000831261036a578261036f565b826000035b9050600061037d8383610503565b90506001600160ff1b038111156103b15760405163120b5b4360e01b81526004810189905260248101889052604401610187565b600019858518136103cb816103c7578260000390565b8290565b9998505050505050505050565b60008282600160ff1b8214806103f15750600160ff1b81145b1561040f576040516309fe2b4560e41b815260040160405180910390fd5b600080600084126104205783610425565b836000035b915060008312610435578261043a565b826000035b9050600061045183670de0b6b3a7640000846105b9565b90506001600160ff1b038111156103b15760405163d49c26b360e01b81526004810189905260248101889052604401610187565b60006102d36102fb8385610f7e565b92915050565b600081680736ea4425c11ac6308113156104ca5760405163ca7ec0c560e01b815260048101849052602401610187565b6714057b7ef767814f81026101486104ea670de0b6b3a7640000835b0590565b61068d565b6000610494670de0b6b3a764000083610f1b565b60008080600019848609848602925082811083820303915050806000036105375750670de0b6b3a764000090049050610494565b670de0b6b3a7640000811061056957604051635173648d60e01b81526004810186905260248101859052604401610187565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b60008080600019858709858702925082811083820303915050806000036105f3578382816105e9576105e9610f05565b04925050506102d3565b83811061062457604051630c740aef60e31b8152600481018790526024810186905260448101859052606401610187565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081818112156106ea5768033dd1780914b97114198112156106b35750600092915050565b6106e36106c66102fb6104ea8460000390565b6ec097ce7bc90715b34b9f1000000000816104e6576104e6610f05565b9150610731565b680a688906bd8affffff81131561071657604051626c1a0560e31b815260048101849052602401610187565b670de0b6b3a7640000604082901b056101486102fb82610737565b50919050565b600160bf1b67ff000000000000008216156108445767800000000000000082161561076b5768016a09e667f3bcc9090260401c5b67400000000000000082161561078a576801306fe0a31b7152df0260401c5b6720000000000000008216156107a9576801172b83c7d517adce0260401c5b6710000000000000008216156107c85768010b5586cf9890f62a0260401c5b6708000000000000008216156107e7576801059b0d31585743ae0260401c5b67040000000000000082161561080657680102c9a3e778060ee70260401c5b6702000000000000008216156108255768010163da9fb33356d80260401c5b67010000000000000082161561084457680100b1afa5abcbed610260401c5b66ff0000000000008216156109435766800000000000008216156108715768010058c86da1c09ea20260401c5b664000000000000082161561088f576801002c605e2e8cec500260401c5b66200000000000008216156108ad57680100162f3904051fa10260401c5b66100000000000008216156108cb576801000b175effdc76ba0260401c5b66080000000000008216156108e957680100058ba01fb9f96d0260401c5b66040000000000008216156109075768010002c5cc37da94920260401c5b6602000000000000821615610925576801000162e525ee05470260401c5b66010000000000008216156109435768010000b17255775c040260401c5b65ff0000000000821615610a39576580000000000082161561096e576801000058b91b5bc9ae0260401c5b6540000000000082161561098b57680100002c5c89d5ec6d0260401c5b652000000000008216156109a85768010000162e43f4f8310260401c5b651000000000008216156109c557680100000b1721bcfc9a0260401c5b650800000000008216156109e25768010000058b90cf1e6e0260401c5b650400000000008216156109ff576801000002c5c863b73f0260401c5b65020000000000821615610a1c57680100000162e430e5a20260401c5b65010000000000821615610a39576801000000b1721835510260401c5b64ff00000000821615610b2657648000000000821615610a6257680100000058b90c0b490260401c5b644000000000821615610a7e5768010000002c5c8601cc0260401c5b642000000000821615610a9a576801000000162e42fff00260401c5b641000000000821615610ab65768010000000b17217fbb0260401c5b640800000000821615610ad2576801000000058b90bfce0260401c5b640400000000821615610aee57680100000002c5c85fe30260401c5b640200000000821615610b0a5768010000000162e42ff10260401c5b640100000000821615610b2657680100000000b17217f80260401c5b63ff000000821615610c0a576380000000821615610b4d5768010000000058b90bfc0260401c5b6340000000821615610b68576801000000002c5c85fe0260401c5b6320000000821615610b8357680100000000162e42ff0260401c5b6310000000821615610b9e576801000000000b17217f0260401c5b6308000000821615610bb957680100000000058b90c00260401c5b6304000000821615610bd45768010000000002c5c8600260401c5b6302000000821615610bef576801000000000162e4300260401c5b6301000000821615610c0a5768010000000000b172180260401c5b62ff0000821615610ce55762800000821615610c2f576801000000000058b90c0260401c5b62400000821615610c4957680100000000002c5c860260401c5b62200000821615610c635768010000000000162e430260401c5b62100000821615610c7d57680100000000000b17210260401c5b62080000821615610c975768010000000000058b910260401c5b62040000821615610cb1576801000000000002c5c80260401c5b62020000821615610ccb57680100000000000162e40260401c5b62010000821615610ce5576801000000000000b1720260401c5b61ff00821615610db757618000821615610d0857680100000000000058b90260401c5b614000821615610d215768010000000000002c5d0260401c5b612000821615610d3a576801000000000000162e0260401c5b611000821615610d535768010000000000000b170260401c5b610800821615610d6c576801000000000000058c0260401c5b610400821615610d8557680100000000000002c60260401c5b610200821615610d9e57680100000000000001630260401c5b610100821615610db757680100000000000000b10260401c5b60ff821615610e80576080821615610dd857680100000000000000590260401c5b6040821615610df0576801000000000000002c0260401c5b6020821615610e0857680100000000000000160260401c5b6010821615610e20576801000000000000000b0260401c5b6008821615610e3857680100000000000000060260401c5b6004821615610e5057680100000000000000030260401c5b6002821615610e6857680100000000000000010260401c5b6001821615610e8057680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b60008060008060808587031215610ead57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561049457610494610ec9565b8082018082111561049457610494610ec9565b634e487b7160e01b600052601260045260246000fd5b600082610f3857634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610f5257610f52610ec9565b500590565b8181036000831280158383131683831282161715610f7757610f77610ec9565b5092915050565b8082018281126000831280158216821582161715610f9e57610f9e610ec9565b50509291505056fea2646970667358221220504f3314895e62f29ab0c4b64de9dfae65546185267645a44e47d1b435d782dc64736f6c63430008150033",
}

// InflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use InflationControllerMetaData.ABI instead.
var InflationControllerABI = InflationControllerMetaData.ABI

// Deprecated: Use InflationControllerMetaData.Sigs instead.
// InflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var InflationControllerFuncSigs = InflationControllerMetaData.Sigs

// InflationControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InflationControllerMetaData.Bin instead.
var InflationControllerBin = InflationControllerMetaData.Bin

// DeployInflationController deploys a new Ethereum contract, binding an instance of InflationController to it.
func (r *Runner) DeployInflationController(opts *runOptions, _params InflationControllerParams) (common.Address, uint64, *InflationController, error) {
	parsed, err := InflationControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(InflationControllerBin), _params)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &InflationController{contract: c}, nil
}

// InflationController is an auto generated Go binding around an Ethereum contract.
type InflationController struct {
	*contract
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationController) CalculateSupplyDelta(opts *runOptions, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _InflationController.call(opts, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationController) Params(opts *runOptions) (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, uint64, error) {
	out, consumed, err := _InflationController.call(opts, "params")

	outstruct := new(struct {
		InflationRateInitial      *big.Int
		InflationRateTransition   *big.Int
		InflationCurveConvexity   *big.Int
		InflationTransitionPeriod *big.Int
		InflationReserveDecayRate *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InflationRateInitial = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.InflationRateTransition = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.InflationCurveConvexity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.InflationTransitionPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.InflationReserveDecayRate = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidLogicMetaData contains all meta data concerning the LiquidLogic contract.
var LiquidLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"realisedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"58af672c": "realisedFees(address)",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
	Bin: "",
}

// LiquidLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidLogicMetaData.ABI instead.
var LiquidLogicABI = LiquidLogicMetaData.ABI

// Deprecated: Use LiquidLogicMetaData.Sigs instead.
// LiquidLogicFuncSigs maps the 4-byte function signature to its string representation.
var LiquidLogicFuncSigs = LiquidLogicMetaData.Sigs

// LiquidLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidLogicMetaData.Bin instead.
var LiquidLogicBin = LiquidLogicMetaData.Bin

// DeployLiquidLogic deploys a new Ethereum contract, binding an instance of LiquidLogic to it.
func (r *Runner) DeployLiquidLogic(opts *runOptions) (common.Address, uint64, *LiquidLogic, error) {
	parsed, err := LiquidLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidLogicBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidLogic{contract: c}, nil
}

// LiquidLogic is an auto generated Go binding around an Ethereum contract.
type LiquidLogic struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_LiquidLogic *LiquidLogic) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogic) FEEFACTORUNITRECIP(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogic) Allowance(opts *runOptions, _owner common.Address, _spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "allowance", _owner, _spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) BalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "balanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidLogic *LiquidLogic) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogic) GetCommissionRate(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_LiquidLogic *LiquidLogic) GetTreasury(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getTreasury")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogic) GetTreasuryUnclaimedATN(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_LiquidLogic *LiquidLogic) GetValidator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getValidator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) LockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogic) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// RealisedFees is a free data retrieval call binding the contract method 0x58af672c.
//
// Solidity: function realisedFees(address _account) view returns(uint256, uint256)
func (_LiquidLogic *LiquidLogic) RealisedFees(opts *runOptions, _account common.Address) (*big.Int, *big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "realisedFees", _account)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogic) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogic) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidLogic *LiquidLogic) UnclaimedRewards(opts *runOptions, _account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "unclaimedRewards", _account)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) UnlockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) CallApprove(r *Runner, opts *runOptions, _spender common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "approve", _spender, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallBurn(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "burn", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogic) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimTreasuryATN is a free data retrieval call for a paid mutator transaction binding the contract method 0xbd96102f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogic) CallClaimTreasuryATN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "claimTreasuryATN")
	r.revertSnapshot(snap)
	return consumed, err

}

// Lock is a free data retrieval call for a paid mutator transaction binding the contract method 0x282d3fdf.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallLock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "lock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallMint(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "mint", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Redistribute is a free data retrieval call for a paid mutator transaction binding the contract method 0xa0ce552d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogic) CallRedistribute(r *Runner, opts *runOptions, _ntnReward *big.Int) (*big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "redistribute", _ntnReward)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SetCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x19fac8fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogic) CallSetCommissionRate(r *Runner, opts *runOptions, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "setCommissionRate", _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogic) CallTransfer(r *Runner, opts *runOptions, _to common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "transfer", _to, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unlock is a free data retrieval call for a paid mutator transaction binding the contract method 0x7eee288d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallUnlock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "unlock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) Approve(opts *runOptions, _spender common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "approve", _spender, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Burn(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "burn", _account, _amount)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogic) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "claimRewards")
	return consumed, err
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogic) ClaimTreasuryATN(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "claimTreasuryATN")
	return consumed, err
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Lock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "lock", _account, _amount)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Mint(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "mint", _account, _amount)
	return consumed, err
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogic) Redistribute(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "redistribute", _ntnReward)
	return consumed, err
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogic) SetCommissionRate(opts *runOptions, _rate *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "setCommissionRate", _rate)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogic) Transfer(opts *runOptions, _to common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "transfer", _to, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Unlock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "unlock", _account, _amount)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogic) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogic) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// LiquidLogicApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LiquidLogic contract.
		type LiquidLogicApprovalIterator struct {
			Event *LiquidLogicApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *LiquidLogicApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(LiquidLogicApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(LiquidLogicApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *LiquidLogicApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *LiquidLogicApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// LiquidLogicApproval represents a Approval event raised by the LiquidLogic contract.
		type LiquidLogicApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_LiquidLogic *LiquidLogic) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LiquidLogicApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &LiquidLogicApprovalIterator{contract: _LiquidLogic.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_LiquidLogic *LiquidLogic) WatchApproval(opts *bind.WatchOpts, sink chan<- *LiquidLogicApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(LiquidLogicApproval)
						if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_LiquidLogic *LiquidLogic) ParseApproval(log types.Log) (*LiquidLogicApproval, error) {
			event := new(LiquidLogicApproval)
			if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// LiquidLogicTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LiquidLogic contract.
		type LiquidLogicTransferIterator struct {
			Event *LiquidLogicTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *LiquidLogicTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(LiquidLogicTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(LiquidLogicTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *LiquidLogicTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *LiquidLogicTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// LiquidLogicTransfer represents a Transfer event raised by the LiquidLogic contract.
		type LiquidLogicTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_LiquidLogic *LiquidLogic) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidLogicTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &LiquidLogicTransferIterator{contract: _LiquidLogic.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_LiquidLogic *LiquidLogic) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LiquidLogicTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(LiquidLogicTransfer)
						if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_LiquidLogic *LiquidLogic) ParseTransfer(log types.Log) (*LiquidLogicTransfer, error) {
			event := new(LiquidLogicTransfer)
			if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// LiquidRewardManagerMetaData contains all meta data concerning the LiquidRewardManager contract.
var LiquidRewardManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getLastRewardEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequestID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBonding\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"eventExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"internalType\":\"structLiquidRewardManager.RewardEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getPendingRewardEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequestID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBonding\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"eventExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"internalType\":\"structLiquidRewardManager.RewardEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"35bac03c": "getLastRewardEvent(address)",
		"929c49bb": "getPendingRewardEvent(address)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161031938038061031983398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610286806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063187cf4d71461004657806335bac03c14610064578063929c49bb1461016b575b600080fd5b610051633b9aca0081565b6040519081526020015b60405180910390f35b610119610072366004610220565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506001600160a01b0316600090815260026020908152604091829020825160c0810184526004820154815260058201549281019290925260068101549282019290925260079091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a082015290565b60405161005b9190600060c08201905082518252602083015160208301526040830151604083015260608301511515606083015260808301511515608083015260a0830151151560a083015292915050565b610119610179366004610220565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506001600160a01b0316600090815260026020908152604091829020825160c08101845260088201548152600982015492810192909252600a81015492820192909252600b9091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a082015290565b60006020828403121561023257600080fd5b81356001600160a01b038116811461024957600080fd5b939250505056fea264697066735822122016211ebedd01bcfb8c24a521d27ea49dfcfd4343783ed1dbdbaa33eac8000fbf64736f6c63430008150033",
}

// LiquidRewardManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidRewardManagerMetaData.ABI instead.
var LiquidRewardManagerABI = LiquidRewardManagerMetaData.ABI

// Deprecated: Use LiquidRewardManagerMetaData.Sigs instead.
// LiquidRewardManagerFuncSigs maps the 4-byte function signature to its string representation.
var LiquidRewardManagerFuncSigs = LiquidRewardManagerMetaData.Sigs

// LiquidRewardManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidRewardManagerMetaData.Bin instead.
var LiquidRewardManagerBin = LiquidRewardManagerMetaData.Bin

// DeployLiquidRewardManager deploys a new Ethereum contract, binding an instance of LiquidRewardManager to it.
func (r *Runner) DeployLiquidRewardManager(opts *runOptions, _autonity common.Address) (common.Address, uint64, *LiquidRewardManager, error) {
	parsed, err := LiquidRewardManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidRewardManagerBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidRewardManager{contract: c}, nil
}

// LiquidRewardManager is an auto generated Go binding around an Ethereum contract.
type LiquidRewardManager struct {
	*contract
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidRewardManager *LiquidRewardManager) FEEFACTORUNITRECIP(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidRewardManager.call(opts, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLastRewardEvent is a free data retrieval call binding the contract method 0x35bac03c.
//
// Solidity: function getLastRewardEvent(address _validator) view returns((uint256,uint256,uint256,bool,bool,bool))
func (_LiquidRewardManager *LiquidRewardManager) GetLastRewardEvent(opts *runOptions, _validator common.Address) (LiquidRewardManagerRewardEvent, uint64, error) {
	out, consumed, err := _LiquidRewardManager.call(opts, "getLastRewardEvent", _validator)

	if err != nil {
		return *new(LiquidRewardManagerRewardEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(LiquidRewardManagerRewardEvent)).(*LiquidRewardManagerRewardEvent)
	return out0, consumed, err

}

// GetPendingRewardEvent is a free data retrieval call binding the contract method 0x929c49bb.
//
// Solidity: function getPendingRewardEvent(address _validator) view returns((uint256,uint256,uint256,bool,bool,bool))
func (_LiquidRewardManager *LiquidRewardManager) GetPendingRewardEvent(opts *runOptions, _validator common.Address) (LiquidRewardManagerRewardEvent, uint64, error) {
	out, consumed, err := _LiquidRewardManager.call(opts, "getPendingRewardEvent", _validator)

	if err != nil {
		return *new(LiquidRewardManagerRewardEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(LiquidRewardManagerRewardEvent)).(*LiquidRewardManagerRewardEvent)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidStateMetaData contains all meta data concerning the LiquidState contract.
var LiquidStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516105c23803806105c283398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101868061043c6000396000f3fe60806040523661001b57610019610014610022565b6100fd565b005b6100196100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009c9190610120565b90506001600160a01b0381166100f85760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e8061011a573d6000fd5b503d6000f35b60006020828403121561013257600080fd5b81516001600160a01b038116811461014957600080fd5b939250505056fea26469706673582212209a75da0350dfc1a208a35175851bcd7988a0dcb079ef84c93d9ea49a25303b2064736f6c63430008150033",
}

// LiquidStateABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateMetaData.ABI instead.
var LiquidStateABI = LiquidStateMetaData.ABI

// LiquidStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateMetaData.Bin instead.
var LiquidStateBin = LiquidStateMetaData.Bin

// DeployLiquidState deploys a new Ethereum contract, binding an instance of LiquidState to it.
func (r *Runner) DeployLiquidState(opts *runOptions, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, uint64, *LiquidState, error) {
	parsed, err := LiquidStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStateBin), _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidState{contract: c}, nil
}

// LiquidState is an auto generated Go binding around an Ethereum contract.
type LiquidState struct {
	*contract
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidState) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidState.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidState *LiquidState) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidState.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidStateTestMetaData contains all meta data concerning the LiquidStateTest contract.
var LiquidStateTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"96f18a32": "liquidLogicContract()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161062e38038061062e83398101604081905261002f916101b9565b8484848484806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610072573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009691906102a9565b8311156100a257600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e89083906020016102c2565b604051602081830303815290604052600a90816101059190610378565b508160405160200161011791906102c2565b604051602081830303815290604052600b90816101349190610378565b5050601080546001600160a01b0319163317905550610437975050505050505050565b6001600160a01b038116811461016c57600080fd5b50565b805161017a81610157565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101b0578181015183820152602001610198565b50506000910152565b600080600080600060a086880312156101d157600080fd5b85516101dc81610157565b60208701519095506101ed81610157565b6040870151606088015191955093506001600160401b038082111561021157600080fd5b818801915088601f83011261022557600080fd5b8151818111156102375761023761017f565b604051601f8201601f19908116603f0116810190838211818310171561025f5761025f61017f565b816040528281528b602084870101111561027857600080fd5b610289836020830160208801610195565b809650505050505061029d6080870161016f565b90509295509295909350565b6000602082840312156102bb57600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102e2816005850160208701610195565b9190910160050192915050565b600181811c9082168061030357607f821691505b60208210810361032357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561037357600081815260208120601f850160051c810160208610156103505750805b601f850160051c820191505b8181101561036f5782815560010161035c565b5050505b505050565b81516001600160401b038111156103915761039161017f565b6103a58161039f84546102ef565b84610329565b602080601f8311600181146103da57600084156103c25750858301515b600019600386901b1c1916600185901b17855561036f565b600085815260208120601f198616915b82811015610409578886015182559484019460019091019084016103ea565b50858210156104275787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101e8806104466000396000f3fe6080604052600436106100225760003560e01c806396f18a321461004457610039565b3661003957610037610032610075565b610150565b005b610037610032610075565b34801561005057600080fd5b50610059610173565b6040516001600160a01b03909116815260200160405180910390f35b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef9190610182565b90506001600160a01b03811661014b5760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e8061016d573d6000fd5b503d6000f35b600061017d610075565b905090565b60006020828403121561019457600080fd5b81516001600160a01b03811681146101ab57600080fd5b939250505056fea2646970667358221220e6f537c5afb0ba33689f2bddc66475e19ec1e69f760c8c97f9e0feae76aa9df664736f6c63430008150033",
}

// LiquidStateTestABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateTestMetaData.ABI instead.
var LiquidStateTestABI = LiquidStateTestMetaData.ABI

// Deprecated: Use LiquidStateTestMetaData.Sigs instead.
// LiquidStateTestFuncSigs maps the 4-byte function signature to its string representation.
var LiquidStateTestFuncSigs = LiquidStateTestMetaData.Sigs

// LiquidStateTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateTestMetaData.Bin instead.
var LiquidStateTestBin = LiquidStateTestMetaData.Bin

// DeployLiquidStateTest deploys a new Ethereum contract, binding an instance of LiquidStateTest to it.
func (r *Runner) DeployLiquidStateTest(opts *runOptions, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, uint64, *LiquidStateTest, error) {
	parsed, err := LiquidStateTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStateTestBin), _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidStateTest{contract: c}, nil
}

// LiquidStateTest is an auto generated Go binding around an Ethereum contract.
type LiquidStateTest struct {
	*contract
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidStateTest *LiquidStateTest) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidStateTest.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidStateTest *LiquidStateTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidStateTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidStateTest *LiquidStateTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidStateTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidStorageMetaData contains all meta data concerning the LiquidStorage contract.
var LiquidStorageMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220730388d937118fbd6003af9256098ad9c3eca4cdb2a7fc276bc15d5af2817bae64736f6c63430008150033",
}

// LiquidStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStorageMetaData.ABI instead.
var LiquidStorageABI = LiquidStorageMetaData.ABI

// LiquidStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStorageMetaData.Bin instead.
var LiquidStorageBin = LiquidStorageMetaData.Bin

// DeployLiquidStorage deploys a new Ethereum contract, binding an instance of LiquidStorage to it.
func (r *Runner) DeployLiquidStorage(opts *runOptions) (common.Address, uint64, *LiquidStorage, error) {
	parsed, err := LiquidStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStorageBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidStorage{contract: c}, nil
}

// LiquidStorage is an auto generated Go binding around an Ethereum contract.
type LiquidStorage struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// NonStakableVestingMetaData contains all meta data concerning the NonStakableVesting contract.
var NonStakableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unsubscribedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnlockedUnsubscribed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structNonStakableVesting.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowedDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalNominal\",\"type\":\"uint256\"}],\"name\":\"setTotalNominal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNominal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnlockedSubscribed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newUnlockedUnsubscribed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"2afbbacb": "canStake(address,uint256)",
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"0b5d0e42": "createSchedule(uint256,uint256,uint256,uint256)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"c5ca93a7": "getSchedule(uint256)",
		"d934047d": "maxAllowedDuration()",
		"7b8d4744": "newContract(address,uint256,uint256)",
		"0a30959d": "releaseAllFunds(uint256)",
		"07ae499f": "releaseFund(uint256,uint256)",
		"4e974657": "setMaxAllowedDuration(uint256)",
		"995e21a4": "setTotalNominal(uint256)",
		"635bf933": "totalContracts(address)",
		"b0c93009": "totalNominal()",
		"f968f493": "unlockTokens()",
		"21ec4487": "unlockedFunds(address,uint256)",
	},
	Bin: "0x60806040523480156200001157600080fd5b50604051620019623803806200196283398101604081905262000034916200007f565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b61189480620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637b8d474411610097578063b0c9300911610066578063b0c9300914610242578063c5ca93a71461024b578063d934047d146102bf578063f968f493146102c857600080fd5b80637b8d4744146101e9578063995e21a4146101fc578063a9f45b621461020f578063aad557261461022257600080fd5b806321ec4487116100d357806321ec4487146101695780632afbbacb1461018a5780634e974657146101ad578063635bf933146101c057600080fd5b806307ae499f146101055780630a30959d1461011a5780630b5d0e421461012d578063213fe2b714610140575b600080fd5b610118610113366004611544565b6102e5565b005b610118610128366004611566565b610360565b61011861013b36600461157f565b610385565b61015361014e3660046115cd565b610623565b60405161016091906115e8565b60405180910390f35b61017c61017736600461166d565b610797565b604051908152602001610160565b61019d61019836600461166d565b6107b4565b6040519015158152602001610160565b6101186101bb366004611566565b6107f0565b61017c6101ce3660046115cd565b6001600160a01b031660009081526020819052604090205490565b6101186101f7366004611697565b61081f565b61011861020a366004611566565b610a36565b61011861021d3660046116ca565b610a65565b61023561023036600461166d565b610aa3565b6040516101609190611706565b61017c60045481565b61025e610259366004611566565b610b5c565b6040516101609190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b61017c60055481565b6102d0610c79565b60408051928352602083019190915201610160565b60006102f13384610e1e565b90506102fc81610eb8565b8211156103505760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f75676820756e6c6f636b65642066756e64730000000000000060448201526064015b60405180910390fd5b61035a8183610f02565b50505050565b600061036c3383610e1e565b90506103808161037b83610eb8565b610f02565b505050565b6003546001600160a01b031633146103af5760405162461bcd60e51b81526004016103479061174b565b8360045410156104135760405162461bcd60e51b815260206004820152602960248201527f6e6f7420656e6f7567682066756e647320746f206372656174652061206e6577604482015268207363686564756c6560b81b6064820152608401610347565b8060055410156104825760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b6064820152608401610347565b6040805161010081018252848152602081018481529181018381526060820187815260808301888152600060a0850181815260c0860182815260e087018381526006805460018101825590855297517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60089099029889015597517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4088015594517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4187015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4286015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4385015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4484015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4583015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d469091015560048054869290610618908490611798565b909155505050505050565b6001600160a01b038116600090815260208190526040812080546060929067ffffffffffffffff811115610659576106596117ab565b6040519080825280602002602001820160405280156106c557816020015b6106b26040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816106775790505b50905060005b815181101561078f5760018382815481106106e8576106e86117c1565b906000526020600020015481548110610703576107036117c1565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a08201528251839083908110610771576107716117c1565b60200260200101819052508080610787906117d7565b9150506106cb565b509392505050565b60006107ab6107a68484610e1e565b610eb8565b90505b92915050565b600060016107c28484610e1e565b815481106107d2576107d26117c1565b600091825260209091206006909102016005015460ff169392505050565b6003546001600160a01b0316331461081a5760405162461bcd60e51b81526004016103479061174b565b600555565b6003546001600160a01b031633146108495760405162461bcd60e51b81526004016103479061174b565b60065481106108905760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a59081cd8da19591d5b19481251606a1b6044820152606401610347565b6000600682815481106108a5576108a56117c1565b90600052602060002090600802019050828160040154101561092f5760405162461bcd60e51b815260206004820152603860248201527f6e6f7420656e6f7567682066756e647320746f206372656174652061206e657760448201527f20636f6e747261637420756e646572207363686564756c6500000000000000006064820152608401610347565b600061094c85858460000154856001015486600201546000610f6e565b600081815260076020526040902084905560018301548354919250610970916117f0565b826007015410610a165760006001828154811061098f5761098f6117c1565b9060005260206000209060060201905060008360040154846006015483600001546109ba9190611803565b6109c4919061181a565b9050808460060160008282546109da9190611798565b90915550508154819083906000906109f3908490611798565b9250508190555080826001016000828254610a0e91906117f0565b909155505050505b83826004016000828254610a2a9190611798565b90915550505050505050565b6003546001600160a01b03163314610a605760405162461bcd60e51b81526004016103479061174b565b600455565b6003546001600160a01b03163314610a8f5760405162461bcd60e51b81526004016103479061174b565b610380610a9c8484610e1e565b8483611123565b610ade6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6001610aea8484610e1e565b81548110610afa57610afa6117c1565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b610ba460405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6006548210610bf55760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f742065786973740000000000000000006044820152606401610347565b60068281548110610c0857610c086117c1565b906000526020600020906008020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b60025460009081906001600160a01b03163314610ce95760405162461bcd60e51b815260206004820152602860248201527f66756e6374696f6e207265737472696374656420746f204175746f6e6974792060448201526718dbdb9d1c9858dd60c21b6064820152608401610347565b426000805b600654811015610e0b57600060068281548110610d0d57610d0d6117c1565b906000526020600020906008020190508381600001548260010154610d3291906117f0565b1180610d45575080600501548160030154145b15610d505750610df9565b8381600701819055506000610d7382600001548360020154878560030154611273565b90508160050154811015610d88575060058101545b6005820154610d979082611798565b610da190856117f0565b60058301829055825460028401546004850154929650610dc2928890611273565b90508160060154811015610dd7575060068101545b6006820154610de69082611798565b610df090876117f0565b60069092015593505b80610e03816117d7565b915050610cee565b50610e168382611798565b935050509091565b6001600160a01b0382166000908152602081905260408120548210610e7b5760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b6044820152606401610347565b6001600160a01b0383166000908152602081905260409020805483908110610ea557610ea56117c1565b9060005260206000200154905092915050565b60006107ae82610ec7846112b6565b600085815260076020526040902054600680549091908110610eeb57610eeb6117c1565b9060005260206000209060080201600701546112f7565b60008060018481548110610f1857610f186117c1565b906000526020600020906006020190508060000154831115610f56578054610f409084611798565b9150610f51843383600001546113c8565b610f67565b8215610f6757610f678433856113c8565b5092915050565b6000838311610fbf5760405162461bcd60e51b815260206004820152601e60248201527f656e64206d7573742062652067726561746572207468616e20636c69666600006044820152606401610347565b50600180546040805160c08101825297885260006020808a018281528a8401998a5260608b0198895260808b0197885295151560a08b01908152848601865585835299517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600686029081019190915595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf787015597517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf886015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf985015593517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa84015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb909201805460ff1916921515929092179091556001600160a01b0395909516825281835281208054948501815581522090910181905590565b6001600160a01b0382166000908152602081905260408120805490919061114c90600190611798565b67ffffffffffffffff811115611164576111646117ab565b60405190808252806020026020018201604052801561118d578160200160208202803683370190505b5090506000805b835481101561121b57868482815481106111b0576111b06117c1565b90600052602060002001540315611209578381815481106111d3576111d36117c1565b90600052602060002001548383806111ea906117d7565b9450815181106111fc576111fc6117c1565b6020026020010181815250505b80611213816117d7565b915050611194565b506001600160a01b0385166000908152602081815260409091208351611243928501906114e4565b505050506001600160a01b0316600090815260208181526040822080546001810182559083529120019190915550565b600061127f85856117f0565b831061128c5750806112ae565b836112978685611798565b6112a19084611803565b6112ab919061181a565b90505b949350505050565b600080600183815481106112cc576112cc6117c1565b90600052602060002090600602019050806001015481600001546112f091906117f0565b9392505050565b6000806001858154811061130d5761130d6117c1565b906000526020600020906006020190508060030154816002015461133191906117f0565b8310156113805760405162461bcd60e51b815260206004820152601c60248201527f636c69666620706572696f64206e6f74207265616368656420796574000000006044820152606401610347565b6000611396826002015483600401548688611273565b905081600101548111156113bc5760018201546113b39082611798565b925050506112f0565b50600095945050505050565b6000600184815481106113dd576113dd6117c1565b90600052602060002090600602019050818160000160008282546114019190611798565b925050819055508181600101600082825461141c91906117f0565b9091555061035a9050838360025460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb906044016020604051808303816000875af115801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f919061183c565b9050806103805760405162461bcd60e51b8152602060048201526013602482015272139513881b9bdd081d1c985b9cd9995c9c9959606a1b6044820152606401610347565b82805482825590600052602060002090810192821561151f579160200282015b8281111561151f578251825591602001919060010190611504565b5061152b92915061152f565b5090565b5b8082111561152b5760008155600101611530565b6000806040838503121561155757600080fd5b50508035926020909101359150565b60006020828403121561157857600080fd5b5035919050565b6000806000806080858703121561159557600080fd5b5050823594602084013594506040840135936060013592509050565b80356001600160a01b03811681146115c857600080fd5b919050565b6000602082840312156115df57600080fd5b6107ab826115b1565b6020808252825182820181905260009190848201906040850190845b818110156116615761164e838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c09290920191600101611604565b50909695505050505050565b6000806040838503121561168057600080fd5b611689836115b1565b946020939093013593505050565b6000806000606084860312156116ac57600080fd5b6116b5846115b1565b95602085013595506040909401359392505050565b6000806000606084860312156116df57600080fd5b6116e8846115b1565b9250602084013591506116fd604085016115b1565b90509250925092565b60c081016107ae8284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107ae576107ae611782565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016117e9576117e9611782565b5060010190565b808201808211156107ae576107ae611782565b80820281158282048414176107ae576107ae611782565b60008261183757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561184e57600080fd5b815180151581146112f057600080fdfea2646970667358221220b15e857dbf97a3a0f62174a9bd391d3650edf95f6cb45b6084d7c13b2353766464736f6c63430008150033",
}

// NonStakableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use NonStakableVestingMetaData.ABI instead.
var NonStakableVestingABI = NonStakableVestingMetaData.ABI

// Deprecated: Use NonStakableVestingMetaData.Sigs instead.
// NonStakableVestingFuncSigs maps the 4-byte function signature to its string representation.
var NonStakableVestingFuncSigs = NonStakableVestingMetaData.Sigs

// NonStakableVestingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NonStakableVestingMetaData.Bin instead.
var NonStakableVestingBin = NonStakableVestingMetaData.Bin

// DeployNonStakableVesting deploys a new Ethereum contract, binding an instance of NonStakableVesting to it.
func (r *Runner) DeployNonStakableVesting(opts *runOptions, _autonity common.Address, _operator common.Address) (common.Address, uint64, *NonStakableVesting, error) {
	parsed, err := NonStakableVestingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(NonStakableVestingBin), _autonity, _operator)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &NonStakableVesting{contract: c}, nil
}

// NonStakableVesting is an auto generated Go binding around an Ethereum contract.
type NonStakableVesting struct {
	*contract
}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_NonStakableVesting *NonStakableVesting) CanStake(opts *runOptions, _beneficiary common.Address, _id *big.Int) (bool, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "canStake", _beneficiary, _id)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakableVesting *NonStakableVesting) GetContract(opts *runOptions, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakableVesting *NonStakableVesting) GetContracts(opts *runOptions, _beneficiary common.Address) ([]ContractBaseContract, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)
	return out0, consumed, err

}

// GetSchedule is a free data retrieval call binding the contract method 0xc5ca93a7.
//
// Solidity: function getSchedule(uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))
func (_NonStakableVesting *NonStakableVesting) GetSchedule(opts *runOptions, _id *big.Int) (NonStakableVestingSchedule, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getSchedule", _id)

	if err != nil {
		return *new(NonStakableVestingSchedule), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(NonStakableVestingSchedule)).(*NonStakableVestingSchedule)
	return out0, consumed, err

}

// MaxAllowedDuration is a free data retrieval call binding the contract method 0xd934047d.
//
// Solidity: function maxAllowedDuration() view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) MaxAllowedDuration(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "maxAllowedDuration")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) TotalNominal(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "totalNominal")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) UnlockedFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "unlockedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9f45b62.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakableVesting *NonStakableVesting) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// CreateSchedule is a free data retrieval call for a paid mutator transaction binding the contract method 0x0b5d0e42.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createSchedule(uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_NonStakableVesting *NonStakableVesting) CallCreateSchedule(r *Runner, opts *runOptions, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "createSchedule", _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// NewContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x7b8d4744.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVesting) CallNewContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "newContract", _beneficiary, _amount, _scheduleID)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x0a30959d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllFunds(uint256 _id) returns()
func (_NonStakableVesting *NonStakableVesting) CallReleaseAllFunds(r *Runner, opts *runOptions, _id *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "releaseAllFunds", _id)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFund is a free data retrieval call for a paid mutator transaction binding the contract method 0x07ae499f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFund(uint256 _id, uint256 _amount) returns()
func (_NonStakableVesting *NonStakableVesting) CallReleaseFund(r *Runner, opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "releaseFund", _id, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMaxAllowedDuration is a free data retrieval call for a paid mutator transaction binding the contract method 0x4e974657.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMaxAllowedDuration(uint256 _newMaxDuration) returns()
func (_NonStakableVesting *NonStakableVesting) CallSetMaxAllowedDuration(r *Runner, opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "setMaxAllowedDuration", _newMaxDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTotalNominal is a free data retrieval call for a paid mutator transaction binding the contract method 0x995e21a4.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTotalNominal(uint256 _totalNominal) returns()
func (_NonStakableVesting *NonStakableVesting) CallSetTotalNominal(r *Runner, opts *runOptions, _totalNominal *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "setTotalNominal", _totalNominal)
	r.revertSnapshot(snap)
	return consumed, err

}

// UnlockTokens is a free data retrieval call for a paid mutator transaction binding the contract method 0xf968f493.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_NonStakableVesting *NonStakableVesting) CallUnlockTokens(r *Runner, opts *runOptions) (struct {
	NewUnlockedSubscribed   *big.Int
	NewUnlockedUnsubscribed *big.Int
}, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _NonStakableVesting.call(opts, "unlockTokens")
	r.revertSnapshot(snap)

	outstruct := new(struct {
		NewUnlockedSubscribed   *big.Int
		NewUnlockedUnsubscribed *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.NewUnlockedSubscribed = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NewUnlockedUnsubscribed = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakableVesting *NonStakableVesting) ChangeContractBeneficiary(opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	return consumed, err
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x0b5d0e42.
//
// Solidity: function createSchedule(uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_NonStakableVesting *NonStakableVesting) CreateSchedule(opts *runOptions, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "createSchedule", _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// NewContract is a paid mutator transaction binding the contract method 0x7b8d4744.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVesting) NewContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "newContract", _beneficiary, _amount, _scheduleID)
	return consumed, err
}

// ReleaseAllFunds is a paid mutator transaction binding the contract method 0x0a30959d.
//
// Solidity: function releaseAllFunds(uint256 _id) returns()
func (_NonStakableVesting *NonStakableVesting) ReleaseAllFunds(opts *runOptions, _id *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "releaseAllFunds", _id)
	return consumed, err
}

// ReleaseFund is a paid mutator transaction binding the contract method 0x07ae499f.
//
// Solidity: function releaseFund(uint256 _id, uint256 _amount) returns()
func (_NonStakableVesting *NonStakableVesting) ReleaseFund(opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "releaseFund", _id, _amount)
	return consumed, err
}

// SetMaxAllowedDuration is a paid mutator transaction binding the contract method 0x4e974657.
//
// Solidity: function setMaxAllowedDuration(uint256 _newMaxDuration) returns()
func (_NonStakableVesting *NonStakableVesting) SetMaxAllowedDuration(opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "setMaxAllowedDuration", _newMaxDuration)
	return consumed, err
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _totalNominal) returns()
func (_NonStakableVesting *NonStakableVesting) SetTotalNominal(opts *runOptions, _totalNominal *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "setTotalNominal", _totalNominal)
	return consumed, err
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xf968f493.
//
// Solidity: function unlockTokens() returns(uint256 _newUnlockedSubscribed, uint256 _newUnlockedUnsubscribed)
func (_NonStakableVesting *NonStakableVesting) UnlockTokens(opts *runOptions) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "unlockTokens")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// OracleMetaData contains all meta data concerning the Oracle contract.
var OracleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVoterUpdateRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolUpdatedRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVoter\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"e6a02a28": "lastRoundBlock()",
		"aa2f89b5": "lastVoterUpdateRound()",
		"33f98c77": "latestRoundData(string)",
		"5281b5c6": "newSymbols(uint256)",
		"4c56ea56": "reports(string,address)",
		"146ca531": "round()",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"08f21ff5": "symbolUpdatedRound()",
		"ccce413b": "symbols(uint256)",
		"307de9b6": "vote(uint256,int256[],uint256)",
		"a7813587": "votePeriod()",
		"5412b3ae": "votingInfo(address)",
	},
	Bin: "0x6080604052600160ff1b600755600160ff1b6008553480156200002157600080fd5b5060405162002d3438038062002d34833981016040819052620000449162000639565b600280546001600160a01b038087166001600160a01b03199283161790925560038054928616929091169190911790558151620000899060009060208501906200035f565b5081516200009f9060019060208501906200035f565b5080600981905550620000c485600060018851620000be91906200074e565b62000181565b8451620000d9906004906020880190620003bc565b508451620000ef906005906020880190620003bc565b5060016006819055600d8054909101815560009081525b855181101562000175576001600b60008884815181106200012b576200012b6200076a565b6020908102919091018101516001600160a01b03168252810191909152604001600020600201805460ff1916911515919091179055806200016c8162000780565b91505062000106565b505050505050620009c3565b8082126200018e57505050565b81816000856002620001a185856200079c565b620001ad9190620007c6565b620001b9908762000806565b81518110620001cc57620001cc6200076a565b602002602001015190505b8183136200032b575b806001600160a01b0316868481518110620001ff57620001ff6200076a565b60200260200101516001600160a01b031610156200022c5782620002238162000831565b935050620001e0565b806001600160a01b03168683815181106200024b576200024b6200076a565b60200260200101516001600160a01b031611156200027857816200026f816200084c565b9250506200022c565b81831362000325578582815181106200029557620002956200076a565b6020026020010151868481518110620002b257620002b26200076a565b6020026020010151878581518110620002cf57620002cf6200076a565b60200260200101888581518110620002eb57620002eb6200076a565b6001600160a01b0393841660209182029290920101529116905282620003118162000831565b935050818062000321906200084c565b9250505b620001d7565b8185121562000341576200034186868462000181565b8383121562000357576200035786848662000181565b505050505050565b828054828255906000526020600020908101928215620003aa579160200282015b82811115620003aa5782518290620003999082620008f7565b509160200191906001019062000380565b50620003b892915062000422565b5090565b82805482825590600052602060002090810192821562000414579160200282015b828111156200041457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003dd565b50620003b892915062000443565b80821115620003b85760006200043982826200045a565b5060010162000422565b5b80821115620003b8576000815560010162000444565b50805462000468906200086c565b6000825580601f1062000479575050565b601f01602090049060005260206000209081019062000499919062000443565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620004dd57620004dd6200049c565b604052919050565b60006001600160401b038211156200050157620005016200049c565b5060051b60200190565b80516001600160a01b03811681146200052357600080fd5b919050565b6000601f83818401126200053b57600080fd5b82516020620005546200054e83620004e5565b620004b2565b82815260059290921b850181019181810190878411156200057457600080fd5b8287015b848110156200062d5780516001600160401b03808211156200059a5760008081fd5b818a0191508a603f830112620005b05760008081fd5b8582015181811115620005c757620005c76200049c565b620005da818a01601f19168801620004b2565b915080825260408c81838601011115620005f45760008081fd5b60005b8281101562000614578481018201518482018a01528801620005f7565b5050600090820187015284525091830191830162000578565b50979650505050505050565b600080600080600060a086880312156200065257600080fd5b85516001600160401b03808211156200066a57600080fd5b818801915088601f8301126200067f57600080fd5b81516020620006926200054e83620004e5565b82815260059290921b8401810191818101908c841115620006b257600080fd5b948201945b83861015620006db57620006cb866200050b565b82529482019490820190620006b7565b9950620006ec90508a82016200050b565b97505050620006fe604089016200050b565b945060608801519150808211156200071557600080fd5b50620007248882890162000528565b925050608086015190509295509295909350565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000764576200076462000738565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820162000795576200079562000738565b5060010190565b8181036000831280158383131683831282161715620007bf57620007bf62000738565b5092915050565b600082620007e457634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161562000801576200080162000738565b500590565b808201828112600083128015821682158216171562000829576200082962000738565b505092915050565b60006001600160ff1b01820162000795576200079562000738565b6000600160ff1b820162000864576200086462000738565b506000190190565b600181811c908216806200088157607f821691505b602082108103620008a257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008f257600081815260208120601f850160051c81016020861015620008d15750805b601f850160051c820191505b818110156200035757828155600101620008dd565b505050565b81516001600160401b038111156200091357620009136200049c565b6200092b816200092484546200086c565b84620008a8565b602080601f8311600181146200096357600084156200094a5750858301515b600019600386901b1c1916600185901b17855562000357565b600085815260208120601f198616915b82811015620009945788860151825594840194600190910190840162000973565b5085821015620009b35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61236180620009d36000396000f3fe6080604052600436106101225760003560e01c80638d4f75d2116100a5578063b3ab15fb1161006c578063b3ab15fb1461038c578063b78dec52146103ac578063ccce413b146103c1578063cdd72253146103e1578063df7f710e14610403578063e6a02a281461042557005b80638d4f75d2146103155780639670c0bc146103355780639f8743f71461034b578063a781358714610360578063aa2f89b51461037657005b80634bb278f3116100e95780634bb278f3146101ff5780634c56ea56146102245780635281b5c61461026c5780635412b3ae14610299578063845023f2146102f557005b806308f21ff51461012b578063146ca53114610154578063307de9b61461016a57806333f98c771461018a5780633c8510fd146101df57005b3661012957005b005b34801561013757600080fd5b5061014160085481565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014160065481565b34801561017657600080fd5b5061012961018536600461198c565b61043b565b34801561019657600080fd5b506101aa6101a5366004611ac8565b610682565b60405161014b919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b3480156101eb57600080fd5b506101aa6101fa366004611afd565b61076c565b34801561020b57600080fd5b5061021461082d565b604051901515815260200161014b565b34801561023057600080fd5b5061014161023f366004611b60565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205481565b34801561027857600080fd5b5061028c610287366004611bae565b6109d0565b60405161014b9190611c17565b3480156102a557600080fd5b506102d86102b4366004611c31565b600b6020526000908152604090208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161014b565b34801561030157600080fd5b50610129610310366004611c70565b610a7c565b34801561032157600080fd5b50610129610330366004611d0d565b610b25565b34801561034157600080fd5b5062989680610141565b34801561035757600080fd5b50600654610141565b34801561036c57600080fd5b5061014160095481565b34801561038257600080fd5b5061014160075481565b34801561039857600080fd5b506101296103a7366004611c31565b610c95565b3480156103b857600080fd5b50600954610141565b3480156103cd57600080fd5b5061028c6103dc366004611bae565b610ce1565b3480156103ed57600080fd5b506103f6610cf1565b60405161014b9190611dbe565b34801561040f57600080fd5b50610418610d53565b60405161014b9190611e60565b34801561043157600080fd5b50610141600a5481565b336000908152600b602052604090206002015460ff166104a25760405162461bcd60e51b815260206004820152601960248201527f7265737472696374656420746f206f6e6c7920766f746572730000000000000060448201526064015b60405180910390fd5b600654336000908152600b6020526040902054036104f25760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481d9bdd1959609a1b6044820152606401610499565b336000908152600b602052604081206001810180549087905581546006549092559181900361052257505061067c565b600054841461053257505061067c565b60016006546105419190611e89565b8114158061057e5750848484336040516020016105619493929190611e9c565b6040516020818303038152906040528051906020012060001c8214155b156105fa5760005b6000548110156105f2576001600160ff1b03600c600083815481106105ad576105ad611ee7565b906000526020600020016040516105c49190611f37565b90815260408051602092819003830190203360009081529252902055806105ea81611fad565b915050610586565b50505061067c565b60005b848110156106785785858281811061061757610617611ee7565b90506020020135600c6000838154811061063357610633611ee7565b9060005260206000200160405161064a9190611f37565b908152604080516020928190038301902033600090815292529020558061067081611fad565b9150506105fd565b5050505b50505050565b6106af60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d60016006546106c29190611e89565b815481106106d2576106d2611ee7565b90600052602060002001836040516106ea9190611fc6565b90815260408051918290036020908101832060608401835280548452600180820154928501929092526002015460ff16151583830152815160808101909252600654929350600092829161073d91611e89565b815260200183600001518152602001836020015181526020018360400151151581525090508092505050919050565b61079960405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d84815481106107ae576107ae611ee7565b90600052602060002001836040516107c69190611fc6565b9081526040805191829003602090810183206060808501845281548552600182015485840190815260029092015460ff16151585850190815284516080810186528a8152955193860193909352905192840192909252511515908201529150505b92915050565b6002546000906001600160a01b0316331461085a5760405162461bcd60e51b815260040161049990611fe2565b600954600a5461086a9190612025565b43106109ca5760005b6000548110156108985761088681610f11565b610891600182612025565b9050610873565b50600654600754036109155760005b600554811015610913576001600b6000600584815481106108ca576108ca611ee7565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600201805460ff19169115159190911790558061090b81611fad565b9150506108a7565b505b600654600754610926906001612038565b0361093357610933611218565b43600a8190555060016006600082825461094d9190612025565b9091555050600854610960906002612038565b6006540361097a5760018054610978916000916117de565b505b60065460095460408051928352436020840152429083015260608201527fb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e59060800160405180910390a150600190565b50600090565b600181815481106109e057600080fd5b9060005260206000200160009150905080546109fb90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2790611efd565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b505050505081565b6002546001600160a01b03163314610aa65760405162461bcd60e51b815260040161049990611fe2565b8051600003610aef5760405162461bcd60e51b8152602060048201526015602482015274566f746572732063616e277420626520656d70747960581b6044820152606401610499565b610b0881600060018451610b039190611e89565b6113f5565b8051610b1b906005906020840190611836565b5050600654600755565b6003546001600160a01b03163314610b785760405162461bcd60e51b81526020600482015260166024820152753932b9ba3934b1ba32b2103a379037b832b930ba37b960511b6044820152606401610499565b8051600003610bc25760405162461bcd60e51b815260206004820152601660248201527573796d626f6c732063616e277420626520656d70747960501b6044820152606401610499565b600654600854610bd3906001612038565b14158015610be5575060065460085414155b610c315760405162461bcd60e51b815260206004820152601e60248201527f63616e2774206265207570646174656420696e207468697320726f756e6400006044820152606401610499565b8051610c44906001906020840190611897565b5060065460088190557faa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d908290610c7c906001612025565b604051610c8a929190612060565b60405180910390a150565b6002546001600160a01b03163314610cbf5760405162461bcd60e51b815260040161049990611fe2565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600081815481106109e057600080fd5b60606005805480602002602001604051908101604052809291908181526020018280548015610d4957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d2b575b5050505050905090565b60606006546008546001610d679190612038565b03610e43576001805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610dad90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd990611efd565b8015610e265780601f10610dfb57610100808354040283529160200191610e26565b820191906000526020600020905b815481529060010190602001808311610e0957829003601f168201915b505050505081526020019060010190610d8e565b50505050905090565b6000805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610e8490611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb090611efd565b8015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b505050505081526020019060010190610e65565b6000808281548110610f2557610f25611ee7565b906000526020600020018054610f3a90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6690611efd565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b50505050509050600060048054905067ffffffffffffffff811115610fda57610fda611a11565b604051908082528060200260200182016040528015611003578160200160208202803683370190505b5090506000805b60045481101561111a5760006004828154811061102957611029611ee7565b60009182526020808320909101546006546001600160a01b03909116808452600b90925260409092205490925014158061109d57506001600160ff1b03600c866040516110769190611fc6565b90815260408051602092819003830190206001600160a01b03851660009081529252902054145b156110a85750611108565b600c856040516110b89190611fc6565b90815260408051602092819003830190206001600160a01b0384166000908152925290205484846110e881611fad565b9550815181106110fa576110fa611ee7565b602002602001018181525050505b8061111281611fad565b91505061100a565b506000600d600160065461112e9190611e89565b8154811061113e5761113e611ee7565b90600052602060002001846040516111569190611fc6565b908152604051908190036020019020549050600082156111815761117a84846115a2565b9150600190505b600d80546001018082556000829052604080516060810182528581524260208201528415159181019190915260065490929181106111c1576111c1611ee7565b90600052602060002001866040516111d99190611fc6565b90815260408051602092819003830190208351815591830151600183015591909101516002909101805460ff1916911515919091179055505050505050565b6000805b6004548210801561122e575060055481105b15611373576005818154811061124657611246611ee7565b600091825260209091200154600480546001600160a01b03909216918490811061127257611272611ee7565b6000918252602090912001546001600160a01b0316036112ac578161129681611fad565b92505080806112a490611fad565b91505061121c565b600581815481106112bf576112bf611ee7565b600091825260209091200154600480546001600160a01b0390921691849081106112eb576112eb611ee7565b6000918252602090912001546001600160a01b0316101561136957600b60006004848154811061131d5761131d611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff191690558161136181611fad565b92505061121c565b806112a481611fad565b6004548210156113e057600b60006004848154811061139457611394611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff19169055816113d881611fad565b925050611373565b600580546113f0916004916118dd565b505050565b80821261140157505050565b818160008560026114128585612082565b61141c91906120bf565b6114269087612038565b8151811061143657611436611ee7565b602002602001015190505b818313611574575b806001600160a01b031686848151811061146557611465611ee7565b60200260200101516001600160a01b0316101561148e5782611486816120ed565b935050611449565b806001600160a01b03168683815181106114aa576114aa611ee7565b60200260200101516001600160a01b031611156114d357816114cb81612105565b92505061148e565b81831361156f578582815181106114ec576114ec611ee7565b602002602001015186848151811061150657611506611ee7565b602002602001015187858151811061152057611520611ee7565b6020026020010188858151811061153957611539611ee7565b6001600160a01b039384166020918202929092010152911690528261155d816120ed565b935050818061156b90612105565b9250505b611441565b81851215611587576115878686846113f5565b8383121561159a5761159a8684866113f5565b505050505050565b6000816000036115b457506000610827565b6115ca8360006115c5600186611e89565b611666565b60006115d7600284612122565b90506115e4600284612136565b15611608578381815181106115fb576115fb611ee7565b602002602001015161165e565b600284828151811061161c5761161c611ee7565b6020026020010151856001846116329190611e89565b8151811061164257611642611ee7565b60200260200101516116549190612038565b61165e91906120bf565b949350505050565b8181808203611676575050505050565b60008560026116858787612082565b61168f91906120bf565b6116999087612038565b815181106116a9576116a9611ee7565b602002602001015190505b8183136117b8575b808684815181106116cf576116cf611ee7565b602002602001015112156116ef57826116e7816120ed565b9350506116bc565b85828151811061170157611701611ee7565b6020026020010151811215611722578161171a81612105565b9250506116ef565b8183136117b35785828151811061173b5761173b611ee7565b602002602001015186848151811061175557611755611ee7565b602002602001015187858151811061176f5761176f611ee7565b6020026020010188858151811061178857611788611ee7565b602090810291909101019190915252816117a181612105565b92505082806117af906120ed565b9350505b6116b4565b818512156117cb576117cb868684611666565b8383121561159a5761159a868486611666565b8280548282559060005260206000209081019282156118265760005260206000209182015b8281111561182657816118168482612190565b5091600101919060010190611803565b5061183292915061191d565b5090565b82805482825590600052602060002090810192821561188b579160200282015b8281111561188b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611856565b5061183292915061193a565b828054828255906000526020600020908101928215611826579160200282015b8281111561182657825182906118cd9082612271565b50916020019190600101906118b7565b82805482825590600052602060002090810192821561188b5760005260206000209182015b8281111561188b578254825591600101919060010190611902565b80821115611832576000611931828261194f565b5060010161191d565b5b80821115611832576000815560010161193b565b50805461195b90611efd565b6000825580601f1061196b575050565b601f016020900490600052602060002090810190611989919061193a565b50565b600080600080606085870312156119a257600080fd5b84359350602085013567ffffffffffffffff808211156119c157600080fd5b818701915087601f8301126119d557600080fd5b8135818111156119e457600080fd5b8860208260051b85010111156119f957600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a5057611a50611a11565b604052919050565b600082601f830112611a6957600080fd5b813567ffffffffffffffff811115611a8357611a83611a11565b611a96601f8201601f1916602001611a27565b818152846020838601011115611aab57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ada57600080fd5b813567ffffffffffffffff811115611af157600080fd5b61165e84828501611a58565b60008060408385031215611b1057600080fd5b82359150602083013567ffffffffffffffff811115611b2e57600080fd5b611b3a85828601611a58565b9150509250929050565b80356001600160a01b0381168114611b5b57600080fd5b919050565b60008060408385031215611b7357600080fd5b823567ffffffffffffffff811115611b8a57600080fd5b611b9685828601611a58565b925050611ba560208401611b44565b90509250929050565b600060208284031215611bc057600080fd5b5035919050565b60005b83811015611be2578181015183820152602001611bca565b50506000910152565b60008151808452611c03816020860160208601611bc7565b601f01601f19169290920160200192915050565b602081526000611c2a6020830184611beb565b9392505050565b600060208284031215611c4357600080fd5b611c2a82611b44565b600067ffffffffffffffff821115611c6657611c66611a11565b5060051b60200190565b60006020808385031215611c8357600080fd5b823567ffffffffffffffff811115611c9a57600080fd5b8301601f81018513611cab57600080fd5b8035611cbe611cb982611c4c565b611a27565b81815260059190911b82018301908381019087831115611cdd57600080fd5b928401925b82841015611d0257611cf384611b44565b82529284019290840190611ce2565b979650505050505050565b60006020808385031215611d2057600080fd5b823567ffffffffffffffff80821115611d3857600080fd5b818501915085601f830112611d4c57600080fd5b8135611d5a611cb982611c4c565b81815260059190911b83018401908481019088831115611d7957600080fd5b8585015b83811015611db157803585811115611d955760008081fd5b611da38b89838a0101611a58565b845250918601918601611d7d565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611dff5783516001600160a01b031683529284019291840191600101611dda565b50909695505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611e53578284038952611e41848351611beb565b98850198935090840190600101611e29565b5091979650505050505050565b602081526000611c2a6020830184611e0b565b634e487b7160e01b600052601160045260246000fd5b8181038181111561082757610827611e73565b60008186825b87811015611ec0578135835260209283019290910190600101611ea2565b5050938452505060601b6bffffffffffffffffffffffff1916602082015260340192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f1157607f821691505b602082108103611f3157634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354611f4581611efd565b60018281168015611f5d5760018114611f7257611fa1565b60ff1984168752821515830287019450611fa1565b8760005260208060002060005b85811015611f985781548a820152908401908201611f7f565b50505082870194505b50929695505050505050565b600060018201611fbf57611fbf611e73565b5060010190565b60008251611fd8818460208701611bc7565b9190910192915050565b60208082526023908201527f7265737472696374656420746f20746865206175746f6e69747920636f6e74726040820152621858dd60ea1b606082015260800190565b8082018082111561082757610827611e73565b808201828112600083128015821682158216171561205857612058611e73565b505092915050565b6040815260006120736040830185611e0b565b90508260208301529392505050565b81810360008312801583831316838312821617156120a2576120a2611e73565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826120ce576120ce6120a9565b600160ff1b8214600019841416156120e8576120e8611e73565b500590565b60006001600160ff1b018201611fbf57611fbf611e73565b6000600160ff1b820161211a5761211a611e73565b506000190190565b600082612131576121316120a9565b500490565b600082612145576121456120a9565b500690565b601f8211156113f057600081815260208120601f850160051c810160208610156121715750805b601f850160051c820191505b8181101561159a5782815560010161217d565b81810361219b575050565b6121a58254611efd565b67ffffffffffffffff8111156121bd576121bd611a11565b6121d1816121cb8454611efd565b8461214a565b6000601f82116001811461220557600083156121ed5750848201545b600019600385901b1c1916600184901b17845561226a565b600085815260209020601f19841690600086815260209020845b8381101561223f578286015482556001958601959091019060200161221f565b508583101561225d5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b815167ffffffffffffffff81111561228b5761228b611a11565b612299816121cb8454611efd565b602080601f8311600181146122ce57600084156122b65750858301515b600019600386901b1c1916600185901b17855561159a565b600085815260208120601f198616915b828110156122fd578886015182559484019460019091019084016122de565b508582101561231b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203c20d60b3688c4746f988dc74b8b4238d2ea704a050cfa1eb51d85c8e28d03b264736f6c63430008150033",
}

// OracleABI is the input ABI used to generate the binding from.
// Deprecated: Use OracleMetaData.ABI instead.
var OracleABI = OracleMetaData.ABI

// Deprecated: Use OracleMetaData.Sigs instead.
// OracleFuncSigs maps the 4-byte function signature to its string representation.
var OracleFuncSigs = OracleMetaData.Sigs

// OracleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OracleMetaData.Bin instead.
var OracleBin = OracleMetaData.Bin

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func (r *Runner) DeployOracle(opts *runOptions, _voters []common.Address, _autonity common.Address, _operator common.Address, _symbols []string, _votePeriod *big.Int) (common.Address, uint64, *Oracle, error) {
	parsed, err := OracleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(OracleBin), _voters, _autonity, _operator, _symbols, _votePeriod)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Oracle{contract: c}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	*contract
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() pure returns(uint256)
func (_Oracle *Oracle) GetPrecision(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getPrecision")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *Oracle) GetRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *Oracle) GetRoundData(opts *runOptions, _round *big.Int, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *Oracle) GetSymbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getSymbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *Oracle) GetVotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *Oracle) GetVoters(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getVoters")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *Oracle) LastRoundBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "lastRoundBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastVoterUpdateRound is a free data retrieval call binding the contract method 0xaa2f89b5.
//
// Solidity: function lastVoterUpdateRound() view returns(int256)
func (_Oracle *Oracle) LastVoterUpdateRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "lastVoterUpdateRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *Oracle) LatestRoundData(opts *runOptions, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// NewSymbols is a free data retrieval call binding the contract method 0x5281b5c6.
//
// Solidity: function newSymbols(uint256 ) view returns(string)
func (_Oracle *Oracle) NewSymbols(opts *runOptions, arg0 *big.Int) (string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "newSymbols", arg0)

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(int256)
func (_Oracle *Oracle) Reports(opts *runOptions, arg0 string, arg1 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "reports", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_Oracle *Oracle) Round(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "round")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *Oracle) SymbolUpdatedRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "symbolUpdatedRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Symbols is a free data retrieval call binding the contract method 0xccce413b.
//
// Solidity: function symbols(uint256 ) view returns(string)
func (_Oracle *Oracle) Symbols(opts *runOptions, arg0 *big.Int) (string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "symbols", arg0)

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// VotePeriod is a free data retrieval call binding the contract method 0xa7813587.
//
// Solidity: function votePeriod() view returns(uint256)
func (_Oracle *Oracle) VotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "votePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VotingInfo is a free data retrieval call binding the contract method 0x5412b3ae.
//
// Solidity: function votingInfo(address ) view returns(uint256 round, uint256 commit, bool isVoter)
func (_Oracle *Oracle) VotingInfo(opts *runOptions, arg0 common.Address) (struct {
	Round   *big.Int
	Commit  *big.Int
	IsVoter bool
}, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "votingInfo", arg0)

	outstruct := new(struct {
		Round   *big.Int
		Commit  *big.Int
		IsVoter bool
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Round = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Commit = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsVoter = *abi.ConvertType(out[2], new(bool)).(*bool)
	return *outstruct, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool)
func (_Oracle *Oracle) CallFinalize(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Oracle.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *Oracle) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSymbols is a free data retrieval call for a paid mutator transaction binding the contract method 0x8d4f75d2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *Oracle) CallSetSymbols(r *Runner, opts *runOptions, _symbols []string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setSymbols", _symbols)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetVoters is a free data retrieval call for a paid mutator transaction binding the contract method 0x845023f2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *Oracle) CallSetVoters(r *Runner, opts *runOptions, _newVoters []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setVoters", _newVoters)
	r.revertSnapshot(snap)
	return consumed, err

}

// Vote is a free data retrieval call for a paid mutator transaction binding the contract method 0x307de9b6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *Oracle) CallVote(r *Runner, opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "vote", _commit, _reports, _salt)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *Oracle) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "finalize")
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *Oracle) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setOperator", _operator)
	return consumed, err
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *Oracle) SetSymbols(opts *runOptions, _symbols []string) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setSymbols", _symbols)
	return consumed, err
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *Oracle) SetVoters(opts *runOptions, _newVoters []common.Address) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setVoters", _newVoters)
	return consumed, err
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *Oracle) Vote(opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "vote", _commit, _reports, _salt)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_Oracle *Oracle) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_Oracle *Oracle) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// OracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the Oracle contract.
		type OracleNewRoundIterator struct {
			Event *OracleNewRound // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleNewRoundIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleNewRound)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleNewRound)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleNewRoundIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleNewRoundIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleNewRound represents a NewRound event raised by the Oracle contract.
		type OracleNewRound struct {
			Round *big.Int;
			Height *big.Int;
			Timestamp *big.Int;
			VotePeriod *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
 		func (_Oracle *Oracle) FilterNewRound(opts *bind.FilterOpts) (*OracleNewRoundIterator, error) {






			logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return &OracleNewRoundIterator{contract: _Oracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
 		}

		// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_Oracle *Oracle) WatchNewRound(opts *bind.WatchOpts, sink chan<- *OracleNewRound) (event.Subscription, error) {






			logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleNewRound)
						if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_Oracle *Oracle) ParseNewRound(log types.Log) (*OracleNewRound, error) {
			event := new(OracleNewRound)
			if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// OracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the Oracle contract.
		type OracleNewSymbolsIterator struct {
			Event *OracleNewSymbols // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleNewSymbolsIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleNewSymbols)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleNewSymbols)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleNewSymbolsIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleNewSymbolsIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleNewSymbols represents a NewSymbols event raised by the Oracle contract.
		type OracleNewSymbols struct {
			Symbols []string;
			Round *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
 		func (_Oracle *Oracle) FilterNewSymbols(opts *bind.FilterOpts) (*OracleNewSymbolsIterator, error) {




			logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return &OracleNewSymbolsIterator{contract: _Oracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
 		}

		// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_Oracle *Oracle) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *OracleNewSymbols) (event.Subscription, error) {




			logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleNewSymbols)
						if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_Oracle *Oracle) ParseNewSymbols(log types.Log) (*OracleNewSymbols, error) {
			event := new(OracleNewSymbols)
			if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// OracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Oracle contract.
		type OracleVotedIterator struct {
			Event *OracleVoted // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleVotedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleVoted)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleVoted)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleVotedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleVotedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleVoted represents a Voted event raised by the Oracle contract.
		type OracleVoted struct {
			Voter common.Address;
			Votes []*big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
 		func (_Oracle *Oracle) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*OracleVotedIterator, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _Oracle.contract.FilterLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return &OracleVotedIterator{contract: _Oracle.contract, event: "Voted", logs: logs, sub: sub}, nil
 		}

		// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_Oracle *Oracle) WatchVoted(opts *bind.WatchOpts, sink chan<- *OracleVoted, _voter []common.Address) (event.Subscription, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _Oracle.contract.WatchLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleVoted)
						if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_Oracle *Oracle) ParseVoted(log types.Log) (*OracleVoted, error) {
			event := new(OracleVoted)
			if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// PrecompiledMetaData contains all meta data concerning the Precompiled contract.
var PrecompiledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ACCUSATION_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPUTE_COMMITTEE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENODE_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INNOCENCE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISBEHAVIOUR_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POP_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4dc925d3": "ACCUSATION_CONTRACT()",
		"2090a442": "COMPUTE_COMMITTEE_CONTRACT()",
		"c13974e1": "ENODE_VERIFIER_CONTRACT()",
		"8e153dc3": "INNOCENCE_CONTRACT()",
		"925c5492": "MISBEHAVIOUR_CONTRACT()",
		"50d93720": "POP_VERIFIER_CONTRACT()",
		"d0a6d1a6": "SUCCESS()",
		"a4ad5d91": "UPGRADER_CONTRACT()",
	},
	Bin: "0x61012561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060885760003560e01c8063925c549211605f578063925c54921460c6578063a4ad5d911460cd578063c13974e11460d4578063d0a6d1a61460db57600080fd5b80632090a44214608d5780634dc925d31460b157806350d937201460b85780638e153dc31460bf575b600080fd5b609460fa81565b6040516001600160a01b0390911681526020015b60405180910390f35b609460fc81565b609460fb81565b609460fd81565b609460fe81565b609460f981565b609460ff81565b60e2600181565b60405190815260200160a856fea2646970667358221220a470277bc4c1e7b278582ab14c86b1a0c084269fa795894c29ef5f41b896f86e64736f6c63430008150033",
}

// PrecompiledABI is the input ABI used to generate the binding from.
// Deprecated: Use PrecompiledMetaData.ABI instead.
var PrecompiledABI = PrecompiledMetaData.ABI

// Deprecated: Use PrecompiledMetaData.Sigs instead.
// PrecompiledFuncSigs maps the 4-byte function signature to its string representation.
var PrecompiledFuncSigs = PrecompiledMetaData.Sigs

// PrecompiledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrecompiledMetaData.Bin instead.
var PrecompiledBin = PrecompiledMetaData.Bin

// DeployPrecompiled deploys a new Ethereum contract, binding an instance of Precompiled to it.
func (r *Runner) DeployPrecompiled(opts *runOptions) (common.Address, uint64, *Precompiled, error) {
	parsed, err := PrecompiledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(PrecompiledBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Precompiled{contract: c}, nil
}

// Precompiled is an auto generated Go binding around an Ethereum contract.
type Precompiled struct {
	*contract
}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) ACCUSATIONCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "ACCUSATION_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) COMPUTECOMMITTEECONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "COMPUTE_COMMITTEE_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) ENODEVERIFIERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "ENODE_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) INNOCENCECONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "INNOCENCE_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) MISBEHAVIOURCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "MISBEHAVIOUR_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) POPVERIFIERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "POP_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *Precompiled) SUCCESS(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "SUCCESS")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) UPGRADERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "UPGRADER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ReentrancyGuardMetaData contains all meta data concerning the ReentrancyGuard contract.
var ReentrancyGuardMetaData = &bind.MetaData{
	ABI: "[]",
}

// ReentrancyGuardABI is the input ABI used to generate the binding from.
// Deprecated: Use ReentrancyGuardMetaData.ABI instead.
var ReentrancyGuardABI = ReentrancyGuardMetaData.ABI

// ReentrancyGuard is an auto generated Go binding around an Ethereum contract.
type ReentrancyGuard struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// StabilizationMetaData contains all meta data concerning the Stabilization contract.
var StabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"internalType\":\"structStabilization.Config\",\"name\":\"config_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDue\",\"type\":\"uint256\"}],\"name\":\"interestDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"minimumCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinDebtRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"}],\"name\":\"setSupplyControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"underCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"eced5526": "SCALE()",
		"ce4b5bbe": "SCALE_FACTOR()",
		"5dcc9391": "SECONDS_IN_YEAR()",
		"68cd03f6": "accounts()",
		"c5ebeaec": "borrow(uint256)",
		"83baa174": "borrowLimit(uint256,uint256,uint256,uint256)",
		"840c7e24": "cdps(address)",
		"5891de72": "collateralPrice()",
		"79502c55": "config()",
		"54a9f42c": "debtAmount(address)",
		"50bf06bf": "debtAmount(address,uint256)",
		"b6b55f25": "deposit(uint256)",
		"15184245": "interestDue(uint256,uint256,uint256,uint256)",
		"042e02cf": "isLiquidatable(address)",
		"2f865568": "liquidate(address)",
		"08796696": "minimumCollateral(uint256,uint256,uint256)",
		"402d8883": "repay()",
		"946ce8cd": "setLiquidationRatio(uint256)",
		"7b44646a": "setMinCollateralizationRatio(uint256)",
		"53afe81d": "setMinDebtRequirement(uint256)",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"52e5a050": "setSupplyControl(address)",
		"fbbe6991": "underCollateralized(uint256,uint256,uint256,uint256)",
		"2e1a7d4d": "withdraw(uint256)",
	},
	Bin: "0x60806040523480156200001157600080fd5b506040516200270b3803806200270b83398101604081905262000034916200012e565b8560400151806000036200005b57604051630309cb8760e51b815260040160405180910390fd5b866020015187604001518082106200008657604051630309cb8760e51b815260040160405180910390fd5b5050865160005550602086015160015560408601516002556060860151600355608090950151600455600780546001600160a01b03199081166001600160a01b039687161790915560088054821694861694909417909355600a8054841692851692909217909155600b8054831691841691909117905560098054909116919092161790556200021c565b80516001600160a01b03811681146200012957600080fd5b919050565b6000806000806000808688036101408112156200014a57600080fd5b60a08112156200015957600080fd5b5060405160a081016001600160401b03811182821017156200018b57634e487b7160e01b600052604160045260246000fd5b8060405250875181526020880151602082015260408801516040820152606088015160608201526080880151608082015280965050620001ce60a0880162000111565b9450620001de60c0880162000111565b9350620001ee60e0880162000111565b9250620001ff610100880162000111565b915062000210610120880162000111565b90509295509295509295565b6124df806200022c6000396000f3fe6080604052600436106101665760003560e01c806368cd03f6116100d1578063946ce8cd1161008a578063c5ebeaec11610064578063c5ebeaec1461046b578063ce4b5bbe1461048b578063eced5526146104a0578063fbbe6991146104b557600080fd5b8063946ce8cd1461040b578063b3ab15fb1461042b578063b6b55f251461044b57600080fd5b806368cd03f6146102d857806379502c55146102fa5780637adbf973146103495780637b44646a1461036957806383baa17414610389578063840c7e24146103a957600080fd5b806350bf06bf1161012357806350bf06bf1461022b57806352e5a0501461024b57806353afe81d1461026b57806354a9f42c1461028b5780635891de72146102ab5780635dcc9391146102c057600080fd5b8063042e02cf1461016b57806308796696146101a057806315184245146101ce5780632e1a7d4d146101ee5780632f86556814610210578063402d888314610223575b600080fd5b34801561017757600080fd5b5061018b61018636600461211b565b6104d5565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101c06101bb366004612136565b61051d565b604051908152602001610197565b3480156101da57600080fd5b506101c06101e9366004612162565b610587565b3480156101fa57600080fd5b5061020e610209366004612194565b610617565b005b61020e61021e36600461211b565b6107e5565b61020e610a27565b34801561023757600080fd5b506101c06102463660046121ad565b610bff565b34801561025757600080fd5b5061020e61026636600461211b565b610c6b565b34801561027757600080fd5b5061020e610286366004612194565b610cb7565b34801561029757600080fd5b506101c06102a636600461211b565b610ce6565b3480156102b757600080fd5b506101c0610d5d565b3480156102cc57600080fd5b506101c06301e1338081565b3480156102e457600080fd5b506102ed610ffc565b60405161019791906121d7565b34801561030657600080fd5b50600054600154600254600354600454610321949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610197565b34801561035557600080fd5b5061020e61036436600461211b565b61105e565b34801561037557600080fd5b5061020e610384366004612194565b6110aa565b34801561039557600080fd5b506101c06103a4366004612162565b611122565b3480156103b557600080fd5b506103eb6103c436600461211b565b60056020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610197565b34801561041757600080fd5b5061020e610426366004612194565b611178565b34801561043757600080fd5b5061020e61044636600461211b565b6111ce565b34801561045757600080fd5b5061020e610466366004612194565b61121a565b34801561047757600080fd5b5061020e610486366004612194565b611419565b34801561049757600080fd5b506101c06115e5565b3480156104ac57600080fd5b506101c0601281565b3480156104c157600080fd5b5061018b6104d0366004612162565b6115f4565b6001600160a01b0381166000908152600560205260408120816104f8824261164b565b509050610515826001015461050b610d5d565b60015484906115f4565b949350505050565b600082806000036105405760405162bfc92160e01b815260040160405180910390fd5b83158061054b575082155b1561056957604051630309cb8760e51b815260040160405180910390fd5b83610574848761223a565b61057e9190612267565b95945050505050565b6000818311156105aa57604051630309cb8760e51b815260040160405180910390fd5b848460006105cc6301e133806105c66105c38989612289565b90565b906116c1565b905060006105e26105dd84846116e0565b6116ef565b905060006106096106026105fb6105c36012600a612380565b8490611742565b86906116e0565b9a9950505050505050505050565b80806000036106395760405163162908e360e11b815260040160405180910390fd5b336000908152600560205260409020600181015483111561066d5760405163162908e360e11b815260040160405180910390fd5b6000610679824261164b565b5090506000610686610d5d565b905061069d836001015482846000600101546115f4565b156106bb57604051636229415360e01b815260040160405180910390fd5b6106cf83600201548260006002015461051d565b8584600101546106df9190612289565b10156106fe57604051633a23d82560e01b815260040160405180910390fd5b848360010160008282546107129190612289565b909155505060095460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c919061239c565b6107a9576040516312171d8360e31b815260040160405180910390fd5b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050505050565b3460000361080657604051637c946ed760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600560205260408120600281015490910361084357604051638aa5baf360e01b815260040160405180910390fd5b600080610850834261164b565b9150915061086e8360010154610864610d5d565b60015485906115f4565b61088b57604051636ef5bcdd60e11b815260040160405180910390fd5b60006108978334612289565b905060018401805442865560009182905560028601829055600386019190915560095460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061239c565b610949576040516312171d8360e31b815260040160405180910390fd5b600b546001600160a01b03166344df8e706109648587612289565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505060008211156109e057604051339083156108fc029084906000818181858888f193505050501580156109de573d6000803e3d6000fd5b505b6040513381526001600160a01b038716907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4906020015b60405180910390a2505050505050565b34600003610a4857604051637c946ed760e01b815260040160405180910390fd5b3360009081526005602052604081206002810154909103610a7c57604051638aa5baf360e01b815260040160405180910390fd5b600080610a89834261164b565b915091508134108015610aa65750600354610aa43484612289565b105b15610ac45760405163e6bd447960e01b815260040160405180910390fd5b80836003016000828254610ad891906123b7565b909155505042835560008080610aee8634611751565b92509250925081866002016000828254610b089190612289565b9250508190555082866003016000828254610b239190612289565b90915550508115610b9857600b60009054906101000a90046001600160a01b03166001600160a01b03166344df8e70836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b50505050505b8015610bcd57604051339082156108fc029083906000818181858888f19350505050158015610bcb573d6000803e3d6000fd5b505b60405134815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423190602001610a17565b6001600160a01b0382166000908152600560205260408120805484918491821015610c3d57604051630309cb8760e51b815260040160405180910390fd5b6001600160a01b0386166000908152600560205260409020610c5f818761164b565b50979650505050505050565b6008546001600160a01b03163314610c95576040516282b42960e81b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314610ce1576040516282b42960e81b815260040160405180910390fd5b600355565b6040516350bf06bf60e01b81526001600160a01b038216600482015242602482015260009030906350bf06bf90604401602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5791906123ca565b92915050565b600a546040805180820182526007815266272a2716a0aa2760c91b602082015290516333f98c7760e01b815260009283926001600160a01b03909116916333f98c7791610dac916004016123e3565b608060405180830381865afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612431565b90508060600151610e115760405163cb08be8160e01b815260040160405180910390fd5b6000816020015113610e355760405162bfc92160e01b815260040160405180910390fd5b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eac91906123ca565b610eb86012600a612380565b1115610f6057600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3591906123ca565b610f416012600a612380565b610f4b9190612267565b8160200151610f5a919061223a565b91505090565b610f6c6012600a612380565b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906123ca565b610fed9190612267565b8160200151610f5a9190612267565b6060600680548060200260200160405190810160405280929190818152602001828054801561105457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611036575b5050505050905090565b6007546001600160a01b03163314611088576040516282b42960e81b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b80806000036110cc57604051630309cb8760e51b815260040160405180910390fd5b600154828082106110f057604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b0316331461111a576040516282b42960e81b815260040160405180910390fd5b505050600255565b600083158061112f575081155b1561114d57604051630309cb8760e51b815260040160405180910390fd5b6111596012600a612380565b611163908361223a565b8361116e868861223a565b610574919061223a565b600254819080821061119d57604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b031633146111c7576040516282b42960e81b815260040160405180910390fd5b5050600155565b6007546001600160a01b031633146111f8576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b808060000361123c5760405163162908e360e11b815260040160405180910390fd5b600954604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae91906123ca565b10156112cd576040516313be252b60e01b815260040160405180910390fd5b336000908152600560205260408120805490910361132857600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031916331790555b4281556001810180548491906000906113429084906123b7565b90915550506009546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561139e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c2919061239c565b6113df576040516312171d8360e31b815260040160405180910390fd5b60405183815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2505050565b808060000361143b5760405163162908e360e11b815260040160405180910390fd5b3360009081526005602052604081209080611456834261164b565b909250905061146585836123b7565b60035490925082101561148b5760405163e6bd447960e01b815260040160405180910390fd5b6000611495610d5d565b90506114ac846001015482856000600101546115f4565b156114ca57604051636229415360e01b815260040160405180910390fd5b60006114e6856001015483600060040154600060020154611122565b90508084111561150957604051633a23d82560e01b815260040160405180910390fd5b4285556002850180548891906000906115239084906123b7565b925050819055508285600301600082825461153e91906123b7565b9091555050600b546040516340c10f1960e01b8152336004820152602481018990526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561158f57600080fd5b505af11580156115a3573d6000803e3d6000fd5b50506040518981523392507fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750915060200160405180910390a250505050505050565b6115f16012600a612380565b81565b600083806000036116175760405162bfc92160e01b815260040160405180910390fd5b836000036116285760009150611642565b8284611634878961223a565b61163e9190612267565b1091505b50949350505050565b6000808260000361166f57604051630309cb8760e51b815260040160405180910390fd5b60008460030154856002015461168591906123b7565b8554909150840361169957600091506116ad565b60005485546116aa91839187610587565b91505b6116b782826123b7565b9250509250929050565b60006116d96105c384670de0b6b3a7640000856117c5565b9392505050565b60006116d96105c38484611898565b600081680736ea4425c11ac63081111561172457604051630d7b1d6560e11b8152600481018490526024015b60405180910390fd5b6714057b7ef767814f8102610515670de0b6b3a7640000820461194e565b60006116d96105c38385612289565b6000806000808560030154866002015461176b91906123b7565b905085600301548510611782578560030154611784565b845b93508085106117975785600201546117a1565b6117a18486612289565b92508085116117b15760006117bb565b6117bb8186612289565b9150509250925092565b60008080600019858709858702925082811083820303915050806000036117ff578382816117f5576117f5612251565b04925050506116d9565b83811061183057604051630c740aef60e31b815260048101879052602481018690526044810185905260640161171b565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050806000036118cc5750670de0b6b3a764000090049050610d57565b670de0b6b3a764000081106118fe57604051635173648d60e01b8152600481018690526024810185905260440161171b565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b600081680a688906bd8affffff81111561197e5760405163b3b6ba1f60e01b81526004810184905260240161171b565b6000611996670de0b6b3a7640000604084901b612267565b90506105156105c382600160bf1b67ff00000000000000821615611aac576780000000000000008216156119d35768016a09e667f3bcc9090260401c5b6740000000000000008216156119f2576801306fe0a31b7152df0260401c5b672000000000000000821615611a11576801172b83c7d517adce0260401c5b671000000000000000821615611a305768010b5586cf9890f62a0260401c5b670800000000000000821615611a4f576801059b0d31585743ae0260401c5b670400000000000000821615611a6e57680102c9a3e778060ee70260401c5b670200000000000000821615611a8d5768010163da9fb33356d80260401c5b670100000000000000821615611aac57680100b1afa5abcbed610260401c5b66ff000000000000821615611bab576680000000000000821615611ad95768010058c86da1c09ea20260401c5b6640000000000000821615611af7576801002c605e2e8cec500260401c5b6620000000000000821615611b1557680100162f3904051fa10260401c5b6610000000000000821615611b33576801000b175effdc76ba0260401c5b6608000000000000821615611b5157680100058ba01fb9f96d0260401c5b6604000000000000821615611b6f5768010002c5cc37da94920260401c5b6602000000000000821615611b8d576801000162e525ee05470260401c5b6601000000000000821615611bab5768010000b17255775c040260401c5b65ff0000000000821615611ca15765800000000000821615611bd6576801000058b91b5bc9ae0260401c5b65400000000000821615611bf357680100002c5c89d5ec6d0260401c5b65200000000000821615611c105768010000162e43f4f8310260401c5b65100000000000821615611c2d57680100000b1721bcfc9a0260401c5b65080000000000821615611c4a5768010000058b90cf1e6e0260401c5b65040000000000821615611c67576801000002c5c863b73f0260401c5b65020000000000821615611c8457680100000162e430e5a20260401c5b65010000000000821615611ca1576801000000b1721835510260401c5b64ff00000000821615611d8e57648000000000821615611cca57680100000058b90c0b490260401c5b644000000000821615611ce65768010000002c5c8601cc0260401c5b642000000000821615611d02576801000000162e42fff00260401c5b641000000000821615611d1e5768010000000b17217fbb0260401c5b640800000000821615611d3a576801000000058b90bfce0260401c5b640400000000821615611d5657680100000002c5c85fe30260401c5b640200000000821615611d725768010000000162e42ff10260401c5b640100000000821615611d8e57680100000000b17217f80260401c5b63ff000000821615611e72576380000000821615611db55768010000000058b90bfc0260401c5b6340000000821615611dd0576801000000002c5c85fe0260401c5b6320000000821615611deb57680100000000162e42ff0260401c5b6310000000821615611e06576801000000000b17217f0260401c5b6308000000821615611e2157680100000000058b90c00260401c5b6304000000821615611e3c5768010000000002c5c8600260401c5b6302000000821615611e57576801000000000162e4300260401c5b6301000000821615611e725768010000000000b172180260401c5b62ff0000821615611f4d5762800000821615611e97576801000000000058b90c0260401c5b62400000821615611eb157680100000000002c5c860260401c5b62200000821615611ecb5768010000000000162e430260401c5b62100000821615611ee557680100000000000b17210260401c5b62080000821615611eff5768010000000000058b910260401c5b62040000821615611f19576801000000000002c5c80260401c5b62020000821615611f3357680100000000000162e40260401c5b62010000821615611f4d576801000000000000b1720260401c5b61ff0082161561201f57618000821615611f7057680100000000000058b90260401c5b614000821615611f895768010000000000002c5d0260401c5b612000821615611fa2576801000000000000162e0260401c5b611000821615611fbb5768010000000000000b170260401c5b610800821615611fd4576801000000000000058c0260401c5b610400821615611fed57680100000000000002c60260401c5b61020082161561200657680100000000000001630260401c5b61010082161561201f57680100000000000000b10260401c5b60ff8216156120e857608082161561204057680100000000000000590260401c5b6040821615612058576801000000000000002c0260401c5b602082161561207057680100000000000000160260401c5b6010821615612088576801000000000000000b0260401c5b60088216156120a057680100000000000000060260401c5b60048216156120b857680100000000000000030260401c5b60028216156120d057680100000000000000010260401c5b60018216156120e857680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b80356001600160a01b038116811461211657600080fd5b919050565b60006020828403121561212d57600080fd5b6116d9826120ff565b60008060006060848603121561214b57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561217857600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156121a657600080fd5b5035919050565b600080604083850312156121c057600080fd5b6121c9836120ff565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156122185783516001600160a01b0316835292840192918401916001016121f3565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d5757610d57612224565b634e487b7160e01b600052601260045260246000fd5b60008261228457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610d5757610d57612224565b600181815b808511156122d75781600019048211156122bd576122bd612224565b808516156122ca57918102915b93841c93908002906122a1565b509250929050565b6000826122ee57506001610d57565b816122fb57506000610d57565b8160018114612311576002811461231b57612337565b6001915050610d57565b60ff84111561232c5761232c612224565b50506001821b610d57565b5060208310610133831016604e8410600b841016171561235a575081810a610d57565b612364838361229c565b806000190482111561237857612378612224565b029392505050565b60006116d983836122df565b8051801515811461211657600080fd5b6000602082840312156123ae57600080fd5b6116d98261238c565b80820180821115610d5757610d57612224565b6000602082840312156123dc57600080fd5b5051919050565b600060208083528351808285015260005b81811015612410578581018301518582016040015282016123f4565b506000604082860101526040601f19601f8301168501019250505092915050565b60006080828403121561244357600080fd5b6040516080810181811067ffffffffffffffff8211171561247457634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015261249d6060840161238c565b6060820152939250505056fea26469706673582212205e4bfdf4203cb01af8837cfd66ec92911a19965cd9945a1f62ad7f992027f06c64736f6c63430008150033",
}

// StabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use StabilizationMetaData.ABI instead.
var StabilizationABI = StabilizationMetaData.ABI

// Deprecated: Use StabilizationMetaData.Sigs instead.
// StabilizationFuncSigs maps the 4-byte function signature to its string representation.
var StabilizationFuncSigs = StabilizationMetaData.Sigs

// StabilizationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StabilizationMetaData.Bin instead.
var StabilizationBin = StabilizationMetaData.Bin

// DeployStabilization deploys a new Ethereum contract, binding an instance of Stabilization to it.
func (r *Runner) DeployStabilization(opts *runOptions, config_ StabilizationConfig, autonity common.Address, operator common.Address, oracle common.Address, supplyControl common.Address, collateralToken common.Address) (common.Address, uint64, *Stabilization, error) {
	parsed, err := StabilizationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StabilizationBin), config_, autonity, operator, oracle, supplyControl, collateralToken)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Stabilization{contract: c}, nil
}

// Stabilization is an auto generated Go binding around an Ethereum contract.
type Stabilization struct {
	*contract
}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *Stabilization) SCALE(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SCALE")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *Stabilization) SCALEFACTOR(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *Stabilization) SECONDSINYEAR(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SECONDS_IN_YEAR")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *Stabilization) Accounts(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "accounts")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *Stabilization) BorrowLimit(opts *runOptions, collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "borrowLimit", collateral, price, targetPrice, mcr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *Stabilization) Cdps(opts *runOptions, arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "cdps", arg0)

	outstruct := new(struct {
		Timestamp  *big.Int
		Collateral *big.Int
		Principal  *big.Int
		Interest   *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Collateral = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Principal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Interest = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *Stabilization) CollateralPrice(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "collateralPrice")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *Stabilization) Config(opts *runOptions) (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "config")

	outstruct := new(struct {
		BorrowInterestRate        *big.Int
		LiquidationRatio          *big.Int
		MinCollateralizationRatio *big.Int
		MinDebtRequirement        *big.Int
		TargetPrice               *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.BorrowInterestRate = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LiquidationRatio = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinCollateralizationRatio = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinDebtRequirement = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TargetPrice = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *Stabilization) DebtAmount(opts *runOptions, account common.Address, timestamp *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "debtAmount", account, timestamp)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *Stabilization) DebtAmount0(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "debtAmount0", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *Stabilization) InterestDue(opts *runOptions, debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "interestDue", debt, rate, timeBorrow, timeDue)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *Stabilization) IsLiquidatable(opts *runOptions, account common.Address) (bool, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "isLiquidatable", account)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *Stabilization) MinimumCollateral(opts *runOptions, principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "minimumCollateral", principal, price, mcr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *Stabilization) UnderCollateralized(opts *runOptions, collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "underCollateralized", collateral, price, debt, liquidationRatio)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Borrow is a free data retrieval call for a paid mutator transaction binding the contract method 0xc5ebeaec.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *Stabilization) CallBorrow(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "borrow", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Deposit is a free data retrieval call for a paid mutator transaction binding the contract method 0xb6b55f25.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *Stabilization) CallDeposit(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "deposit", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Liquidate is a free data retrieval call for a paid mutator transaction binding the contract method 0x2f865568.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *Stabilization) CallLiquidate(r *Runner, opts *runOptions, account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "liquidate", account)
	r.revertSnapshot(snap)
	return consumed, err

}

// Repay is a free data retrieval call for a paid mutator transaction binding the contract method 0x402d8883.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function repay() payable returns()
func (_Stabilization *Stabilization) CallRepay(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "repay")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidationRatio is a free data retrieval call for a paid mutator transaction binding the contract method 0x946ce8cd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) CallSetLiquidationRatio(r *Runner, opts *runOptions, ratio *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setLiquidationRatio", ratio)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinCollateralizationRatio is a free data retrieval call for a paid mutator transaction binding the contract method 0x7b44646a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) CallSetMinCollateralizationRatio(r *Runner, opts *runOptions, ratio *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setMinCollateralizationRatio", ratio)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinDebtRequirement is a free data retrieval call for a paid mutator transaction binding the contract method 0x53afe81d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *Stabilization) CallSetMinDebtRequirement(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setMinDebtRequirement", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *Stabilization) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *Stabilization) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControl is a free data retrieval call for a paid mutator transaction binding the contract method 0x52e5a050.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *Stabilization) CallSetSupplyControl(r *Runner, opts *runOptions, supplyControl common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setSupplyControl", supplyControl)
	r.revertSnapshot(snap)
	return consumed, err

}

// Withdraw is a free data retrieval call for a paid mutator transaction binding the contract method 0x2e1a7d4d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *Stabilization) CallWithdraw(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "withdraw", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *Stabilization) Borrow(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "borrow", amount)
	return consumed, err
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *Stabilization) Deposit(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "deposit", amount)
	return consumed, err
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *Stabilization) Liquidate(opts *runOptions, account common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "liquidate", account)
	return consumed, err
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *Stabilization) Repay(opts *runOptions) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "repay")
	return consumed, err
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) SetLiquidationRatio(opts *runOptions, ratio *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setLiquidationRatio", ratio)
	return consumed, err
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) SetMinCollateralizationRatio(opts *runOptions, ratio *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setMinCollateralizationRatio", ratio)
	return consumed, err
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *Stabilization) SetMinDebtRequirement(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setMinDebtRequirement", amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *Stabilization) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *Stabilization) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setOracle", oracle)
	return consumed, err
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *Stabilization) SetSupplyControl(opts *runOptions, supplyControl common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setSupplyControl", supplyControl)
	return consumed, err
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *Stabilization) Withdraw(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "withdraw", amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StabilizationBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the Stabilization contract.
		type StabilizationBorrowIterator struct {
			Event *StabilizationBorrow // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationBorrowIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationBorrow)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationBorrow)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationBorrowIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationBorrowIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationBorrow represents a Borrow event raised by the Stabilization contract.
		type StabilizationBorrow struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBorrow is a free log retrieval operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterBorrow(opts *bind.FilterOpts, account []common.Address) (*StabilizationBorrowIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Borrow", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationBorrowIterator{contract: _Stabilization.contract, event: "Borrow", logs: logs, sub: sub}, nil
 		}

		// WatchBorrow is a free log subscription operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchBorrow(opts *bind.WatchOpts, sink chan<- *StabilizationBorrow, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Borrow", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationBorrow)
						if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBorrow is a log parse operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseBorrow(log types.Log) (*StabilizationBorrow, error) {
			event := new(StabilizationBorrow)
			if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Stabilization contract.
		type StabilizationDepositIterator struct {
			Event *StabilizationDeposit // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationDepositIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationDeposit)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationDeposit)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationDepositIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationDepositIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationDeposit represents a Deposit event raised by the Stabilization contract.
		type StabilizationDeposit struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterDeposit(opts *bind.FilterOpts, account []common.Address) (*StabilizationDepositIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Deposit", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationDepositIterator{contract: _Stabilization.contract, event: "Deposit", logs: logs, sub: sub}, nil
 		}

		// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StabilizationDeposit, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Deposit", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationDeposit)
						if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseDeposit(log types.Log) (*StabilizationDeposit, error) {
			event := new(StabilizationDeposit)
			if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationLiquidateIterator is returned from FilterLiquidate and is used to iterate over the raw logs and unpacked data for Liquidate events raised by the Stabilization contract.
		type StabilizationLiquidateIterator struct {
			Event *StabilizationLiquidate // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationLiquidateIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationLiquidate)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationLiquidate)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationLiquidateIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationLiquidateIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationLiquidate represents a Liquidate event raised by the Stabilization contract.
		type StabilizationLiquidate struct {
			Account common.Address;
			Liquidator common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterLiquidate is a free log retrieval operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
 		func (_Stabilization *Stabilization) FilterLiquidate(opts *bind.FilterOpts, account []common.Address) (*StabilizationLiquidateIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Liquidate", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationLiquidateIterator{contract: _Stabilization.contract, event: "Liquidate", logs: logs, sub: sub}, nil
 		}

		// WatchLiquidate is a free log subscription operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
		func (_Stabilization *Stabilization) WatchLiquidate(opts *bind.WatchOpts, sink chan<- *StabilizationLiquidate, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Liquidate", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationLiquidate)
						if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseLiquidate is a log parse operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
		func (_Stabilization *Stabilization) ParseLiquidate(log types.Log) (*StabilizationLiquidate, error) {
			event := new(StabilizationLiquidate)
			if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the Stabilization contract.
		type StabilizationRepayIterator struct {
			Event *StabilizationRepay // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationRepayIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationRepay)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationRepay)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationRepayIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationRepayIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationRepay represents a Repay event raised by the Stabilization contract.
		type StabilizationRepay struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRepay is a free log retrieval operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterRepay(opts *bind.FilterOpts, account []common.Address) (*StabilizationRepayIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Repay", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationRepayIterator{contract: _Stabilization.contract, event: "Repay", logs: logs, sub: sub}, nil
 		}

		// WatchRepay is a free log subscription operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchRepay(opts *bind.WatchOpts, sink chan<- *StabilizationRepay, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Repay", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationRepay)
						if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRepay is a log parse operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseRepay(log types.Log) (*StabilizationRepay, error) {
			event := new(StabilizationRepay)
			if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Stabilization contract.
		type StabilizationWithdrawIterator struct {
			Event *StabilizationWithdraw // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationWithdrawIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationWithdraw)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationWithdraw)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationWithdrawIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationWithdrawIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationWithdraw represents a Withdraw event raised by the Stabilization contract.
		type StabilizationWithdraw struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterWithdraw(opts *bind.FilterOpts, account []common.Address) (*StabilizationWithdrawIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Withdraw", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationWithdrawIterator{contract: _Stabilization.contract, event: "Withdraw", logs: logs, sub: sub}, nil
 		}

		// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StabilizationWithdraw, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Withdraw", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationWithdraw)
						if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseWithdraw(log types.Log) (*StabilizationWithdraw, error) {
			event := new(StabilizationWithdraw)
			if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakableVestingMetaData contains all meta data concerning the StakableVesting contract.
var StakableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBondedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getLastRewardEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequestID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBonding\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"eventExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"internalType\":\"structLiquidRewardManager.RewardEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getPendingRewardEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequestID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBonding\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"eventExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"internalType\":\"structLiquidRewardManager.RewardEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalNominal\",\"type\":\"uint256\"}],\"name\":\"setTotalNominal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNominal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"updateFundsAndGetContractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"c0d3895e": "bond(uint256,address,uint256)",
		"2afbbacb": "canStake(address,uint256)",
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"372500ab": "claimRewards()",
		"0962ef79": "claimRewards(uint256)",
		"6c7b69cb": "claimRewards(uint256,address)",
		"f8bbfcf3": "contractTotalValue(address,uint256)",
		"a0a8e460": "contractVersion()",
		"4b468d4c": "getBondedValidators(address,uint256)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"35bac03c": "getLastRewardEvent(address)",
		"929c49bb": "getPendingRewardEvent(address)",
		"447ff061": "liquidBalanceOf(address,uint256,address)",
		"85e01abe": "lockedLiquidBalanceOf(address,uint256,address)",
		"2d8d17c6": "newContract(address,uint256,uint256,uint256,uint256)",
		"e69ecd2a": "releaseAllLNTN(uint256)",
		"3577a8f8": "releaseAllNTN(uint256)",
		"4d68282f": "releaseFunds(uint256)",
		"ec85303d": "releaseLNTN(uint256,address,uint256)",
		"81170628": "releaseNTN(uint256,uint256)",
		"995e21a4": "setTotalNominal(uint256)",
		"635bf933": "totalContracts(address)",
		"b0c93009": "totalNominal()",
		"ba19a4ae": "unbond(uint256,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"c8daa85d": "unclaimedRewards(address,uint256)",
		"53deba2d": "unclaimedRewards(address,uint256,address)",
		"21ec4487": "unlockedFunds(address,uint256)",
		"f73b3da1": "unlockedLiquidBalanceOf(address,uint256,address)",
		"0ba6d271": "updateFunds(address,uint256)",
		"46f738d0": "updateFundsAndGetContract(address,uint256)",
		"0fdc647d": "updateFundsAndGetContractTotalValue(address,uint256)",
	},
	Bin: "",
}

// StakableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakableVestingMetaData.ABI instead.
var StakableVestingABI = StakableVestingMetaData.ABI

// Deprecated: Use StakableVestingMetaData.Sigs instead.
// StakableVestingFuncSigs maps the 4-byte function signature to its string representation.
var StakableVestingFuncSigs = StakableVestingMetaData.Sigs

// StakableVestingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakableVestingMetaData.Bin instead.
var StakableVestingBin = StakableVestingMetaData.Bin

// DeployStakableVesting deploys a new Ethereum contract, binding an instance of StakableVesting to it.
func (r *Runner) DeployStakableVesting(opts *runOptions, _autonity common.Address, _operator common.Address) (common.Address, uint64, *StakableVesting, error) {
	parsed, err := StakableVestingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakableVestingBin), _autonity, _operator)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakableVesting{contract: c}, nil
}

// StakableVesting is an auto generated Go binding around an Ethereum contract.
type StakableVesting struct {
	*contract
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_StakableVesting *StakableVesting) FEEFACTORUNITRECIP(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// CanStake is a free data retrieval call binding the contract method 0x2afbbacb.
//
// Solidity: function canStake(address _beneficiary, uint256 _id) view returns(bool)
func (_StakableVesting *StakableVesting) CanStake(opts *runOptions, _beneficiary common.Address, _id *big.Int) (bool, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "canStake", _beneficiary, _id)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// ContractTotalValue is a free data retrieval call binding the contract method 0xf8bbfcf3.
//
// Solidity: function contractTotalValue(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVesting) ContractTotalValue(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "contractTotalValue", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakableVesting *StakableVesting) ContractVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "contractVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBondedValidators is a free data retrieval call binding the contract method 0x4b468d4c.
//
// Solidity: function getBondedValidators(address _beneficiary, uint256 _id) view returns(address[])
func (_StakableVesting *StakableVesting) GetBondedValidators(opts *runOptions, _beneficiary common.Address, _id *big.Int) ([]common.Address, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "getBondedValidators", _beneficiary, _id)

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVesting *StakableVesting) GetContract(opts *runOptions, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakableVesting *StakableVesting) GetContracts(opts *runOptions, _beneficiary common.Address) ([]ContractBaseContract, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)
	return out0, consumed, err

}

// GetLastRewardEvent is a free data retrieval call binding the contract method 0x35bac03c.
//
// Solidity: function getLastRewardEvent(address _validator) view returns((uint256,uint256,uint256,bool,bool,bool))
func (_StakableVesting *StakableVesting) GetLastRewardEvent(opts *runOptions, _validator common.Address) (LiquidRewardManagerRewardEvent, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "getLastRewardEvent", _validator)

	if err != nil {
		return *new(LiquidRewardManagerRewardEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(LiquidRewardManagerRewardEvent)).(*LiquidRewardManagerRewardEvent)
	return out0, consumed, err

}

// GetPendingRewardEvent is a free data retrieval call binding the contract method 0x929c49bb.
//
// Solidity: function getPendingRewardEvent(address _validator) view returns((uint256,uint256,uint256,bool,bool,bool))
func (_StakableVesting *StakableVesting) GetPendingRewardEvent(opts *runOptions, _validator common.Address) (LiquidRewardManagerRewardEvent, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "getPendingRewardEvent", _validator)

	if err != nil {
		return *new(LiquidRewardManagerRewardEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(LiquidRewardManagerRewardEvent)).(*LiquidRewardManagerRewardEvent)
	return out0, consumed, err

}

// LiquidBalanceOf is a free data retrieval call binding the contract method 0x447ff061.
//
// Solidity: function liquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVesting) LiquidBalanceOf(opts *runOptions, _beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "liquidBalanceOf", _beneficiary, _id, _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LockedLiquidBalanceOf is a free data retrieval call binding the contract method 0x85e01abe.
//
// Solidity: function lockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVesting) LockedLiquidBalanceOf(opts *runOptions, _beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "lockedLiquidBalanceOf", _beneficiary, _id, _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakableVesting *StakableVesting) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalNominal is a free data retrieval call binding the contract method 0xb0c93009.
//
// Solidity: function totalNominal() view returns(uint256)
func (_StakableVesting *StakableVesting) TotalNominal(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "totalNominal")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x53deba2d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id, address _validator) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) UnclaimedRewards(opts *runOptions, _beneficiary common.Address, _id *big.Int, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "unclaimedRewards", _beneficiary, _id, _validator)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _beneficiary) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) UnclaimedRewards0(opts *runOptions, _beneficiary common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "unclaimedRewards0", _beneficiary)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards1 is a free data retrieval call binding the contract method 0xc8daa85d.
//
// Solidity: function unclaimedRewards(address _beneficiary, uint256 _id) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) UnclaimedRewards1(opts *runOptions, _beneficiary common.Address, _id *big.Int) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "unclaimedRewards1", _beneficiary, _id)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedFunds is a free data retrieval call binding the contract method 0x21ec4487.
//
// Solidity: function unlockedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVesting *StakableVesting) UnlockedFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "unlockedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnlockedLiquidBalanceOf is a free data retrieval call binding the contract method 0xf73b3da1.
//
// Solidity: function unlockedLiquidBalanceOf(address _beneficiary, uint256 _id, address _validator) view returns(uint256)
func (_StakableVesting *StakableVesting) UnlockedLiquidBalanceOf(opts *runOptions, _beneficiary common.Address, _id *big.Int, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVesting.call(opts, "unlockedLiquidBalanceOf", _beneficiary, _id, _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xc0d3895e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(uint256 _id, address _validator, uint256 _amount) returns(uint256)
func (_StakableVesting *StakableVesting) CallBond(r *Runner, opts *runOptions, _id *big.Int, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVesting.call(opts, "bond", _id, _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9f45b62.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakableVesting *StakableVesting) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x0962ef79.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(uint256 _id) returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) CallClaimRewards(r *Runner, opts *runOptions, _id *big.Int) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVesting.call(opts, "claimRewards", _id)
	r.revertSnapshot(snap)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// ClaimRewards0 is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) CallClaimRewards0(r *Runner, opts *runOptions) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVesting.call(opts, "claimRewards0")
	r.revertSnapshot(snap)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// ClaimRewards1 is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c7b69cb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(uint256 _id, address _validator) returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) CallClaimRewards1(r *Runner, opts *runOptions, _id *big.Int, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVesting.call(opts, "claimRewards1", _id, _validator)
	r.revertSnapshot(snap)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// NewContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x2d8d17c6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVesting *StakableVesting) CallNewContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xe69ecd2a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllLNTN(uint256 _id) returns()
func (_StakableVesting *StakableVesting) CallReleaseAllLNTN(r *Runner, opts *runOptions, _id *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "releaseAllLNTN", _id)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3577a8f8.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_StakableVesting *StakableVesting) CallReleaseAllNTN(r *Runner, opts *runOptions, _id *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "releaseAllNTN", _id)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x4d68282f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFunds(uint256 _id) returns()
func (_StakableVesting *StakableVesting) CallReleaseFunds(r *Runner, opts *runOptions, _id *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "releaseFunds", _id)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xec85303d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseLNTN(uint256 _id, address _validator, uint256 _amount) returns()
func (_StakableVesting *StakableVesting) CallReleaseLNTN(r *Runner, opts *runOptions, _id *big.Int, _validator common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "releaseLNTN", _id, _validator, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x81170628.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_StakableVesting *StakableVesting) CallReleaseNTN(r *Runner, opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "releaseNTN", _id, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTotalNominal is a free data retrieval call for a paid mutator transaction binding the contract method 0x995e21a4.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTotalNominal(uint256 _newTotalNominal) returns()
func (_StakableVesting *StakableVesting) CallSetTotalNominal(r *Runner, opts *runOptions, _newTotalNominal *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "setTotalNominal", _newTotalNominal)
	r.revertSnapshot(snap)
	return consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xba19a4ae.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(uint256 _id, address _validator, uint256 _amount) returns(uint256)
func (_StakableVesting *StakableVesting) CallUnbond(r *Runner, opts *runOptions, _id *big.Int, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVesting.call(opts, "unbond", _id, _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ba6d271.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFunds(address _beneficiary, uint256 _id) returns()
func (_StakableVesting *StakableVesting) CallUpdateFunds(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVesting.call(opts, "updateFunds", _beneficiary, _id)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateFundsAndGetContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x46f738d0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContract(address _beneficiary, uint256 _id) returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVesting *StakableVesting) CallUpdateFundsAndGetContract(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVesting.call(opts, "updateFundsAndGetContract", _beneficiary, _id)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// UpdateFundsAndGetContractTotalValue is a free data retrieval call for a paid mutator transaction binding the contract method 0x0fdc647d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContractTotalValue(address _beneficiary, uint256 _id) returns(uint256)
func (_StakableVesting *StakableVesting) CallUpdateFundsAndGetContractTotalValue(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVesting.call(opts, "updateFundsAndGetContractTotalValue", _beneficiary, _id)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a paid mutator transaction binding the contract method 0xc0d3895e.
//
// Solidity: function bond(uint256 _id, address _validator, uint256 _amount) returns(uint256)
func (_StakableVesting *StakableVesting) Bond(opts *runOptions, _id *big.Int, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "bond", _id, _validator, _amount)
	return consumed, err
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakableVesting *StakableVesting) ChangeContractBeneficiary(opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x0962ef79.
//
// Solidity: function claimRewards(uint256 _id) returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) ClaimRewards(opts *runOptions, _id *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "claimRewards", _id)
	return consumed, err
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) ClaimRewards0(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "claimRewards0")
	return consumed, err
}

// ClaimRewards1 is a paid mutator transaction binding the contract method 0x6c7b69cb.
//
// Solidity: function claimRewards(uint256 _id, address _validator) returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVesting *StakableVesting) ClaimRewards1(opts *runOptions, _id *big.Int, _validator common.Address) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "claimRewards1", _id, _validator)
	return consumed, err
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVesting *StakableVesting) NewContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0xe69ecd2a.
//
// Solidity: function releaseAllLNTN(uint256 _id) returns()
func (_StakableVesting *StakableVesting) ReleaseAllLNTN(opts *runOptions, _id *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "releaseAllLNTN", _id)
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_StakableVesting *StakableVesting) ReleaseAllNTN(opts *runOptions, _id *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "releaseAllNTN", _id)
	return consumed, err
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x4d68282f.
//
// Solidity: function releaseFunds(uint256 _id) returns()
func (_StakableVesting *StakableVesting) ReleaseFunds(opts *runOptions, _id *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "releaseFunds", _id)
	return consumed, err
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0xec85303d.
//
// Solidity: function releaseLNTN(uint256 _id, address _validator, uint256 _amount) returns()
func (_StakableVesting *StakableVesting) ReleaseLNTN(opts *runOptions, _id *big.Int, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "releaseLNTN", _id, _validator, _amount)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_StakableVesting *StakableVesting) ReleaseNTN(opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "releaseNTN", _id, _amount)
	return consumed, err
}

// SetTotalNominal is a paid mutator transaction binding the contract method 0x995e21a4.
//
// Solidity: function setTotalNominal(uint256 _newTotalNominal) returns()
func (_StakableVesting *StakableVesting) SetTotalNominal(opts *runOptions, _newTotalNominal *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "setTotalNominal", _newTotalNominal)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xba19a4ae.
//
// Solidity: function unbond(uint256 _id, address _validator, uint256 _amount) returns(uint256)
func (_StakableVesting *StakableVesting) Unbond(opts *runOptions, _id *big.Int, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "unbond", _id, _validator, _amount)
	return consumed, err
}

// UpdateFunds is a paid mutator transaction binding the contract method 0x0ba6d271.
//
// Solidity: function updateFunds(address _beneficiary, uint256 _id) returns()
func (_StakableVesting *StakableVesting) UpdateFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "updateFunds", _beneficiary, _id)
	return consumed, err
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46f738d0.
//
// Solidity: function updateFundsAndGetContract(address _beneficiary, uint256 _id) returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVesting *StakableVesting) UpdateFundsAndGetContract(opts *runOptions, _beneficiary common.Address, _id *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "updateFundsAndGetContract", _beneficiary, _id)
	return consumed, err
}

// UpdateFundsAndGetContractTotalValue is a paid mutator transaction binding the contract method 0x0fdc647d.
//
// Solidity: function updateFundsAndGetContractTotalValue(address _beneficiary, uint256 _id) returns(uint256)
func (_StakableVesting *StakableVesting) UpdateFundsAndGetContractTotalValue(opts *runOptions, _beneficiary common.Address, _id *big.Int) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "updateFundsAndGetContractTotalValue", _beneficiary, _id)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakableVesting *StakableVesting) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVesting.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// SupplyControlMetaData contains all meta data concerning the SupplyControl contract.
var SupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
	Bin: "0x6080604052604051610512380380610512833981016040819052610022916100a5565b3460000361004357604051637c946ed760e01b815260040160405180910390fd5b600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560008054919093169116179055346001556100e8565b80516001600160a01b03811681146100a057600080fd5b919050565b6000806000606084860312156100ba57600080fd5b6100c384610089565b92506100d160208501610089565b91506100df60408501610089565b90509250925092565b61041b806100f76000396000f3fe6080604052600436106100705760003560e01c80637e47961c1161004e5780637e47961c146100c85780637ecc2b5614610100578063b3ab15fb14610113578063db7f521a1461013357600080fd5b806318160ddd1461007557806340c10f191461009e57806344df8e70146100c0575b600080fd5b34801561008157600080fd5b5061008b60015481565b6040519081526020015b60405180910390f35b3480156100aa57600080fd5b506100be6100b9366004610399565b610153565b005b6100be610265565b3480156100d457600080fd5b506000546100e8906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b34801561010c57600080fd5b504761008b565b34801561011f57600080fd5b506100be61012e3660046103c3565b6102e5565b34801561013f57600080fd5b506100be61014e3660046103c3565b610331565b6000546001600160a01b0316331461017d576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821615806101a057506000546001600160a01b038381169116145b156101be57604051634e46966960e11b815260040160405180910390fd5b8015806101ca57504781115b156101e85760405163162908e360e11b815260040160405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561021e573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a15050565b3460000361028657604051637c946ed760e01b815260040160405180910390fd5b6000546001600160a01b031633146102b0576040516282b42960e81b815260040160405180910390fd5b6040513481527fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9060200160405180910390a1565b6002546001600160a01b0316331461030f576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461035b576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461039457600080fd5b919050565b600080604083850312156103ac57600080fd5b6103b58361037d565b946020939093013593505050565b6000602082840312156103d557600080fd5b6103de8261037d565b939250505056fea26469706673582212207646b2e6881a2d6269951386532b4fc6a3409fe50e89f6a55b709c4060cd997f64736f6c63430008150033",
}

// SupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use SupplyControlMetaData.ABI instead.
var SupplyControlABI = SupplyControlMetaData.ABI

// Deprecated: Use SupplyControlMetaData.Sigs instead.
// SupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var SupplyControlFuncSigs = SupplyControlMetaData.Sigs

// SupplyControlBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SupplyControlMetaData.Bin instead.
var SupplyControlBin = SupplyControlMetaData.Bin

// DeploySupplyControl deploys a new Ethereum contract, binding an instance of SupplyControl to it.
func (r *Runner) DeploySupplyControl(opts *runOptions, autonity common.Address, operator common.Address, stabilizer_ common.Address) (common.Address, uint64, *SupplyControl, error) {
	parsed, err := SupplyControlMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(SupplyControlBin), autonity, operator, stabilizer_)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &SupplyControl{contract: c}, nil
}

// SupplyControl is an auto generated Go binding around an Ethereum contract.
type SupplyControl struct {
	*contract
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControl) AvailableSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "availableSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControl) Stabilizer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "stabilizer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControl) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x44df8e70.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControl) CallBurn(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "burn")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControl) CallMint(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "mint", recipient, amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControl) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizer is a free data retrieval call for a paid mutator transaction binding the contract method 0xdb7f521a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControl) CallSetStabilizer(r *Runner, opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "setStabilizer", stabilizer_)
	r.revertSnapshot(snap)
	return consumed, err

}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControl) Burn(opts *runOptions) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "burn")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControl) Mint(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "mint", recipient, amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControl) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "setOperator", operator)
	return consumed, err
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControl) SetStabilizer(opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "setStabilizer", stabilizer_)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// SupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the SupplyControl contract.
		type SupplyControlBurnIterator struct {
			Event *SupplyControlBurn // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *SupplyControlBurnIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(SupplyControlBurn)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(SupplyControlBurn)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *SupplyControlBurnIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *SupplyControlBurnIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// SupplyControlBurn represents a Burn event raised by the SupplyControl contract.
		type SupplyControlBurn struct {
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
 		func (_SupplyControl *SupplyControl) FilterBurn(opts *bind.FilterOpts) (*SupplyControlBurnIterator, error) {



			logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return &SupplyControlBurnIterator{contract: _SupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
 		}

		// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_SupplyControl *SupplyControl) WatchBurn(opts *bind.WatchOpts, sink chan<- *SupplyControlBurn) (event.Subscription, error) {



			logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(SupplyControlBurn)
						if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_SupplyControl *SupplyControl) ParseBurn(log types.Log) (*SupplyControlBurn, error) {
			event := new(SupplyControlBurn)
			if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// SupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the SupplyControl contract.
		type SupplyControlMintIterator struct {
			Event *SupplyControlMint // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *SupplyControlMintIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(SupplyControlMint)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(SupplyControlMint)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *SupplyControlMintIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *SupplyControlMintIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// SupplyControlMint represents a Mint event raised by the SupplyControl contract.
		type SupplyControlMint struct {
			Recipient common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
 		func (_SupplyControl *SupplyControl) FilterMint(opts *bind.FilterOpts) (*SupplyControlMintIterator, error) {




			logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return &SupplyControlMintIterator{contract: _SupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
 		}

		// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_SupplyControl *SupplyControl) WatchMint(opts *bind.WatchOpts, sink chan<- *SupplyControlMint) (event.Subscription, error) {




			logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(SupplyControlMint)
						if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_SupplyControl *SupplyControl) ParseMint(log types.Log) (*SupplyControlMint, error) {
			event := new(SupplyControlMint)
			if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// TestBaseMetaData contains all meta data concerning the TestBase contract.
var TestBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"bfb4ebcf": "Foo()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161041238038061041283398101604081905261002f91610058565b600061003b82826101aa565b5050610269565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006b57600080fd5b82516001600160401b038082111561008257600080fd5b818501915085601f83011261009657600080fd5b8151818111156100a8576100a8610042565b604051601f8201601f19908116603f011681019083821181831017156100d0576100d0610042565b8160405282815288868487010111156100e857600080fd5b600093505b8284101561010a57848401860151818501870152928501926100ed565b600086848301015280965050505050505092915050565b600181811c9082168061013557607f821691505b60208210810361015557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101a557600081815260208120601f850160051c810160208610156101825750805b601f850160051c820191505b818110156101a15782815560010161018e565b5050505b505050565b81516001600160401b038111156101c3576101c3610042565b6101d7816101d18454610121565b8461015b565b602080601f83116001811461020c57600084156101f45750858301515b600019600386901b1c1916600185901b1785556101a1565b600085815260208120601f198616915b8281101561023b5788860151825594840194600190910190840161021c565b50858210156102595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806102786000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bfb4ebcf14610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220dee7a80fa821d6b242863d6f19d6a8c15aeee7d7688af65e19b0864fb95534e764736f6c63430008150033",
}

// TestBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use TestBaseMetaData.ABI instead.
var TestBaseABI = TestBaseMetaData.ABI

// Deprecated: Use TestBaseMetaData.Sigs instead.
// TestBaseFuncSigs maps the 4-byte function signature to its string representation.
var TestBaseFuncSigs = TestBaseMetaData.Sigs

// TestBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestBaseMetaData.Bin instead.
var TestBaseBin = TestBaseMetaData.Bin

// DeployTestBase deploys a new Ethereum contract, binding an instance of TestBase to it.
func (r *Runner) DeployTestBase(opts *runOptions, _foo string) (common.Address, uint64, *TestBase, error) {
	parsed, err := TestBaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(TestBaseBin), _foo)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &TestBase{contract: c}, nil
}

// TestBase is an auto generated Go binding around an Ethereum contract.
type TestBase struct {
	*contract
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBase) Foo(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestBase.call(opts, "Foo")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// TestUpgradedMetaData contains all meta data concerning the TestUpgraded contract.
var TestUpgradedMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Bar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"name\":\"FooBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b0a378b0": "Bar()",
		"bfb4ebcf": "Foo()",
		"1e4f3395": "FooBar(string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161068838038061068883398101604081905261002f9161010e565b80600061003c82826101fa565b506001905061004b83826101fa565b5050506102b9565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261007a57600080fd5b81516001600160401b038082111561009457610094610053565b604051601f8301601f19908116603f011681019082821181831017156100bc576100bc610053565b816040528381526020925086838588010111156100d857600080fd5b600091505b838210156100fa57858201830151818301840152908201906100dd565b600093810190920192909252949350505050565b6000806040838503121561012157600080fd5b82516001600160401b038082111561013857600080fd5b61014486838701610069565b9350602085015191508082111561015a57600080fd5b5061016785828601610069565b9150509250929050565b600181811c9082168061018557607f821691505b6020821081036101a557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101f557600081815260208120601f850160051c810160208610156101d25750805b601f850160051c820191505b818110156101f1578281556001016101de565b5050505b505050565b81516001600160401b0381111561021357610213610053565b610227816102218454610171565b846101ab565b602080601f83116001811461025c57600084156102445750858301515b600019600386901b1c1916600185901b1785556101f1565b600085815260208120601f198616915b8281101561028b5788860151825594840194600190910190840161026c565b50858210156102a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6103c0806102c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e4f339514610046578063b0a378b01461005b578063bfb4ebcf14610079575b600080fd5b610059610054366004610142565b610081565b005b610063610091565b60405161007091906101f3565b60405180910390f35b61006361011f565b600061008d82826102ca565b5050565b6001805461009e90610241565b80601f01602080910402602001604051908101604052809291908181526020018280546100ca90610241565b80156101175780601f106100ec57610100808354040283529160200191610117565b820191906000526020600020905b8154815290600101906020018083116100fa57829003601f168201915b505050505081565b6000805461009e90610241565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561015457600080fd5b813567ffffffffffffffff8082111561016c57600080fd5b818401915084601f83011261018057600080fd5b8135818111156101925761019261012c565b604051601f8201601f19908116603f011681019083821181831017156101ba576101ba61012c565b816040528281528760208487010111156101d357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561022057858101830151858201604001528201610204565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061025557607f821691505b60208210810361027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102c557600081815260208120601f850160051c810160208610156102a25750805b601f850160051c820191505b818110156102c1578281556001016102ae565b5050505b505050565b815167ffffffffffffffff8111156102e4576102e461012c565b6102f8816102f28454610241565b8461027b565b602080601f83116001811461032d57600084156103155750858301515b600019600386901b1c1916600185901b1785556102c1565b600085815260208120601f198616915b8281101561035c5788860151825594840194600190910190840161033d565b508582101561037a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220695db87e0bbdfb3cc83d1299992f3698cbbb94d7ace28d7cf15f315d4aea5a8964736f6c63430008150033",
}

// TestUpgradedABI is the input ABI used to generate the binding from.
// Deprecated: Use TestUpgradedMetaData.ABI instead.
var TestUpgradedABI = TestUpgradedMetaData.ABI

// Deprecated: Use TestUpgradedMetaData.Sigs instead.
// TestUpgradedFuncSigs maps the 4-byte function signature to its string representation.
var TestUpgradedFuncSigs = TestUpgradedMetaData.Sigs

// TestUpgradedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestUpgradedMetaData.Bin instead.
var TestUpgradedBin = TestUpgradedMetaData.Bin

// DeployTestUpgraded deploys a new Ethereum contract, binding an instance of TestUpgraded to it.
func (r *Runner) DeployTestUpgraded(opts *runOptions, _bar string, _foo string) (common.Address, uint64, *TestUpgraded, error) {
	parsed, err := TestUpgradedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(TestUpgradedBin), _bar, _foo)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &TestUpgraded{contract: c}, nil
}

// TestUpgraded is an auto generated Go binding around an Ethereum contract.
type TestUpgraded struct {
	*contract
}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgraded) Bar(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestUpgraded.call(opts, "Bar")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgraded) Foo(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestUpgraded.call(opts, "Foo")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// FooBar is a free data retrieval call for a paid mutator transaction binding the contract method 0x1e4f3395.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgraded) CallFooBar(r *Runner, opts *runOptions, _foo string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _TestUpgraded.call(opts, "FooBar", _foo)
	r.revertSnapshot(snap)
	return consumed, err

}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgraded) FooBar(opts *runOptions, _foo string) (uint64, error) {
	_, consumed, err := _TestUpgraded.call(opts, "FooBar", _foo)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// UpgradeManagerMetaData contains all meta data concerning the UpgradeManager contract.
var UpgradeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"autonity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"55463ceb": "autonity()",
		"570ca735": "operator()",
		"b3ab15fb": "setOperator(address)",
		"6e3d9ff0": "upgrade(address,string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161044338038061044383398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610385806100be6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355463ceb14610051578063570ca735146100805780636e3d9ff014610093578063b3ab15fb146100a8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610064906001600160a01b031681565b6100a66100a1366004610220565b6100bb565b005b6100a66100b63660046102e2565b610166565b6001546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064015b60405180910390fd5b60405160f9906000906101339085908590602001610304565b6040516020818303038152906040529050600080825160208401855af43d6000803e808015610161573d6000f35b3d6000fd5b6000546001600160a01b031633146101cc5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f7420746865204175746f6e69747920636f6e74726044820152621858dd60ea1b6064820152608401610111565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461020557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561023357600080fd5b61023c836101ee565b9150602083013567ffffffffffffffff8082111561025957600080fd5b818501915085601f83011261026d57600080fd5b81358181111561027f5761027f61020a565b604051601f8201601f19908116603f011681019083821181831017156102a7576102a761020a565b816040528281528860208487010111156102c057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156102f457600080fd5b6102fd826101ee565b9392505050565b6bffffffffffffffffffffffff198360601b1681526000825160005b8181101561033d5760208186018101516014868401015201610320565b5060009201601401918252509291505056fea26469706673582212207cb99b8c663b7b3f7201f7c37a4ee5d8f83506bfd644debc45c05e5883ef0c7064736f6c63430008150033",
}

// UpgradeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeManagerMetaData.ABI instead.
var UpgradeManagerABI = UpgradeManagerMetaData.ABI

// Deprecated: Use UpgradeManagerMetaData.Sigs instead.
// UpgradeManagerFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeManagerFuncSigs = UpgradeManagerMetaData.Sigs

// UpgradeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UpgradeManagerMetaData.Bin instead.
var UpgradeManagerBin = UpgradeManagerMetaData.Bin

// DeployUpgradeManager deploys a new Ethereum contract, binding an instance of UpgradeManager to it.
func (r *Runner) DeployUpgradeManager(opts *runOptions, _autonity common.Address, _operator common.Address) (common.Address, uint64, *UpgradeManager, error) {
	parsed, err := UpgradeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(UpgradeManagerBin), _autonity, _operator)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &UpgradeManager{contract: c}, nil
}

// UpgradeManager is an auto generated Go binding around an Ethereum contract.
type UpgradeManager struct {
	*contract
}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManager) Autonity(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _UpgradeManager.call(opts, "autonity")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManager) Operator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _UpgradeManager.call(opts, "operator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManager) CallSetOperator(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _UpgradeManager.call(opts, "setOperator", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// Upgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x6e3d9ff0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManager) CallUpgrade(r *Runner, opts *runOptions, _target common.Address, _data string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _UpgradeManager.call(opts, "upgrade", _target, _data)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManager) SetOperator(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _UpgradeManager.call(opts, "setOperator", _account)
	return consumed, err
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManager) Upgrade(opts *runOptions, _target common.Address, _data string) (uint64, error) {
	_, consumed, err := _UpgradeManager.call(opts, "upgrade", _target, _data)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// UpgradeableMetaData contains all meta data concerning the Upgradeable contract.
var UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"872cf059": "completeContractUpgrade()",
		"b66b3e79": "getNewContract()",
		"cf9c5719": "resetContractUpgrade()",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
}

// UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeableMetaData.ABI instead.
var UpgradeableABI = UpgradeableMetaData.ABI

// Deprecated: Use UpgradeableMetaData.Sigs instead.
// UpgradeableFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeableFuncSigs = UpgradeableMetaData.Sigs

// Upgradeable is an auto generated Go binding around an Ethereum contract.
type Upgradeable struct {
	*contract
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *Upgradeable) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _Upgradeable.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *Upgradeable) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *Upgradeable) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "resetContractUpgrade")
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *Upgradeable) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */
