// Code generated for internal testing purposes only - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tests

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/autonity/autonity"
	"github.com/autonity/autonity/accounts/abi"
	"github.com/autonity/autonity/accounts/abi/bind"
	"github.com/autonity/autonity/common"
	"github.com/autonity/autonity/core/types"
	"github.com/autonity/autonity/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccountabilityConfig is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityConfig struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}

// AccountabilityEvent is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityEvent struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}

// AutonityCommitteeMember is an auto generated low-level Go binding around an user-defined struct.
type AutonityCommitteeMember struct {
	Addr         common.Address
	VotingPower  *big.Int
	ConsensusKey []byte
}

// AutonityConfig is an auto generated low-level Go binding around an user-defined struct.
type AutonityConfig struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}

// AutonityContracts is an auto generated low-level Go binding around an user-defined struct.
type AutonityContracts struct {
	AccountabilityContract      common.Address
	OracleContract              common.Address
	AcuContract                 common.Address
	SupplyControlContract       common.Address
	StabilizationContract       common.Address
	UpgradeManagerContract      common.Address
	InflationControllerContract common.Address
}

// AutonityPolicy is an auto generated low-level Go binding around an user-defined struct.
type AutonityPolicy struct {
	TreasuryFee             *big.Int
	MinBaseFee              *big.Int
	DelegationRate          *big.Int
	UnbondingPeriod         *big.Int
	InitialInflationReserve *big.Int
	TreasuryAccount         common.Address
}

// AutonityProtocol is an auto generated low-level Go binding around an user-defined struct.
type AutonityProtocol struct {
	OperatorAccount     common.Address
	EpochPeriod         *big.Int
	BlockPeriod         *big.Int
	CommitteeSize       *big.Int
	MaxScheduleDuration *big.Int
}

// AutonityValidator is an auto generated low-level Go binding around an user-defined struct.
type AutonityValidator struct {
	Treasury                 common.Address
	NodeAddress              common.Address
	OracleAddress            common.Address
	Enode                    string
	CommissionRate           *big.Int
	BondedStake              *big.Int
	UnbondingStake           *big.Int
	UnbondingShares          *big.Int
	SelfBondedStake          *big.Int
	SelfUnbondingStake       *big.Int
	SelfUnbondingShares      *big.Int
	SelfUnbondingStakeLocked *big.Int
	LiquidStateContract      common.Address
	LiquidSupply             *big.Int
	RegistrationBlock        *big.Int
	TotalSlashed             *big.Int
	JailReleaseBlock         *big.Int
	ProvableFaultCount       *big.Int
	ConsensusKey             []byte
	State                    uint8
}

// ContractBaseContract is an auto generated low-level Go binding around an user-defined struct.
type ContractBaseContract struct {
	CurrentNTNAmount *big.Int
	WithdrawnValue   *big.Int
	Start            *big.Int
	CliffDuration    *big.Int
	TotalDuration    *big.Int
	CanStake         bool
}

// IOracleRoundData is an auto generated low-level Go binding around an user-defined struct.
type IOracleRoundData struct {
	Round     *big.Int
	Price     *big.Int
	Timestamp *big.Int
	Success   bool
}

// InflationControllerParams is an auto generated low-level Go binding around an user-defined struct.
type InflationControllerParams struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}

// NonStakableVestingScheduleTracker is an auto generated low-level Go binding around an user-defined struct.
type NonStakableVestingScheduleTracker struct {
	UnsubscribedAmount  *big.Int
	ExpiredFromContract *big.Int
	Initialized         bool
}

// ScheduleControllerSchedule is an auto generated low-level Go binding around an user-defined struct.
type ScheduleControllerSchedule struct {
	TotalAmount    *big.Int
	UnlockedAmount *big.Int
	Start          *big.Int
	TotalDuration  *big.Int
	LastUnlockTime *big.Int
}

// StabilizationConfig is an auto generated low-level Go binding around an user-defined struct.
type StabilizationConfig struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}

// ACUMetaData contains all meta data concerning the ACU contract.
var ACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidBasket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoACUValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"BasketModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"}],\"name\":\"modifyBasket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"44b4708a": "modifyBasket(string[],uint256[],uint256)",
		"d54d2799": "quantities()",
		"146ca531": "round()",
		"f51e181a": "scale()",
		"683dd191": "scaleFactor()",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"07039ff9": "symbols()",
		"a2e62045": "update()",
		"3fa4f245": "value()",
	},
	Bin: "",
}

// ACUABI is the input ABI used to generate the binding from.
// Deprecated: Use ACUMetaData.ABI instead.
var ACUABI = ACUMetaData.ABI

// Deprecated: Use ACUMetaData.Sigs instead.
// ACUFuncSigs maps the 4-byte function signature to its string representation.
var ACUFuncSigs = ACUMetaData.Sigs

// ACUBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ACUMetaData.Bin instead.
var ACUBin = ACUMetaData.Bin

// DeployACU deploys a new Ethereum contract, binding an instance of ACU to it.
func (r *Runner) DeployACU(opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int, autonity common.Address, operator common.Address, oracle common.Address) (common.Address, uint64, *ACU, error) {
	parsed, err := ACUMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(ACUBin), symbols_, quantities_, scale_, autonity, operator, oracle)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &ACU{contract: c}, nil
}

// ACU is an auto generated Go binding around an Ethereum contract.
type ACU struct {
	*contract
}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACU) Quantities(opts *runOptions) ([]*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "quantities")

	if err != nil {
		return *new([]*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	return out0, consumed, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACU) Round(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "round")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACU) Scale(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "scale")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACU) ScaleFactor(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "scaleFactor")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACU) Symbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _ACU.call(opts, "symbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACU) Value(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "value")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ModifyBasket is a free data retrieval call for a paid mutator transaction binding the contract method 0x44b4708a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACU) CallModifyBasket(r *Runner, opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "modifyBasket", symbols_, quantities_, scale_)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACU) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACU) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// Update is a free data retrieval call for a paid mutator transaction binding the contract method 0xa2e62045.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function update() returns(bool status)
func (_ACU *ACU) CallUpdate(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ACU.call(opts, "update")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACU) ModifyBasket(opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "modifyBasket", symbols_, quantities_, scale_)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACU) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACU) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "setOracle", oracle)
	return consumed, err
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACU) Update(opts *runOptions) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "update")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ACUBasketModifiedIterator is returned from FilterBasketModified and is used to iterate over the raw logs and unpacked data for BasketModified events raised by the ACU contract.
		type ACUBasketModifiedIterator struct {
			Event *ACUBasketModified // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ACUBasketModifiedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ACUBasketModified)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ACUBasketModified)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ACUBasketModifiedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ACUBasketModifiedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ACUBasketModified represents a BasketModified event raised by the ACU contract.
		type ACUBasketModified struct {
			Symbols []string;
			Quantities []*big.Int;
			Scale *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBasketModified is a free log retrieval operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
 		func (_ACU *ACU) FilterBasketModified(opts *bind.FilterOpts) (*ACUBasketModifiedIterator, error) {





			logs, sub, err := _ACU.contract.FilterLogs(opts, "BasketModified")
			if err != nil {
				return nil, err
			}
			return &ACUBasketModifiedIterator{contract: _ACU.contract, event: "BasketModified", logs: logs, sub: sub}, nil
 		}

		// WatchBasketModified is a free log subscription operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
		func (_ACU *ACU) WatchBasketModified(opts *bind.WatchOpts, sink chan<- *ACUBasketModified) (event.Subscription, error) {





			logs, sub, err := _ACU.contract.WatchLogs(opts, "BasketModified")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ACUBasketModified)
						if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBasketModified is a log parse operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
		func (_ACU *ACU) ParseBasketModified(log types.Log) (*ACUBasketModified, error) {
			event := new(ACUBasketModified)
			if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ACUUpdatedIterator is returned from FilterUpdated and is used to iterate over the raw logs and unpacked data for Updated events raised by the ACU contract.
		type ACUUpdatedIterator struct {
			Event *ACUUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ACUUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ACUUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ACUUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ACUUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ACUUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ACUUpdated represents a Updated event raised by the ACU contract.
		type ACUUpdated struct {
			Height *big.Int;
			Timestamp *big.Int;
			Round *big.Int;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterUpdated is a free log retrieval operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
 		func (_ACU *ACU) FilterUpdated(opts *bind.FilterOpts) (*ACUUpdatedIterator, error) {






			logs, sub, err := _ACU.contract.FilterLogs(opts, "Updated")
			if err != nil {
				return nil, err
			}
			return &ACUUpdatedIterator{contract: _ACU.contract, event: "Updated", logs: logs, sub: sub}, nil
 		}

		// WatchUpdated is a free log subscription operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
		func (_ACU *ACU) WatchUpdated(opts *bind.WatchOpts, sink chan<- *ACUUpdated) (event.Subscription, error) {






			logs, sub, err := _ACU.contract.WatchLogs(opts, "Updated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ACUUpdated)
						if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseUpdated is a log parse operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
		func (_ACU *ACU) ParseUpdated(log types.Log) (*ACUUpdated, error) {
			event := new(ACUUpdated)
			if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AccessAutonityMetaData contains all meta data concerning the AccessAutonity contract.
var AccessAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
	Bin: "0x6080604052348015600f57600080fd5b5060405160c838038060c8833981016040819052602a91604e565b600080546001600160a01b0319166001600160a01b0392909216919091179055607c565b600060208284031215605f57600080fd5b81516001600160a01b0381168114607557600080fd5b9392505050565b603f8060896000396000f3fe6080604052600080fdfea2646970667358221220805a90968aa1e16efba6ba7e5f86fdac13335a6976cf81e13917c39c64a2e52a64736f6c63430008150033",
}

// AccessAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessAutonityMetaData.ABI instead.
var AccessAutonityABI = AccessAutonityMetaData.ABI

// AccessAutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessAutonityMetaData.Bin instead.
var AccessAutonityBin = AccessAutonityMetaData.Bin

// DeployAccessAutonity deploys a new Ethereum contract, binding an instance of AccessAutonity to it.
func (r *Runner) DeployAccessAutonity(opts *runOptions, _autonity common.Address) (common.Address, uint64, *AccessAutonity, error) {
	parsed, err := AccessAutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AccessAutonityBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &AccessAutonity{contract: c}, nil
}

// AccessAutonity is an auto generated Go binding around an Ethereum contract.
type AccessAutonity struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// AccountabilityMetaData contains all meta data concerning the Accountability contract.
var AccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleMisbehaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newCommittee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"b5b7a184": "epochPeriod()",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"1e85f2e5": "handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"e05f8786": "handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"a48a9b50": "handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"e08b14ed": "setCommittee(address[])",
		"6b5f444c": "setEpochPeriod(uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "",
}

// AccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityMetaData.ABI instead.
var AccountabilityABI = AccountabilityMetaData.ABI

// Deprecated: Use AccountabilityMetaData.Sigs instead.
// AccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityFuncSigs = AccountabilityMetaData.Sigs

// AccountabilityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityMetaData.Bin instead.
var AccountabilityBin = AccountabilityMetaData.Bin

// DeployAccountability deploys a new Ethereum contract, binding an instance of Accountability to it.
func (r *Runner) DeployAccountability(opts *runOptions, _autonity common.Address, _config AccountabilityConfig) (common.Address, uint64, *Accountability, error) {
	parsed, err := AccountabilityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AccountabilityBin), _autonity, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Accountability{contract: c}, nil
}

// Accountability is an auto generated Go binding around an Ethereum contract.
type Accountability struct {
	*contract
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *Accountability) Beneficiaries(opts *runOptions, arg0 common.Address) (common.Address, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *Accountability) CanAccuse(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *Accountability) CanSlash(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (bool, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor, uint256 slashingRatePrecision)
func (_Accountability *Accountability) Config(opts *runOptions) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRateLow            *big.Int
		BaseSlashingRateMid            *big.Int
		CollusionFactor                *big.Int
		HistoryFactor                  *big.Int
		JailFactor                     *big.Int
		SlashingRatePrecision          *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateLow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateMid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CollusionFactor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.HistoryFactor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.JailFactor = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.SlashingRatePrecision = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_Accountability *Accountability) EpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "epochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *Accountability) Events(opts *runOptions, arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "events", arg0)

	outstruct := new(struct {
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.EventType = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *Accountability) GetValidatorAccusation(opts *runOptions, _val common.Address) (AccountabilityEvent, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)
	return out0, consumed, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *Accountability) GetValidatorFaults(opts *runOptions, _val common.Address) ([]AccountabilityEvent, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)
	return out0, consumed, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *Accountability) SlashingHistory(opts *runOptions, arg0 common.Address, arg1 *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *Accountability) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *Accountability) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleAccusation is a free data retrieval call for a paid mutator transaction binding the contract method 0x1e85f2e5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) CallHandleAccusation(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "handleAccusation", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleInnocenceProof is a free data retrieval call for a paid mutator transaction binding the contract method 0xe05f8786.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) CallHandleInnocenceProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "handleInnocenceProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleMisbehaviour is a free data retrieval call for a paid mutator transaction binding the contract method 0xa48a9b50.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) CallHandleMisbehaviour(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "handleMisbehaviour", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe08b14ed.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_Accountability *Accountability) CallSetCommittee(r *Runner, opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "setCommittee", _newCommittee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *Accountability) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *Accountability) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *Accountability) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) HandleAccusation(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "handleAccusation", _event)
	return consumed, err
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) HandleInnocenceProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "handleInnocenceProof", _event)
	return consumed, err
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) HandleMisbehaviour(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "handleMisbehaviour", _event)
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_Accountability *Accountability) SetCommittee(opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "setCommittee", _newCommittee)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *Accountability) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the Accountability contract.
		type AccountabilityInnocenceProvenIterator struct {
			Event *AccountabilityInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityInnocenceProven represents a InnocenceProven event raised by the Accountability contract.
		type AccountabilityInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_Accountability *Accountability) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _Accountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityInnocenceProvenIterator{contract: _Accountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_Accountability *Accountability) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _Accountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityInnocenceProven)
						if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_Accountability *Accountability) ParseInnocenceProven(log types.Log) (*AccountabilityInnocenceProven, error) {
			event := new(AccountabilityInnocenceProven)
			if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the Accountability contract.
		type AccountabilityNewAccusationIterator struct {
			Event *AccountabilityNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityNewAccusation represents a NewAccusation event raised by the Accountability contract.
		type AccountabilityNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_Accountability *Accountability) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityNewAccusationIterator{contract: _Accountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityNewAccusation)
						if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) ParseNewAccusation(log types.Log) (*AccountabilityNewAccusation, error) {
			event := new(AccountabilityNewAccusation)
			if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the Accountability contract.
		type AccountabilityNewFaultProofIterator struct {
			Event *AccountabilityNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityNewFaultProof represents a NewFaultProof event raised by the Accountability contract.
		type AccountabilityNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_Accountability *Accountability) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityNewFaultProofIterator{contract: _Accountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityNewFaultProof)
						if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) ParseNewFaultProof(log types.Log) (*AccountabilityNewFaultProof, error) {
			event := new(AccountabilityNewFaultProof)
			if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the Accountability contract.
		type AccountabilitySlashingEventIterator struct {
			Event *AccountabilitySlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilitySlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilitySlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilitySlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilitySlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilitySlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilitySlashingEvent represents a SlashingEvent event raised by the Accountability contract.
		type AccountabilitySlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_Accountability *Accountability) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilitySlashingEventIterator, error) {







			logs, sub, err := _Accountability.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &AccountabilitySlashingEventIterator{contract: _Accountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_Accountability *Accountability) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilitySlashingEvent) (event.Subscription, error) {







			logs, sub, err := _Accountability.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilitySlashingEvent)
						if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_Accountability *Accountability) ParseSlashingEvent(log types.Log) (*AccountabilitySlashingEvent, error) {
			event := new(AccountabilitySlashingEvent)
			if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AccountabilityTestMetaData contains all meta data concerning the AccountabilityTest contract.
var AccountabilityTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingRatePrecision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleMisbehaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidFaultProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performSlashingTasks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoteGuiltyAccusations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newCommittee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_epochOffencesCount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"b5b7a184": "epochPeriod()",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"1e85f2e5": "handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"e05f8786": "handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"a48a9b50": "handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"239a49ba": "handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"51772af9": "handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"653cd199": "handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"633b5e5e": "performSlashingTasks()",
		"7ec8be1d": "promoteGuiltyAccusations()",
		"e08b14ed": "setCommittee(address[])",
		"6b5f444c": "setEpochPeriod(uint256)",
		"24134570": "slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256),uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "0x608060405260006014553480156200001657600080fd5b50604051620044f0380380620044f08339810160408190526200003991620002f0565b600180546001600160a01b0319166001600160a01b03841690811790915560408051636fd8d26960e11b8152905184928492909163dfb1a4d2916004808201926020929091908290030181865afa15801562000099573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bf919062000381565b6000908155600154604080516355c7b7ff60e11b815290516001600160a01b039092169163ab8f6ffe9160048082019286929091908290030181865afa1580156200010e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200013891908101906200039b565b905060005b8151811015620001fe57600e8282815181106200015e576200015e62000539565b6020908102919091018101515182546001808201855560009485529284200180546001600160a01b0319166001600160a01b0390921691909117905583519091600f91859085908110620001b657620001b662000539565b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620001f5816200054f565b9150506200013d565b50508051600355602081015160045560408101516005556060810151600655608081015160075560a081015160085560c001516009555062000577915050565b6001600160a01b03811681146200025457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b038111828210171562000292576200029262000257565b60405290565b604051606081016001600160401b038111828210171562000292576200029262000257565b604051601f8201601f191681016001600160401b0381118282101715620002e857620002e862000257565b604052919050565b6000808284036101008112156200030657600080fd5b835162000313816200023e565b925060e0601f19820112156200032857600080fd5b50620003336200026d565b6020840151815260408401516020820152606084015160408201526080840151606082015260a0840151608082015260c084015160a082015260e084015160c0820152809150509250929050565b6000602082840312156200039457600080fd5b5051919050565b60006020808385031215620003af57600080fd5b82516001600160401b0380821115620003c757600080fd5b818501915085601f830112620003dc57600080fd5b815181811115620003f157620003f162000257565b8060051b62000402858201620002bd565b91825283810185019185810190898411156200041d57600080fd5b86860192505b838310156200052c578251858111156200043d5760008081fd5b86016060601f19828d038101821315620004575760008081fd5b6200046162000298565b8a84015162000470816200023e565b81526040848101518c830152928401519289841115620004905760008081fd5b83850194508e603f860112620004a857600093508384fd5b8b850151935089841115620004c157620004c162000257565b620004d38c84601f87011601620002bd565b92508383528e81858701011115620004eb5760008081fd5b60005b848110156200050b578581018201518482018e01528c01620004ee565b5060009383018c019390935291820152835250918601919086019062000423565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200057057634e487b7160e01b600052601160045260246000fd5b5060010190565b613f6980620005876000396000f3fe6080604052600436106101355760003560e01c806379502c55116100ab578063a8031a1d1161006f578063a8031a1d146103e7578063b5b7a184146103fa578063bebaa8fc1461041e578063e05f87861461044b578063e08b14ed1461046b578063e7bb0b521461048b57600080fd5b806379502c55146102ea5780637ccecadd1461034e5780637ec8be1d146103855780639cb22b061461039a578063a48a9b50146103c757600080fd5b80634108a95a116100fd5780634108a95a1461022557806351772af914610255578063633b5e5e14610275578063653cd1991461028a5780636b5f444c146102aa5780636c9789b0146102ca57600080fd5b8063015677391461013a5780630b7914301461018d5780631e85f2e5146101c3578063239a49ba146101e55780632413457014610205575b600080fd5b34801561014657600080fd5b5061017061015536600461320a565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019957600080fd5b506101ad6101a836600461322e565b6104c3565b6040516101849a999897969594939291906132d1565b3480156101cf57600080fd5b506101e36101de36600461353b565b6105c0565b005b3480156101f157600080fd5b506101e361020036600461353b565b610697565b34801561021157600080fd5b506101e3610220366004613578565b6106a0565b34801561023157600080fd5b506102456102403660046135bd565b6106ae565b6040519015158152602001610184565b34801561026157600080fd5b506101e361027036600461353b565b6107d6565b34801561028157600080fd5b506101e36107df565b34801561029657600080fd5b506101e36102a536600461353b565b6107e9565b3480156102b657600080fd5b506101e36102c536600461322e565b6107f2565b3480156102d657600080fd5b506101e36102e5366004613609565b610821565b3480156102f657600080fd5b506003546004546005546006546007546008546009546103199695949392919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610184565b34801561035a57600080fd5b5061036e6103693660046135bd565b610861565b604080519215158352602083019190915201610184565b34801561039157600080fd5b506101e3610a2d565b3480156103a657600080fd5b506103ba6103b536600461320a565b610a35565b60405161018491906136d9565b3480156103d357600080fd5b506101e36103e236600461353b565b610c38565b6101e36103f53660046136ec565b610d0d565b34801561040657600080fd5b5061041060005481565b604051908152602001610184565b34801561042a57600080fd5b5061043e61043936600461320a565b610f8b565b6040516101849190613718565b34801561045757600080fd5b506101e361046636600461353b565b611206565b34801561047757600080fd5b506101e361048636600461377a565b6112dd565b34801561049757600080fd5b506104106104a63660046136ec565b601160209081526000928352604080842090915290825290205481565b600281815481106104d357600080fd5b600091825260209091206008909102018054600182015460028301805460ff808516965061010085041694620100009094046001600160a01b0390811694931692919061051f9061382c565b80601f016020809104026020016040519081016040528092919081815260200182805461054b9061382c565b80156105985780601f1061056d57610100808354040283529160200191610598565b820191906000526020600020905b81548152906001019060200180831161057b57829003601f168201915b505050505090806003015490806004015490806005015490806006015490806007015490508a565b336000908152600f602052604090205460ff1615156001146105fd5760405162461bcd60e51b81526004016105f490613866565b60405180910390fd5b60408101516001600160a01b031633146106295760405162461bcd60e51b81526004016105f4906138af565b60018151600281111561063e5761063e613247565b1461068b5760405162461bcd60e51b815260206004820152601f60248201527f77726f6e67206576656e74207479706520666f722061636375736174696f6e0060448201526064016105f4565b610694816113fa565b50565b610694816116fd565b6106aa8282611986565b5050565b6000808360098111156106c3576106c3613247565b101580156106e3575060098360098111156106e0576106e0613247565b11155b6107275760405162461bcd60e51b81526020600482015260156024820152741c9d5b19481a59081b5d5cdd081899481d985b1a59605a1b60448201526064016105f4565b600061073284611f28565b6001546040516396b477cb60e01b8152600481018690529192506000916001600160a01b03909116906396b477cb90602401602060405180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a591906138e6565b6001600160a01b03871660009081526011602090815260408083209383529290522054919091109150509392505050565b61069481611f93565b6107e76121d5565b565b61069481612493565b6001546001600160a01b0316331461081c5760405162461bcd60e51b81526004016105f4906138ff565b600055565b6001546001600160a01b0316331461084b5760405162461bcd60e51b81526004016105f4906138ff565b61085361279b565b8015610694576106946121d5565b6000808084600981111561087757610877613247565b101580156108975750600984600981111561089457610894613247565b11155b6108db5760405162461bcd60e51b81526020600482015260156024820152741c9d5b19481a59081b5d5cdd081899481d985b1a59605a1b60448201526064016105f4565b60006108e685611f28565b6001546040516396b477cb60e01b8152600481018790529192506000916001600160a01b03909116906396b477cb90602401602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095991906138e6565b6001600160a01b03881660009081526011602090815260408083208484529091529020549091508211610993576000935060009250610a23565b6001600160a01b0387166000908152600c602052604090205415610a1a576001600160a01b0387166000908152600c60205260408120546002906109d99060019061396a565b815481106109e9576109e961397d565b90600052602060002090600802019050600094506003600001548160040154610a129190613993565b935050610a23565b60019350600092505b5050935093915050565b6107e761279b565b610a3d613089565b6001600160a01b0382166000908152600c6020526040902054610a925760405162461bcd60e51b815260206004820152600d60248201526c37379030b1b1bab9b0ba34b7b760991b60448201526064016105f4565b6001600160a01b0382166000908152600c6020526040902054600290610aba9060019061396a565b81548110610aca57610aca61397d565b600091825260209091206040805161014081019091526008909202018054829060ff166002811115610afe57610afe613247565b6002811115610b0f57610b0f613247565b81528154602090910190610100900460ff166009811115610b3257610b32613247565b6009811115610b4357610b43613247565b815281546001600160a01b0362010000909104811660208301526001830154166040820152600282018054606090920191610b7d9061382c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba99061382c565b8015610bf65780601f10610bcb57610100808354040283529160200191610bf6565b820191906000526020600020905b815481529060010190602001808311610bd957829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b336000908152600f602052604090205460ff161515600114610c6c5760405162461bcd60e51b81526004016105f490613866565b60408101516001600160a01b03163314610c985760405162461bcd60e51b81526004016105f4906138af565b600081516002811115610cad57610cad613247565b14610d045760405162461bcd60e51b815260206004820152602160248201527f77726f6e67206576656e74207479706520666f72206d69736265686176696f756044820152603960f91b60648201526084016105f4565b61069481612acd565b6001546001600160a01b03163314610d375760405162461bcd60e51b81526004016105f4906138ff565b6001546001600160a01b038381166000908152600a6020526040808220549051630c825d9760e11b8152908316600482015290929190911690631904bb2e90602401600060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dbe9190810190613a05565b5160015460405163a9059cbb60e01b81526001600160a01b0380841660048301526024820186905292935091169063a9059cbb906044016020604051808303816000875af1925050508015610e30575060408051601f3d908101601f19168201909252610e2d91810190613b83565b60015b15610e3757505b6000816001600160a01b0316346108fc90604051600060405180830381858888f193505050503d8060008114610e89576040519150601f19603f3d011682016040523d82523d6000602084013e610e8e565b606091505b5050905080610f6157600160009054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e9190613ba0565b6001600160a01b03163460405160006040518083038185875af1925050503d8060008114610f58576040519150601f19603f3d011682016040523d82523d6000602084013e610f5d565b606091505b5050505b5050506001600160a01b03166000908152600a6020526040902080546001600160a01b0319169055565b6001600160a01b0381166000908152600b60205260408120546060919067ffffffffffffffff811115610fc057610fc0613347565b604051908082528060200260200182016040528015610ff957816020015b610fe6613089565b815260200190600190039081610fde5790505b50905060005b6001600160a01b0384166000908152600b60205260409020548110156111ff576001600160a01b0384166000908152600b602052604090208054600291908390811061104d5761104d61397d565b9060005260206000200154815481106110685761106861397d565b600091825260209091206040805161014081019091526008909202018054829060ff16600281111561109c5761109c613247565b60028111156110ad576110ad613247565b81528154602090910190610100900460ff1660098111156110d0576110d0613247565b60098111156110e1576110e1613247565b815281546001600160a01b036201000090910481166020830152600183015416604082015260028201805460609092019161111b9061382c565b80601f01602080910402602001604051908101604052809291908181526020018280546111479061382c565b80156111945780601f1061116957610100808354040283529160200191611194565b820191906000526020600020905b81548152906001019060200180831161117757829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250508282815181106111e1576111e161397d565b602002602001018190525080806111f790613bbd565b915050610fff565b5092915050565b336000908152600f602052604090205460ff16151560011461123a5760405162461bcd60e51b81526004016105f490613866565b60408101516001600160a01b031633146112665760405162461bcd60e51b81526004016105f4906138af565b60028151600281111561127b5761127b613247565b146112d45760405162461bcd60e51b8152602060048201526024808201527f77726f6e67206576656e74207479706520666f7220696e6e6f63656e636520706044820152633937b7b360e11b60648201526084016105f4565b61069481612cd1565b6001546001600160a01b031633146113075760405162461bcd60e51b81526004016105f4906138ff565b61136a600d80548060200260200160405190810160405280929190818152602001828054801561136057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611342575b5050505050612e17565b6113cd600e8054806020026020016040519081016040528092919081815260200182805480156113c357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113a5575b5050505050612ee3565b600e80546113dd91600d916130ef565b506113e781612ee3565b80516106aa90600e90602084019061313f565b600080600080600061141160fc8760800151612fc9565b94509450945094509450846114685760405162461bcd60e51b815260206004820152601e60248201527f6661696c65642061636375736174696f6e20766572696669636174696f6e000060448201526064016105f4565b85606001516001600160a01b0316846001600160a01b03161461149d5760405162461bcd60e51b81526004016105f490613bd6565b856020015160098111156114b3576114b3613247565b83146114d15760405162461bcd60e51b81526004016105f490613c01565b6001546040516396b477cb60e01b8152600481018490526000916001600160a01b0316906396b477cb90602401602060405180830381865afa15801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f91906138e6565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c9d97af46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba91906138e6565b60c0890185905260e08901839052436101008a01526101208901849052905060006115e760026001613993565b600e546115f69060019061396a565b6116009190613c2b565b9050818960e0015110156116365761161a60026001613993565b600d546116299060019061396a565b6116339190613c2b565b90505b3360009081526010602090815260408083208684529091529020548110156116b95760405162461bcd60e51b815260206004820152603060248201527f76616c696461746f722073686f756c646e27742061627573652061636375736160448201526f0e8d2dedc40d2dc40c2dc40cae0dec6d60831b60648201526084016105f4565b6116c2896116fd565b33600090815260106020908152604080832086845290915281208054600192906116ed908490613993565b9091555050505050505050505050565b60608101516001600160a01b03166000908152600c6020526040902054156117675760405162461bcd60e51b815260206004820181905260248201527f616c72656164792070726f63657373696e6720616e2061636375736174696f6e60448201526064016105f4565b60006117768260200151611f28565b60608301516001600160a01b0316600090815260116020908152604080832060e0870151845290915290205490915081116117c35760405162461bcd60e51b81526004016105f490613c42565b6002805460a08401819052600180820183556000839052845160089092027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180548694919392849260ff1990921691849081111561182457611824613247565b021790555060208201518154829061ff00191661010083600981111561184c5761184c613247565b02179055506040820151815462010000600160b01b031916620100006001600160a01b039283160217825560608301516001830180546001600160a01b03191691909216179055608082015160028201906118a79082613cd1565b5060a082810151600383015560c0830151600483015560e083015160058301556101008301516006830155610120909201516007909101558201516118ed906001613993565b60608301516001600160a01b03166000908152600c602052604090205560a082015160139061191d906001613993565b815460018101835560009283526020928390200155606083015160a084015160408051858152938401919091526001600160a01b03909116917f2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba4035191015b60405180910390a25050565b6001546060830151604051630c825d9760e11b81526001600160a01b0391821660048201526000929190911690631904bb2e90602401600060405180830381865afa1580156119d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a019190810190613a05565b60408481015160608601516001600160a01b039081166000908152600a6020529290922080546001600160a01b03191692909116919091179055905060038161026001516003811115611a5657611a56613247565b03611a6057505050565b6000611a77611a728560200151611f28565b613030565b61022083015160075491925090600090611a919083613c2b565b600654611a9e9087613c2b565b611aa89085613993565b611ab29190613993565b600954909150811115611ac457506009545b60008461012001518560c001518660a00151611ae09190613993565b611aea9190613993565b600954909150600090611afd8385613c2b565b611b079190613d91565b9050600081118015611b1857508181145b15611c4a57600060a087018190526101008701819052610120870181905260c08701526101e086018051829190611b50908390613993565b9052506102208601805160019190611b69908390613993565b905250600361026087015260006102008701526001546040516301adf0b760e51b81526001600160a01b03909116906335be16e090611bac908990600401613dc3565b600060405180830381600087803b158015611bc657600080fd5b505af1158015611bda573d6000803e3d6000fd5b5050505060208681015160a08a810151604080516001600160a01b03909416845293830185905260008385015260016060840152608083015291517f6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9929181900390910190a15050505050505050565b61012086015181908111611c7757808761012001818151611c6b919061396a565b90525060009050611c92565b610120870151611c87908261396a565b600061012089015290505b8015611d0f578087610100015110611cda57808761010001818151611cb7919061396a565b90525060a087018051829190611cce90839061396a565b90525060009050611d0f565b610100870151611cea908261396a565b90508661010001518760a001818151611d03919061396a565b90525060006101008801525b600081118015611d32575060008760a001518860c00151611d309190613993565b115b15611dde5760008760a001518860c00151611d4d9190613993565b60c0890151611d5c9084613c2b565b611d669190613d91565b905060008860a001518960c00151611d7e9190613993565b60a08a0151611d8d9085613c2b565b611d979190613d91565b9050818960c001818151611dab919061396a565b90525060a089018051829190611dc290839061396a565b905250611dcf8183613993565b611dd9908461396a565b925050505b611de8818361396a565b915081876101e001818151611dfd9190613993565b9052506102208701805160019190611e16908390613993565b905250600054610220880151600854611e2f9190613c2b565b611e399190613c2b565b611e439043613993565b61020088015260026102608801526001546040516301adf0b760e51b81526001600160a01b03909116906335be16e090611e81908a90600401613dc3565b600060405180830381600087803b158015611e9b57600080fd5b505af1158015611eaf573d6000803e3d6000fd5b5050506020808901516102008a015160a0808e0151604080516001600160a01b039095168552948401889052938301919091526000606083015260808201929092527f6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f992500160405180910390a1505050505050505050565b60006009826009811115611f3e57611f3e613247565b03611f4c5760025b92915050565b6000826009811115611f6057611f60613247565b03611f6c576002611f46565b6001826009811115611f8057611f80613247565b03611f8c576002611f46565b6002611f46565b6000611fa28260200151611f28565b60608301516001600160a01b0316600090815260116020908152604080832060e087015184529091529020549091508111611fef5760405162461bcd60e51b81526004016105f490613c42565b6002805460a08401819052600180820183556000839052845160089092027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180548694919392849260ff1990921691849081111561205057612050613247565b021790555060208201518154829061ff00191661010083600981111561207857612078613247565b02179055506040820151815462010000600160b01b031916620100006001600160a01b039283160217825560608301516001830180546001600160a01b03191691909216179055608082015160028201906120d39082613cd1565b5060a082810151600383015560c0830151600483015560e08084015160058401556101008401516006840155610120909301516007909201919091556060840180516001600160a01b039081166000908152600b602090815260408083209589018051875460018181018a559886528486200155805160128054988901815585527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490970196909655845184168352601182528083209689015183529590528490208590559051915192519116917f6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f9161197a91858252602082015260400190565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663c9d97af46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f91906138e6565b905060005b6012548110156122c657816002601283815481106122745761227461397d565b90600052602060002001548154811061228f5761228f61397d565b906000526020600020906008020160050154036122b4576122b1600184613993565b92505b806122be81613bbd565b915050612254565b5060005b601254811015612486576124746002601283815481106122ec576122ec61397d565b9060005260206000200154815481106123075761230761397d565b600091825260209091206040805161014081019091526008909202018054829060ff16600281111561233b5761233b613247565b600281111561234c5761234c613247565b81528154602090910190610100900460ff16600981111561236f5761236f613247565b600981111561238057612380613247565b815281546001600160a01b03620100009091048116602083015260018301541660408201526002820180546060909201916123ba9061382c565b80601f01602080910402602001604051908101604052809291908181526020018280546123e69061382c565b80156124335780601f1061240857610100808354040283529160200191612433565b820191906000526020600020905b81548152906001019060200180831161241657829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505084611986565b8061247e81613bbd565b9150506122ca565b506106aa60126000613194565b60608101516001600160a01b03166000908152600c6020526040812054908190036125005760405162461bcd60e51b815260206004820152601860248201527f6e6f206173736f6369617465642061636375736174696f6e000000000000000060448201526064016105f4565b8160200151600981111561251657612516613247565b600261252360018461396a565b815481106125335761253361397d565b6000918252602090912060089091020154610100900460ff16600981111561255d5761255d613247565b146125ba5760405162461bcd60e51b815260206004820152602760248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152661c9d5b19481a5960ca1b60648201526084016105f4565b60c082015160026125cc60018461396a565b815481106125dc576125dc61397d565b906000526020600020906008020160040154146126495760405162461bcd60e51b815260206004820152602560248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e20604482015264626c6f636b60d81b60648201526084016105f4565b610120820151600261265c60018461396a565b8154811061266c5761266c61397d565b906000526020600020906008020160070154146126d75760405162461bcd60e51b8152602060048201526024808201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152630d0c2e6d60e31b60648201526084016105f4565b6014545b6013548110156127415781601382815481106126f9576126f961397d565b90600052602060002001540361272f5760006013828154811061271e5761271e61397d565b600091825260209091200155612741565b8061273981613bbd565b9150506126db565b506060820180516001600160a01b039081166000908152600c602090815260408083208390559351935191825292909116917f1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f910161197a565b6014545b601354811015612ac8576000601382815481106127be576127be61397d565b90600052602060002001549050806000036127d95750612ab6565b6127e460018261396a565b90506000600282815481106127fb576127fb61397d565b600091825260209091206040805161014081019091526008909202018054829060ff16600281111561282f5761282f613247565b600281111561284057612840613247565b81528154602090910190610100900460ff16600981111561286357612863613247565b600981111561287457612874613247565b815281546001600160a01b03620100009091048116602083015260018301541660408201526002820180546060909201916128ae9061382c565b80601f01602080910402602001604051908101604052809291908181526020018280546128da9061382c565b80156129275780601f106128fc57610100808354040283529160200191612927565b820191906000526020600020905b81548152906001019060200180831161290a57829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090504360036000015482610100015161297b9190613993565b1115612988575050601455565b60608101516001600160a01b03166000908152600c6020908152604082208290558201516129b590611f28565b60608301516001600160a01b0316600090815260116020908152604080832060e0870151845290915290205490915081116129f257505050612ab6565b6060820180516001600160a01b03908116600090815260116020908152604080832060e088015184528252808320869055845184168352600b8252808320805460018082018355918552838520018990556012805491820181559093527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490920187905592518151858152938401879052909116917f6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f910160405180910390a25050505b80612ac081613bbd565b91505061279f565b601455565b6000806000806000612ae460fe8760800151612fc9565b9450945094509450945084612b3b5760405162461bcd60e51b815260206004820152601960248201527f6661696c65642070726f6f6620766572696669636174696f6e0000000000000060448201526064016105f4565b85606001516001600160a01b0316846001600160a01b031614612b705760405162461bcd60e51b81526004016105f490613bd6565b85602001516009811115612b8657612b86613247565b8314612ba45760405162461bcd60e51b81526004016105f490613c01565b438210612bec5760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b60448201526064016105f4565b60008211612c325760405162461bcd60e51b815260206004820152601360248201527263616e27742062652061742067656e6573697360681b60448201526064016105f4565b6001546040516396b477cb60e01b8152600481018490526000916001600160a01b0316906396b477cb90602401602060405180830381865afa158015612c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca091906138e6565b60c0880184905260e088018190524361010089015261012088018390529050612cc887611f93565b50505050505050565b6000806000806000612ce860fd8760800151612fc9565b9450945094509450945084612d3f5760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420696e6e6f63656e636520766572696669636174696f6e00000060448201526064016105f4565b85606001516001600160a01b0316846001600160a01b031614612d745760405162461bcd60e51b81526004016105f490613bd6565b85602001516009811115612d8a57612d8a613247565b8314612da85760405162461bcd60e51b81526004016105f490613c01565b438210612df05760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b60448201526064016105f4565b60c08601829052610120860181905243610100870152612e0f86612493565b505050505050565b6001546001600160a01b03163314612e415760405162461bcd60e51b81526004016105f4906138ff565b60005b81518110156106aa57600f6000838381518110612e6357612e6361397d565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615612ed157600f6000838381518110612ea557612ea561397d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191690555b80612edb81613bbd565b915050612e44565b6001546001600160a01b03163314612f0d5760405162461bcd60e51b81526004016105f4906138ff565b60005b81518110156106aa57600f6000838381518110612f2f57612f2f61397d565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161515600114612fb7576001600f6000848481518110612f7757612f7761397d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80612fc181613bbd565b915050612f10565b60008060008060008086516020612fe09190613993565b9050612fea6131b2565b60a081838a8c5afa612ffb57600080fd5b805160010361300957600196505b602081015160408201516060830151608090930151989b919a509850909695509350505050565b60008161303f57505060055490565b6001820361304f57505060055490565b6002820361305f57505060055490565b6003820361306f57505060055490565b600482036130805750612710919050565b50612710919050565b60408051610140810190915280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b82805482825590600052602060002090810192821561312f5760005260206000209182015b8281111561312f578254825591600101919060010190613114565b5061313b9291506131d0565b5090565b82805482825590600052602060002090810192821561312f579160200282015b8281111561312f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061315f565b508054600082559060005260206000209081019061069491906131d0565b6040518060a001604052806005906020820280368337509192915050565b5b8082111561313b57600081556001016131d1565b6001600160a01b038116811461069457600080fd5b8035613205816131e5565b919050565b60006020828403121561321c57600080fd5b8135613227816131e5565b9392505050565b60006020828403121561324057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061326d5761326d613247565b9052565b600a811061326d5761326d613247565b60005b8381101561329c578181015183820152602001613284565b50506000910152565b600081518084526132bd816020860160208601613281565b601f01601f19169290920160200192915050565b60006101406132e0838e61325d565b6132ed602084018d613271565b6001600160a01b038b811660408501528a166060840152608083018190526133178184018a6132a5565b60a0840198909852505060c081019490945260e08401929092526101008301526101209091015295945050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561338157613381613347565b60405290565b604051610280810167ffffffffffffffff8111828210171561338157613381613347565b604051601f8201601f1916810167ffffffffffffffff811182821017156133d4576133d4613347565b604052919050565b80356003811061320557600080fd5b8035600a811061320557600080fd5b600067ffffffffffffffff82111561341457613414613347565b50601f01601f191660200190565b600082601f83011261343357600080fd5b8135613446613441826133fa565b6133ab565b81815284602083860101111561345b57600080fd5b816020850160208301376000918101602001919091529392505050565b6000610140828403121561348b57600080fd5b61349361335d565b905061349e826133dc565b81526134ac602083016133eb565b60208201526134bd604083016131fa565b60408201526134ce606083016131fa565b6060820152608082013567ffffffffffffffff8111156134ed57600080fd5b6134f984828501613422565b60808301525060a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b60006020828403121561354d57600080fd5b813567ffffffffffffffff81111561356457600080fd5b61357084828501613478565b949350505050565b6000806040838503121561358b57600080fd5b823567ffffffffffffffff8111156135a257600080fd5b6135ae85828601613478565b95602094909401359450505050565b6000806000606084860312156135d257600080fd5b83356135dd816131e5565b92506135eb602085016133eb565b9150604084013590509250925092565b801515811461069457600080fd5b60006020828403121561361b57600080fd5b8135613227816135fb565b600061014061363684845161325d565b60208301516136486020860182613271565b50604083015161366360408601826001600160a01b03169052565b50606083015161367e60608601826001600160a01b03169052565b506080830151816080860152613696828601826132a5565b91505060a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152508091505092915050565b6020815260006132276020830184613626565b600080604083850312156136ff57600080fd5b823561370a816131e5565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561376d57603f1988860301845261375b858351613626565b9450928501929085019060010161373f565b5092979650505050505050565b6000602080838503121561378d57600080fd5b823567ffffffffffffffff808211156137a557600080fd5b818501915085601f8301126137b957600080fd5b8135818111156137cb576137cb613347565b8060051b91506137dc8483016133ab565b81815291830184019184810190888411156137f657600080fd5b938501935b838510156138205784359250613810836131e5565b82825293850193908501906137fb565b98975050505050505050565b600181811c9082168061384057607f821691505b60208210810361386057634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526029908201527f66756e6374696f6e207265737472696374656420746f206120636f6d6d69747460408201526832b29036b2b6b132b960b91b606082015260800190565b6020808252601d908201527f6576656e74207265706f72746572206d7573742062652063616c6c6572000000604082015260600190565b6000602082840312156138f857600080fd5b5051919050565b60208082526035908201527f66756e6374696f6e207265737472696374656420746f20746865206175746f6e6040820152741a5d1e481c1c9bdd1bd8dbdb0818dbdb9d1c9858dd605a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611f4657611f46613954565b634e487b7160e01b600052603260045260246000fd5b80820180821115611f4657611f46613954565b8051613205816131e5565b600082601f8301126139c257600080fd5b81516139d0613441826133fa565b8181528460208386010111156139e557600080fd5b613570826020830160208701613281565b80516004811061320557600080fd5b600060208284031215613a1757600080fd5b815167ffffffffffffffff80821115613a2f57600080fd5b908301906102808286031215613a4457600080fd5b613a4c613387565b613a55836139a6565b8152613a63602084016139a6565b6020820152613a74604084016139a6565b6040820152606083015182811115613a8b57600080fd5b613a97878286016139b1565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160808401518183015250610180613b038185016139a6565b908201526101a083810151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015183811115613b5257600080fd5b613b5e888287016139b1565b8284015250506102609150613b748284016139f6565b91810191909152949350505050565b600060208284031215613b9557600080fd5b8151613227816135fb565b600060208284031215613bb257600080fd5b8151613227816131e5565b600060018201613bcf57613bcf613954565b5060010190565b6020808252601190820152700decccccadcc8cae440dad2e6dac2e8c6d607b1b604082015260600190565b60208082526010908201526f0e4ead8ca40d2c840dad2e6dac2e8c6d60831b604082015260600190565b8082028115828204841417611f4657611f46613954565b60208082526024908201527f616c726561647920736c6173686564206174207468652070726f6f66277320656040820152630e0dec6d60e31b606082015260800190565b601f821115613ccc57600081815260208120601f850160051c81016020861015613cad5750805b601f850160051c820191505b81811015612e0f57828155600101613cb9565b505050565b815167ffffffffffffffff811115613ceb57613ceb613347565b613cff81613cf9845461382c565b84613c86565b602080601f831160018114613d345760008415613d1c5750858301515b600019600386901b1c1916600185901b178555612e0f565b600085815260208120601f198616915b82811015613d6357888601518255948401946001909101908401613d44565b5085821015613d815787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082613dae57634e487b7160e01b600052601260045260246000fd5b500490565b6004811061326d5761326d613247565b60208152613ddd6020820183516001600160a01b03169052565b60006020830151613df960408401826001600160a01b03169052565b5060408301516001600160a01b0381166060840152506060830151610280806080850152613e2b6102a08501836132a5565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a0613eb2818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f190161026080880191909152909150613f1484836132a5565b935080870151915050613f2982860182613db3565b509094935050505056fea26469706673582212200c981e46520287daaa3f78fef2314d9fd53ae08d3d72e37369a846939eb1114964736f6c63430008150033",
}

// AccountabilityTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityTestMetaData.ABI instead.
var AccountabilityTestABI = AccountabilityTestMetaData.ABI

// Deprecated: Use AccountabilityTestMetaData.Sigs instead.
// AccountabilityTestFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityTestFuncSigs = AccountabilityTestMetaData.Sigs

// AccountabilityTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityTestMetaData.Bin instead.
var AccountabilityTestBin = AccountabilityTestMetaData.Bin

// DeployAccountabilityTest deploys a new Ethereum contract, binding an instance of AccountabilityTest to it.
func (r *Runner) DeployAccountabilityTest(opts *runOptions, _autonity common.Address, _config AccountabilityConfig) (common.Address, uint64, *AccountabilityTest, error) {
	parsed, err := AccountabilityTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AccountabilityTestBin), _autonity, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &AccountabilityTest{contract: c}, nil
}

// AccountabilityTest is an auto generated Go binding around an Ethereum contract.
type AccountabilityTest struct {
	*contract
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_AccountabilityTest *AccountabilityTest) Beneficiaries(opts *runOptions, arg0 common.Address) (common.Address, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_AccountabilityTest *AccountabilityTest) CanAccuse(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_AccountabilityTest *AccountabilityTest) CanSlash(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (bool, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor, uint256 slashingRatePrecision)
func (_AccountabilityTest *AccountabilityTest) Config(opts *runOptions) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
	SlashingRatePrecision          *big.Int
}, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRateLow            *big.Int
		BaseSlashingRateMid            *big.Int
		CollusionFactor                *big.Int
		HistoryFactor                  *big.Int
		JailFactor                     *big.Int
		SlashingRatePrecision          *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateLow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateMid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CollusionFactor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.HistoryFactor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.JailFactor = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.SlashingRatePrecision = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_AccountabilityTest *AccountabilityTest) EpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "epochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_AccountabilityTest *AccountabilityTest) Events(opts *runOptions, arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "events", arg0)

	outstruct := new(struct {
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.EventType = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_AccountabilityTest *AccountabilityTest) GetValidatorAccusation(opts *runOptions, _val common.Address) (AccountabilityEvent, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)
	return out0, consumed, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_AccountabilityTest *AccountabilityTest) GetValidatorFaults(opts *runOptions, _val common.Address) ([]AccountabilityEvent, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)
	return out0, consumed, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTest) SlashingHistory(opts *runOptions, arg0 common.Address, arg1 *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_AccountabilityTest *AccountabilityTest) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_AccountabilityTest *AccountabilityTest) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleAccusation is a free data retrieval call for a paid mutator transaction binding the contract method 0x1e85f2e5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleAccusation(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleAccusation", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleInnocenceProof is a free data retrieval call for a paid mutator transaction binding the contract method 0xe05f8786.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleInnocenceProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleInnocenceProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleMisbehaviour is a free data retrieval call for a paid mutator transaction binding the contract method 0xa48a9b50.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleMisbehaviour(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleMisbehaviour", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleValidAccusation is a free data retrieval call for a paid mutator transaction binding the contract method 0x239a49ba.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleValidAccusation(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleValidAccusation", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleValidFaultProof is a free data retrieval call for a paid mutator transaction binding the contract method 0x51772af9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleValidFaultProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleValidFaultProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleValidInnocenceProof is a free data retrieval call for a paid mutator transaction binding the contract method 0x653cd199.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleValidInnocenceProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleValidInnocenceProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// PerformSlashingTasks is a free data retrieval call for a paid mutator transaction binding the contract method 0x633b5e5e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function performSlashingTasks() returns()
func (_AccountabilityTest *AccountabilityTest) CallPerformSlashingTasks(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "performSlashingTasks")
	r.revertSnapshot(snap)
	return consumed, err

}

// PromoteGuiltyAccusations is a free data retrieval call for a paid mutator transaction binding the contract method 0x7ec8be1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function promoteGuiltyAccusations() returns()
func (_AccountabilityTest *AccountabilityTest) CallPromoteGuiltyAccusations(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "promoteGuiltyAccusations")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe08b14ed.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_AccountabilityTest *AccountabilityTest) CallSetCommittee(r *Runner, opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "setCommittee", _newCommittee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_AccountabilityTest *AccountabilityTest) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// Slash is a free data retrieval call for a paid mutator transaction binding the contract method 0x24134570.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event, uint256 _epochOffencesCount) returns()
func (_AccountabilityTest *AccountabilityTest) CallSlash(r *Runner, opts *runOptions, _event AccountabilityEvent, _epochOffencesCount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "slash", _event, _epochOffencesCount)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_AccountabilityTest *AccountabilityTest) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_AccountabilityTest *AccountabilityTest) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleAccusation(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleAccusation", _event)
	return consumed, err
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleInnocenceProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleInnocenceProof", _event)
	return consumed, err
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleMisbehaviour(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleMisbehaviour", _event)
	return consumed, err
}

// HandleValidAccusation is a paid mutator transaction binding the contract method 0x239a49ba.
//
// Solidity: function handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleValidAccusation(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleValidAccusation", _event)
	return consumed, err
}

// HandleValidFaultProof is a paid mutator transaction binding the contract method 0x51772af9.
//
// Solidity: function handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleValidFaultProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleValidFaultProof", _event)
	return consumed, err
}

// HandleValidInnocenceProof is a paid mutator transaction binding the contract method 0x653cd199.
//
// Solidity: function handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleValidInnocenceProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleValidInnocenceProof", _event)
	return consumed, err
}

// PerformSlashingTasks is a paid mutator transaction binding the contract method 0x633b5e5e.
//
// Solidity: function performSlashingTasks() returns()
func (_AccountabilityTest *AccountabilityTest) PerformSlashingTasks(opts *runOptions) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "performSlashingTasks")
	return consumed, err
}

// PromoteGuiltyAccusations is a paid mutator transaction binding the contract method 0x7ec8be1d.
//
// Solidity: function promoteGuiltyAccusations() returns()
func (_AccountabilityTest *AccountabilityTest) PromoteGuiltyAccusations(opts *runOptions) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "promoteGuiltyAccusations")
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_AccountabilityTest *AccountabilityTest) SetCommittee(opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "setCommittee", _newCommittee)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_AccountabilityTest *AccountabilityTest) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

// Slash is a paid mutator transaction binding the contract method 0x24134570.
//
// Solidity: function slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event, uint256 _epochOffencesCount) returns()
func (_AccountabilityTest *AccountabilityTest) Slash(opts *runOptions, _event AccountabilityEvent, _epochOffencesCount *big.Int) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "slash", _event, _epochOffencesCount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AccountabilityTestInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the AccountabilityTest contract.
		type AccountabilityTestInnocenceProvenIterator struct {
			Event *AccountabilityTestInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestInnocenceProven represents a InnocenceProven event raised by the AccountabilityTest contract.
		type AccountabilityTestInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_AccountabilityTest *AccountabilityTest) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestInnocenceProvenIterator{contract: _AccountabilityTest.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityTestInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestInnocenceProven)
						if err := _AccountabilityTest.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) ParseInnocenceProven(log types.Log) (*AccountabilityTestInnocenceProven, error) {
			event := new(AccountabilityTestInnocenceProven)
			if err := _AccountabilityTest.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityTestNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the AccountabilityTest contract.
		type AccountabilityTestNewAccusationIterator struct {
			Event *AccountabilityTestNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestNewAccusation represents a NewAccusation event raised by the AccountabilityTest contract.
		type AccountabilityTestNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_AccountabilityTest *AccountabilityTest) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestNewAccusationIterator{contract: _AccountabilityTest.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityTestNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestNewAccusation)
						if err := _AccountabilityTest.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) ParseNewAccusation(log types.Log) (*AccountabilityTestNewAccusation, error) {
			event := new(AccountabilityTestNewAccusation)
			if err := _AccountabilityTest.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityTestNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the AccountabilityTest contract.
		type AccountabilityTestNewFaultProofIterator struct {
			Event *AccountabilityTestNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestNewFaultProof represents a NewFaultProof event raised by the AccountabilityTest contract.
		type AccountabilityTestNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_AccountabilityTest *AccountabilityTest) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestNewFaultProofIterator{contract: _AccountabilityTest.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityTestNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestNewFaultProof)
						if err := _AccountabilityTest.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) ParseNewFaultProof(log types.Log) (*AccountabilityTestNewFaultProof, error) {
			event := new(AccountabilityTestNewFaultProof)
			if err := _AccountabilityTest.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityTestSlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the AccountabilityTest contract.
		type AccountabilityTestSlashingEventIterator struct {
			Event *AccountabilityTestSlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestSlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestSlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestSlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestSlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestSlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestSlashingEvent represents a SlashingEvent event raised by the AccountabilityTest contract.
		type AccountabilityTestSlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_AccountabilityTest *AccountabilityTest) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilityTestSlashingEventIterator, error) {







			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestSlashingEventIterator{contract: _AccountabilityTest.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_AccountabilityTest *AccountabilityTest) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilityTestSlashingEvent) (event.Subscription, error) {







			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestSlashingEvent)
						if err := _AccountabilityTest.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_AccountabilityTest *AccountabilityTest) ParseSlashingEvent(log types.Log) (*AccountabilityTestSlashingEvent, error) {
			event := new(AccountabilityTestSlashingEvent)
			if err := _AccountabilityTest.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AutonityMetaData contains all meta data concerning the Autonity contract.
var AutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator[]\",\"name\":\"_validators\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBeAppliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atnTotalRedistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriodToBeApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getEpochByHeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxScheduleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxScheduleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"}],\"name\":\"updateValidatorAndTransferSlashedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"e98712b2": "atnTotalRedistributed()",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"9358928b": "circulatingSupply()",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"354c40a7": "createSchedule(address,uint256,uint256,uint256)",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"573963b8": "epochPeriodToBeApplied()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"d861b0e8": "finalizeInitialization()",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"affb1cf1": "getEpochByHeight(uint256)",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"fed76a56": "getMaxScheduleDuration()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"8d347287": "getUnbondingShare(uint256)",
		"1904bb2e": "getValidator(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"e294df7c": "isUnbondingReleased(uint256)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"8bb2e477": "setMaxScheduleDuration(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"35be16e0": "updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600e556000600f553480156200001b57600080fd5b506040516200b44c3803806200b44c8339810160408190526200003e9162000fe4565b6022546000036200006757603580546001600160a01b031916331790556200006782826200006f565b5050620014ab565b80518051601055602080820151601155604080830151601255606080840151601355608080850151601481905560a095860151601580546001600160a01b03199081166001600160a01b039384161790915586890151805160168054841691851691909117905580880151601780548416918516919091179055808701516018805484169185169190911790558086015160198054841691851691909117905580850151601a8054841691851691909117905597880151601b8054831691841691909117905560c090970151601c80548916918316919091179055848801518051601d805490991692169190911790965585850151601e81905586850151601f5586840151909555940151602155840151602255602691909155603491909155516200019b9062000c18565b604051809103906000f080158015620001b8573d6000803e3d6000fd5b50603680546001600160a01b0319166001600160a01b039290921691909117905560005b8251811015620004ba576000838281518110620001fd57620001fd62001221565b602002602001015160a001519050600084838151811062000222576200022262001221565b60200260200101516101a001818152505060008483815181106200024a576200024a62001221565b602002602001015161018001906001600160a01b031690816001600160a01b031681525050600084838151811062000286576200028662001221565b602002602001015160a00181815250506000848381518110620002ad57620002ad62001221565b60209081029190910101516101c001526012548451859084908110620002d757620002d762001221565b602002602001015160800181815250506000848381518110620002fe57620002fe62001221565b6020026020010151610260019060038111156200031f576200031f62001237565b9081600381111562000335576200033562001237565b81525050600084838151811062000350576200035062001221565b60200260200101516101600181815250506200038e8483815181106200037a576200037a62001221565b6020026020010151620004bf60201b60201c565b620003bb848381518110620003a757620003a762001221565b6020026020010151620005fa60201b60201c565b8060306000868581518110620003d557620003d562001221565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600082825462000412919062001263565b9250508190555080603260008282546200042d919062001263565b92505081905550806033600082825462000448919062001263565b92505081905550620004a284838151811062000468576200046862001221565b602002602001015160200151828685815181106200048a576200048a62001221565b602002602001015160000151620008a760201b60201c565b50508080620004b1906200127f565b915050620001dc565b505050565b6000620004d6826060015162000aaa60201b60201c565b6001600160a01b039091166020840152905080156200052a5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064015b60405180910390fd5b6020808301516001600160a01b039081166000908152603190925260409091206001015416156200059e5760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162000521565b61271082608001511115620005f65760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162000521565b5050565b6101808101516001600160a01b0316620006f9576036546001600160a01b0316620006735760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162000521565b602354600090620006849062000af8565b905081602001518260000151836080015183603660009054906101000a90046001600160a01b0316604051620006ba9062000c26565b620006ca9594939291906200129b565b604051809103906000f080158015620006e7573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602380546001808201835560009283527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f423090910180546001600160a01b03199081166001600160a01b0395861617909155845184168352603190955260409182902086518154871690851617815593519084018054861691841691909117905584015160028301805490941691161790915560608201518291906003820190620007ab908262001385565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820155610240820151601282019062000875908262001385565b5061026082015160138201805460ff191660018360038111156200089d576200089d62001237565b0217905550505050565b6000808311620009065760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162000521565b6001600160a01b038216600090815260306020526040902054831115620009705760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162000521565b6001600160a01b038216600090815260306020526040812080548592906200099a90849062001451565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000a29836200127f565b90915550506001600160a01b03858116600081815260316020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462000aa0919062001451565b9695505050505050565b60008062000ab762000c34565b60008060ff9050604083875160208901845afa62000ad457600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000b205750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000b50578062000b37816200127f565b915062000b489050600a836200147d565b915062000b24565b6000816001600160401b0381111562000b6d5762000b6d62000c52565b6040519080825280601f01601f19166020018201604052801562000b98576020820181803683370190505b5090505b841562000c105762000bb060018362001451565b915062000bbf600a8662001494565b62000bcc90603062001263565b60f81b81838151811062000be45762000be462001221565b60200101906001600160f81b031916908160001a90535062000c08600a866200147d565b945062000b9c565b949350505050565b6116d480620097ad83390190565b6105cb806200ae8183390190565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000c8d5762000c8d62000c52565b60405290565b60405160c081016001600160401b038111828210171562000c8d5762000c8d62000c52565b60405161028081016001600160401b038111828210171562000c8d5762000c8d62000c52565b604051601f8201601f191681016001600160401b038111828210171562000d095762000d0962000c52565b604052919050565b6001600160a01b038116811462000d2757600080fd5b50565b805162000d378162000d11565b919050565b60005b8381101562000d5957818101518382015260200162000d3f565b50506000910152565b600082601f83011262000d7457600080fd5b81516001600160401b0381111562000d905762000d9062000c52565b62000da5601f8201601f191660200162000cde565b81815284602083860101111562000dbb57600080fd5b62000c1082602083016020870162000d3c565b80516004811062000d3757600080fd5b600060e0828403121562000df157600080fd5b60405160e081016001600160401b038111828210171562000e165762000e1662000c52565b8060405250809150825162000e2b8162000d11565b8152602083015162000e3d8162000d11565b6020820152604083015162000e528162000d11565b6040820152606083015162000e678162000d11565b606082015262000e7a6080840162000d2a565b608082015262000e8d60a0840162000d2a565b60a082015262000ea060c0840162000d2a565b60c08201525092915050565b600060a0828403121562000ebf57600080fd5b60405160a081016001600160401b038111828210171562000ee45762000ee462000c52565b8060405250809150825162000ef98162000d11565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201525092915050565b600081830361026081121562000f4157600080fd5b62000f4b62000c68565b915060c081121562000f5c57600080fd5b5062000f6762000c93565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015162000fa38162000d11565b60a0820152815262000fb98360c0840162000dde565b602082015262000fce836101a0840162000eac565b6040820152610240820151606082015292915050565b60008061028080848603121562000ffa57600080fd5b83516001600160401b03808211156200101257600080fd5b818601915086601f8301126200102757600080fd5b81516020828211156200103e576200103e62000c52565b8160051b6200104f82820162000cde565b928352848101820192828101908b8511156200106a57600080fd5b83870192505b84831015620011ff578251868111156200108957600080fd5b8701808d03601f19018913156200109f57600080fd5b620010a962000cb8565b620010b686830162000d2a565b8152620010c66040830162000d2a565b86820152620010d86060830162000d2a565b6040820152608082015188811115620010f057600080fd5b620011008f888386010162000d62565b60608301525060a0820151608082015260c082015160a082015260e082015160c082015261010082015160e08201526101208201516101008201526101408201516101208201526101608201516101408201526101808201516101608201526200116e6101a0830162000d2a565b6101808201526101c08201516101a08201526101e08201516101c08201526102008201516101e082015261022082015161020082015261024082015161022082015261026082015188811115620011c457600080fd5b620011d48f888386010162000d62565b61024083015250620011e88a830162000dce565b610260820152835250918301919083019062001070565b8099505050506200121389828a0162000f2c565b955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156200127957620012796200124d565b92915050565b6000600182016200129457620012946200124d565b5060010190565b600060018060a01b038088168352808716602084015285604084015260a0606084015284518060a0850152620012d98160c086016020890162000d3c565b9316608083015250601f91909101601f19160160c001949350505050565b600181811c908216806200130c57607f821691505b6020821081036200132d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ba57600081815260208120601f850160051c810160208610156200135c5750805b601f850160051c820191505b818110156200137d5782815560010162001368565b505050505050565b81516001600160401b03811115620013a157620013a162000c52565b620013b981620013b28454620012f7565b8462001333565b602080601f831160018114620013f15760008415620013d85750858301515b600019600386901b1c1916600185901b1785556200137d565b600085815260208120601f198616915b82811015620014225788860151825594840194600190910190840162001401565b5085821015620014415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156200127957620012796200124d565b634e487b7160e01b600052601260045260246000fd5b6000826200148f576200148f62001467565b500490565b600082620014a657620014a662001467565b500690565b6182f280620014bb6000396000f3fe608060405260043610620004a75760003560e01c80638d3472871162000263578063b66b3e791162000147578063d886f8a211620000bf578063e98712b21162000081578063e98712b2146200112d578063f03b959d1462001145578063f1d592a7146200116a578063f7866ee3146200118f578063fed76a5614620011af57005b8063d886f8a2146200104a578063dd62ed3e146200106f578063dfb1a4d214620010b9578063e294df7c14620010d1578063e7f43c68146200110d57005b8063cf9c57191162000109578063cf9c57191462000fae578063cfd19fb91462000fc6578063d372c07e1462000feb578063d5f394881462001010578063d861b0e8146200103257005b8063b66b3e791462000efd578063b7ab4db51462000f25578063c9d97af41462000f4c578063cb696f541462000f64578063ceaad4551462000f8957005b8063a8b2216e11620001db578063ae1f5fa0116200019d578063ae1f5fa01462000e41578063affb1cf11462000e69578063b2ea9adb1462000e8e578063b3ecbadd1462000eb3578063b46e55201462000ed857005b8063a8b2216e1462000d8c578063a9059cbb1462000db3578063a9fd1a8f1462000dd8578063ab8f6ffe1462000e02578063ae1da0b51462000e2957005b80639ac3107411620002255780639ac310741462000ced5780639c98e4711462000d055780639dc29fac1462000d1d578063a515366a1462000d42578063a5d059ca1462000d6757005b80638d3472871462000c3c5780639358928b1462000c6157806395d89b411462000c7857806396b477cb1462000ca657806396f18a321462000ccb57005b8063496ccd9b116200038b578063784304b51162000303578063852c484911620002c5578063852c48491462000b9d578063872cf0591462000bc257806389c614b81462000bda5780638bac7dad1462000bf25780638bb2e4771462000c1757005b8063784304b5146200094e57806379502c551462000973578063819b64631462000b2d578063833b1fce1462000b4457806384467fdb1462000b7857005b80636fd2c80b116200034d5780636fd2c80b146200084757806370a08231146200085e5780637264c4da1462000898578063731b3a03146200090057806377e741c7146200092957005b8063496ccd9b14620007955780634bb278f314620007ba578063520fdbbc14620007e5578063573963b8146200080a5780636b5f444c146200082257005b80631904bb2e116200041f578063313ce56711620003e1578063313ce56714620006f1578063354c40a7146200070f57806335be16e0146200073457806340c10f19146200075957806343645969146200077e57005b80631904bb2e146200064057806323b872dd146200067457806325ce1bb9146200069957806329070c6d14620006c25780632f2c3f2e14620006d957005b80631122063311620004695780631122063314620005b0578063114eaf5514620005c75780631250a28d14620005ec5780631604e416146200061157806318160ddd146200062957005b806306fdde0314620004b1578063088566e914620004f5578063095ea7b3146200053e5780630ae65e7a14620005745780630d8e6e2c146200059957005b36620004af57005b005b348015620004be57600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b604051620004ec919062006c2f565b60405180910390f35b3480156200050257600080fd5b506200052f6200051436600462006c5a565b6001600160a01b031660009081526001602052604090205490565b604051908152602001620004ec565b3480156200054b57600080fd5b50620005636200055d36600462006c7a565b620011c6565b6040519015158152602001620004ec565b3480156200058157600080fd5b50620004af6200059336600462006c5a565b620011df565b348015620005a657600080fd5b506022546200052f565b348015620005bd57600080fd5b506011546200052f565b348015620005d457600080fd5b50620004af620005e636600462006ca9565b62001286565b348015620005f957600080fd5b50620004af6200060b36600462006c5a565b620012b8565b3480156200061e57600080fd5b506200052f602d5481565b3480156200063657600080fd5b506032546200052f565b3480156200064d57600080fd5b50620006656200065f36600462006c5a565b62001307565b604051620004ec919062006cfc565b3480156200068157600080fd5b50620005636200069336600462006e75565b620015b5565b348015620006a657600080fd5b506024546000908152602a60205260409020600301546200052f565b348015620006cf57600080fd5b506010546200052f565b348015620006e657600080fd5b506200052f61271081565b348015620006fe57600080fd5b5060405160128152602001620004ec565b3480156200071c57600080fd5b50620004af6200072e36600462006ebb565b620016bc565b3480156200074157600080fd5b50620004af6200075336600462006ef9565b62001794565b3480156200076657600080fd5b50620004af6200077836600462006c7a565b6200196a565b3480156200078b57600080fd5b50601f546200052f565b348015620007a257600080fd5b50620004af620007b436600462006c5a565b620019a7565b348015620007c757600080fd5b50620007d262001ab1565b604051620004ec95949392919062006fba565b348015620007f257600080fd5b50620004af6200080436600462006c5a565b62002216565b3480156200081757600080fd5b506200052f60265481565b3480156200082f57600080fd5b50620004af6200084136600462006ca9565b62002411565b3480156200085457600080fd5b506013546200052f565b3480156200086b57600080fd5b506200052f6200087d36600462006c5a565b6001600160a01b031660009081526030602052604090205490565b348015620008a557600080fd5b50620008bd620008b736600462006c7a565b62002497565b604051620004ec9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b3480156200090d57600080fd5b506024546000908152602a60205260409020600201546200052f565b3480156200093657600080fd5b50620004af6200094836600462006ca9565b6200259d565b3480156200095b57600080fd5b50620004af6200096d3660046200709e565b620025cf565b3480156200098057600080fd5b506040805160c080820183526010548252601154602080840191909152601254838501526013546060808501919091526014546080808601919091526015546001600160a01b0390811660a080880191909152875160e081018952601654831681526017548316818701526018548316818a0152601954831681860152601a54831681850152601b54831681830152601c5483169681019690965287519081018852601d549091168152601e5481850152601f54968101969096529154908501526021549084015260225462000a54939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0988901516001600160a01b039081168a8601528851811660c080870191909152848a0151821660e0870152898701518216610100870152838a01518216610120870152828a015182166101408701529989015181166101608601529890970151881661018084015285519097166101a08301528401516101c0820152908301516101e08201529382015161020085015291015161022083015261024082015261026001620004ec565b34801562000b3a57600080fd5b506020546200052f565b34801562000b5157600080fd5b506017546001600160a01b03165b6040516001600160a01b039091168152602001620004ec565b34801562000b8557600080fd5b50620004af62000b97366004620070f4565b6200277a565b34801562000baa57600080fd5b50620004af62000bbc36600462006c7a565b620028a9565b34801562000bcf57600080fd5b50620004af62002a3a565b34801562000be757600080fd5b506200052f60285481565b34801562000bff57600080fd5b50620004af62000c1136600462006ca9565b62002a76565b34801562000c2457600080fd5b50620004af62000c3636600462006ca9565b62002afa565b34801562000c4957600080fd5b506200052f62000c5b36600462006ca9565b62002b2c565b34801562000c6e57600080fd5b506033546200052f565b34801562000c8557600080fd5b50604080518082019091526003815262272a2760e91b6020820152620004dd565b34801562000cb357600080fd5b506200052f62000cc536600462006ca9565b62002ba5565b34801562000cd857600080fd5b5060365462000b5f906001600160a01b031681565b34801562000cfa57600080fd5b506200052f60345481565b34801562000d1257600080fd5b506200052f60295481565b34801562000d2a57600080fd5b50620004af62000d3c36600462006c7a565b62002c3d565b34801562000d4f57600080fd5b506200052f62000d6136600462006c7a565b62002d75565b34801562000d7457600080fd5b506200052f62000d8636600462006c7a565b62002e5c565b34801562000d9957600080fd5b5062000da462002eff565b604051620004ec91906200719d565b34801562000dc057600080fd5b506200056362000dd236600462006c7a565b62002fe2565b34801562000de557600080fd5b5062000df06200303a565b604051620004ec949392919062007203565b34801562000e0f57600080fd5b5062000e1a620031b7565b604051620004ec919062007234565b34801562000e3657600080fd5b506200052f60275481565b34801562000e4e57600080fd5b5062000e59620032c9565b604051620004ec9291906200728f565b34801562000e7657600080fd5b5062000df062000e8836600462006ca9565b62003595565b34801562000e9b57600080fd5b50620004af62000ead366004620072c1565b6200379c565b34801562000ec057600080fd5b50620004af62000ed236600462006c5a565b620037e3565b34801562000ee557600080fd5b50620004af62000ef736600462006c5a565b62003832565b34801562000f0a57600080fd5b5062000f1562003a83565b604051620004ec92919062007322565b34801562000f3257600080fd5b5062000f3d62003bba565b604051620004ec91906200734b565b34801562000f5957600080fd5b506200052f60245481565b34801562000f7157600080fd5b50620004af62000f8336600462006ca9565b62003c1e565b34801562000f9657600080fd5b50620004af62000fa836600462006c5a565b62003c86565b34801562000fbb57600080fd5b50620004af62003cd5565b34801562000fd357600080fd5b50620004af62000fe536600462006c5a565b62003d2a565b34801562000ff857600080fd5b50620004af6200100a36600462006c5a565b62003d79565b3480156200101d57600080fd5b5060355462000b5f906001600160a01b031681565b3480156200103f57600080fd5b50620004af62003dc8565b3480156200105757600080fd5b50620004af6200106936600462006c5a565b62003f7f565b3480156200107c57600080fd5b506200052f6200108e36600462007360565b6001600160a01b039182166000908152602f6020908152604080832093909416825291909152205490565b348015620010c657600080fd5b506200052f62003fce565b348015620010de57600080fd5b5062000563620010f036600462006ca9565b600090815260096020526040902060050154610100900460ff1690565b3480156200111a57600080fd5b50601d546001600160a01b031662000b5f565b3480156200113a57600080fd5b506200052f602c5481565b3480156200115257600080fd5b50620004af6200116436600462006c5a565b62003feb565b3480156200117757600080fd5b50620004af6200118936600462006c5a565b6200403a565b3480156200119c57600080fd5b506015546001600160a01b031662000b5f565b348015620011bc57600080fd5b506021546200052f565b6000620011d5338484620040f3565b5060015b92915050565b620011e96200421c565b6001600160a01b0380821660008181526031602052604090206001015490911614620012325760405162461bcd60e51b815260040162001229906200739e565b60405180910390fd5b6001600160a01b038181166000908152603160205260409020541633146200126e5760405162461bcd60e51b81526004016200122990620073d5565b62001279816200426b565b6200128360008055565b50565b601d546001600160a01b03163314620012b35760405162461bcd60e51b8152600401620012299062007421565b601355565b601d546001600160a01b03163314620012e55760405162461bcd60e51b8152600401620012299062007421565b601680546001600160a01b0319166001600160a01b0392909216919091179055565b6200131162006a08565b6001600160a01b0380831660008181526031602052604090206001015490911614620013515760405162461bcd60e51b8152600401620012299062007458565b6001600160a01b038083166000908152603160209081526040918290208251610280810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620013b4906200748f565b80601f0160208091040260200160405190810160405280929190818152602001828054620013e2906200748f565b8015620014335780601f10620014075761010080835404028352916020019162001433565b820191906000526020600020905b8154815290600101906020018083116200141557829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a082015260118201546101c08201526012820180546101e090920191620014ef906200748f565b80601f01602080910402602001604051908101604052809291908181526020018280546200151d906200748f565b80156200156e5780601f1062001542576101008083540402835291602001916200156e565b820191906000526020600020905b8154815290600101906020018083116200155057829003601f168201915b5050509183525050601382015460209091019060ff16600381111562001598576200159862006cc3565b6003811115620015ac57620015ac62006cc3565b90525092915050565b6001600160a01b0383166000908152602f60209081526040808320338452909152812054828110156200163c5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840162001229565b620016498585856200435b565b6200166185336200165b8685620074e1565b620040f3565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051620016a791815260200190565b60405180910390a360019150505b9392505050565b601d546001600160a01b03163314620016e95760405162461bcd60e51b8152600401620012299062007421565b6021548111156200175a5760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b606482015260840162001229565b62001766848462004421565b82603360008282546200177a9190620074e1565b909155506200178e905084848484620044c2565b50505050565b6016546001600160a01b03163314620017fc5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f742074686520736c617368696e6720636f6e74726044820152621858dd60ea1b606482015260840162001229565b600061012082013560318262001819604086016020870162006c5a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060090154620018499190620074e1565b60c08301356031600062001864604087016020880162006c5a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060060154620018949190620074e1565b60a084013560316000620018af604088016020890162006c5a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060050154620018df9190620074e1565b620018eb9190620074f7565b620018f79190620074f7565b6015546001600160a01b031660009081526030602052604081208054929350839290919062001928908490620074f7565b909155508290506031600062001945604084016020850162006c5a565b6001600160a01b0316815260208101919091526040016000206200178e8282620076f9565b601d546001600160a01b03163314620019975760405162461bcd60e51b8152600401620012299062007421565b620019a3828262004421565b5050565b601d546001600160a01b03163314620019d45760405162461bcd60e51b8152600401620012299062007421565b601780546001600160a01b0319166001600160a01b03838116918217909255601854604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b15801562001a3357600080fd5b505af115801562001a48573d6000803e3d6000fd5b5050601a54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b15801562001a9557600080fd5b505af115801562001aaa573d6000803e3d6000fd5b5050505050565b6035546000908190606090829081906001600160a01b0316331462001aea5760405162461bcd60e51b815260040162001229906200784f565b62001af46200421c565b436027819055602480546000838152602560209081526040808320849055928252602a90528190206003015460165491516306c9789b60e41b815293101560048401819052926001600160a01b0390911691636c9789b09101600060405180830381600087803b15801562001b6857600080fd5b505af115801562001b7d573d6000803e3d6000fd5b50505050801562001fce57601c546033546034546028546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562001bf0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c16919062007892565b905080603454101562001c2857506034545b62001c34308262004421565b806034600082825462001c489190620074e1565b9091555062001c59905042620046f4565b6033600082825462001c6c9190620074f7565b90915550503060009081526030602052604090205462001c8e904790620048b4565b62001c9862004dfb565b62001ca262004eea565b60008062001caf620032c9565b60175460405163422811f960e11b81529294509092506001600160a01b03169063845023f29062001ce59085906004016200734b565b600060405180830381600087803b15801562001d0057600080fd5b505af115801562001d15573d6000803e3d6000fd5b505060165460405163e08b14ed60e01b81526001600160a01b03909116925063e08b14ed915062001d4b9084906004016200734b565b600060405180830381600087803b15801562001d6657600080fd5b505af115801562001d7b573d6000803e3d6000fd5b50506024546000908152602a6020526040902060020154602654601e54919350148015915062001dac575060265415155b1562001e1a57602654601e819055601654604051631ad7d11360e21b815260048101929092526001600160a01b031690636b5f444c90602401600060405180830381600087803b15801562001e0057600080fd5b505af115801562001e15573d6000803e3d6000fd5b505050505b601e5460009062001e2c9043620074f7565b90504260288190555060016024600082825462001e4a9190620074f7565b909155505060245460408051602b805460a060208202840181019094526080830181815262001f8c9594849391929060009085015b8282101562001f6d576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162001ed5906200748f565b80601f016020809104026020016040519081016040528092919081815260200182805462001f03906200748f565b801562001f545780601f1062001f285761010080835404028352916020019162001f54565b820191906000526020600020905b81548152906001019060200180831162001f3657829003601f168201915b5050505050815250508152602001906001019062001e7f565b5050505081526020018581526020014381526020018481525062005005565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e33560245460405162001fc091815260200190565b60405180910390a150505050505b60175460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af11580156200201a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020409190620078ac565b90508015620020bc576018546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af1925050508015620020b4575060408051601f3d908101601f19168201909252620020b191810190620078ac565b60015b15620020bc57505b6005546024546000908152602a602090815260408083206001810154600390910154602b805484518187028101870190955280855260ff90971696899691959394929386929084015b82821015620021f3576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916200215b906200748f565b80601f016020809104026020016040519081016040528092919081815260200182805462002189906200748f565b8015620021da5780601f10620021ae57610100808354040283529160200191620021da565b820191906000526020600020905b815481529060010190602001808311620021bc57829003601f168201915b5050505050815250508152602001906001019062002105565b5050505092509650965096509650965050506200220f60008055565b9091929394565b601d546001600160a01b03163314620022435760405162461bcd60e51b8152600401620012299062007421565b601d80546001600160a01b0319166001600160a01b0383811691821790925560175460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b158015620022a257600080fd5b505af1158015620022b7573d6000803e3d6000fd5b505060185460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200230357600080fd5b505af115801562002318573d6000803e3d6000fd5b505060195460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200236457600080fd5b505af115801562002379573d6000803e3d6000fd5b5050601a5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b158015620023c557600080fd5b505af1158015620023da573d6000803e3d6000fd5b5050601b5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb915060240162001a7a565b601d546001600160a01b031633146200243e5760405162461bcd60e51b8152600401620012299062007421565b60268190556024546000908152602a6020908152604091829020600301548251848152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7910160405180910390a15050565b620024ca6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038316600090815260016020526040902080548310620025345760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f74206578697374000000000000000000604482015260640162001229565b808381548110620025495762002549620078d0565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505091505092915050565b601d546001600160a01b03163314620025ca5760405162461bcd60e51b8152600401620012299062007421565b601055565b6001600160a01b038083166000818152603160205260409020600181015490921614620026105760405162461bcd60e51b8152600401620012299062007458565b80546001600160a01b031633146200263c5760405162461bcd60e51b81526004016200122990620078e6565b6200264783620050d5565b15620026a15760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b606482015260840162001229565b600080620026af8462005146565b925090508115620026f15760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001229565b60018301546001600160a01b03828116911614620027625760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b606482015260840162001229565b6003830162002772858262007935565b505050505050565b6000604051806102800160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160106000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020014381526020016000815260200160008152602001600081526020018481526020016000600381111562002849576200284962006cc3565b905290506200285981836200518b565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200289a92339289918b91620079fe565b60405180910390a15050505050565b6001600160a01b0380831660008181526031602052604090206001015490911614620028e95760405162461bcd60e51b815260040162001229906200739e565b6001600160a01b03828116600090815260316020526040902054163314620029255760405162461bcd60e51b81526004016200122990620073d5565b612710811115620029795760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e207261746500604482015260640162001229565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600f80546000908152600d909352958220855181546001600160a01b031916951694909417845591516001808501919091559151600290930192909255835492939092909190620029f2908490620074f7565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b601d546001600160a01b0316331462002a675760405162461bcd60e51b8152600401620012299062007421565b6005805460ff19166001179055565b601d546001600160a01b0316331462002aa35760405162461bcd60e51b8152600401620012299062007421565b6000811162002af55760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e2774206265203000000000000000604482015260640162001229565b602055565b601d546001600160a01b0316331462002b275760405162461bcd60e51b8152600401620012299062007421565b602155565b60008181526009602052604081206005015460ff1662002b8f5760405162461bcd60e51b815260206004820152601960248201527f756e626f6e64696e67206e6f74206170706c6965642079657400000000000000604482015260640162001229565b5060009081526009602052604090206003015490565b6000602754600162002bb89190620074f7565b82111562002c185760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74206765742065706f636820696420666f7220612066757475726560448201526520626c6f636b60d01b606482015260840162001229565b602754821162002c35575060009081526025602052604090205490565b505060245490565b601d546001600160a01b0316331462002c6a5760405162461bcd60e51b8152600401620012299062007421565b6001600160a01b03821660009081526030602052604090205481111562002ccd5760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b604482015260640162001229565b6001600160a01b0382166000908152603060205260408120805483929062002cf7908490620074e1565b92505081905550806032600082825462002d129190620074e1565b92505081905550806033600082825462002d2d9190620074e1565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062002d816200421c565b6001600160a01b038084166000818152603160205260409020600101549091161462002dc15760405162461bcd60e51b8152600401620012299062007458565b6001600160a01b03831660009081526031602052604081206013015460ff16600381111562002df45762002df462006cc3565b1462002e435760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f206265206163746976650000000000604482015260640162001229565b62002e50838333620055e5565b9050620011d960008055565b600062002e686200421c565b6001600160a01b038084166000818152603160205260409020600101549091161462002ea85760405162461bcd60e51b8152600401620012299062007458565b6000821162002ef25760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b604482015260640162001229565b62002e50838333620057e8565b6060602e805480602002602001604051908101604052809291908181526020016000905b8282101562002fd957838290600052602060002001805462002f45906200748f565b80601f016020809104026020016040519081016040528092919081815260200182805462002f73906200748f565b801562002fc45780601f1062002f985761010080835404028352916020019162002fc4565b820191906000526020600020905b81548152906001019060200180831162002fa657829003601f168201915b50505050508152602001906001019062002f23565b50505050905090565b600062002ff13384846200435b565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6024546000908152602a602090815260408083208151815460a094810282018501909352608081018381526060959485948594859493909284928491879085015b8282101562003169576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620030d1906200748f565b80601f0160208091040260200160405190810160405280929190818152602001828054620030ff906200748f565b8015620031505780601f10620031245761010080835404028352916020019162003150565b820191906000526020600020905b8154815290600101906020018083116200313257829003601f168201915b505050505081525050815260200190600101906200307b565b50505090825250600182015460208083019190915260028301546040808401919091526003909301546060928301528351908401519284015193909101519098919750919550909350915050565b6060602b805480602002602001604051908101604052809291908181526020016000905b8282101562002fd9576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003231906200748f565b80601f01602080910402602001604051908101604052809291908181526020018280546200325f906200748f565b8015620032b05780601f106200328457610100808354040283529160200191620032b0565b820191906000526020600020905b8154815290600101906020018083116200329257829003601f168201915b50505050508152505081526020019060010190620031db565b60355460609081906001600160a01b03163314620032fb5760405162461bcd60e51b815260040162001229906200784f565b6023546200334c5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f72730000000000000000604482015260640162001229565b6200335662006ad8565b60208054608083015260238252603190820152602b604082015260296060820152620033828162005b51565b62003390602e600062006af6565b602b5480620033d75760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b604482015260640162001229565b60008167ffffffffffffffff811115620033f557620033f562006ff3565b6040519080825280602002602001820160405280156200341f578160200160208202803683370190505b50905060008267ffffffffffffffff81111562003440576200344062006ff3565b6040519080825280602002602001820160405280156200346a578160200160208202803683370190505b50905060005b838110156200358957600060316000602b8481548110620034955762003495620078d0565b60009182526020808320600392830201546001600160a01b0316845283019390935260409091018120602e8054600181018255925292507f37fa166cbdbfbb1561ccd9ea985ec0218b5e68502e230525f544285b2bdf3d7e0190620034fd9083018262007a47565b50600281015484516001600160a01b0390911690859084908110620035265762003526620078d0565b6001600160a01b039283166020918202929092010152600182015484519116908490849081106200355b576200355b620078d0565b6001600160a01b03909216602092830291909101909101525080620035808162007b25565b91505062003470565b50909450925050509091565b606060008060006027546001620035ad9190620074f7565b8511156200360a5760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b606482015260840162001229565b60245460275486116200362857506000858152602560205260409020545b6000818152602a602090815260408083208151815460a09481028201850190935260808101838152909391928492849190879085015b828210156200374c576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620036b4906200748f565b80601f0160208091040260200160405190810160405280929190818152602001828054620036e2906200748f565b8015620037335780601f10620037075761010080835404028352916020019162003733565b820191906000526020600020905b8154815290600101906020018083116200371557829003601f168201915b505050505081525050815260200190600101906200365e565b5050509082525060018201546020808301919091526002830154604080840191909152600390930154606092830152835190840151928401519390910151909a9199509197509095509350505050565b601d546001600160a01b03163314620037c95760405162461bcd60e51b8152600401620012299062007421565b620037d660038362005b71565b620019a360048262005b71565b601d546001600160a01b03163314620038105760405162461bcd60e51b8152600401620012299062007421565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6200383c6200421c565b6001600160a01b03808216600081815260316020526040902060010154909116146200387c5760405162461bcd60e51b815260040162001229906200739e565b6001600160a01b03808216600090815260316020526040902080549091163314620038bb5760405162461bcd60e51b81526004016200122990620078e6565b6000601382015460ff166003811115620038d957620038d962006cc3565b03620039285760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c7265616479206163746976650000000000000000604482015260640162001229565b6002601382015460ff16600381111562003946576200394662006cc3565b148015620039575750438160100154115b15620039a65760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c000000000000000000604482015260640162001229565b6003601382015460ff166003811115620039c457620039c462006cc3565b0362003a135760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c7900000000604482015260640162001229565b60138101805460ff1916905580546024546000908152602a60209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200128360008055565b6060806003600481805462003a98906200748f565b80601f016020809104026020016040519081016040528092919081815260200182805462003ac6906200748f565b801562003b175780601f1062003aeb5761010080835404028352916020019162003b17565b820191906000526020600020905b81548152906001019060200180831162003af957829003601f168201915b5050505050915080805462003b2c906200748f565b80601f016020809104026020016040519081016040528092919081815260200182805462003b5a906200748f565b801562003bab5780601f1062003b7f5761010080835404028352916020019162003bab565b820191906000526020600020905b81548152906001019060200180831162003b8d57829003601f168201915b50505050509050915091509091565b6060602380548060200260200160405190810160405280929190818152602001828054801562003c1457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003bf5575b5050505050905090565b601d546001600160a01b0316331462003c4b5760405162461bcd60e51b8152600401620012299062007421565b60118190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b601d546001600160a01b0316331462003cb35760405162461bcd60e51b8152600401620012299062007421565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b601d546001600160a01b0316331462003d025760405162461bcd60e51b8152600401620012299062007421565b62003d106003600062006b16565b62003d1e6004600062006b16565b6005805460ff19169055565b601d546001600160a01b0316331462003d575760405162461bcd60e51b8152600401620012299062007421565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601d546001600160a01b0316331462003da65760405162461bcd60e51b8152600401620012299062007421565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6035546001600160a01b0316331462003df55760405162461bcd60e51b815260040162001229906200784f565b62003dff6200421c565b62003e0962004dfb565b62003e13620032c9565b50504260285543602781905560009081526025602090815260408083208390556024548151602b805460a0958102830186019094526080820184815262003f7396939592948594919390919085015b8282101562003f50576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003eb8906200748f565b80601f016020809104026020016040519081016040528092919081815260200182805462003ee6906200748f565b801562003f375780601f1062003f0b5761010080835404028352916020019162003f37565b820191906000526020600020905b81548152906001019060200180831162003f1957829003601f168201915b5050505050815250508152602001906001019062003e62565b5050509082525060006020820152436040820152601e5460609091015262005005565b62003f7d60008055565b565b601d546001600160a01b0316331462003fac5760405162461bcd60e51b8152600401620012299062007421565b601580546001600160a01b0319166001600160a01b0392909216919091179055565b602654601e546000911462003fe4575060265490565b50601e5490565b601d546001600160a01b03163314620040185760405162461bcd60e51b8152600401620012299062007421565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b601d546001600160a01b03163314620040675760405162461bcd60e51b8152600401620012299062007421565b6001600160a01b038116620040d15760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b606482015260840162001229565b603680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316620041575760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162001229565b6001600160a01b038216620041ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162001229565b6001600160a01b038381166000818152602f602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60005415620042645760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b604482015260640162001229565b6001600055565b6001600160a01b038116600090815260316020526040812090601382015460ff166003811115620042a057620042a062006cc3565b14620042ef5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d757374206265206163746976650000000000000000604482015260640162001229565b60138101805460ff1916600117905580546024546000908152602a60209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b038316600090815260306020526040902054811115620043be5760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b604482015260640162001229565b6001600160a01b03831660009081526030602052604081208054839290620043e8908490620074e1565b90915550506001600160a01b0382166000908152603060205260408120805483929062004417908490620074f7565b9091555050505050565b6001600160a01b038216600090815260306020526040812080548392906200444b908490620074f7565b925050819055508060326000828254620044669190620074f7565b925050819055508060336000828254620044819190620074f7565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162002d69565b6001600160a01b0384166200451a5760405162461bcd60e51b815260206004820152601c60248201527f7661756c7420616464726573732063616e6e6f74206265207a65726f00000000604482015260640162001229565b600081116200456c5760405162461bcd60e51b815260206004820181905260248201527f7363686564756c65206475726174696f6e2063616e6e6f74206265207a65726f604482015260640162001229565b42821015620045cc5760405162461bcd60e51b815260206004820152602560248201527f7363686564756c652063616e6e6f74207374617274206265666f72652063726560448201526430ba34b7b760d91b606482015260840162001229565b600083116200461e5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f73697469766500000000000000604482015260640162001229565b6001600160a01b038416600090815260016020526040812080549091036200468c57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0387161790555b6040805160a0810182529485526000602080870182815292870195865260608701948552608087018281528454600181810187559584529190922096516005909102909601958655905191850191909155915160028401555160038301555160049091015550565b600254600090815b81811015620048ad5760006001600060028481548110620047215762004721620078d0565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909250905b81811015620048945760008382815481106200476c576200476c620078d0565b906000526020600020906005020190508060040154881015620047e35760405162461bcd60e51b815260206004820152602860248201527f7363686564756c6520616c726561647920756e6c6f636b656420666f7220676960448201526776656e2074696d6560c01b606482015260840162001229565b80600201548811620047f657506200487f565b60048101889055600381015460028201546000919062004817908b620074e1565b10620048265750805462004859565b6003820154825460028401546200483e908c620074e1565b6200484a919062007b41565b62004856919062007b71565b90505b60018201546200486a9082620074e1565b620048769089620074f7565b60019092015595505b806200488b8162007b25565b9150506200474c565b5050508080620048a49062007b25565b915050620046fc565b5050919050565b81158015620048c1575080155b15620048cb575050565b601054600090670de0b6b3a764000090620048e890859062007b41565b620048f4919062007b71565b9050801562004972576015546040516000916001600160a01b03169083908381818185875af1925050503d80600081146200494c576040519150601f19603f3d011682016040523d82523d6000602084013e62004951565b606091505b509091505080151560010362004970576200496d8285620074e1565b93505b505b82602c6000828254620049869190620074f7565b90915550600090505b602b548110156200178e57600060316000602b8481548110620049b657620049b6620078d0565b600091825260208083206003909202909101546001600160a01b031683528201929092526040018120602954602b805492945090918891908690811062004a015762004a01620078d0565b90600052602060002090600302016001015462004a1f919062007b41565b62004a2b919062007b71565b9050600060295486602b868154811062004a495762004a49620078d0565b90600052602060002090600302016001015462004a67919062007b41565b62004a73919062007b71565b9050600082118062004a855750600081115b1562004de2576002601384015460ff16600381111562004aa95762004aa962006cc3565b148062004ad157506003601384015460ff16600381111562004acf5762004acf62006cc3565b145b1562004b9b5760165462004af19030906001600160a01b0316836200435b565b601654602b80546001600160a01b039092169163a8031a1d9185918890811062004b1f5762004b1f620078d0565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b15801562004b7857600080fd5b505af115801562004b8d573d6000803e3d6000fd5b505050505050505062004de6565b6000836005015483856008015462004bb4919062007b41565b62004bc0919062007b71565b9050801562004c8257835460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d806000811462004c20576040519150601f19603f3d011682016040523d82523d6000602084013e62004c25565b606091505b50909250905081151560000362004c7f5785546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162004c76916001600160a01b0390911690849062007b88565b60405180910390a15b50505b6000846005015483866008015462004c9b919062007b41565b62004ca7919062007b71565b9050801562004cc957845462004cc99030906001600160a01b0316836200435b565b600062004cd78285620074e1565b9050600062004ce78487620074e1565b9050600081118062004cf95750600082115b1562004d9357600c87015462004d1b9030906001600160a01b0316846200435b565b600c87015460405163a0ce552d60e01b8152600481018490526001600160a01b039091169063a0ce552d908390602401604080518083038185885af115801562004d69573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062004d90919062007bb9565b50505b600187015460408051888152602081018890526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a2505050505b5050505b8062004df28162007b25565b9150506200498f565b6007545b60085481101562004e285762004e228162004e1a8162007b25565b925062005cc4565b62004dff565b50600854600755600b54600a540362004e3d57565b600c545b600b5481101562004e6a5762004e648162004e5c8162007b25565b925062005ef5565b62004e41565b50600b54600c55600a54805b600b5481101562004ee457601354600082815260096020526040902060040154439162004ea391620074f7565b1162004ec95762004eb481620061f1565b62004ec1600183620074f7565b915062004ecf565b62004ee4565b8062004edb8162007b25565b91505062004e76565b50600a55565b600f54600e54101562003f7d57600e546000908152600d602052604090206013546001820154439162004f1d91620074f7565b111562004f275750565b80546001600160a01b039081166000908152603160205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd9262004f7f92910190815260200190565b600060405180830381600087803b15801562004f9a57600080fd5b505af115801562004faf573d6000803e3d6000fd5b5050600e80546000908152600d6020526040812080546001600160a01b03191681556001808201839055600290910182905582549094509192509062004ff7908490620074f7565b9091555062004eea92505050565b6000828152602a60209081526040808320918401516001830155830151600282015560608301516003820155905b8251518110156200178e578251805183919083908110620050585762005058620078d0565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b03909216919091178155918101519282019290925560408201516002820190620050bc908262007935565b5050508080620050cc9062007b25565b91505062005033565b6000805b602b548110156200513d57602b8181548110620050fa57620050fa620078d0565b60009182526020909120600390910201546001600160a01b0390811690841603620051285750600192915050565b80620051348162007b25565b915050620050d9565b50600092915050565b6000806200515362006b55565b60008060ff9050604083875160208901845afa6200517057600080fd5b50508051602090910151600160601b90910494909350915050565b60e2815114620051d55760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640162001229565b603082610240015151146200522d5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e67746800000000604482015260640162001229565b62005238826200634e565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a0000000000006020808301919091528451925191926000926200529b920160609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040529050600082620052bb83516200647b565b83604051602001620052d09392919062007bde565b60408051601f1981840301815282825280516020918201206002808552606085018452909450600093929091830190803683370190505090506000808080620053288982620053226041600262007b41565b6200659c565b90506000620053478a6200533f6041600262007b41565b60606200659c565b905060205b82518110156200541857620053628382620066b5565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa158015620053be573d6000803e3d6000fd5b5050604051601f190151905087620053d860418462007b71565b81518110620053eb57620053eb620078d0565b6001600160a01b039092166020928302919091019091015262005410604182620074f7565b90506200534c565b508a602001516001600160a01b0316866000815181106200543d576200543d620078d0565b60200260200101516001600160a01b031614620054af5760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b606482015260840162001229565b8a604001516001600160a01b031686600181518110620054d357620054d3620078d0565b60200260200101516001600160a01b031614620055475760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b606482015260840162001229565b60016200555f8c6102400151838e60000151620066ec565b14620055cd5760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b606482015260840162001229565b620055d88b6200675b565b5050505050505050505050565b6000808311620056445760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162001229565b6001600160a01b038216600090815260306020526040902054831115620056ae5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162001229565b6001600160a01b03821660009081526030602052604081208054859290620056d8908490620074e1565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b031991821617825594516001820180549190971695169490941790945551600283015591516003909101558254919290620057678362007b25565b90915550506001600160a01b03858116600081815260316020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a36001600854620057de9190620074e1565b9695505050505050565b6001600160a01b038084166000908152603160205260408120805491929091848216911614806200596057600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa15801562005861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005887919062007892565b905085811015620058ef5760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b606482015260840162001229565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b1580156200594057600080fd5b505af115801562005955573d6000803e3d6000fd5b5050505050620059f3565b8482600b01548360080154620059779190620074e1565b1015620059d75760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b606482015260840162001229565b8482600b016000828254620059ed9190620074f7565b90915550505b6040805161010080820183526001600160a01b03878116835289811660208085019182528486018b8152600060608701818152436080890190815260a0890183815260c08a018481528c151560e08c01908152600b8054875260099098529b85209a518b546001600160a01b0319908116918b16919091178c55975160018c01805490991699169890981790965592516002890155516003880155905160048701559151600590950180549351965161ffff1990941695151561ff001916959095179515159093029490941762ff0000191662010000911515919091021790915580549162005ae28362007b25565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc838860405162005b389291909115158252602082015260400190565b60405180910390a36001600b54620057de9190620074e1565b60fa60a06000808285855af462005b6c573d6000803e3d6000fd5b505050565b81546002600180831615610100020382160482518082016020811060208410016002811462005c20576001811462005c46578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b8082101562005c09578151845560018401935060208201915062005bea565b815191036101000a90819004029091555062005cbb565b60028302826020036101000a846020036101000a60208901510402018501875562005cbb565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101562005ca9578151845560018401935060208201915062005c8a565b815191036101000a9081900402909155505b50505050505050565b600081815260066020908152604080832060018101546001600160a01b03168452603190925282209091601382015460ff16600381111562005d0a5762005d0a62006cc3565b1462005d9e57600282015482546001600160a01b03166000908152603060205260408120805490919062005d40908490620074f7565b909155505081546001830154600284015460138401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342926200420f92909160ff9091169062007c27565b805482546001600160a01b0390811691161462005ebb576000808260080154836005015462005dce9190620074e1565b90508060000362005de6578360020154915062005e0c565b80846002015484600d015462005dfd919062007b41565b62005e09919062007b71565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b15801562005e5e57600080fd5b505af115801562005e73573d6000803e3d6000fd5b505050508183600d01600082825462005e8d9190620074f7565b9091555050600284015460058401805460009062005ead908490620074f7565b9091555062005b6c92505050565b816002015481600801600082825462005ed59190620074f7565b9091555050600282015460058201805460009062004417908490620074f7565b600081815260096020908152604080832060018101546001600160a01b031684526031909252822060058201549192909162010000900460ff16620060ea576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b15801562005f8b57600080fd5b505af115801562005fa0573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801562005ff657600080fd5b505af11580156200600b573d6000803e3d6000fd5b50505050600083600801548460050154620060279190620074e1565b600d8501549091506200603b828462007b41565b62006047919062007b71565b92508184600d0160008282546200605f9190620074e1565b909155505060068401546000036200607e5760038501839055620060a6565b6006840154600785015462006094908562007b41565b620060a0919062007b71565b60038601555b82846006016000828254620060bc9190620074f7565b90915550506003850154600785018054600090620060dc908490620074f7565b90915550620061bf92505050565b506002820154600882015481111562006104575060088101545b81600901546000036200611e576003830181905562006146565b6009820154600a83015462006134908362007b41565b62006140919062007b71565b60038401555b808260090160008282546200615c9190620074f7565b90915550506003830154600a830180546000906200617c908490620074f7565b9250508190555080826008016000828254620061999190620074e1565b90915550506002830154600b83018054600090620061b9908490620074e1565b90915550505b6005808401805460ff1916600117905582018054829190600090620061e6908490620074e1565b909155505050505050565b600081815260096020526040812060058101805461ff001916610100179055600381015490910362006221575050565b60018101546001600160a01b03166000908152603160205260408120600583015490919062010000900460ff16620062be578160070154826006015484600301546200626e919062007b41565b6200627a919062007b71565b905080826006016000828254620062929190620074e1565b90915550506003830154600783018054600090620062b2908490620074e1565b90915550620063239050565b81600a015482600901548460030154620062d9919062007b41565b620062e5919062007b71565b905080826009016000828254620062fd9190620074e1565b90915550506003830154600a830180546000906200631d908490620074e1565b90915550505b82546001600160a01b031660009081526030602052604081208054839290620061e6908490620074f7565b60006200635f826060015162005146565b6001600160a01b03909116602084015290508015620063af5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001229565b6020808301516001600160a01b03908116600090815260319092526040909120600101541615620064235760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162001229565b61271082608001511115620019a35760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162001229565b606081600003620064a35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620064d35780620064ba8162007b25565b9150620064cb9050600a8362007b71565b9150620064a7565b60008167ffffffffffffffff811115620064f157620064f162006ff3565b6040519080825280601f01601f1916602001820160405280156200651c576020820181803683370190505b5090505b8415620065945762006534600183620074e1565b915062006543600a8662007c3d565b62006550906030620074f7565b60f81b818381518110620065685762006568620078d0565b60200101906001600160f81b031916908160001a9053506200658c600a8662007b71565b945062006520565b949350505050565b606081620065ac81601f620074f7565b1015620065ed5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640162001229565b620065f98284620074f7565b845110156200663f5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640162001229565b606082158015620066605760405191506000825260208201604052620066ac565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200669b57805183526020928301920162006681565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b811015620066e557620066e2601b8262007c54565b90505b9250925092565b6000620066f862006b73565b6000858585604051602001620067119392919062007c70565b6040516020818303038152906040529050600060fb90506000825160206200673a9190620074f7565b90506020848285855afa6200674e57600080fd5b5050905195945050505050565b6101808101516001600160a01b03166200685a576036546001600160a01b0316620067d45760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162001229565b602354600090620067e5906200647b565b905081602001518260000151836080015183603660009054906101000a90046001600160a01b03166040516200681b9062006b91565b6200682b95949392919062007cbf565b604051809103906000f08015801562006848573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602380546001808201835560009283527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f423090910180546001600160a01b03199081166001600160a01b03958616179091558451841683526031909552604091829020865181548716908516178155935190840180548616918416919091179055840151600283018054909416911617909155606082015182919060038201906200690c908262007935565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f820155610200820151601082015561022082015160118201556102408201516012820190620069d6908262007935565b5061026082015160138201805460ff19166001836003811115620069fe57620069fe62006cc3565b0217905550505050565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000600381111562006ad35762006ad362006cc3565b905290565b6040518060a001604052806005906020820280368337509192915050565b508054600082559060005260206000209081019062001283919062006b9f565b50805462006b24906200748f565b6000825580601f1062006b35575050565b601f01602090049060005260206000209081019062001283919062006bc4565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105cb8062007cf283390190565b8082111562006bc057600062006bb6828262006b16565b5060010162006b9f565b5090565b5b8082111562006bc0576000815560010162006bc5565b60005b8381101562006bf857818101518382015260200162006bde565b50506000910152565b6000815180845262006c1b81602086016020860162006bdb565b601f01601f19169290920160200192915050565b602081526000620016b5602083018462006c01565b6001600160a01b03811681146200128357600080fd5b60006020828403121562006c6d57600080fd5b8135620016b58162006c44565b6000806040838503121562006c8e57600080fd5b823562006c9b8162006c44565b946020939093013593505050565b60006020828403121562006cbc57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811062006cf857634e487b7160e01b600052602160045260246000fd5b9052565b6020815262006d176020820183516001600160a01b03169052565b6000602083015162006d3460408401826001600160a01b03169052565b5060408301516001600160a01b038116606084015250606083015161028080608085015262006d686102a085018362006c01565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a062006df0818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f19016102608088019190915290915062006e54848362006c01565b93508087015191505062006e6b8286018262006cd9565b5090949350505050565b60008060006060848603121562006e8b57600080fd5b833562006e988162006c44565b9250602084013562006eaa8162006c44565b929592945050506040919091013590565b6000806000806080858703121562006ed257600080fd5b843562006edf8162006c44565b966020860135965060408601359560600135945092505050565b60006020828403121562006f0c57600080fd5b813567ffffffffffffffff81111562006f2457600080fd5b82016102808185031215620016b557600080fd5b600081518084526020808501808196508360051b8101915082860160005b8581101562006fad578284038952815180516001600160a01b03168552858101518686015260409081015160609186018290529062006f988187018362006c01565b9a87019a955050509084019060010162006f56565b5091979650505050505050565b8515158152841515602082015260a06040820152600062006fdf60a083018662006f38565b606083019490945250608001529392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200701b57600080fd5b813567ffffffffffffffff8082111562007039576200703962006ff3565b604051601f8301601f19908116603f0116810190828211818310171562007064576200706462006ff3565b816040528381528660208588010111156200707e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215620070b257600080fd5b8235620070bf8162006c44565b9150602083013567ffffffffffffffff811115620070dc57600080fd5b620070ea8582860162007009565b9150509250929050565b600080600080608085870312156200710b57600080fd5b843567ffffffffffffffff808211156200712457600080fd5b620071328883890162007009565b955060208701359150620071468262006c44565b909350604086013590808211156200715d57600080fd5b6200716b8883890162007009565b935060608701359150808211156200718257600080fd5b50620071918782880162007009565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015620071f657603f19888603018452620071e385835162006c01565b94509285019290850190600101620071c4565b5092979650505050505050565b60808152600062007218608083018762006f38565b6020830195909552506040810192909252606090910152919050565b602081526000620016b5602083018462006f38565b600081518084526020808501945080840160005b83811015620072845781516001600160a01b0316875295820195908201906001016200725d565b509495945050505050565b604081526000620072a4604083018562007249565b8281036020840152620072b8818562007249565b95945050505050565b60008060408385031215620072d557600080fd5b823567ffffffffffffffff80821115620072ee57600080fd5b620072fc8683870162007009565b935060208501359150808211156200731357600080fd5b50620070ea8582860162007009565b60408152600062007337604083018562006c01565b8281036020840152620072b8818562006c01565b602081526000620016b5602083018462007249565b600080604083850312156200737457600080fd5b8235620073818162006c44565b91506020830135620073938162006c44565b809150509250929050565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b600181811c90821680620074a457607f821691505b602082108103620074c557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115620011d957620011d9620074cb565b80820180821115620011d957620011d9620074cb565b60008135620011d98162006c44565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808335601e198436030181126200755457600080fd5b83018035915067ffffffffffffffff8211156200757057600080fd5b6020019150368190038213156200758657600080fd5b9250929050565b601f82111562005b6c57600081815260208120601f850160051c81016020861015620075b65750805b601f850160051c820191505b818110156200277257828155600101620075c2565b600019600383901b1c191660019190911b1790565b67ffffffffffffffff83111562007607576200760762006ff3565b6200761f836200761883546200748f565b836200758d565b6000601f8411600181146200765257600085156200763d5750838201355b620076498682620075d7565b84555062001aaa565b600083815260209020601f19861690835b8281101562007685578685013582556020948501946001909201910162007663565b5086821015620076a35760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000813560048110620011d957600080fd5b60048210620076e657634e487b7160e01b600052602160045260246000fd5b60ff1981541660ff831681178255505050565b6200770f62007708836200750d565b826200751c565b6200772b62007721602084016200750d565b600183016200751c565b620077476200773d604084016200750d565b600283016200751c565b6200775660608301836200753c565b62007766818360038601620075ec565b50506080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610160820135600b820155620077d9620077cf61018084016200750d565b600c83016200751c565b6101a0820135600d8201556101c0820135600e8201556101e0820135600f82015561020082013560108201556102208201356011820155620078206102408301836200753c565b62007830818360128601620075ec565b5050620019a3620078456102608401620076b5565b60138301620076c7565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b600060208284031215620078a557600080fd5b5051919050565b600060208284031215620078bf57600080fd5b81518015158114620016b557600080fd5b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b815167ffffffffffffffff81111562007952576200795262006ff3565b6200796a816200796384546200748f565b846200758d565b602080601f8311600181146200799e5760008415620079895750858301515b620079958582620075d7565b86555062002772565b600085815260208120601f198616915b82811015620079cf57888601518255948401946001909101908401620079ae565b5085821015620079ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018060a01b0380881683528087166020840152808616604084015260a0606084015262007a3260a084018662006c01565b91508084166080840152509695505050505050565b81810362007a53575050565b62007a5f82546200748f565b67ffffffffffffffff81111562007a7a5762007a7a62006ff3565b62007a8b816200796384546200748f565b6000601f82116001811462007abe576000831562007aa95750848201545b62007ab58482620075d7565b85555062001aaa565b600085815260209020601f19841690600086815260209020845b8381101562007afa578286015482556001958601959091019060200162007ad8565b5085831015620079ee5793015460001960f8600387901b161c19169092555050600190811b01905550565b60006001820162007b3a5762007b3a620074cb565b5060010190565b8082028115828204841417620011d957620011d9620074cb565b634e487b7160e01b600052601260045260246000fd5b60008262007b835762007b8362007b5b565b500490565b60018060a01b0383168152606060208201526000606082015260806040820152600062006594608083018462006c01565b6000806040838503121562007bcd57600080fd5b505080516020909101519092909150565b6000845162007bf281846020890162006bdb565b84519083019062007c0881836020890162006bdb565b845191019062007c1d81836020880162006bdb565b0195945050505050565b82815260408101620016b5602083018462006cd9565b60008262007c4f5762007c4f62007b5b565b500690565b60ff8181168382160190811115620011d957620011d9620074cb565b6000845162007c8481846020890162006bdb565b84519083019062007c9a81836020890162006bdb565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a0606084015262007a3260a084018662006c0156fe608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220ed3dd022bc50b6d41fc96c42630ae6240b5c3fe2e3df8709c69d5a0926a5d93e64736f6c63430008150033a264697066735822122025f568774f1c9c2aad24832736cafc0da0070956bc68a570e5b52840ef4be40e64736f6c63430008150033608060405234801561001057600080fd5b50601080546001600160a01b031916331790556116a2806100326000396000f3fe6080604052600436106101855760003560e01c80633e4eb36c116100d1578063949813b81161008a578063a0ce552d11610064578063a0ce552d146104d5578063a9059cbb146104e8578063bd96102f14610508578063dd62ed3e1461051d5761018c565b8063949813b81461046b57806395d89b41146104a05780639dc29fac146104b55761018c565b80633e4eb36c1461038a57806340c10f191461039f57806359355736146103bf57806370a08231146103f55780637eee288d1461042b57806384955c881461044b5761018c565b80631eeffad01161013e5780632f2c3f2e116101185780632f2c3f2e14610325578063313ce5671461033b578063372500ab146103575780633b19e84a1461036c5761018c565b80631eeffad0146102d057806323b872dd146102e5578063282d3fdf146103055761018c565b806306fdde03146101ea578063095ea7b3146102155780631195e07e1461024557806318160ddd14610277578063187cf4d71461029657806319fac8fd146102ae5761018c565b3661018c57005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b3480156101f657600080fd5b506101ff610563565b60405161020c91906113fc565b60405180910390f35b34801561022157600080fd5b50610235610230366004611466565b6105f5565b604051901515815260200161020c565b34801561025157600080fd5b50600c546001600160a01b03165b6040516001600160a01b03909116815260200161020c565b34801561028357600080fd5b506003545b60405190815260200161020c565b3480156102a257600080fd5b50610288633b9aca0081565b3480156102ba57600080fd5b506102ce6102c9366004611490565b61060c565b005b3480156102dc57600080fd5b50600f54610288565b3480156102f157600080fd5b506102356103003660046114a9565b61063b565b34801561031157600080fd5b506102ce610320366004611466565b610730565b34801561033157600080fd5b5061028861271081565b34801561034757600080fd5b506040516012815260200161020c565b34801561036357600080fd5b506102ce610814565b34801561037857600080fd5b50600d546001600160a01b031661025f565b34801561039657600080fd5b50600e54610288565b3480156103ab57600080fd5b506102ce6103ba366004611466565b610995565b3480156103cb57600080fd5b506102886103da3660046114e5565b6001600160a01b031660009081526001602052604090205490565b34801561040157600080fd5b506102886104103660046114e5565b6001600160a01b031660009081526020819052604090205490565b34801561043757600080fd5b506102ce610446366004611466565b6109fd565b34801561045757600080fd5b506102886104663660046114e5565b610ac3565b34801561047757600080fd5b5061048b6104863660046114e5565b610af0565b6040805192835260208301919091520161020c565b3480156104ac57600080fd5b506101ff610ba8565b3480156104c157600080fd5b506102ce6104d0366004611466565b610bb7565b61048b6104e3366004611490565b610c17565b3480156104f457600080fd5b50610235610503366004611466565b610f0b565b34801561051457600080fd5b506102ce610f58565b34801561052957600080fd5b50610288610538366004611500565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6060600a805461057290611533565b80601f016020809104026020016040519081016040528092919081815260200182805461059e90611533565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b5050505050905090565b600061060233848461105f565b5060015b92915050565b6010546001600160a01b031633146106365760405162461bcd60e51b81526004016101e19061156d565b600e55565b6001600160a01b0383166000908152600260209081526040808320338452909152812054828110156106c05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101e1565b6106d485336106cf86856115cb565b61105f565b6106de8584611183565b6106e88484611277565b836001600160a01b0316856001600160a01b031660008051602061164d8339815191528560405161071b91815260200190565b60405180910390a360019150505b9392505050565b6010546001600160a01b0316331461075a5760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b03821660009081526001602090815260408083205491839052909120548291610789916115cb565b10156107e35760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115de565b90915550505050565b600080610820336112c3565b33600090815260046020908152604080832083905560079091528120819055919350915081156109035760105460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf91906115f1565b9050806109035760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101e1565b60405133908490600081818185875af1925050503d8060008114610943576040519150601f19603f3d011682016040523d82523d6000602084013e610948565b606091505b505080915050806109905760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b505050565b6010546001600160a01b031633146109bf5760405162461bcd60e51b81526004016101e19061156d565b6109c98282611277565b6040518181526001600160a01b0383169060009060008051602061164d833981519152906020015b60405180910390a35050565b6010546001600160a01b03163314610a275760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b038216600090815260016020526040902054811115610a9b5760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115cb565b6001600160a01b0381166000908152600160209081526040808320549183905282205461060691906115cb565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205483928391610b259184916113be565b6001600160a01b038616600090815260046020526040902054909150610b4c9082906115de565b6009546001600160a01b03871660009081526008602052604081205492965091610b779185916113be565b6001600160a01b038716600090815260076020526040902054909150610b9e9082906115de565b9350505050915091565b6060600b805461057290611533565b6010546001600160a01b03163314610be15760405162461bcd60e51b81526004016101e19061156d565b610beb8282611183565b6040518181526000906001600160a01b0384169060008051602061164d833981519152906020016109f1565b60105460009081906001600160a01b03163314610c465760405162461bcd60e51b81526004016101e19061156d565b600e54349060009061271090610c5c9084611613565b610c66919061162a565b905081811115610cb85760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610cc281836115cb565b600d546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610d19576040519150601f19603f3d011682016040523d82523d6000602084013e610d1e565b606091505b5090915050801515600003610d455781600f6000828254610d3f91906115de565b90915550505b6000612710600e5488610d589190611613565b610d62919061162a565b905086811115610db45760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610dbe81886115cb565b96508015610e4157601054600d5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f91906115f1565b505b600354600090610e55633b9aca0087611613565b610e5f919061162a565b905080600654610e6f91906115de565b600655600354600090610e86633b9aca008b611613565b610e90919061162a565b905080600954610ea091906115de565b600955600354600090633b9aca0090610eb99085611613565b610ec3919061162a565b90506000633b9aca0060035484610eda9190611613565b610ee4919061162a565b9050610ef082886115de565b610efa82876115de565b995099505050505050505050915091565b6000610f173383611183565b610f218383611277565b6040518281526001600160a01b03841690339060008051602061164d8339815191529060200160405180910390a350600192915050565b600d546001600160a01b03163314610fbd5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101e1565b600d54600f546040516000926001600160a01b031691908381818185875af1925050503d806000811461100c576040519150601f19603f3d011682016040523d82523d6000602084013e611011565b606091505b50509050806110575760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b506000600f55565b6001600160a01b0383166110c15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101e1565b6001600160a01b0382166111225760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101e1565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b61118c826112c3565b50506001600160a01b038216600090815260208181526040808320546001909252909120546111bb90826115cb565b82111561120a5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101e1565b61121482826115cb565b6001600160a01b03841660009081526020819052604090205580820361125b576001600160a01b038316600090815260056020908152604080832083905560089091528120555b816003600082825461126d91906115cb565b9091555050505050565b611280826112c3565b50506001600160a01b038216600090815260208190526040812080548392906112aa9084906115de565b92505081905550806003600082825461080b91906115de565b6001600160a01b03811660009081526020818152604080832054600654600590935290832054839283916112f89184916113be565b6001600160a01b03861660009081526004602052604090205490915061131f9082906115de565b6001600160a01b03861660009081526004602090815260408083208490556006546005835281842055600954600890925282205492965090916113639185916113be565b6001600160a01b03871660009081526007602052604090205490915061138a9082906115de565b6001600160a01b03909616600090815260076020908152604080832089905560095460089092529091205550929492505050565b6000836000036113d057506000610729565b633b9aca00846113e084866115cb565b6113ea9190611613565b6113f4919061162a565b949350505050565b600060208083528351808285015260005b818110156114295785810183015185820160400152820161140d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461146157600080fd5b919050565b6000806040838503121561147957600080fd5b6114828361144a565b946020939093013593505050565b6000602082840312156114a257600080fd5b5035919050565b6000806000606084860312156114be57600080fd5b6114c78461144a565b92506114d56020850161144a565b9150604084013590509250925092565b6000602082840312156114f757600080fd5b6107298261144a565b6000806040838503121561151357600080fd5b61151c8361144a565b915061152a6020840161144a565b90509250929050565b600181811c9082168061154757607f821691505b60208210810361156757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610606576106066115b5565b80820180821115610606576106066115b5565b60006020828403121561160357600080fd5b8151801515811461072957600080fd5b8082028115828204841417610606576106066115b5565b60008261164757634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122093ea81eaf95be7906475b3963e1d54891d17d7531aa5c3f291e630aa0095341a64736f6c63430008150033608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220ed3dd022bc50b6d41fc96c42630ae6240b5c3fe2e3df8709c69d5a0926a5d93e64736f6c63430008150033",
}

// AutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityMetaData.ABI instead.
var AutonityABI = AutonityMetaData.ABI

// Deprecated: Use AutonityMetaData.Sigs instead.
// AutonityFuncSigs maps the 4-byte function signature to its string representation.
var AutonityFuncSigs = AutonityMetaData.Sigs

// AutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityMetaData.Bin instead.
var AutonityBin = AutonityMetaData.Bin

// DeployAutonity deploys a new Ethereum contract, binding an instance of Autonity to it.
func (r *Runner) DeployAutonity(opts *runOptions, _validators []AutonityValidator, _config AutonityConfig) (common.Address, uint64, *Autonity, error) {
	parsed, err := AutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AutonityBin), _validators, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Autonity{contract: c}, nil
}

// Autonity is an auto generated Go binding around an Ethereum contract.
type Autonity struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_Autonity *Autonity) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *Autonity) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_Autonity *Autonity) AtnTotalRedistributed(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "atnTotalRedistributed")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *Autonity) BalanceOf(opts *runOptions, _addr common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_Autonity *Autonity) CirculatingSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "circulatingSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *Autonity) Config(opts *runOptions) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *Autonity) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *Autonity) Deployer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "deployer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *Autonity) EpochID(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochID")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochPeriodToBeApplied is a free data retrieval call binding the contract method 0x573963b8.
//
// Solidity: function epochPeriodToBeApplied() view returns(uint256)
func (_Autonity *Autonity) EpochPeriodToBeApplied(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochPeriodToBeApplied")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_Autonity *Autonity) EpochReward(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochReward")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *Autonity) EpochTotalBondedStake(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *Autonity) GetBlockPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *Autonity) GetCommittee(opts *runOptions) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *Autonity) GetCommitteeEnodes(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns((address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *Autonity) GetEpochByHeight(opts *runOptions, _height *big.Int) ([]AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochByHeight", _height)

	if err != nil {
		return *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, consumed, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *Autonity) GetEpochFromBlock(opts *runOptions, _block *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns((address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *Autonity) GetEpochInfo(opts *runOptions) ([]AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochInfo")

	if err != nil {
		return *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, consumed, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *Autonity) GetEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *Autonity) GetLastEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *Autonity) GetMaxCommitteeSize(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_Autonity *Autonity) GetMaxScheduleDuration(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMaxScheduleDuration")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *Autonity) GetMinimumBaseFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *Autonity) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_Autonity *Autonity) GetNextEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *Autonity) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *Autonity) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_Autonity *Autonity) GetSchedule(opts *runOptions, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)
	return out0, consumed, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_Autonity *Autonity) GetTotalSchedules(opts *runOptions, _vault common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *Autonity) GetTreasuryAccount(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *Autonity) GetTreasuryFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *Autonity) GetUnbondingPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_Autonity *Autonity) GetUnbondingShare(opts *runOptions, _unbondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getUnbondingShare", _unbondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *Autonity) GetValidator(opts *runOptions, _addr common.Address) (AutonityValidator, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *Autonity) GetValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *Autonity) GetVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *Autonity) InflationReserve(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "inflationReserve")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_Autonity *Autonity) IsUnbondingReleased(opts *runOptions, _unbondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *Autonity) LastEpochTime(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_Autonity *Autonity) LastFinalizedBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *Autonity) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *Autonity) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *Autonity) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *Autonity) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetLiquidLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf1d592a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *Autonity) CallSetLiquidLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "SetLiquidLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ActivateValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb46e5520.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *Autonity) CallActivateValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "activateValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *Autonity) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) CallBurn(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "burn", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x852c4849.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *Autonity) CallChangeCommissionRate(r *Runner, opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "changeCommissionRate", _validator, _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *Autonity) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ComputeCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xae1f5fa0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function computeCommittee() returns(address[], address[])
func (_Autonity *Autonity) CallComputeCommittee(r *Runner, opts *runOptions) ([]common.Address, []common.Address, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "computeCommittee")
	r.revertSnapshot(snap)

	if err != nil {
		return *new([]common.Address), *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	return out0, out1, consumed, err

}

// CreateSchedule is a free data retrieval call for a paid mutator transaction binding the contract method 0x354c40a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_Autonity *Autonity) CallCreateSchedule(r *Runner, opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_Autonity *Autonity) CallFinalize(r *Runner, opts *runOptions) (bool, bool, []AutonityCommitteeMember, *big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), *new(bool), *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, out4, consumed, err

}

// FinalizeInitialization is a free data retrieval call for a paid mutator transaction binding the contract method 0xd861b0e8.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalizeInitialization() returns()
func (_Autonity *Autonity) CallFinalizeInitialization(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "finalizeInitialization")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) CallMint(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "mint", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// PauseValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae65e7a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *Autonity) CallPauseValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "pauseValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// RegisterValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x84467fdb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *Autonity) CallRegisterValidator(r *Runner, opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *Autonity) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1250a28d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) CallSetAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAcuContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xd372c07e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *Autonity) CallSetAcuContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setAcuContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommitteeSize is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bac7dad.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *Autonity) CallSetCommitteeSize(r *Runner, opts *runOptions, _size *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setCommitteeSize", _size)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *Autonity) CallSetEpochPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setEpochPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInflationControllerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf03b959d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *Autonity) CallSetInflationControllerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setInflationControllerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMaxScheduleDuration is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bb2e477.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_Autonity *Autonity) CallSetMaxScheduleDuration(r *Runner, opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinimumBaseFee is a free data retrieval call for a paid mutator transaction binding the contract method 0xcb696f54.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *Autonity) CallSetMinimumBaseFee(r *Runner, opts *runOptions, _price *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setMinimumBaseFee", _price)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperatorAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0x520fdbbc.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *Autonity) CallSetOperatorAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setOperatorAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracleContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x496ccd9b.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *Autonity) CallSetOracleContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setOracleContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizationContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfd19fb9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *Autonity) CallSetStabilizationContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setStabilizationContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControlContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ecbadd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *Autonity) CallSetSupplyControlContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setSupplyControlContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0xd886f8a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *Autonity) CallSetTreasuryAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setTreasuryAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryFee is a free data retrieval call for a paid mutator transaction binding the contract method 0x77e741c7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *Autonity) CallSetTreasuryFee(r *Runner, opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setTreasuryFee", _treasuryFee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUnbondingPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x114eaf55.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *Autonity) CallSetUnbondingPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setUnbondingPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUpgradeManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xceaad455.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *Autonity) CallSetUpgradeManagerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setUpgradeManagerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) CallTransfer(r *Runner, opts *runOptions, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "transfer", _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateEnode is a free data retrieval call for a paid mutator transaction binding the contract method 0x784304b5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *Autonity) CallUpdateEnode(r *Runner, opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "updateEnode", _nodeAddress, _enode)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateValidatorAndTransferSlashedFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x35be16e0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_Autonity *Autonity) CallUpdateValidatorAndTransferSlashedFunds(r *Runner, opts *runOptions, _val AutonityValidator) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *Autonity) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *Autonity) SetLiquidLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "SetLiquidLogicContract", _contract)
	return consumed, err
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *Autonity) ActivateValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "activateValidator", _address)
	return consumed, err
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *Autonity) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "approve", spender, amount)
	return consumed, err
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) Burn(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "burn", _addr, _amount)
	return consumed, err
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *Autonity) ChangeCommissionRate(opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "changeCommissionRate", _validator, _rate)
	return consumed, err
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *Autonity) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[])
func (_Autonity *Autonity) ComputeCommittee(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "computeCommittee")
	return consumed, err
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_Autonity *Autonity) CreateSchedule(opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_Autonity *Autonity) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "finalize")
	return consumed, err
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_Autonity *Autonity) FinalizeInitialization(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "finalizeInitialization")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) Mint(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "mint", _addr, _amount)
	return consumed, err
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *Autonity) PauseValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "pauseValidator", _address)
	return consumed, err
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *Autonity) RegisterValidator(opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *Autonity) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "resetContractUpgrade")
	return consumed, err
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) SetAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setAccountabilityContract", _address)
	return consumed, err
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *Autonity) SetAcuContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setAcuContract", _address)
	return consumed, err
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *Autonity) SetCommitteeSize(opts *runOptions, _size *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setCommitteeSize", _size)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *Autonity) SetEpochPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setEpochPeriod", _period)
	return consumed, err
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *Autonity) SetInflationControllerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setInflationControllerContract", _address)
	return consumed, err
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_Autonity *Autonity) SetMaxScheduleDuration(opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	return consumed, err
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *Autonity) SetMinimumBaseFee(opts *runOptions, _price *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setMinimumBaseFee", _price)
	return consumed, err
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *Autonity) SetOperatorAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setOperatorAccount", _account)
	return consumed, err
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *Autonity) SetOracleContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setOracleContract", _address)
	return consumed, err
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *Autonity) SetStabilizationContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setStabilizationContract", _address)
	return consumed, err
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *Autonity) SetSupplyControlContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setSupplyControlContract", _address)
	return consumed, err
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *Autonity) SetTreasuryAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setTreasuryAccount", _account)
	return consumed, err
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *Autonity) SetTreasuryFee(opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setTreasuryFee", _treasuryFee)
	return consumed, err
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *Autonity) SetUnbondingPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setUnbondingPeriod", _period)
	return consumed, err
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *Autonity) SetUpgradeManagerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setUpgradeManagerContract", _address)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) Transfer(opts *runOptions, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "transfer", _recipient, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *Autonity) UpdateEnode(opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "updateEnode", _nodeAddress, _enode)
	return consumed, err
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_Autonity *Autonity) UpdateValidatorAndTransferSlashedFunds(opts *runOptions, _val AutonityValidator) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *Autonity) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_Autonity *Autonity) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_Autonity *Autonity) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AutonityActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the Autonity contract.
		type AutonityActivatedValidatorIterator struct {
			Event *AutonityActivatedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityActivatedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityActivatedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityActivatedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityActivatedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityActivatedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityActivatedValidator represents a ActivatedValidator event raised by the Autonity contract.
		type AutonityActivatedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_Autonity *Autonity) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityActivatedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityActivatedValidatorIterator{contract: _Autonity.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityActivatedValidator)
						if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) ParseActivatedValidator(log types.Log) (*AutonityActivatedValidator, error) {
			event := new(AutonityActivatedValidator)
			if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Autonity contract.
		type AutonityApprovalIterator struct {
			Event *AutonityApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityApproval represents a Approval event raised by the Autonity contract.
		type AutonityApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_Autonity *Autonity) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &AutonityApprovalIterator{contract: _Autonity.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_Autonity *Autonity) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityApproval)
						if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_Autonity *Autonity) ParseApproval(log types.Log) (*AutonityApproval, error) {
			event := new(AutonityApproval)
			if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the Autonity contract.
		type AutonityBondingRejectedIterator struct {
			Event *AutonityBondingRejected // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityBondingRejectedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityBondingRejected)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityBondingRejected)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityBondingRejectedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityBondingRejectedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityBondingRejected represents a BondingRejected event raised by the Autonity contract.
		type AutonityBondingRejected struct {
			Validator common.Address;
			Delegator common.Address;
			Amount *big.Int;
			State uint8;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
 		func (_Autonity *Autonity) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityBondingRejectedIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityBondingRejectedIterator{contract: _Autonity.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
 		}

		// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_Autonity *Autonity) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityBondingRejected)
						if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_Autonity *Autonity) ParseBondingRejected(log types.Log) (*AutonityBondingRejected, error) {
			event := new(AutonityBondingRejected)
			if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the Autonity contract.
		type AutonityBurnedStakeIterator struct {
			Event *AutonityBurnedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityBurnedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityBurnedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityBurnedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityBurnedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityBurnedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityBurnedStake represents a BurnedStake event raised by the Autonity contract.
		type AutonityBurnedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
 		func (_Autonity *Autonity) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityBurnedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityBurnedStakeIterator{contract: _Autonity.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
 		}

		// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityBurnedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityBurnedStake)
						if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) ParseBurnedStake(log types.Log) (*AutonityBurnedStake, error) {
			event := new(AutonityBurnedStake)
			if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the Autonity contract.
		type AutonityCallFailedIterator struct {
			Event *AutonityCallFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityCallFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityCallFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityCallFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityCallFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityCallFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityCallFailed represents a CallFailed event raised by the Autonity contract.
		type AutonityCallFailed struct {
			To common.Address;
			MethodSignature string;
			ReturnData []byte;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
 		func (_Autonity *Autonity) FilterCallFailed(opts *bind.FilterOpts) (*AutonityCallFailedIterator, error) {





			logs, sub, err := _Autonity.contract.FilterLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityCallFailedIterator{contract: _Autonity.contract, event: "CallFailed", logs: logs, sub: sub}, nil
 		}

		// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_Autonity *Autonity) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityCallFailed) (event.Subscription, error) {





			logs, sub, err := _Autonity.contract.WatchLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityCallFailed)
						if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_Autonity *Autonity) ParseCallFailed(log types.Log) (*AutonityCallFailed, error) {
			event := new(AutonityCallFailed)
			if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the Autonity contract.
		type AutonityCommissionRateChangeIterator struct {
			Event *AutonityCommissionRateChange // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityCommissionRateChangeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityCommissionRateChange)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityCommissionRateChange)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityCommissionRateChangeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityCommissionRateChangeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityCommissionRateChange represents a CommissionRateChange event raised by the Autonity contract.
		type AutonityCommissionRateChange struct {
			Validator common.Address;
			Rate *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
 		func (_Autonity *Autonity) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityCommissionRateChangeIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityCommissionRateChangeIterator{contract: _Autonity.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
 		}

		// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_Autonity *Autonity) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityCommissionRateChange, validator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityCommissionRateChange)
						if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_Autonity *Autonity) ParseCommissionRateChange(log types.Log) (*AutonityCommissionRateChange, error) {
			event := new(AutonityCommissionRateChange)
			if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the Autonity contract.
		type AutonityEpochPeriodUpdatedIterator struct {
			Event *AutonityEpochPeriodUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityEpochPeriodUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityEpochPeriodUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityEpochPeriodUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityEpochPeriodUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityEpochPeriodUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the Autonity contract.
		type AutonityEpochPeriodUpdated struct {
			Period *big.Int;
			ToBeAppliedAtBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
 		func (_Autonity *Autonity) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityEpochPeriodUpdatedIterator, error) {




			logs, sub, err := _Autonity.contract.FilterLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityEpochPeriodUpdatedIterator{contract: _Autonity.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_Autonity *Autonity) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityEpochPeriodUpdated) (event.Subscription, error) {




			logs, sub, err := _Autonity.contract.WatchLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityEpochPeriodUpdated)
						if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_Autonity *Autonity) ParseEpochPeriodUpdated(log types.Log) (*AutonityEpochPeriodUpdated, error) {
			event := new(AutonityEpochPeriodUpdated)
			if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the Autonity contract.
		type AutonityMinimumBaseFeeUpdatedIterator struct {
			Event *AutonityMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityMinimumBaseFeeUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityMinimumBaseFeeUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the Autonity contract.
		type AutonityMinimumBaseFeeUpdated struct {
			GasPrice *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
 		func (_Autonity *Autonity) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityMinimumBaseFeeUpdatedIterator, error) {



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityMinimumBaseFeeUpdatedIterator{contract: _Autonity.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_Autonity *Autonity) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityMinimumBaseFeeUpdated) (event.Subscription, error) {



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityMinimumBaseFeeUpdated)
						if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_Autonity *Autonity) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityMinimumBaseFeeUpdated, error) {
			event := new(AutonityMinimumBaseFeeUpdated)
			if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the Autonity contract.
		type AutonityMintedStakeIterator struct {
			Event *AutonityMintedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityMintedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityMintedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityMintedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityMintedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityMintedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityMintedStake represents a MintedStake event raised by the Autonity contract.
		type AutonityMintedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
 		func (_Autonity *Autonity) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityMintedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityMintedStakeIterator{contract: _Autonity.contract, event: "MintedStake", logs: logs, sub: sub}, nil
 		}

		// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityMintedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityMintedStake)
						if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) ParseMintedStake(log types.Log) (*AutonityMintedStake, error) {
			event := new(AutonityMintedStake)
			if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the Autonity contract.
		type AutonityNewBondingRequestIterator struct {
			Event *AutonityNewBondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewBondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewBondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewBondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewBondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewBondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewBondingRequest represents a NewBondingRequest event raised by the Autonity contract.
		type AutonityNewBondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_Autonity *Autonity) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewBondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityNewBondingRequestIterator{contract: _Autonity.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewBondingRequest)
						if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) ParseNewBondingRequest(log types.Log) (*AutonityNewBondingRequest, error) {
			event := new(AutonityNewBondingRequest)
			if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Autonity contract.
		type AutonityNewEpochIterator struct {
			Event *AutonityNewEpoch // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewEpochIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewEpoch)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewEpoch)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewEpochIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewEpochIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewEpoch represents a NewEpoch event raised by the Autonity contract.
		type AutonityNewEpoch struct {
			Epoch *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
 		func (_Autonity *Autonity) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityNewEpochIterator, error) {



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return &AutonityNewEpochIterator{contract: _Autonity.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
 		}

		// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_Autonity *Autonity) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityNewEpoch) (event.Subscription, error) {



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewEpoch)
						if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_Autonity *Autonity) ParseNewEpoch(log types.Log) (*AutonityNewEpoch, error) {
			event := new(AutonityNewEpoch)
			if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the Autonity contract.
		type AutonityNewUnbondingRequestIterator struct {
			Event *AutonityNewUnbondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewUnbondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewUnbondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewUnbondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewUnbondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewUnbondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewUnbondingRequest represents a NewUnbondingRequest event raised by the Autonity contract.
		type AutonityNewUnbondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_Autonity *Autonity) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewUnbondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityNewUnbondingRequestIterator{contract: _Autonity.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewUnbondingRequest)
						if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) ParseNewUnbondingRequest(log types.Log) (*AutonityNewUnbondingRequest, error) {
			event := new(AutonityNewUnbondingRequest)
			if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the Autonity contract.
		type AutonityPausedValidatorIterator struct {
			Event *AutonityPausedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityPausedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityPausedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityPausedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityPausedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityPausedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityPausedValidator represents a PausedValidator event raised by the Autonity contract.
		type AutonityPausedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_Autonity *Autonity) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityPausedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityPausedValidatorIterator{contract: _Autonity.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityPausedValidator)
						if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) ParsePausedValidator(log types.Log) (*AutonityPausedValidator, error) {
			event := new(AutonityPausedValidator)
			if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the Autonity contract.
		type AutonityRegisteredValidatorIterator struct {
			Event *AutonityRegisteredValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityRegisteredValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityRegisteredValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityRegisteredValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityRegisteredValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityRegisteredValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityRegisteredValidator represents a RegisteredValidator event raised by the Autonity contract.
		type AutonityRegisteredValidator struct {
			Treasury common.Address;
			Addr common.Address;
			OracleAddress common.Address;
			Enode string;
			LiquidStateContract common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
 		func (_Autonity *Autonity) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityRegisteredValidatorIterator, error) {







			logs, sub, err := _Autonity.contract.FilterLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return &AutonityRegisteredValidatorIterator{contract: _Autonity.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
 		}

		// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_Autonity *Autonity) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityRegisteredValidator) (event.Subscription, error) {







			logs, sub, err := _Autonity.contract.WatchLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityRegisteredValidator)
						if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_Autonity *Autonity) ParseRegisteredValidator(log types.Log) (*AutonityRegisteredValidator, error) {
			event := new(AutonityRegisteredValidator)
			if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the Autonity contract.
		type AutonityRewardedIterator struct {
			Event *AutonityRewarded // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityRewardedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityRewarded)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityRewarded)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityRewardedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityRewardedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityRewarded represents a Rewarded event raised by the Autonity contract.
		type AutonityRewarded struct {
			Addr common.Address;
			AtnAmount *big.Int;
			NtnAmount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
 		func (_Autonity *Autonity) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityRewardedIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityRewardedIterator{contract: _Autonity.contract, event: "Rewarded", logs: logs, sub: sub}, nil
 		}

		// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_Autonity *Autonity) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityRewarded, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityRewarded)
						if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_Autonity *Autonity) ParseRewarded(log types.Log) (*AutonityRewarded, error) {
			event := new(AutonityRewarded)
			if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Autonity contract.
		type AutonityTransferIterator struct {
			Event *AutonityTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityTransfer represents a Transfer event raised by the Autonity contract.
		type AutonityTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_Autonity *Autonity) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &AutonityTransferIterator{contract: _Autonity.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_Autonity *Autonity) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityTransfer)
						if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_Autonity *Autonity) ParseTransfer(log types.Log) (*AutonityTransfer, error) {
			event := new(AutonityTransfer)
			if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AutonityUpgradeTestMetaData contains all meta data concerning the AutonityUpgradeTest contract.
var AutonityUpgradeTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBeAppliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atnTotalRedistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriodToBeApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getEpochByHeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxScheduleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxScheduleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableFaultCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"}],\"name\":\"updateValidatorAndTransferSlashedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"e98712b2": "atnTotalRedistributed()",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"9358928b": "circulatingSupply()",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"354c40a7": "createSchedule(address,uint256,uint256,uint256)",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"573963b8": "epochPeriodToBeApplied()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"d861b0e8": "finalizeInitialization()",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"affb1cf1": "getEpochByHeight(uint256)",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"fed76a56": "getMaxScheduleDuration()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"8d347287": "getUnbondingShare(uint256)",
		"1904bb2e": "getValidator(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"e294df7c": "isUnbondingReleased(uint256)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"8bb2e477": "setMaxScheduleDuration(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"35be16e0": "updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600e556000600f553480156200001b57600080fd5b50604080516000808252602082019092529062000051565b6200003d62000e9a565b815260200190600190039081620000335790505b506040805161014081018252601054608080830191825260115460a08085019190915260125460c08086019190915260135460e0808701919091526014546101008701526015546001600160a01b03908116610120880152948652865190810187526016548516815260175485166020828101919091526018548616828901526019548616606080840191909152601a54871683870152601b54871683860152601c548716938301939093528087019190915286519283018752601d549094168252601e5482850152601f54828701529254818401526021549181019190915292820192909252602254918101829052906000036200016857603580546001600160a01b0319163317905562000168828262000185565b50506022546001036200017f576200017f620005d5565b620012c5565b80518051601055602080820151601155604080830151601255606080840151601355608080850151601481905560a095860151601580546001600160a01b03199081166001600160a01b039384161790915586890151805160168054841691851691909117905580880151601780548416918516919091179055808701516018805484169185169190911790558086015160198054841691851691909117905580850151601a8054841691851691909117905597880151601b8054831691841691909117905560c090970151601c80548916918316919091179055848801518051601d805490991692169190911790965585850151601e81905586850151601f558684015190955594015160215584015160225560269190915560349190915551620002b19062000f6a565b604051809103906000f080158015620002ce573d6000803e3d6000fd5b50603680546001600160a01b0319166001600160a01b039290921691909117905560005b8251811015620005d057600083828151811062000313576200031362001017565b602002602001015160a001519050600084838151811062000338576200033862001017565b60200260200101516101a0018181525050600084838151811062000360576200036062001017565b602002602001015161018001906001600160a01b031690816001600160a01b03168152505060008483815181106200039c576200039c62001017565b602002602001015160a00181815250506000848381518110620003c357620003c362001017565b60209081029190910101516101c001526012548451859084908110620003ed57620003ed62001017565b60200260200101516080018181525050600084838151811062000414576200041462001017565b6020026020010151610260019060038111156200043557620004356200102d565b908160038111156200044b576200044b6200102d565b81525050600084838151811062000466576200046662001017565b6020026020010151610160018181525050620004a484838151811062000490576200049062001017565b60200260200101516200074560201b60201c565b620004d1848381518110620004bd57620004bd62001017565b60200260200101516200087c60201b60201c565b8060306000868581518110620004eb57620004eb62001017565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600082825462000528919062001059565b92505081905550806032600082825462000543919062001059565b9250508190555080603360008282546200055e919062001059565b92505081905550620005b88483815181106200057e576200057e62001017565b60200260200101516020015182868581518110620005a057620005a062001017565b60200260200101516000015162000b2960201b60201c565b50508080620005c79062001075565b915050620002f2565b505050565b6035546001600160a01b03163314620006415760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60448201526218dbdb60ea1b60648201526084015b60405180910390fd5b60026031600060236001815481106200065e576200065e62001017565b60009182526020808320909101546001600160a01b031683528201929092526040018120600501805490919062000697908490620010a7565b925050819055506002603160006023600181548110620006bb57620006bb62001017565b60009182526020808320909101546001600160a01b0316835282019290925260400181206008018054909190620006f4908490620010a7565b90915550506002602255601d546001600160a01b031660009081526030602052604081206103e890556200072b9060039062000f78565b620007396004600062000f78565b6005805460ff19169055565b60006200075c826060015162000d2c60201b60201c565b6001600160a01b03909116602084015290508015620007ac5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162000638565b6020808301516001600160a01b03908116600090815260319092526040909120600101541615620008205760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162000638565b61271082608001511115620008785760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162000638565b5050565b6101808101516001600160a01b03166200097b576036546001600160a01b0316620008f55760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162000638565b602354600090620009069062000d7a565b905081602001518260000151836080015183603660009054906101000a90046001600160a01b03166040516200093c9062000fba565b6200094c959493929190620010be565b604051809103906000f08015801562000969573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602380546001808201835560009283527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f423090910180546001600160a01b03199081166001600160a01b039586161790915584518416835260319095526040918290208651815487169085161781559351908401805486169184169190911790558401516002830180549094169116179091556060820151829190600382019062000a2d9082620011cc565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820155610240820151601282019062000af79082620011cc565b5061026082015160138201805460ff1916600183600381111562000b1f5762000b1f6200102d565b0217905550505050565b600080831162000b885760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162000638565b6001600160a01b03821660009081526030602052604090205483111562000bf25760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162000638565b6001600160a01b0382166000908152603060205260408120805485929062000c1c90849062001298565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000cab8362001075565b90915550506001600160a01b03858116600081815260316020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462000d22919062001298565b9695505050505050565b60008062000d3962000fc8565b60008060ff9050604083875160208901845afa62000d5657600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000da25750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000dd2578062000db98162001075565b915062000dca9050600a83620010a7565b915062000da6565b6000816001600160401b0381111562000def5762000def62001001565b6040519080825280601f01601f19166020018201604052801562000e1a576020820181803683370190505b5090505b841562000e925762000e3260018362001298565b915062000e41600a86620012ae565b62000e4e90603062001059565b60f81b81838151811062000e665762000e6662001017565b60200101906001600160f81b031916908160001a90535062000e8a600a86620010a7565b945062000e1e565b949350505050565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000600381111562000f655762000f656200102d565b905290565b6116d4806200963d83390190565b50805462000f86906200113e565b6000825580601f1062000f97575050565b601f01602090049060005260206000209081019062000fb7919062000fe6565b50565b6105cb806200ad1183390190565b60405180604001604052806002906020820280368337509192915050565b5b8082111562000ffd576000815560010162000fe7565b5090565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156200106f576200106f62001043565b92915050565b6000600182016200108a576200108a62001043565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082620010b957620010b962001091565b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b828110156200110d5786810182015185820160c001528101620010ef565b5050600060c0828501015260c0601f19601f83011684010191505062000d2260808301846001600160a01b03169052565b600181811c908216806200115357607f821691505b6020821081036200117457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005d057600081815260208120601f850160051c81016020861015620011a35750805b601f850160051c820191505b81811015620011c457828155600101620011af565b505050505050565b81516001600160401b03811115620011e857620011e862001001565b6200120081620011f984546200113e565b846200117a565b602080601f8311600181146200123857600084156200121f5750858301515b600019600386901b1c1916600185901b178555620011c4565b600085815260208120601f198616915b82811015620012695788860151825594840194600190910190840162001248565b5085821015620012885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156200106f576200106f62001043565b600082620012c057620012c062001091565b500690565b61836880620012d56000396000f3fe608060405260043610620004a75760003560e01c80638d3472871162000263578063b66b3e791162000147578063d886f8a211620000bf578063e98712b21162000081578063e98712b2146200112d578063f03b959d1462001145578063f1d592a7146200116a578063f7866ee3146200118f578063fed76a5614620011af57005b8063d886f8a2146200104a578063dd62ed3e146200106f578063dfb1a4d214620010b9578063e294df7c14620010d1578063e7f43c68146200110d57005b8063cf9c57191162000109578063cf9c57191462000fae578063cfd19fb91462000fc6578063d372c07e1462000feb578063d5f394881462001010578063d861b0e8146200103257005b8063b66b3e791462000efd578063b7ab4db51462000f25578063c9d97af41462000f4c578063cb696f541462000f64578063ceaad4551462000f8957005b8063a8b2216e11620001db578063ae1f5fa0116200019d578063ae1f5fa01462000e41578063affb1cf11462000e69578063b2ea9adb1462000e8e578063b3ecbadd1462000eb3578063b46e55201462000ed857005b8063a8b2216e1462000d8c578063a9059cbb1462000db3578063a9fd1a8f1462000dd8578063ab8f6ffe1462000e02578063ae1da0b51462000e2957005b80639ac3107411620002255780639ac310741462000ced5780639c98e4711462000d055780639dc29fac1462000d1d578063a515366a1462000d42578063a5d059ca1462000d6757005b80638d3472871462000c3c5780639358928b1462000c6157806395d89b411462000c7857806396b477cb1462000ca657806396f18a321462000ccb57005b8063496ccd9b116200038b578063784304b51162000303578063852c484911620002c5578063852c48491462000b9d578063872cf0591462000bc257806389c614b81462000bda5780638bac7dad1462000bf25780638bb2e4771462000c1757005b8063784304b5146200094e57806379502c551462000973578063819b64631462000b2d578063833b1fce1462000b4457806384467fdb1462000b7857005b80636fd2c80b116200034d5780636fd2c80b146200084757806370a08231146200085e5780637264c4da1462000898578063731b3a03146200090057806377e741c7146200092957005b8063496ccd9b14620007955780634bb278f314620007ba578063520fdbbc14620007e5578063573963b8146200080a5780636b5f444c146200082257005b80631904bb2e116200041f578063313ce56711620003e1578063313ce56714620006f1578063354c40a7146200070f57806335be16e0146200073457806340c10f19146200075957806343645969146200077e57005b80631904bb2e146200064057806323b872dd146200067457806325ce1bb9146200069957806329070c6d14620006c25780632f2c3f2e14620006d957005b80631122063311620004695780631122063314620005b0578063114eaf5514620005c75780631250a28d14620005ec5780631604e416146200061157806318160ddd146200062957005b806306fdde0314620004b1578063088566e914620004f5578063095ea7b3146200053e5780630ae65e7a14620005745780630d8e6e2c146200059957005b36620004af57005b005b348015620004be57600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b604051620004ec919062006ca5565b60405180910390f35b3480156200050257600080fd5b506200052f6200051436600462006cd0565b6001600160a01b031660009081526001602052604090205490565b604051908152602001620004ec565b3480156200054b57600080fd5b50620005636200055d36600462006cf0565b620011c6565b6040519015158152602001620004ec565b3480156200058157600080fd5b50620004af6200059336600462006cd0565b620011df565b348015620005a657600080fd5b506022546200052f565b348015620005bd57600080fd5b506011546200052f565b348015620005d457600080fd5b50620004af620005e636600462006d1f565b62001286565b348015620005f957600080fd5b50620004af6200060b36600462006cd0565b620012b8565b3480156200061e57600080fd5b506200052f602d5481565b3480156200063657600080fd5b506032546200052f565b3480156200064d57600080fd5b50620006656200065f36600462006cd0565b62001307565b604051620004ec919062006d72565b3480156200068157600080fd5b50620005636200069336600462006eeb565b620015b5565b348015620006a657600080fd5b506024546000908152602a60205260409020600301546200052f565b348015620006cf57600080fd5b506010546200052f565b348015620006e657600080fd5b506200052f61271081565b348015620006fe57600080fd5b5060405160128152602001620004ec565b3480156200071c57600080fd5b50620004af6200072e36600462006f31565b620016bc565b3480156200074157600080fd5b50620004af6200075336600462006f6f565b62001794565b3480156200076657600080fd5b50620004af6200077836600462006cf0565b6200196a565b3480156200078b57600080fd5b50601f546200052f565b348015620007a257600080fd5b50620004af620007b436600462006cd0565b620019a7565b348015620007c757600080fd5b50620007d262001ab1565b604051620004ec95949392919062007030565b348015620007f257600080fd5b50620004af6200080436600462006cd0565b62002216565b3480156200081757600080fd5b506200052f60265481565b3480156200082f57600080fd5b50620004af6200084136600462006d1f565b62002411565b3480156200085457600080fd5b506013546200052f565b3480156200086b57600080fd5b506200052f6200087d36600462006cd0565b6001600160a01b031660009081526030602052604090205490565b348015620008a557600080fd5b50620008bd620008b736600462006cf0565b62002497565b604051620004ec9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b3480156200090d57600080fd5b506024546000908152602a60205260409020600201546200052f565b3480156200093657600080fd5b50620004af6200094836600462006d1f565b6200259d565b3480156200095b57600080fd5b50620004af6200096d36600462007114565b620025cf565b3480156200098057600080fd5b506040805160c080820183526010548252601154602080840191909152601254838501526013546060808501919091526014546080808601919091526015546001600160a01b0390811660a080880191909152875160e081018952601654831681526017548316818701526018548316818a0152601954831681860152601a54831681850152601b54831681830152601c5483169681019690965287519081018852601d549091168152601e5481850152601f54968101969096529154908501526021549084015260225462000a54939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0988901516001600160a01b039081168a8601528851811660c080870191909152848a0151821660e0870152898701518216610100870152838a01518216610120870152828a015182166101408701529989015181166101608601529890970151881661018084015285519097166101a08301528401516101c0820152908301516101e08201529382015161020085015291015161022083015261024082015261026001620004ec565b34801562000b3a57600080fd5b506020546200052f565b34801562000b5157600080fd5b506017546001600160a01b03165b6040516001600160a01b039091168152602001620004ec565b34801562000b8557600080fd5b50620004af62000b973660046200716a565b6200277a565b34801562000baa57600080fd5b50620004af62000bbc36600462006cf0565b620028a9565b34801562000bcf57600080fd5b50620004af62002a3a565b34801562000be757600080fd5b506200052f60285481565b34801562000bff57600080fd5b50620004af62000c1136600462006d1f565b62002a76565b34801562000c2457600080fd5b50620004af62000c3636600462006d1f565b62002afa565b34801562000c4957600080fd5b506200052f62000c5b36600462006d1f565b62002b2c565b34801562000c6e57600080fd5b506033546200052f565b34801562000c8557600080fd5b50604080518082019091526003815262272a2760e91b6020820152620004dd565b34801562000cb357600080fd5b506200052f62000cc536600462006d1f565b62002ba5565b34801562000cd857600080fd5b5060365462000b5f906001600160a01b031681565b34801562000cfa57600080fd5b506200052f60345481565b34801562000d1257600080fd5b506200052f60295481565b34801562000d2a57600080fd5b50620004af62000d3c36600462006cf0565b62002c3d565b34801562000d4f57600080fd5b506200052f62000d6136600462006cf0565b62002d75565b34801562000d7457600080fd5b506200052f62000d8636600462006cf0565b62002e5c565b34801562000d9957600080fd5b5062000da462002eff565b604051620004ec919062007213565b34801562000dc057600080fd5b506200056362000dd236600462006cf0565b62002fe2565b34801562000de557600080fd5b5062000df06200303a565b604051620004ec949392919062007279565b34801562000e0f57600080fd5b5062000e1a620031b7565b604051620004ec9190620072aa565b34801562000e3657600080fd5b506200052f60275481565b34801562000e4e57600080fd5b5062000e59620032c9565b604051620004ec92919062007305565b34801562000e7657600080fd5b5062000df062000e8836600462006d1f565b62003595565b34801562000e9b57600080fd5b50620004af62000ead36600462007337565b6200379c565b34801562000ec057600080fd5b50620004af62000ed236600462006cd0565b620037e3565b34801562000ee557600080fd5b50620004af62000ef736600462006cd0565b62003832565b34801562000f0a57600080fd5b5062000f1562003a83565b604051620004ec92919062007398565b34801562000f3257600080fd5b5062000f3d62003bba565b604051620004ec9190620073c1565b34801562000f5957600080fd5b506200052f60245481565b34801562000f7157600080fd5b50620004af62000f8336600462006d1f565b62003c1e565b34801562000f9657600080fd5b50620004af62000fa836600462006cd0565b62003c86565b34801562000fbb57600080fd5b50620004af62003cd5565b34801562000fd357600080fd5b50620004af62000fe536600462006cd0565b62003d2a565b34801562000ff857600080fd5b50620004af6200100a36600462006cd0565b62003d79565b3480156200101d57600080fd5b5060355462000b5f906001600160a01b031681565b3480156200103f57600080fd5b50620004af62003dc8565b3480156200105757600080fd5b50620004af6200106936600462006cd0565b62003f7f565b3480156200107c57600080fd5b506200052f6200108e366004620073d6565b6001600160a01b039182166000908152602f6020908152604080832093909416825291909152205490565b348015620010c657600080fd5b506200052f62003fce565b348015620010de57600080fd5b5062000563620010f036600462006d1f565b600090815260096020526040902060050154610100900460ff1690565b3480156200111a57600080fd5b50601d546001600160a01b031662000b5f565b3480156200113a57600080fd5b506200052f602c5481565b3480156200115257600080fd5b50620004af6200116436600462006cd0565b62003feb565b3480156200117757600080fd5b50620004af6200118936600462006cd0565b6200403a565b3480156200119c57600080fd5b506015546001600160a01b031662000b5f565b348015620011bc57600080fd5b506021546200052f565b6000620011d5338484620040f3565b5060015b92915050565b620011e96200421c565b6001600160a01b0380821660008181526031602052604090206001015490911614620012325760405162461bcd60e51b8152600401620012299062007414565b60405180910390fd5b6001600160a01b038181166000908152603160205260409020541633146200126e5760405162461bcd60e51b815260040162001229906200744b565b62001279816200426b565b6200128360008055565b50565b601d546001600160a01b03163314620012b35760405162461bcd60e51b8152600401620012299062007497565b601355565b601d546001600160a01b03163314620012e55760405162461bcd60e51b8152600401620012299062007497565b601680546001600160a01b0319166001600160a01b0392909216919091179055565b6200131162006a7e565b6001600160a01b0380831660008181526031602052604090206001015490911614620013515760405162461bcd60e51b81526004016200122990620074ce565b6001600160a01b038083166000908152603160209081526040918290208251610280810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620013b49062007505565b80601f0160208091040260200160405190810160405280929190818152602001828054620013e29062007505565b8015620014335780601f10620014075761010080835404028352916020019162001433565b820191906000526020600020905b8154815290600101906020018083116200141557829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a082015260118201546101c08201526012820180546101e090920191620014ef9062007505565b80601f01602080910402602001604051908101604052809291908181526020018280546200151d9062007505565b80156200156e5780601f1062001542576101008083540402835291602001916200156e565b820191906000526020600020905b8154815290600101906020018083116200155057829003601f168201915b5050509183525050601382015460209091019060ff16600381111562001598576200159862006d39565b6003811115620015ac57620015ac62006d39565b90525092915050565b6001600160a01b0383166000908152602f60209081526040808320338452909152812054828110156200163c5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840162001229565b620016498585856200435b565b6200166185336200165b868562007557565b620040f3565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051620016a791815260200190565b60405180910390a360019150505b9392505050565b601d546001600160a01b03163314620016e95760405162461bcd60e51b8152600401620012299062007497565b6021548111156200175a5760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b606482015260840162001229565b6200176684846200448d565b82603360008282546200177a919062007557565b909155506200178e9050848484846200452e565b50505050565b6016546001600160a01b03163314620017fc5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f742074686520736c617368696e6720636f6e74726044820152621858dd60ea1b606482015260840162001229565b600061012082013560318262001819604086016020870162006cd0565b6001600160a01b03166001600160a01b031681526020019081526020016000206009015462001849919062007557565b60c08301356031600062001864604087016020880162006cd0565b6001600160a01b03166001600160a01b031681526020019081526020016000206006015462001894919062007557565b60a084013560316000620018af604088016020890162006cd0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060050154620018df919062007557565b620018eb91906200756d565b620018f791906200756d565b6015546001600160a01b0316600090815260306020526040812080549293508392909190620019289084906200756d565b909155508290506031600062001945604084016020850162006cd0565b6001600160a01b0316815260208101919091526040016000206200178e82826200776f565b601d546001600160a01b03163314620019975760405162461bcd60e51b8152600401620012299062007497565b620019a382826200448d565b5050565b601d546001600160a01b03163314620019d45760405162461bcd60e51b8152600401620012299062007497565b601780546001600160a01b0319166001600160a01b03838116918217909255601854604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b15801562001a3357600080fd5b505af115801562001a48573d6000803e3d6000fd5b5050601a54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b15801562001a9557600080fd5b505af115801562001aaa573d6000803e3d6000fd5b5050505050565b6035546000908190606090829081906001600160a01b0316331462001aea5760405162461bcd60e51b81526004016200122990620078c5565b62001af46200421c565b436027819055602480546000838152602560209081526040808320849055928252602a90528190206003015460165491516306c9789b60e41b815293101560048401819052926001600160a01b0390911691636c9789b09101600060405180830381600087803b15801562001b6857600080fd5b505af115801562001b7d573d6000803e3d6000fd5b50505050801562001fce57601c546033546034546028546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562001bf0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c16919062007908565b905080603454101562001c2857506034545b62001c3430826200448d565b806034600082825462001c48919062007557565b9091555062001c5990504262004760565b6033600082825462001c6c91906200756d565b90915550503060009081526030602052604090205462001c8e90479062004920565b62001c9862004e67565b62001ca262004f56565b60008062001caf620032c9565b60175460405163422811f960e11b81529294509092506001600160a01b03169063845023f29062001ce5908590600401620073c1565b600060405180830381600087803b15801562001d0057600080fd5b505af115801562001d15573d6000803e3d6000fd5b505060165460405163e08b14ed60e01b81526001600160a01b03909116925063e08b14ed915062001d4b908490600401620073c1565b600060405180830381600087803b15801562001d6657600080fd5b505af115801562001d7b573d6000803e3d6000fd5b50506024546000908152602a6020526040902060020154602654601e54919350148015915062001dac575060265415155b1562001e1a57602654601e819055601654604051631ad7d11360e21b815260048101929092526001600160a01b031690636b5f444c90602401600060405180830381600087803b15801562001e0057600080fd5b505af115801562001e15573d6000803e3d6000fd5b505050505b601e5460009062001e2c90436200756d565b90504260288190555060016024600082825462001e4a91906200756d565b909155505060245460408051602b805460a060208202840181019094526080830181815262001f8c9594849391929060009085015b8282101562001f6d576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162001ed59062007505565b80601f016020809104026020016040519081016040528092919081815260200182805462001f039062007505565b801562001f545780601f1062001f285761010080835404028352916020019162001f54565b820191906000526020600020905b81548152906001019060200180831162001f3657829003601f168201915b5050505050815250508152602001906001019062001e7f565b5050505081526020018581526020014381526020018481525062005071565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e33560245460405162001fc091815260200190565b60405180910390a150505050505b60175460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af11580156200201a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002040919062007922565b90508015620020bc576018546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af1925050508015620020b4575060408051601f3d908101601f19168201909252620020b19181019062007922565b60015b15620020bc57505b6005546024546000908152602a602090815260408083206001810154600390910154602b805484518187028101870190955280855260ff90971696899691959394929386929084015b82821015620021f3576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916200215b9062007505565b80601f0160208091040260200160405190810160405280929190818152602001828054620021899062007505565b8015620021da5780601f10620021ae57610100808354040283529160200191620021da565b820191906000526020600020905b815481529060010190602001808311620021bc57829003601f168201915b5050505050815250508152602001906001019062002105565b5050505092509650965096509650965050506200220f60008055565b9091929394565b601d546001600160a01b03163314620022435760405162461bcd60e51b8152600401620012299062007497565b601d80546001600160a01b0319166001600160a01b0383811691821790925560175460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b158015620022a257600080fd5b505af1158015620022b7573d6000803e3d6000fd5b505060185460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200230357600080fd5b505af115801562002318573d6000803e3d6000fd5b505060195460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b1580156200236457600080fd5b505af115801562002379573d6000803e3d6000fd5b5050601a5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b158015620023c557600080fd5b505af1158015620023da573d6000803e3d6000fd5b5050601b5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb915060240162001a7a565b601d546001600160a01b031633146200243e5760405162461bcd60e51b8152600401620012299062007497565b60268190556024546000908152602a6020908152604091829020600301548251848152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7910160405180910390a15050565b620024ca6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038316600090815260016020526040902080548310620025345760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f74206578697374000000000000000000604482015260640162001229565b80838154811062002549576200254962007946565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505091505092915050565b601d546001600160a01b03163314620025ca5760405162461bcd60e51b8152600401620012299062007497565b601055565b6001600160a01b038083166000818152603160205260409020600181015490921614620026105760405162461bcd60e51b81526004016200122990620074ce565b80546001600160a01b031633146200263c5760405162461bcd60e51b815260040162001229906200795c565b620026478362005141565b15620026a15760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b606482015260840162001229565b600080620026af84620051b2565b925090508115620026f15760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001229565b60018301546001600160a01b03828116911614620027625760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b606482015260840162001229565b60038301620027728582620079ab565b505050505050565b6000604051806102800160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160106000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020014381526020016000815260200160008152602001600081526020018481526020016000600381111562002849576200284962006d39565b90529050620028598183620051f7565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200289a92339289918b9162007a74565b60405180910390a15050505050565b6001600160a01b0380831660008181526031602052604090206001015490911614620028e95760405162461bcd60e51b8152600401620012299062007414565b6001600160a01b03828116600090815260316020526040902054163314620029255760405162461bcd60e51b815260040162001229906200744b565b612710811115620029795760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e207261746500604482015260640162001229565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600f80546000908152600d909352958220855181546001600160a01b031916951694909417845591516001808501919091559151600290930192909255835492939092909190620029f29084906200756d565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b601d546001600160a01b0316331462002a675760405162461bcd60e51b8152600401620012299062007497565b6005805460ff19166001179055565b601d546001600160a01b0316331462002aa35760405162461bcd60e51b8152600401620012299062007497565b6000811162002af55760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e2774206265203000000000000000604482015260640162001229565b602055565b601d546001600160a01b0316331462002b275760405162461bcd60e51b8152600401620012299062007497565b602155565b60008181526009602052604081206005015460ff1662002b8f5760405162461bcd60e51b815260206004820152601960248201527f756e626f6e64696e67206e6f74206170706c6965642079657400000000000000604482015260640162001229565b5060009081526009602052604090206003015490565b6000602754600162002bb891906200756d565b82111562002c185760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74206765742065706f636820696420666f7220612066757475726560448201526520626c6f636b60d01b606482015260840162001229565b602754821162002c35575060009081526025602052604090205490565b505060245490565b601d546001600160a01b0316331462002c6a5760405162461bcd60e51b8152600401620012299062007497565b6001600160a01b03821660009081526030602052604090205481111562002ccd5760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b604482015260640162001229565b6001600160a01b0382166000908152603060205260408120805483929062002cf790849062007557565b92505081905550806032600082825462002d12919062007557565b92505081905550806033600082825462002d2d919062007557565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062002d816200421c565b6001600160a01b038084166000818152603160205260409020600101549091161462002dc15760405162461bcd60e51b81526004016200122990620074ce565b6001600160a01b03831660009081526031602052604081206013015460ff16600381111562002df45762002df462006d39565b1462002e435760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f206265206163746976650000000000604482015260640162001229565b62002e5083833362005651565b9050620011d960008055565b600062002e686200421c565b6001600160a01b038084166000818152603160205260409020600101549091161462002ea85760405162461bcd60e51b81526004016200122990620074ce565b6000821162002ef25760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b604482015260640162001229565b62002e5083833362005854565b6060602e805480602002602001604051908101604052809291908181526020016000905b8282101562002fd957838290600052602060002001805462002f459062007505565b80601f016020809104026020016040519081016040528092919081815260200182805462002f739062007505565b801562002fc45780601f1062002f985761010080835404028352916020019162002fc4565b820191906000526020600020905b81548152906001019060200180831162002fa657829003601f168201915b50505050508152602001906001019062002f23565b50505050905090565b600062002ff13384846200435b565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6024546000908152602a602090815260408083208151815460a094810282018501909352608081018381526060959485948594859493909284928491879085015b8282101562003169576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620030d19062007505565b80601f0160208091040260200160405190810160405280929190818152602001828054620030ff9062007505565b8015620031505780601f10620031245761010080835404028352916020019162003150565b820191906000526020600020905b8154815290600101906020018083116200313257829003601f168201915b505050505081525050815260200190600101906200307b565b50505090825250600182015460208083019190915260028301546040808401919091526003909301546060928301528351908401519284015193909101519098919750919550909350915050565b6060602b805480602002602001604051908101604052809291908181526020016000905b8282101562002fd9576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620032319062007505565b80601f01602080910402602001604051908101604052809291908181526020018280546200325f9062007505565b8015620032b05780601f106200328457610100808354040283529160200191620032b0565b820191906000526020600020905b8154815290600101906020018083116200329257829003601f168201915b50505050508152505081526020019060010190620031db565b60355460609081906001600160a01b03163314620032fb5760405162461bcd60e51b81526004016200122990620078c5565b6023546200334c5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f72730000000000000000604482015260640162001229565b6200335662006b4e565b60208054608083015260238252603190820152602b604082015260296060820152620033828162005bbd565b62003390602e600062006b6c565b602b5480620033d75760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b604482015260640162001229565b60008167ffffffffffffffff811115620033f557620033f562007069565b6040519080825280602002602001820160405280156200341f578160200160208202803683370190505b50905060008267ffffffffffffffff81111562003440576200344062007069565b6040519080825280602002602001820160405280156200346a578160200160208202803683370190505b50905060005b838110156200358957600060316000602b848154811062003495576200349562007946565b60009182526020808320600392830201546001600160a01b0316845283019390935260409091018120602e8054600181018255925292507f37fa166cbdbfbb1561ccd9ea985ec0218b5e68502e230525f544285b2bdf3d7e0190620034fd9083018262007abd565b50600281015484516001600160a01b039091169085908490811062003526576200352662007946565b6001600160a01b039283166020918202929092010152600182015484519116908490849081106200355b576200355b62007946565b6001600160a01b03909216602092830291909101909101525080620035808162007b9b565b91505062003470565b50909450925050509091565b606060008060006027546001620035ad91906200756d565b8511156200360a5760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b606482015260840162001229565b60245460275486116200362857506000858152602560205260409020545b6000818152602a602090815260408083208151815460a09481028201850190935260808101838152909391928492849190879085015b828210156200374c576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620036b49062007505565b80601f0160208091040260200160405190810160405280929190818152602001828054620036e29062007505565b8015620037335780601f10620037075761010080835404028352916020019162003733565b820191906000526020600020905b8154815290600101906020018083116200371557829003601f168201915b505050505081525050815260200190600101906200365e565b5050509082525060018201546020808301919091526002830154604080840191909152600390930154606092830152835190840151928401519390910151909a9199509197509095509350505050565b601d546001600160a01b03163314620037c95760405162461bcd60e51b8152600401620012299062007497565b620037d660038362005bdd565b620019a360048262005bdd565b601d546001600160a01b03163314620038105760405162461bcd60e51b8152600401620012299062007497565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6200383c6200421c565b6001600160a01b03808216600081815260316020526040902060010154909116146200387c5760405162461bcd60e51b8152600401620012299062007414565b6001600160a01b03808216600090815260316020526040902080549091163314620038bb5760405162461bcd60e51b815260040162001229906200795c565b6000601382015460ff166003811115620038d957620038d962006d39565b03620039285760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c7265616479206163746976650000000000000000604482015260640162001229565b6002601382015460ff16600381111562003946576200394662006d39565b148015620039575750438160100154115b15620039a65760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c000000000000000000604482015260640162001229565b6003601382015460ff166003811115620039c457620039c462006d39565b0362003a135760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c7900000000604482015260640162001229565b60138101805460ff1916905580546024546000908152602a60209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200128360008055565b6060806003600481805462003a989062007505565b80601f016020809104026020016040519081016040528092919081815260200182805462003ac69062007505565b801562003b175780601f1062003aeb5761010080835404028352916020019162003b17565b820191906000526020600020905b81548152906001019060200180831162003af957829003601f168201915b5050505050915080805462003b2c9062007505565b80601f016020809104026020016040519081016040528092919081815260200182805462003b5a9062007505565b801562003bab5780601f1062003b7f5761010080835404028352916020019162003bab565b820191906000526020600020905b81548152906001019060200180831162003b8d57829003601f168201915b50505050509050915091509091565b6060602380548060200260200160405190810160405280929190818152602001828054801562003c1457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003bf5575b5050505050905090565b601d546001600160a01b0316331462003c4b5760405162461bcd60e51b8152600401620012299062007497565b60118190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b601d546001600160a01b0316331462003cb35760405162461bcd60e51b8152600401620012299062007497565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b601d546001600160a01b0316331462003d025760405162461bcd60e51b8152600401620012299062007497565b62003d106003600062006b8c565b62003d1e6004600062006b8c565b6005805460ff19169055565b601d546001600160a01b0316331462003d575760405162461bcd60e51b8152600401620012299062007497565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601d546001600160a01b0316331462003da65760405162461bcd60e51b8152600401620012299062007497565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6035546001600160a01b0316331462003df55760405162461bcd60e51b81526004016200122990620078c5565b62003dff6200421c565b62003e0962004e67565b62003e13620032c9565b50504260285543602781905560009081526025602090815260408083208390556024548151602b805460a0958102830186019094526080820184815262003f7396939592948594919390919085015b8282101562003f50576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003eb89062007505565b80601f016020809104026020016040519081016040528092919081815260200182805462003ee69062007505565b801562003f375780601f1062003f0b5761010080835404028352916020019162003f37565b820191906000526020600020905b81548152906001019060200180831162003f1957829003601f168201915b5050505050815250508152602001906001019062003e62565b5050509082525060006020820152436040820152601e5460609091015262005071565b62003f7d60008055565b565b601d546001600160a01b0316331462003fac5760405162461bcd60e51b8152600401620012299062007497565b601580546001600160a01b0319166001600160a01b0392909216919091179055565b602654601e546000911462003fe4575060265490565b50601e5490565b601d546001600160a01b03163314620040185760405162461bcd60e51b8152600401620012299062007497565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b601d546001600160a01b03163314620040675760405162461bcd60e51b8152600401620012299062007497565b6001600160a01b038116620040d15760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b606482015260840162001229565b603680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316620041575760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162001229565b6001600160a01b038216620041ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162001229565b6001600160a01b038381166000818152602f602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60005415620042645760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b604482015260640162001229565b6001600055565b6001600160a01b038116600090815260316020526040812090601382015460ff166003811115620042a057620042a062006d39565b14620042ef5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d757374206265206163746976650000000000000000604482015260640162001229565b60138101805460ff1916600117905580546024546000908152602a60209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b038316600090815260306020526040902054811115620043be5760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b604482015260640162001229565b6001600160a01b03831660009081526030602052604081208054839290620043e890849062007557565b9250508190555080603260008282546200440391906200756d565b9091555062004416905081600262007bb7565b6001600160a01b03831660009081526030602052604081208054909190620044409084906200756d565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200420f91815260200190565b6001600160a01b03821660009081526030602052604081208054839290620044b79084906200756d565b925050819055508060326000828254620044d291906200756d565b925050819055508060336000828254620044ed91906200756d565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162002d69565b6001600160a01b038416620045865760405162461bcd60e51b815260206004820152601c60248201527f7661756c7420616464726573732063616e6e6f74206265207a65726f00000000604482015260640162001229565b60008111620045d85760405162461bcd60e51b815260206004820181905260248201527f7363686564756c65206475726174696f6e2063616e6e6f74206265207a65726f604482015260640162001229565b42821015620046385760405162461bcd60e51b815260206004820152602560248201527f7363686564756c652063616e6e6f74207374617274206265666f72652063726560448201526430ba34b7b760d91b606482015260840162001229565b600083116200468a5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f73697469766500000000000000604482015260640162001229565b6001600160a01b03841660009081526001602052604081208054909103620046f857600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0387161790555b6040805160a0810182529485526000602080870182815292870195865260608701948552608087018281528454600181810187559584529190922096516005909102909601958655905191850191909155915160028401555160038301555160049091015550565b600254600090815b818110156200491957600060016000600284815481106200478d576200478d62007946565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909250905b8181101562004900576000838281548110620047d857620047d862007946565b9060005260206000209060050201905080600401548810156200484f5760405162461bcd60e51b815260206004820152602860248201527f7363686564756c6520616c726561647920756e6c6f636b656420666f7220676960448201526776656e2074696d6560c01b606482015260840162001229565b80600201548811620048625750620048eb565b60048101889055600381015460028201546000919062004883908b62007557565b106200489257508054620048c5565b600382015482546002840154620048aa908c62007557565b620048b6919062007bb7565b620048c2919062007be7565b90505b6001820154620048d6908262007557565b620048e290896200756d565b60019092015595505b80620048f78162007b9b565b915050620047b8565b5050508080620049109062007b9b565b91505062004768565b5050919050565b811580156200492d575080155b1562004937575050565b601054600090670de0b6b3a7640000906200495490859062007bb7565b62004960919062007be7565b90508015620049de576015546040516000916001600160a01b03169083908381818185875af1925050503d8060008114620049b8576040519150601f19603f3d011682016040523d82523d6000602084013e620049bd565b606091505b5090915050801515600103620049dc57620049d9828562007557565b93505b505b82602c6000828254620049f291906200756d565b90915550600090505b602b548110156200178e57600060316000602b848154811062004a225762004a2262007946565b600091825260208083206003909202909101546001600160a01b031683528201929092526040018120602954602b805492945090918891908690811062004a6d5762004a6d62007946565b90600052602060002090600302016001015462004a8b919062007bb7565b62004a97919062007be7565b9050600060295486602b868154811062004ab55762004ab562007946565b90600052602060002090600302016001015462004ad3919062007bb7565b62004adf919062007be7565b9050600082118062004af15750600081115b1562004e4e576002601384015460ff16600381111562004b155762004b1562006d39565b148062004b3d57506003601384015460ff16600381111562004b3b5762004b3b62006d39565b145b1562004c075760165462004b5d9030906001600160a01b0316836200435b565b601654602b80546001600160a01b039092169163a8031a1d9185918890811062004b8b5762004b8b62007946565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b15801562004be457600080fd5b505af115801562004bf9573d6000803e3d6000fd5b505050505050505062004e52565b6000836005015483856008015462004c20919062007bb7565b62004c2c919062007be7565b9050801562004cee57835460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d806000811462004c8c576040519150601f19603f3d011682016040523d82523d6000602084013e62004c91565b606091505b50909250905081151560000362004ceb5785546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162004ce2916001600160a01b0390911690849062007bfe565b60405180910390a15b50505b6000846005015483866008015462004d07919062007bb7565b62004d13919062007be7565b9050801562004d3557845462004d359030906001600160a01b0316836200435b565b600062004d43828562007557565b9050600062004d53848762007557565b9050600081118062004d655750600082115b1562004dff57600c87015462004d879030906001600160a01b0316846200435b565b600c87015460405163a0ce552d60e01b8152600481018490526001600160a01b039091169063a0ce552d908390602401604080518083038185885af115801562004dd5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062004dfc919062007c2f565b50505b600187015460408051888152602081018890526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a2505050505b5050505b8062004e5e8162007b9b565b915050620049fb565b6007545b60085481101562004e945762004e8e8162004e868162007b9b565b925062005d30565b62004e6b565b50600854600755600b54600a540362004ea957565b600c545b600b5481101562004ed65762004ed08162004ec88162007b9b565b925062005f6b565b62004ead565b50600b54600c55600a54805b600b5481101562004f5057601354600082815260096020526040902060040154439162004f0f916200756d565b1162004f355762004f208162006267565b62004f2d6001836200756d565b915062004f3b565b62004f50565b8062004f478162007b9b565b91505062004ee2565b50600a55565b600f54600e54101562003f7d57600e546000908152600d602052604090206013546001820154439162004f89916200756d565b111562004f935750565b80546001600160a01b039081166000908152603160205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd9262004feb92910190815260200190565b600060405180830381600087803b1580156200500657600080fd5b505af11580156200501b573d6000803e3d6000fd5b5050600e80546000908152600d6020526040812080546001600160a01b031916815560018082018390556002909101829055825490945091925090620050639084906200756d565b9091555062004f5692505050565b6000828152602a60209081526040808320918401516001830155830151600282015560608301516003820155905b8251518110156200178e578251805183919083908110620050c457620050c462007946565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b03909216919091178155918101519282019290925560408201516002820190620051289082620079ab565b5050508080620051389062007b9b565b9150506200509f565b6000805b602b54811015620051a957602b818154811062005166576200516662007946565b60009182526020909120600390910201546001600160a01b0390811690841603620051945750600192915050565b80620051a08162007b9b565b91505062005145565b50600092915050565b600080620051bf62006bcb565b60008060ff9050604083875160208901845afa620051dc57600080fd5b50508051602090910151600160601b90910494909350915050565b60e2815114620052415760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640162001229565b60308261024001515114620052995760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e67746800000000604482015260640162001229565b620052a482620063c4565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262005307920160609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040529050600082620053278351620064f1565b836040516020016200533c9392919062007c54565b60408051601f19818403018152828252805160209182012060028085526060850184529094506000939290918301908036833701905050905060008080806200539489826200538e6041600262007bb7565b62006612565b90506000620053b38a620053ab6041600262007bb7565b606062006612565b905060205b82518110156200548457620053ce83826200672b565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa1580156200542a573d6000803e3d6000fd5b5050604051601f1901519050876200544460418462007be7565b8151811062005457576200545762007946565b6001600160a01b03909216602092830291909101909101526200547c6041826200756d565b9050620053b8565b508a602001516001600160a01b031686600081518110620054a957620054a962007946565b60200260200101516001600160a01b0316146200551b5760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b606482015260840162001229565b8a604001516001600160a01b0316866001815181106200553f576200553f62007946565b60200260200101516001600160a01b031614620055b35760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b606482015260840162001229565b6001620055cb8c6102400151838e6000015162006762565b14620056395760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b606482015260840162001229565b620056448b620067d1565b5050505050505050505050565b6000808311620056b05760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162001229565b6001600160a01b0382166000908152603060205260409020548311156200571a5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162001229565b6001600160a01b038216600090815260306020526040812080548592906200574490849062007557565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b031991821617825594516001820180549190971695169490941790945551600283015591516003909101558254919290620057d38362007b9b565b90915550506001600160a01b03858116600081815260316020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a360016008546200584a919062007557565b9695505050505050565b6001600160a01b03808416600090815260316020526040812080549192909184821691161480620059cc57600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa158015620058cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620058f3919062007908565b9050858110156200595b5760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b606482015260840162001229565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b158015620059ac57600080fd5b505af1158015620059c1573d6000803e3d6000fd5b505050505062005a5f565b8482600b01548360080154620059e3919062007557565b101562005a435760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b606482015260840162001229565b8482600b01600082825462005a5991906200756d565b90915550505b6040805161010080820183526001600160a01b03878116835289811660208085019182528486018b8152600060608701818152436080890190815260a0890183815260c08a018481528c151560e08c01908152600b8054875260099098529b85209a518b546001600160a01b0319908116918b16919091178c55975160018c01805490991699169890981790965592516002890155516003880155905160048701559151600590950180549351965161ffff1990941695151561ff001916959095179515159093029490941762ff0000191662010000911515919091021790915580549162005b4e8362007b9b565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc838860405162005ba49291909115158252602082015260400190565b60405180910390a36001600b546200584a919062007557565b60fa60a06000808285855af462005bd8573d6000803e3d6000fd5b505050565b81546002600180831615610100020382160482518082016020811060208410016002811462005c8c576001811462005cb2578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b8082101562005c75578151845560018401935060208201915062005c56565b815191036101000a90819004029091555062005d27565b60028302826020036101000a846020036101000a60208901510402018501875562005d27565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101562005d15578151845560018401935060208201915062005cf6565b815191036101000a9081900402909155505b50505050505050565b600081815260066020908152604080832060018101546001600160a01b03168452603190925282209091601382015460ff16600381111562005d765762005d7662006d39565b1462005e0a57600282015482546001600160a01b03166000908152603060205260408120805490919062005dac9084906200756d565b909155505081546001830154600284015460138401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342926200420f92909160ff9091169062007c9d565b805482546001600160a01b0390811691161462005f27576000808260080154836005015462005e3a919062007557565b90508060000362005e52578360020154915062005e78565b80846002015484600d015462005e69919062007bb7565b62005e75919062007be7565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b15801562005eca57600080fd5b505af115801562005edf573d6000803e3d6000fd5b505050508183600d01600082825462005ef991906200756d565b9091555050600284015460058401805460009062005f199084906200756d565b9091555062005bd892505050565b816002015481600801600082825462005f4191906200756d565b9091555050600282015460058201805460009062005f619084906200756d565b9091555050505050565b600081815260096020908152604080832060018101546001600160a01b031684526031909252822060058201549192909162010000900460ff1662006160576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b1580156200600157600080fd5b505af115801562006016573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b1580156200606c57600080fd5b505af115801562006081573d6000803e3d6000fd5b505050506000836008015484600501546200609d919062007557565b600d850154909150620060b1828462007bb7565b620060bd919062007be7565b92508184600d016000828254620060d5919062007557565b90915550506006840154600003620060f457600385018390556200611c565b600684015460078501546200610a908562007bb7565b62006116919062007be7565b60038601555b828460060160008282546200613291906200756d565b90915550506003850154600785018054600090620061529084906200756d565b909155506200623592505050565b50600282015460088201548111156200617a575060088101545b8160090154600003620061945760038301819055620061bc565b6009820154600a830154620061aa908362007bb7565b620061b6919062007be7565b60038401555b80826009016000828254620061d291906200756d565b90915550506003830154600a83018054600090620061f29084906200756d565b92505081905550808260080160008282546200620f919062007557565b90915550506002830154600b830180546000906200622f90849062007557565b90915550505b6005808401805460ff19166001179055820180548291906000906200625c90849062007557565b909155505050505050565b600081815260096020526040812060058101805461ff001916610100179055600381015490910362006297575050565b60018101546001600160a01b03166000908152603160205260408120600583015490919062010000900460ff166200633457816007015482600601548460030154620062e4919062007bb7565b620062f0919062007be7565b90508082600601600082825462006308919062007557565b909155505060038301546007830180546000906200632890849062007557565b90915550620063999050565b81600a0154826009015484600301546200634f919062007bb7565b6200635b919062007be7565b90508082600901600082825462006373919062007557565b90915550506003830154600a830180546000906200639390849062007557565b90915550505b82546001600160a01b0316600090815260306020526040812080548392906200625c9084906200756d565b6000620063d58260600151620051b2565b6001600160a01b03909116602084015290508015620064255760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001229565b6020808301516001600160a01b03908116600090815260319092526040909120600101541615620064995760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162001229565b61271082608001511115620019a35760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162001229565b606081600003620065195750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620065495780620065308162007b9b565b9150620065419050600a8362007be7565b91506200651d565b60008167ffffffffffffffff81111562006567576200656762007069565b6040519080825280601f01601f19166020018201604052801562006592576020820181803683370190505b5090505b84156200660a57620065aa60018362007557565b9150620065b9600a8662007cb3565b620065c69060306200756d565b60f81b818381518110620065de57620065de62007946565b60200101906001600160f81b031916908160001a90535062006602600a8662007be7565b945062006596565b949350505050565b6060816200662281601f6200756d565b1015620066635760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640162001229565b6200666f82846200756d565b84511015620066b55760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640162001229565b606082158015620066d6576040519150600082526020820160405262006722565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101562006711578051835260209283019201620066f7565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b8110156200675b5762006758601b8262007cca565b90505b9250925092565b60006200676e62006be9565b6000858585604051602001620067879392919062007ce6565b6040516020818303038152906040529050600060fb9050600082516020620067b091906200756d565b90506020848285855afa620067c457600080fd5b5050905195945050505050565b6101808101516001600160a01b0316620068d0576036546001600160a01b03166200684a5760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162001229565b6023546000906200685b90620064f1565b905081602001518260000151836080015183603660009054906101000a90046001600160a01b0316604051620068919062006c07565b620068a195949392919062007d35565b604051809103906000f080158015620068be573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602380546001808201835560009283527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f423090910180546001600160a01b03199081166001600160a01b0395861617909155845184168352603190955260409182902086518154871690851617815593519084018054861691841691909117905584015160028301805490941691161790915560608201518291906003820190620069829082620079ab565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820155610240820151601282019062006a4c9082620079ab565b5061026082015160138201805460ff1916600183600381111562006a745762006a7462006d39565b0217905550505050565b60405180610280016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000600381111562006b495762006b4962006d39565b905290565b6040518060a001604052806005906020820280368337509192915050565b508054600082559060005260206000209081019062001283919062006c15565b50805462006b9a9062007505565b6000825580601f1062006bab575050565b601f01602090049060005260206000209081019062001283919062006c3a565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105cb8062007d6883390190565b8082111562006c3657600062006c2c828262006b8c565b5060010162006c15565b5090565b5b8082111562006c36576000815560010162006c3b565b60005b8381101562006c6e57818101518382015260200162006c54565b50506000910152565b6000815180845262006c9181602086016020860162006c51565b601f01601f19169290920160200192915050565b602081526000620016b5602083018462006c77565b6001600160a01b03811681146200128357600080fd5b60006020828403121562006ce357600080fd5b8135620016b58162006cba565b6000806040838503121562006d0457600080fd5b823562006d118162006cba565b946020939093013593505050565b60006020828403121562006d3257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811062006d6e57634e487b7160e01b600052602160045260246000fd5b9052565b6020815262006d8d6020820183516001600160a01b03169052565b6000602083015162006daa60408401826001600160a01b03169052565b5060408301516001600160a01b038116606084015250606083015161028080608085015262006dde6102a085018362006c77565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101808181870152808701519150506101a062006e66818701836001600160a01b03169052565b8601516101c0868101919091528601516101e080870191909152860151610200808701919091528601516102208087019190915286015161024080870191909152860151858403601f19016102608088019190915290915062006eca848362006c77565b93508087015191505062006ee18286018262006d4f565b5090949350505050565b60008060006060848603121562006f0157600080fd5b833562006f0e8162006cba565b9250602084013562006f208162006cba565b929592945050506040919091013590565b6000806000806080858703121562006f4857600080fd5b843562006f558162006cba565b966020860135965060408601359560600135945092505050565b60006020828403121562006f8257600080fd5b813567ffffffffffffffff81111562006f9a57600080fd5b82016102808185031215620016b557600080fd5b600081518084526020808501808196508360051b8101915082860160005b8581101562007023578284038952815180516001600160a01b0316855285810151868601526040908101516060918601829052906200700e8187018362006c77565b9a87019a955050509084019060010162006fcc565b5091979650505050505050565b8515158152841515602082015260a0604082015260006200705560a083018662006fae565b606083019490945250608001529392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200709157600080fd5b813567ffffffffffffffff80821115620070af57620070af62007069565b604051601f8301601f19908116603f01168101908282118183101715620070da57620070da62007069565b81604052838152866020858801011115620070f457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156200712857600080fd5b8235620071358162006cba565b9150602083013567ffffffffffffffff8111156200715257600080fd5b62007160858286016200707f565b9150509250929050565b600080600080608085870312156200718157600080fd5b843567ffffffffffffffff808211156200719a57600080fd5b620071a8888389016200707f565b955060208701359150620071bc8262006cba565b90935060408601359080821115620071d357600080fd5b620071e1888389016200707f565b93506060870135915080821115620071f857600080fd5b5062007207878288016200707f565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200726c57603f198886030184526200725985835162006c77565b945092850192908501906001016200723a565b5092979650505050505050565b6080815260006200728e608083018762006fae565b6020830195909552506040810192909252606090910152919050565b602081526000620016b5602083018462006fae565b600081518084526020808501945080840160005b83811015620072fa5781516001600160a01b031687529582019590820190600101620072d3565b509495945050505050565b6040815260006200731a6040830185620072bf565b82810360208401526200732e8185620072bf565b95945050505050565b600080604083850312156200734b57600080fd5b823567ffffffffffffffff808211156200736457600080fd5b62007372868387016200707f565b935060208501359150808211156200738957600080fd5b5062007160858286016200707f565b604081526000620073ad604083018562006c77565b82810360208401526200732e818562006c77565b602081526000620016b56020830184620072bf565b60008060408385031215620073ea57600080fd5b8235620073f78162006cba565b91506020830135620074098162006cba565b809150509250929050565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b600181811c908216806200751a57607f821691505b6020821081036200753b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115620011d957620011d962007541565b80820180821115620011d957620011d962007541565b60008135620011d98162006cba565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808335601e19843603018112620075ca57600080fd5b83018035915067ffffffffffffffff821115620075e657600080fd5b602001915036819003821315620075fc57600080fd5b9250929050565b601f82111562005bd857600081815260208120601f850160051c810160208610156200762c5750805b601f850160051c820191505b81811015620027725782815560010162007638565b600019600383901b1c191660019190911b1790565b67ffffffffffffffff8311156200767d576200767d62007069565b62007695836200768e835462007505565b8362007603565b6000601f841160018114620076c85760008515620076b35750838201355b620076bf86826200764d565b84555062001aaa565b600083815260209020601f19861690835b82811015620076fb5786850135825560209485019460019092019101620076d9565b5086821015620077195760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000813560048110620011d957600080fd5b600482106200775c57634e487b7160e01b600052602160045260246000fd5b60ff1981541660ff831681178255505050565b620077856200777e8362007583565b8262007592565b620077a1620077976020840162007583565b6001830162007592565b620077bd620077b36040840162007583565b6002830162007592565b620077cc6060830183620075b2565b620077dc81836003860162007662565b50506080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610160820135600b8201556200784f62007845610180840162007583565b600c830162007592565b6101a0820135600d8201556101c0820135600e8201556101e0820135600f8201556102008201356010820155610220820135601182015562007896610240830183620075b2565b620078a681836012860162007662565b5050620019a3620078bb61026084016200772b565b601383016200773d565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b6000602082840312156200791b57600080fd5b5051919050565b6000602082840312156200793557600080fd5b81518015158114620016b557600080fd5b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b815167ffffffffffffffff811115620079c857620079c862007069565b620079e081620079d9845462007505565b8462007603565b602080601f83116001811462007a145760008415620079ff5750858301515b62007a0b85826200764d565b86555062002772565b600085815260208120601f198616915b8281101562007a455788860151825594840194600190910190840162007a24565b508582101562007a645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018060a01b0380881683528087166020840152808616604084015260a0606084015262007aa860a084018662006c77565b91508084166080840152509695505050505050565b81810362007ac9575050565b62007ad5825462007505565b67ffffffffffffffff81111562007af05762007af062007069565b62007b0181620079d9845462007505565b6000601f82116001811462007b34576000831562007b1f5750848201545b62007b2b84826200764d565b85555062001aaa565b600085815260209020601f19841690600086815260209020845b8381101562007b70578286015482556001958601959091019060200162007b4e565b508583101562007a645793015460001960f8600387901b161c19169092555050600190811b01905550565b60006001820162007bb05762007bb062007541565b5060010190565b8082028115828204841417620011d957620011d962007541565b634e487b7160e01b600052601260045260246000fd5b60008262007bf95762007bf962007bd1565b500490565b60018060a01b038316815260606020820152600060608201526080604082015260006200660a608083018462006c77565b6000806040838503121562007c4357600080fd5b505080516020909101519092909150565b6000845162007c6881846020890162006c51565b84519083019062007c7e81836020890162006c51565b845191019062007c9381836020880162006c51565b0195945050505050565b82815260408101620016b5602083018462006d4f565b60008262007cc55762007cc562007bd1565b500690565b60ff8181168382160190811115620011d957620011d962007541565b6000845162007cfa81846020890162006c51565b84519083019062007d1081836020890162006c51565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a0606084015262007aa860a084018662006c7756fe608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220ed3dd022bc50b6d41fc96c42630ae6240b5c3fe2e3df8709c69d5a0926a5d93e64736f6c63430008150033a2646970667358221220becea6fc78f631898b111271dc9b63fe2c20447482d8c25b61f8cd1e6d48bbbc64736f6c63430008150033608060405234801561001057600080fd5b50601080546001600160a01b031916331790556116a2806100326000396000f3fe6080604052600436106101855760003560e01c80633e4eb36c116100d1578063949813b81161008a578063a0ce552d11610064578063a0ce552d146104d5578063a9059cbb146104e8578063bd96102f14610508578063dd62ed3e1461051d5761018c565b8063949813b81461046b57806395d89b41146104a05780639dc29fac146104b55761018c565b80633e4eb36c1461038a57806340c10f191461039f57806359355736146103bf57806370a08231146103f55780637eee288d1461042b57806384955c881461044b5761018c565b80631eeffad01161013e5780632f2c3f2e116101185780632f2c3f2e14610325578063313ce5671461033b578063372500ab146103575780633b19e84a1461036c5761018c565b80631eeffad0146102d057806323b872dd146102e5578063282d3fdf146103055761018c565b806306fdde03146101ea578063095ea7b3146102155780631195e07e1461024557806318160ddd14610277578063187cf4d71461029657806319fac8fd146102ae5761018c565b3661018c57005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b3480156101f657600080fd5b506101ff610563565b60405161020c91906113fc565b60405180910390f35b34801561022157600080fd5b50610235610230366004611466565b6105f5565b604051901515815260200161020c565b34801561025157600080fd5b50600c546001600160a01b03165b6040516001600160a01b03909116815260200161020c565b34801561028357600080fd5b506003545b60405190815260200161020c565b3480156102a257600080fd5b50610288633b9aca0081565b3480156102ba57600080fd5b506102ce6102c9366004611490565b61060c565b005b3480156102dc57600080fd5b50600f54610288565b3480156102f157600080fd5b506102356103003660046114a9565b61063b565b34801561031157600080fd5b506102ce610320366004611466565b610730565b34801561033157600080fd5b5061028861271081565b34801561034757600080fd5b506040516012815260200161020c565b34801561036357600080fd5b506102ce610814565b34801561037857600080fd5b50600d546001600160a01b031661025f565b34801561039657600080fd5b50600e54610288565b3480156103ab57600080fd5b506102ce6103ba366004611466565b610995565b3480156103cb57600080fd5b506102886103da3660046114e5565b6001600160a01b031660009081526001602052604090205490565b34801561040157600080fd5b506102886104103660046114e5565b6001600160a01b031660009081526020819052604090205490565b34801561043757600080fd5b506102ce610446366004611466565b6109fd565b34801561045757600080fd5b506102886104663660046114e5565b610ac3565b34801561047757600080fd5b5061048b6104863660046114e5565b610af0565b6040805192835260208301919091520161020c565b3480156104ac57600080fd5b506101ff610ba8565b3480156104c157600080fd5b506102ce6104d0366004611466565b610bb7565b61048b6104e3366004611490565b610c17565b3480156104f457600080fd5b50610235610503366004611466565b610f0b565b34801561051457600080fd5b506102ce610f58565b34801561052957600080fd5b50610288610538366004611500565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6060600a805461057290611533565b80601f016020809104026020016040519081016040528092919081815260200182805461059e90611533565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b5050505050905090565b600061060233848461105f565b5060015b92915050565b6010546001600160a01b031633146106365760405162461bcd60e51b81526004016101e19061156d565b600e55565b6001600160a01b0383166000908152600260209081526040808320338452909152812054828110156106c05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101e1565b6106d485336106cf86856115cb565b61105f565b6106de8584611183565b6106e88484611277565b836001600160a01b0316856001600160a01b031660008051602061164d8339815191528560405161071b91815260200190565b60405180910390a360019150505b9392505050565b6010546001600160a01b0316331461075a5760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b03821660009081526001602090815260408083205491839052909120548291610789916115cb565b10156107e35760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115de565b90915550505050565b600080610820336112c3565b33600090815260046020908152604080832083905560079091528120819055919350915081156109035760105460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf91906115f1565b9050806109035760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101e1565b60405133908490600081818185875af1925050503d8060008114610943576040519150601f19603f3d011682016040523d82523d6000602084013e610948565b606091505b505080915050806109905760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b505050565b6010546001600160a01b031633146109bf5760405162461bcd60e51b81526004016101e19061156d565b6109c98282611277565b6040518181526001600160a01b0383169060009060008051602061164d833981519152906020015b60405180910390a35050565b6010546001600160a01b03163314610a275760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b038216600090815260016020526040902054811115610a9b5760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115cb565b6001600160a01b0381166000908152600160209081526040808320549183905282205461060691906115cb565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205483928391610b259184916113be565b6001600160a01b038616600090815260046020526040902054909150610b4c9082906115de565b6009546001600160a01b03871660009081526008602052604081205492965091610b779185916113be565b6001600160a01b038716600090815260076020526040902054909150610b9e9082906115de565b9350505050915091565b6060600b805461057290611533565b6010546001600160a01b03163314610be15760405162461bcd60e51b81526004016101e19061156d565b610beb8282611183565b6040518181526000906001600160a01b0384169060008051602061164d833981519152906020016109f1565b60105460009081906001600160a01b03163314610c465760405162461bcd60e51b81526004016101e19061156d565b600e54349060009061271090610c5c9084611613565b610c66919061162a565b905081811115610cb85760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610cc281836115cb565b600d546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610d19576040519150601f19603f3d011682016040523d82523d6000602084013e610d1e565b606091505b5090915050801515600003610d455781600f6000828254610d3f91906115de565b90915550505b6000612710600e5488610d589190611613565b610d62919061162a565b905086811115610db45760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610dbe81886115cb565b96508015610e4157601054600d5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f91906115f1565b505b600354600090610e55633b9aca0087611613565b610e5f919061162a565b905080600654610e6f91906115de565b600655600354600090610e86633b9aca008b611613565b610e90919061162a565b905080600954610ea091906115de565b600955600354600090633b9aca0090610eb99085611613565b610ec3919061162a565b90506000633b9aca0060035484610eda9190611613565b610ee4919061162a565b9050610ef082886115de565b610efa82876115de565b995099505050505050505050915091565b6000610f173383611183565b610f218383611277565b6040518281526001600160a01b03841690339060008051602061164d8339815191529060200160405180910390a350600192915050565b600d546001600160a01b03163314610fbd5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101e1565b600d54600f546040516000926001600160a01b031691908381818185875af1925050503d806000811461100c576040519150601f19603f3d011682016040523d82523d6000602084013e611011565b606091505b50509050806110575760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b506000600f55565b6001600160a01b0383166110c15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101e1565b6001600160a01b0382166111225760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101e1565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b61118c826112c3565b50506001600160a01b038216600090815260208181526040808320546001909252909120546111bb90826115cb565b82111561120a5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101e1565b61121482826115cb565b6001600160a01b03841660009081526020819052604090205580820361125b576001600160a01b038316600090815260056020908152604080832083905560089091528120555b816003600082825461126d91906115cb565b9091555050505050565b611280826112c3565b50506001600160a01b038216600090815260208190526040812080548392906112aa9084906115de565b92505081905550806003600082825461080b91906115de565b6001600160a01b03811660009081526020818152604080832054600654600590935290832054839283916112f89184916113be565b6001600160a01b03861660009081526004602052604090205490915061131f9082906115de565b6001600160a01b03861660009081526004602090815260408083208490556006546005835281842055600954600890925282205492965090916113639185916113be565b6001600160a01b03871660009081526007602052604090205490915061138a9082906115de565b6001600160a01b03909616600090815260076020908152604080832089905560095460089092529091205550929492505050565b6000836000036113d057506000610729565b633b9aca00846113e084866115cb565b6113ea9190611613565b6113f4919061162a565b949350505050565b600060208083528351808285015260005b818110156114295785810183015185820160400152820161140d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461146157600080fd5b919050565b6000806040838503121561147957600080fd5b6114828361144a565b946020939093013593505050565b6000602082840312156114a257600080fd5b5035919050565b6000806000606084860312156114be57600080fd5b6114c78461144a565b92506114d56020850161144a565b9150604084013590509250925092565b6000602082840312156114f757600080fd5b6107298261144a565b6000806040838503121561151357600080fd5b61151c8361144a565b915061152a6020840161144a565b90509250929050565b600181811c9082168061154757607f821691505b60208210810361156757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610606576106066115b5565b80820180821115610606576106066115b5565b60006020828403121561160357600080fd5b8151801515811461072957600080fd5b8082028115828204841417610606576106066115b5565b60008261164757634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122093ea81eaf95be7906475b3963e1d54891d17d7531aa5c3f291e630aa0095341a64736f6c63430008150033608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220ed3dd022bc50b6d41fc96c42630ae6240b5c3fe2e3df8709c69d5a0926a5d93e64736f6c63430008150033",
}

// AutonityUpgradeTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityUpgradeTestMetaData.ABI instead.
var AutonityUpgradeTestABI = AutonityUpgradeTestMetaData.ABI

// Deprecated: Use AutonityUpgradeTestMetaData.Sigs instead.
// AutonityUpgradeTestFuncSigs maps the 4-byte function signature to its string representation.
var AutonityUpgradeTestFuncSigs = AutonityUpgradeTestMetaData.Sigs

// AutonityUpgradeTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityUpgradeTestMetaData.Bin instead.
var AutonityUpgradeTestBin = AutonityUpgradeTestMetaData.Bin

// DeployAutonityUpgradeTest deploys a new Ethereum contract, binding an instance of AutonityUpgradeTest to it.
func (r *Runner) DeployAutonityUpgradeTest(opts *runOptions) (common.Address, uint64, *AutonityUpgradeTest, error) {
	parsed, err := AutonityUpgradeTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AutonityUpgradeTestBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &AutonityUpgradeTest{contract: c}, nil
}

// AutonityUpgradeTest is an auto generated Go binding around an Ethereum contract.
type AutonityUpgradeTest struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// AtnTotalRedistributed is a free data retrieval call binding the contract method 0xe98712b2.
//
// Solidity: function atnTotalRedistributed() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) AtnTotalRedistributed(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "atnTotalRedistributed")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) BalanceOf(opts *runOptions, _addr common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CirculatingSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "circulatingSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,address) policy, (address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Config(opts *runOptions) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Deployer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "deployer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochID(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochID")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochPeriodToBeApplied is a free data retrieval call binding the contract method 0x573963b8.
//
// Solidity: function epochPeriodToBeApplied() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochPeriodToBeApplied(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochPeriodToBeApplied")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochReward(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochReward")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochTotalBondedStake(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetBlockPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCommittee(opts *runOptions) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCommitteeEnodes(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns((address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochByHeight(opts *runOptions, _height *big.Int) ([]AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochByHeight", _height)

	if err != nil {
		return *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, consumed, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochFromBlock(opts *runOptions, _block *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns((address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochInfo(opts *runOptions) ([]AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochInfo")

	if err != nil {
		return *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, consumed, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetLastEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMaxCommitteeSize(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMaxScheduleDuration(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMaxScheduleDuration")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMinimumBaseFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetNextEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetSchedule(opts *runOptions, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)
	return out0, consumed, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTotalSchedules(opts *runOptions, _vault common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTreasuryAccount(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTreasuryFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetUnbondingPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetUnbondingShare(opts *runOptions, _unbondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getUnbondingShare", _unbondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetValidator(opts *runOptions, _addr common.Address) (AutonityValidator, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) InflationReserve(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "inflationReserve")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) IsUnbondingReleased(opts *runOptions, _unbondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LastEpochTime(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LastFinalizedBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetLiquidLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf1d592a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetLiquidLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "SetLiquidLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ActivateValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb46e5520.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallActivateValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "activateValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallBurn(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "burn", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x852c4849.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallChangeCommissionRate(r *Runner, opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "changeCommissionRate", _validator, _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ComputeCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xae1f5fa0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function computeCommittee() returns(address[], address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallComputeCommittee(r *Runner, opts *runOptions) ([]common.Address, []common.Address, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "computeCommittee")
	r.revertSnapshot(snap)

	if err != nil {
		return *new([]common.Address), *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	return out0, out1, consumed, err

}

// CreateSchedule is a free data retrieval call for a paid mutator transaction binding the contract method 0x354c40a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallCreateSchedule(r *Runner, opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallFinalize(r *Runner, opts *runOptions) (bool, bool, []AutonityCommitteeMember, *big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), *new(bool), *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, out4, consumed, err

}

// FinalizeInitialization is a free data retrieval call for a paid mutator transaction binding the contract method 0xd861b0e8.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalizeInitialization() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallFinalizeInitialization(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalizeInitialization")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallMint(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "mint", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// PauseValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae65e7a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallPauseValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "pauseValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// RegisterValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x84467fdb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallRegisterValidator(r *Runner, opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1250a28d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAcuContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xd372c07e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetAcuContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAcuContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommitteeSize is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bac7dad.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetCommitteeSize(r *Runner, opts *runOptions, _size *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setCommitteeSize", _size)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetEpochPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setEpochPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInflationControllerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf03b959d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetInflationControllerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setInflationControllerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMaxScheduleDuration is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bb2e477.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetMaxScheduleDuration(r *Runner, opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinimumBaseFee is a free data retrieval call for a paid mutator transaction binding the contract method 0xcb696f54.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetMinimumBaseFee(r *Runner, opts *runOptions, _price *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMinimumBaseFee", _price)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperatorAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0x520fdbbc.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetOperatorAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOperatorAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracleContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x496ccd9b.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetOracleContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOracleContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizationContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfd19fb9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetStabilizationContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setStabilizationContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControlContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ecbadd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetSupplyControlContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSupplyControlContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0xd886f8a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetTreasuryAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryFee is a free data retrieval call for a paid mutator transaction binding the contract method 0x77e741c7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetTreasuryFee(r *Runner, opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryFee", _treasuryFee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUnbondingPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x114eaf55.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetUnbondingPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUnbondingPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUpgradeManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xceaad455.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetUpgradeManagerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUpgradeManagerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallTransfer(r *Runner, opts *runOptions, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "transfer", _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateEnode is a free data retrieval call for a paid mutator transaction binding the contract method 0x784304b5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpdateEnode(r *Runner, opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateEnode", _nodeAddress, _enode)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateValidatorAndTransferSlashedFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x35be16e0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpdateValidatorAndTransferSlashedFunds(r *Runner, opts *runOptions, _val AutonityValidator) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetLiquidLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "SetLiquidLogicContract", _contract)
	return consumed, err
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ActivateValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "activateValidator", _address)
	return consumed, err
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "approve", spender, amount)
	return consumed, err
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Burn(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "burn", _addr, _amount)
	return consumed, err
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ChangeCommissionRate(opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "changeCommissionRate", _validator, _rate)
	return consumed, err
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) ComputeCommittee(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "computeCommittee")
	return consumed, err
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CreateSchedule(opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalize")
	return consumed, err
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0xd861b0e8.
//
// Solidity: function finalizeInitialization() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) FinalizeInitialization(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalizeInitialization")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Mint(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "mint", _addr, _amount)
	return consumed, err
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) PauseValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "pauseValidator", _address)
	return consumed, err
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) RegisterValidator(opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "resetContractUpgrade")
	return consumed, err
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAccountabilityContract", _address)
	return consumed, err
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetAcuContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAcuContract", _address)
	return consumed, err
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetCommitteeSize(opts *runOptions, _size *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setCommitteeSize", _size)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetEpochPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setEpochPeriod", _period)
	return consumed, err
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetInflationControllerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setInflationControllerContract", _address)
	return consumed, err
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetMaxScheduleDuration(opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	return consumed, err
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetMinimumBaseFee(opts *runOptions, _price *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMinimumBaseFee", _price)
	return consumed, err
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetOperatorAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOperatorAccount", _account)
	return consumed, err
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetOracleContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOracleContract", _address)
	return consumed, err
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetStabilizationContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setStabilizationContract", _address)
	return consumed, err
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetSupplyControlContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSupplyControlContract", _address)
	return consumed, err
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetTreasuryAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryAccount", _account)
	return consumed, err
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetTreasuryFee(opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryFee", _treasuryFee)
	return consumed, err
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetUnbondingPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUnbondingPeriod", _period)
	return consumed, err
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetUpgradeManagerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUpgradeManagerContract", _address)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Transfer(opts *runOptions, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "transfer", _recipient, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpdateEnode(opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateEnode", _nodeAddress, _enode)
	return consumed, err
}

// UpdateValidatorAndTransferSlashedFunds is a paid mutator transaction binding the contract method 0x35be16e0.
//
// Solidity: function updateValidatorAndTransferSlashedFunds((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes,uint8) _val) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpdateValidatorAndTransferSlashedFunds(opts *runOptions, _val AutonityValidator) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateValidatorAndTransferSlashedFunds", _val)
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AutonityUpgradeTestActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestActivatedValidatorIterator struct {
			Event *AutonityUpgradeTestActivatedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestActivatedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestActivatedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestActivatedValidator represents a ActivatedValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestActivatedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestActivatedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestActivatedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestActivatedValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseActivatedValidator(log types.Log) (*AutonityUpgradeTestActivatedValidator, error) {
			event := new(AutonityUpgradeTestActivatedValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestApprovalIterator struct {
			Event *AutonityUpgradeTestApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestApproval represents a Approval event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityUpgradeTestApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestApprovalIterator{contract: _AutonityUpgradeTest.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestApproval)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseApproval(log types.Log) (*AutonityUpgradeTestApproval, error) {
			event := new(AutonityUpgradeTestApproval)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBondingRejectedIterator struct {
			Event *AutonityUpgradeTestBondingRejected // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestBondingRejected)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestBondingRejected)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestBondingRejected represents a BondingRejected event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBondingRejected struct {
			Validator common.Address;
			Delegator common.Address;
			Amount *big.Int;
			State uint8;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestBondingRejectedIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestBondingRejectedIterator{contract: _AutonityUpgradeTest.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
 		}

		// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestBondingRejected)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseBondingRejected(log types.Log) (*AutonityUpgradeTestBondingRejected, error) {
			event := new(AutonityUpgradeTestBondingRejected)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBurnedStakeIterator struct {
			Event *AutonityUpgradeTestBurnedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestBurnedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestBurnedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestBurnedStake represents a BurnedStake event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBurnedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestBurnedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestBurnedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
 		}

		// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBurnedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestBurnedStake)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseBurnedStake(log types.Log) (*AutonityUpgradeTestBurnedStake, error) {
			event := new(AutonityUpgradeTestBurnedStake)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCallFailedIterator struct {
			Event *AutonityUpgradeTestCallFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestCallFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestCallFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestCallFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestCallFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestCallFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestCallFailed represents a CallFailed event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCallFailed struct {
			To common.Address;
			MethodSignature string;
			ReturnData []byte;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterCallFailed(opts *bind.FilterOpts) (*AutonityUpgradeTestCallFailedIterator, error) {





			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestCallFailedIterator{contract: _AutonityUpgradeTest.contract, event: "CallFailed", logs: logs, sub: sub}, nil
 		}

		// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCallFailed) (event.Subscription, error) {





			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestCallFailed)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseCallFailed(log types.Log) (*AutonityUpgradeTestCallFailed, error) {
			event := new(AutonityUpgradeTestCallFailed)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCommissionRateChangeIterator struct {
			Event *AutonityUpgradeTestCommissionRateChange // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestCommissionRateChange)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestCommissionRateChange)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestCommissionRateChange represents a CommissionRateChange event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCommissionRateChange struct {
			Validator common.Address;
			Rate *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityUpgradeTestCommissionRateChangeIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestCommissionRateChangeIterator{contract: _AutonityUpgradeTest.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
 		}

		// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCommissionRateChange, validator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestCommissionRateChange)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseCommissionRateChange(log types.Log) (*AutonityUpgradeTestCommissionRateChange, error) {
			event := new(AutonityUpgradeTestCommissionRateChange)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestEpochPeriodUpdatedIterator struct {
			Event *AutonityUpgradeTestEpochPeriodUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestEpochPeriodUpdated struct {
			Period *big.Int;
			ToBeAppliedAtBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestEpochPeriodUpdatedIterator, error) {




			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestEpochPeriodUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestEpochPeriodUpdated) (event.Subscription, error) {




			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestEpochPeriodUpdated)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseEpochPeriodUpdated(log types.Log) (*AutonityUpgradeTestEpochPeriodUpdated, error) {
			event := new(AutonityUpgradeTestEpochPeriodUpdated)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMinimumBaseFeeUpdatedIterator struct {
			Event *AutonityUpgradeTestMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMinimumBaseFeeUpdated struct {
			GasPrice *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestMinimumBaseFeeUpdatedIterator, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestMinimumBaseFeeUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMinimumBaseFeeUpdated) (event.Subscription, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityUpgradeTestMinimumBaseFeeUpdated, error) {
			event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMintedStakeIterator struct {
			Event *AutonityUpgradeTestMintedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestMintedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestMintedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestMintedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestMintedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestMintedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestMintedStake represents a MintedStake event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMintedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestMintedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestMintedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "MintedStake", logs: logs, sub: sub}, nil
 		}

		// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMintedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestMintedStake)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseMintedStake(log types.Log) (*AutonityUpgradeTestMintedStake, error) {
			event := new(AutonityUpgradeTestMintedStake)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewBondingRequestIterator struct {
			Event *AutonityUpgradeTestNewBondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewBondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewBondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewBondingRequest represents a NewBondingRequest event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewBondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewBondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewBondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewBondingRequest)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewBondingRequest(log types.Log) (*AutonityUpgradeTestNewBondingRequest, error) {
			event := new(AutonityUpgradeTestNewBondingRequest)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewEpochIterator struct {
			Event *AutonityUpgradeTestNewEpoch // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewEpochIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewEpoch)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewEpoch)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewEpochIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewEpochIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewEpoch represents a NewEpoch event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewEpoch struct {
			Epoch *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityUpgradeTestNewEpochIterator, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewEpochIterator{contract: _AutonityUpgradeTest.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
 		}

		// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewEpoch) (event.Subscription, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewEpoch)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewEpoch(log types.Log) (*AutonityUpgradeTestNewEpoch, error) {
			event := new(AutonityUpgradeTestNewEpoch)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewUnbondingRequestIterator struct {
			Event *AutonityUpgradeTestNewUnbondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewUnbondingRequest represents a NewUnbondingRequest event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewUnbondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewUnbondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewUnbondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewUnbondingRequest)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewUnbondingRequest(log types.Log) (*AutonityUpgradeTestNewUnbondingRequest, error) {
			event := new(AutonityUpgradeTestNewUnbondingRequest)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestPausedValidatorIterator struct {
			Event *AutonityUpgradeTestPausedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestPausedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestPausedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestPausedValidator represents a PausedValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestPausedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestPausedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestPausedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestPausedValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParsePausedValidator(log types.Log) (*AutonityUpgradeTestPausedValidator, error) {
			event := new(AutonityUpgradeTestPausedValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRegisteredValidatorIterator struct {
			Event *AutonityUpgradeTestRegisteredValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestRegisteredValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestRegisteredValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestRegisteredValidator represents a RegisteredValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRegisteredValidator struct {
			Treasury common.Address;
			Addr common.Address;
			OracleAddress common.Address;
			Enode string;
			LiquidStateContract common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityUpgradeTestRegisteredValidatorIterator, error) {







			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestRegisteredValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
 		}

		// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRegisteredValidator) (event.Subscription, error) {







			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestRegisteredValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseRegisteredValidator(log types.Log) (*AutonityUpgradeTestRegisteredValidator, error) {
			event := new(AutonityUpgradeTestRegisteredValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRewardedIterator struct {
			Event *AutonityUpgradeTestRewarded // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestRewardedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestRewarded)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestRewarded)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestRewardedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestRewardedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestRewarded represents a Rewarded event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRewarded struct {
			Addr common.Address;
			AtnAmount *big.Int;
			NtnAmount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestRewardedIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestRewardedIterator{contract: _AutonityUpgradeTest.contract, event: "Rewarded", logs: logs, sub: sub}, nil
 		}

		// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRewarded, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestRewarded)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseRewarded(log types.Log) (*AutonityUpgradeTestRewarded, error) {
			event := new(AutonityUpgradeTestRewarded)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestTransferIterator struct {
			Event *AutonityUpgradeTestTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestTransfer represents a Transfer event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityUpgradeTestTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestTransferIterator{contract: _AutonityUpgradeTest.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestTransfer)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseTransfer(log types.Log) (*AutonityUpgradeTestTransfer, error) {
			event := new(AutonityUpgradeTestTransfer)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// BeneficiaryHandlerMetaData contains all meta data concerning the BeneficiaryHandler contract.
var BeneficiaryHandlerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"fca78d11": "getUniqueContractID(address,uint256)",
		"635bf933": "totalContracts(address)",
	},
}

// BeneficiaryHandlerABI is the input ABI used to generate the binding from.
// Deprecated: Use BeneficiaryHandlerMetaData.ABI instead.
var BeneficiaryHandlerABI = BeneficiaryHandlerMetaData.ABI

// Deprecated: Use BeneficiaryHandlerMetaData.Sigs instead.
// BeneficiaryHandlerFuncSigs maps the 4-byte function signature to its string representation.
var BeneficiaryHandlerFuncSigs = BeneficiaryHandlerMetaData.Sigs

// BeneficiaryHandler is an auto generated Go binding around an Ethereum contract.
type BeneficiaryHandler struct {
	*contract
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandler) GetUniqueContractID(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _BeneficiaryHandler.call(opts, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandler) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _BeneficiaryHandler.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

		// BeneficiaryHandlerBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the BeneficiaryHandler contract.
		type BeneficiaryHandlerBeneficiaryChangedIterator struct {
			Event *BeneficiaryHandlerBeneficiaryChanged // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(BeneficiaryHandlerBeneficiaryChanged)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(BeneficiaryHandlerBeneficiaryChanged)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// BeneficiaryHandlerBeneficiaryChanged represents a BeneficiaryChanged event raised by the BeneficiaryHandler contract.
		type BeneficiaryHandlerBeneficiaryChanged struct {
			NewBeneficiary common.Address;
			OldBeneficiary common.Address;
			ContractID *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
 		func (_BeneficiaryHandler *BeneficiaryHandler) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*BeneficiaryHandlerBeneficiaryChangedIterator, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _BeneficiaryHandler.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return &BeneficiaryHandlerBeneficiaryChangedIterator{contract: _BeneficiaryHandler.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
 		}

		// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_BeneficiaryHandler *BeneficiaryHandler) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *BeneficiaryHandlerBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _BeneficiaryHandler.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(BeneficiaryHandlerBeneficiaryChanged)
						if err := _BeneficiaryHandler.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_BeneficiaryHandler *BeneficiaryHandler) ParseBeneficiaryChanged(log types.Log) (*BeneficiaryHandlerBeneficiaryChanged, error) {
			event := new(BeneficiaryHandlerBeneficiaryChanged)
			if err := _BeneficiaryHandler.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// BytesLibMetaData contains all meta data concerning the BytesLib contract.
var BytesLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220831cbf1d093207c822ca0bb8903ee29676712d9a6abe4b340d9c5562c8a851e464736f6c63430008150033",
}

// BytesLibABI is the input ABI used to generate the binding from.
// Deprecated: Use BytesLibMetaData.ABI instead.
var BytesLibABI = BytesLibMetaData.ABI

// BytesLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BytesLibMetaData.Bin instead.
var BytesLibBin = BytesLibMetaData.Bin

// DeployBytesLib deploys a new Ethereum contract, binding an instance of BytesLib to it.
func (r *Runner) DeployBytesLib(opts *runOptions) (common.Address, uint64, *BytesLib, error) {
	parsed, err := BytesLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(BytesLibBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &BytesLib{contract: c}, nil
}

// BytesLib is an auto generated Go binding around an Ethereum contract.
type BytesLib struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ContractBaseMetaData contains all meta data concerning the ContractBase contract.
var ContractBaseMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"}]",
}

// ContractBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractBaseMetaData.ABI instead.
var ContractBaseABI = ContractBaseMetaData.ABI

// ContractBase is an auto generated Go binding around an Ethereum contract.
type ContractBase struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

		// ContractBaseFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the ContractBase contract.
		type ContractBaseFundsReleasedIterator struct {
			Event *ContractBaseFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ContractBaseFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ContractBaseFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ContractBaseFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ContractBaseFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ContractBaseFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ContractBaseFundsReleased represents a FundsReleased event raised by the ContractBase contract.
		type ContractBaseFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_ContractBase *ContractBase) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*ContractBaseFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _ContractBase.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &ContractBaseFundsReleasedIterator{contract: _ContractBase.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_ContractBase *ContractBase) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *ContractBaseFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _ContractBase.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ContractBaseFundsReleased)
						if err := _ContractBase.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_ContractBase *ContractBase) ParseFundsReleased(log types.Log) (*ContractBaseFundsReleased, error) {
			event := new(ContractBaseFundsReleased)
			if err := _ContractBase.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// DelegateCallerMetaData contains all meta data concerning the DelegateCaller contract.
var DelegateCallerMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b53667027e6f060c2e72e397db2d1fa9f22d2ce03e4bdabd9068999655b4a52c64736f6c63430008150033",
}

// DelegateCallerABI is the input ABI used to generate the binding from.
// Deprecated: Use DelegateCallerMetaData.ABI instead.
var DelegateCallerABI = DelegateCallerMetaData.ABI

// DelegateCallerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DelegateCallerMetaData.Bin instead.
var DelegateCallerBin = DelegateCallerMetaData.Bin

// DeployDelegateCaller deploys a new Ethereum contract, binding an instance of DelegateCaller to it.
func (r *Runner) DeployDelegateCaller(opts *runOptions) (common.Address, uint64, *DelegateCaller, error) {
	parsed, err := DelegateCallerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(DelegateCallerBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &DelegateCaller{contract: c}, nil
}

// DelegateCaller is an auto generated Go binding around an Ethereum contract.
type DelegateCaller struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// HelpersMetaData contains all meta data concerning the Helpers contract.
var HelpersMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f08ec662b3647da9f8d9adbbfb5ae571333af0be6a27cf20a23d7dccab133b1b64736f6c63430008150033",
}

// HelpersABI is the input ABI used to generate the binding from.
// Deprecated: Use HelpersMetaData.ABI instead.
var HelpersABI = HelpersMetaData.ABI

// HelpersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HelpersMetaData.Bin instead.
var HelpersBin = HelpersMetaData.Bin

// DeployHelpers deploys a new Ethereum contract, binding an instance of Helpers to it.
func (r *Runner) DeployHelpers(opts *runOptions) (common.Address, uint64, *Helpers, error) {
	parsed, err := HelpersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(HelpersBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Helpers{contract: c}, nil
}

// Helpers is an auto generated Go binding around an Ethereum contract.
type Helpers struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IACUMetaData contains all meta data concerning the IACU contract.
var IACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"a2e62045": "update()",
	},
}

// IACUABI is the input ABI used to generate the binding from.
// Deprecated: Use IACUMetaData.ABI instead.
var IACUABI = IACUMetaData.ABI

// Deprecated: Use IACUMetaData.Sigs instead.
// IACUFuncSigs maps the 4-byte function signature to its string representation.
var IACUFuncSigs = IACUMetaData.Sigs

// IACU is an auto generated Go binding around an Ethereum contract.
type IACU struct {
	*contract
}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACU) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IACU.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACU) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IACU.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// Update is a free data retrieval call for a paid mutator transaction binding the contract method 0xa2e62045.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function update() returns(bool status)
func (_IACU *IACU) CallUpdate(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IACU.call(opts, "update")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACU) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACU) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "setOracle", oracle)
	return consumed, err
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACU) Update(opts *runOptions) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "update")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IAccountabilityMetaData contains all meta data concerning the IAccountability contract.
var IAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_committee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a8031a1d": "distributeRewards(address,uint256)",
		"6c9789b0": "finalize(bool)",
		"e08b14ed": "setCommittee(address[])",
		"6b5f444c": "setEpochPeriod(uint256)",
	},
}

// IAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAccountabilityMetaData.ABI instead.
var IAccountabilityABI = IAccountabilityMetaData.ABI

// Deprecated: Use IAccountabilityMetaData.Sigs instead.
// IAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var IAccountabilityFuncSigs = IAccountabilityMetaData.Sigs

// IAccountability is an auto generated Go binding around an Ethereum contract.
type IAccountability struct {
	*contract
}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountability) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountability) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe08b14ed.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee(address[] _committee) returns()
func (_IAccountability *IAccountability) CallSetCommittee(r *Runner, opts *runOptions, _committee []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "setCommittee", _committee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountability) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountability) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountability) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _committee) returns()
func (_IAccountability *IAccountability) SetCommittee(opts *runOptions, _committee []common.Address) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "setCommittee", _committee)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountability) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IAccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the IAccountability contract.
		type IAccountabilityInnocenceProvenIterator struct {
			Event *IAccountabilityInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityInnocenceProven represents a InnocenceProven event raised by the IAccountability contract.
		type IAccountabilityInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_IAccountability *IAccountability) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityInnocenceProvenIterator{contract: _IAccountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_IAccountability *IAccountability) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *IAccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityInnocenceProven)
						if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_IAccountability *IAccountability) ParseInnocenceProven(log types.Log) (*IAccountabilityInnocenceProven, error) {
			event := new(IAccountabilityInnocenceProven)
			if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the IAccountability contract.
		type IAccountabilityNewAccusationIterator struct {
			Event *IAccountabilityNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityNewAccusation represents a NewAccusation event raised by the IAccountability contract.
		type IAccountabilityNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_IAccountability *IAccountability) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityNewAccusationIterator{contract: _IAccountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityNewAccusation)
						if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) ParseNewAccusation(log types.Log) (*IAccountabilityNewAccusation, error) {
			event := new(IAccountabilityNewAccusation)
			if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the IAccountability contract.
		type IAccountabilityNewFaultProofIterator struct {
			Event *IAccountabilityNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityNewFaultProof represents a NewFaultProof event raised by the IAccountability contract.
		type IAccountabilityNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_IAccountability *IAccountability) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityNewFaultProofIterator{contract: _IAccountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityNewFaultProof)
						if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) ParseNewFaultProof(log types.Log) (*IAccountabilityNewFaultProof, error) {
			event := new(IAccountabilityNewFaultProof)
			if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the IAccountability contract.
		type IAccountabilitySlashingEventIterator struct {
			Event *IAccountabilitySlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilitySlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilitySlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilitySlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilitySlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilitySlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilitySlashingEvent represents a SlashingEvent event raised by the IAccountability contract.
		type IAccountabilitySlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_IAccountability *IAccountability) FilterSlashingEvent(opts *bind.FilterOpts) (*IAccountabilitySlashingEventIterator, error) {







			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &IAccountabilitySlashingEventIterator{contract: _IAccountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_IAccountability *IAccountability) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *IAccountabilitySlashingEvent) (event.Subscription, error) {







			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilitySlashingEvent)
						if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_IAccountability *IAccountability) ParseSlashingEvent(log types.Log) (*IAccountabilitySlashingEvent, error) {
			event := new(IAccountabilitySlashingEvent)
			if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IAutonityMetaData contains all meta data concerning the IAutonity contract.
var IAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
	},
}

// IAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAutonityMetaData.ABI instead.
var IAutonityABI = IAutonityMetaData.ABI

// Deprecated: Use IAutonityMetaData.Sigs instead.
// IAutonityFuncSigs maps the 4-byte function signature to its string representation.
var IAutonityFuncSigs = IAutonityMetaData.Sigs

// IAutonity is an auto generated Go binding around an Ethereum contract.
type IAutonity struct {
	*contract
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonity) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IAutonity.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonity) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IAutonity.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// Deprecated: Use IERC20MetaData.Sigs instead.
// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = IERC20MetaData.Sigs

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	*contract
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20) BalanceOf(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallTransfer(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "transfer", recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallTransferFrom(r *Runner, opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "transferFrom", sender, recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "approve", spender, amount)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) Transfer(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "transfer", recipient, amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) TransferFrom(opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "transferFrom", sender, recipient, amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
		type IERC20ApprovalIterator struct {
			Event *IERC20Approval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IERC20ApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IERC20Approval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IERC20Approval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IERC20ApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IERC20ApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IERC20Approval represents a Approval event raised by the IERC20 contract.
		type IERC20Approval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_IERC20 *IERC20) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_IERC20 *IERC20) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IERC20Approval)
						if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_IERC20 *IERC20) ParseApproval(log types.Log) (*IERC20Approval, error) {
			event := new(IERC20Approval)
			if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
		type IERC20TransferIterator struct {
			Event *IERC20Transfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IERC20TransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IERC20Transfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IERC20Transfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IERC20TransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IERC20TransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
		type IERC20Transfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_IERC20 *IERC20) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_IERC20 *IERC20) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IERC20Transfer)
						if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_IERC20 *IERC20) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
			event := new(IERC20Transfer)
			if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IInflationControllerMetaData contains all meta data concerning the IInflationController contract.
var IInflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
	},
}

// IInflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use IInflationControllerMetaData.ABI instead.
var IInflationControllerABI = IInflationControllerMetaData.ABI

// Deprecated: Use IInflationControllerMetaData.Sigs instead.
// IInflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var IInflationControllerFuncSigs = IInflationControllerMetaData.Sigs

// IInflationController is an auto generated Go binding around an Ethereum contract.
type IInflationController struct {
	*contract
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationController) CalculateSupplyDelta(opts *runOptions, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _IInflationController.call(opts, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ILiquidMetaData contains all meta data concerning the ILiquid contract.
var ILiquidMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
}

// ILiquidABI is the input ABI used to generate the binding from.
// Deprecated: Use ILiquidMetaData.ABI instead.
var ILiquidABI = ILiquidMetaData.ABI

// Deprecated: Use ILiquidMetaData.Sigs instead.
// ILiquidFuncSigs maps the 4-byte function signature to its string representation.
var ILiquidFuncSigs = ILiquidMetaData.Sigs

// ILiquid is an auto generated Go binding around an Ethereum contract.
type ILiquid struct {
	*contract
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ILiquid *ILiquid) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ILiquid *ILiquid) BalanceOf(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_ILiquid *ILiquid) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_ILiquid *ILiquid) GetCommissionRate(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_ILiquid *ILiquid) GetTreasury(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getTreasury")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_ILiquid *ILiquid) GetTreasuryUnclaimedATN(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_ILiquid *ILiquid) GetValidator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getValidator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquid) LockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ILiquid *ILiquid) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ILiquid *ILiquid) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ILiquid *ILiquid) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_ILiquid *ILiquid) UnclaimedRewards(opts *runOptions, _account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "unclaimedRewards", _account)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquid) UnlockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallBurn(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "burn", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_ILiquid *ILiquid) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimTreasuryATN is a free data retrieval call for a paid mutator transaction binding the contract method 0xbd96102f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimTreasuryATN() returns()
func (_ILiquid *ILiquid) CallClaimTreasuryATN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "claimTreasuryATN")
	r.revertSnapshot(snap)
	return consumed, err

}

// Lock is a free data retrieval call for a paid mutator transaction binding the contract method 0x282d3fdf.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallLock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "lock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallMint(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "mint", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Redistribute is a free data retrieval call for a paid mutator transaction binding the contract method 0xa0ce552d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_ILiquid *ILiquid) CallRedistribute(r *Runner, opts *runOptions, _ntnReward *big.Int) (*big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "redistribute", _ntnReward)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SetCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x19fac8fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquid *ILiquid) CallSetCommissionRate(r *Runner, opts *runOptions, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "setCommissionRate", _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) CallTransfer(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "transfer", recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) CallTransferFrom(r *Runner, opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "transferFrom", sender, recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unlock is a free data retrieval call for a paid mutator transaction binding the contract method 0x7eee288d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallUnlock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "unlock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "approve", spender, amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Burn(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "burn", _account, _amount)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_ILiquid *ILiquid) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "claimRewards")
	return consumed, err
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_ILiquid *ILiquid) ClaimTreasuryATN(opts *runOptions) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "claimTreasuryATN")
	return consumed, err
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Lock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "lock", _account, _amount)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Mint(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "mint", _account, _amount)
	return consumed, err
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_ILiquid *ILiquid) Redistribute(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "redistribute", _ntnReward)
	return consumed, err
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquid *ILiquid) SetCommissionRate(opts *runOptions, _rate *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "setCommissionRate", _rate)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) Transfer(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "transfer", recipient, amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) TransferFrom(opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "transferFrom", sender, recipient, amount)
	return consumed, err
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Unlock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "unlock", _account, _amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ILiquidApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ILiquid contract.
		type ILiquidApprovalIterator struct {
			Event *ILiquidApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ILiquidApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ILiquidApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ILiquidApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ILiquidApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ILiquidApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ILiquidApproval represents a Approval event raised by the ILiquid contract.
		type ILiquidApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_ILiquid *ILiquid) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ILiquidApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _ILiquid.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &ILiquidApprovalIterator{contract: _ILiquid.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_ILiquid *ILiquid) WatchApproval(opts *bind.WatchOpts, sink chan<- *ILiquidApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _ILiquid.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ILiquidApproval)
						if err := _ILiquid.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_ILiquid *ILiquid) ParseApproval(log types.Log) (*ILiquidApproval, error) {
			event := new(ILiquidApproval)
			if err := _ILiquid.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ILiquidTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ILiquid contract.
		type ILiquidTransferIterator struct {
			Event *ILiquidTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ILiquidTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ILiquidTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ILiquidTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ILiquidTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ILiquidTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ILiquidTransfer represents a Transfer event raised by the ILiquid contract.
		type ILiquidTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_ILiquid *ILiquid) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ILiquidTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _ILiquid.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &ILiquidTransferIterator{contract: _ILiquid.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_ILiquid *ILiquid) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ILiquidTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _ILiquid.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ILiquidTransfer)
						if err := _ILiquid.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_ILiquid *ILiquid) ParseTransfer(log types.Log) (*ILiquidTransfer, error) {
			event := new(ILiquidTransfer)
			if err := _ILiquid.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IOracleMetaData contains all meta data concerning the IOracle contract.
var IOracleMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"33f98c77": "latestRoundData(string)",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"307de9b6": "vote(uint256,int256[],uint256)",
	},
}

// IOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use IOracleMetaData.ABI instead.
var IOracleABI = IOracleMetaData.ABI

// Deprecated: Use IOracleMetaData.Sigs instead.
// IOracleFuncSigs maps the 4-byte function signature to its string representation.
var IOracleFuncSigs = IOracleMetaData.Sigs

// IOracle is an auto generated Go binding around an Ethereum contract.
type IOracle struct {
	*contract
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_IOracle *IOracle) GetPrecision(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getPrecision")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracle) GetRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracle) GetRoundData(opts *runOptions, _round *big.Int, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracle) GetSymbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getSymbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracle) GetVotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracle) GetVoters(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getVoters")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracle) LatestRoundData(opts *runOptions, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracle) CallFinalize(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IOracle.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracle) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSymbols is a free data retrieval call for a paid mutator transaction binding the contract method 0x8d4f75d2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracle) CallSetSymbols(r *Runner, opts *runOptions, _symbols []string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setSymbols", _symbols)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetVoters is a free data retrieval call for a paid mutator transaction binding the contract method 0x845023f2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracle) CallSetVoters(r *Runner, opts *runOptions, _newVoters []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setVoters", _newVoters)
	r.revertSnapshot(snap)
	return consumed, err

}

// Vote is a free data retrieval call for a paid mutator transaction binding the contract method 0x307de9b6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracle) CallVote(r *Runner, opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "vote", _commit, _reports, _salt)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracle) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "finalize")
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracle) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setOperator", _operator)
	return consumed, err
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracle) SetSymbols(opts *runOptions, _symbols []string) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setSymbols", _symbols)
	return consumed, err
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracle) SetVoters(opts *runOptions, _newVoters []common.Address) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setVoters", _newVoters)
	return consumed, err
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracle) Vote(opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "vote", _commit, _reports, _salt)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IOracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the IOracle contract.
		type IOracleNewRoundIterator struct {
			Event *IOracleNewRound // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleNewRoundIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleNewRound)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleNewRound)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleNewRoundIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleNewRoundIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleNewRound represents a NewRound event raised by the IOracle contract.
		type IOracleNewRound struct {
			Round *big.Int;
			Height *big.Int;
			Timestamp *big.Int;
			VotePeriod *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
 		func (_IOracle *IOracle) FilterNewRound(opts *bind.FilterOpts) (*IOracleNewRoundIterator, error) {






			logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return &IOracleNewRoundIterator{contract: _IOracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
 		}

		// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_IOracle *IOracle) WatchNewRound(opts *bind.WatchOpts, sink chan<- *IOracleNewRound) (event.Subscription, error) {






			logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleNewRound)
						if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_IOracle *IOracle) ParseNewRound(log types.Log) (*IOracleNewRound, error) {
			event := new(IOracleNewRound)
			if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IOracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the IOracle contract.
		type IOracleNewSymbolsIterator struct {
			Event *IOracleNewSymbols // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleNewSymbolsIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleNewSymbols)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleNewSymbols)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleNewSymbolsIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleNewSymbolsIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleNewSymbols represents a NewSymbols event raised by the IOracle contract.
		type IOracleNewSymbols struct {
			Symbols []string;
			Round *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
 		func (_IOracle *IOracle) FilterNewSymbols(opts *bind.FilterOpts) (*IOracleNewSymbolsIterator, error) {




			logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return &IOracleNewSymbolsIterator{contract: _IOracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
 		}

		// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_IOracle *IOracle) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *IOracleNewSymbols) (event.Subscription, error) {




			logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleNewSymbols)
						if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_IOracle *IOracle) ParseNewSymbols(log types.Log) (*IOracleNewSymbols, error) {
			event := new(IOracleNewSymbols)
			if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IOracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the IOracle contract.
		type IOracleVotedIterator struct {
			Event *IOracleVoted // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleVotedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleVoted)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleVoted)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleVotedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleVotedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleVoted represents a Voted event raised by the IOracle contract.
		type IOracleVoted struct {
			Voter common.Address;
			Votes []*big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
 		func (_IOracle *IOracle) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*IOracleVotedIterator, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _IOracle.contract.FilterLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return &IOracleVotedIterator{contract: _IOracle.contract, event: "Voted", logs: logs, sub: sub}, nil
 		}

		// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_IOracle *IOracle) WatchVoted(opts *bind.WatchOpts, sink chan<- *IOracleVoted, _voter []common.Address) (event.Subscription, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _IOracle.contract.WatchLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleVoted)
						if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_IOracle *IOracle) ParseVoted(log types.Log) (*IOracleVoted, error) {
			event := new(IOracleVoted)
			if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IStabilizationMetaData contains all meta data concerning the IStabilization contract.
var IStabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
	},
}

// IStabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use IStabilizationMetaData.ABI instead.
var IStabilizationABI = IStabilizationMetaData.ABI

// Deprecated: Use IStabilizationMetaData.Sigs instead.
// IStabilizationFuncSigs maps the 4-byte function signature to its string representation.
var IStabilizationFuncSigs = IStabilizationMetaData.Sigs

// IStabilization is an auto generated Go binding around an Ethereum contract.
type IStabilization struct {
	*contract
}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilization) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStabilization.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilization) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStabilization.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilization) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _IStabilization.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilization) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _IStabilization.call(opts, "setOracle", oracle)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IStakableVestingMetaData contains all meta data concerning the IStakableVesting contract.
var IStakableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
}

// IStakableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakableVestingMetaData.ABI instead.
var IStakableVestingABI = IStakableVestingMetaData.ABI

// Deprecated: Use IStakableVestingMetaData.Sigs instead.
// IStakableVestingFuncSigs maps the 4-byte function signature to its string representation.
var IStakableVestingFuncSigs = IStakableVestingMetaData.Sigs

// IStakableVesting is an auto generated Go binding around an Ethereum contract.
type IStakableVesting struct {
	*contract
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_IStakableVesting *IStakableVesting) ContractTotalValue(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_IStakableVesting *IStakableVesting) GetBeneficiary(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "getBeneficiary")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakableVesting *IStakableVesting) GetContract(opts *runOptions) (ContractBaseContract, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "getContract")

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_IStakableVesting *IStakableVesting) GetLinkedValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_IStakableVesting *IStakableVesting) GetManagerContractAddress(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_IStakableVesting *IStakableVesting) LiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakableVesting *IStakableVesting) LockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_IStakableVesting *IStakableVesting) UnclaimedRewards(opts *runOptions, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "unclaimedRewards", _validator)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_IStakableVesting *IStakableVesting) UnclaimedRewards0(opts *runOptions) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "unclaimedRewards0")

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakableVesting *IStakableVesting) UnlockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_IStakableVesting *IStakableVesting) VestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "vestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_IStakableVesting *IStakableVesting) WithdrawableVestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IStakableVesting.call(opts, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_IStakableVesting *IStakableVesting) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IStakableVesting.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xe2bb8234.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_IStakableVesting *IStakableVesting) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "changeContractBeneficiary", _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_IStakableVesting *IStakableVesting) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards0 is a free data retrieval call for a paid mutator transaction binding the contract method 0xef5cfb8c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(address _validator) returns()
func (_IStakableVesting *IStakableVesting) CallClaimRewards0(r *Runner, opts *runOptions, _validator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "claimRewards0", _validator)
	r.revertSnapshot(snap)
	return consumed, err

}

// CreateContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae0a609.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_IStakableVesting *IStakableVesting) CallCreateContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x0b52f809.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllLNTN() returns()
func (_IStakableVesting *IStakableVesting) CallReleaseAllLNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "releaseAllLNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xb693fc09.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN() returns()
func (_IStakableVesting *IStakableVesting) CallReleaseAllNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "releaseAllNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x69d89575.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFunds() returns()
func (_IStakableVesting *IStakableVesting) CallReleaseFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "releaseFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3c6f2fa6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_IStakableVesting *IStakableVesting) CallReleaseLNTN(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "releaseLNTN", _validator, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xfc028e36.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_IStakableVesting *IStakableVesting) CallReleaseNTN(r *Runner, opts *runOptions, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "releaseNTN", _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x57895ca2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setManagerContract(address _managerContract) returns()
func (_IStakableVesting *IStakableVesting) CallSetManagerContract(r *Runner, opts *runOptions, _managerContract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "setManagerContract", _managerContract)
	r.revertSnapshot(snap)
	return consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_IStakableVesting *IStakableVesting) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IStakableVesting.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0xd06117ff.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFunds() returns()
func (_IStakableVesting *IStakableVesting) CallUpdateFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakableVesting.call(opts, "updateFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateFundsAndGetContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x46e1448d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakableVesting *IStakableVesting) CallUpdateFundsAndGetContract(r *Runner, opts *runOptions) (ContractBaseContract, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IStakableVesting.call(opts, "updateFundsAndGetContract")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_IStakableVesting *IStakableVesting) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_IStakableVesting *IStakableVesting) ChangeContractBeneficiary(opts *runOptions, _recipient common.Address) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "changeContractBeneficiary", _recipient)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_IStakableVesting *IStakableVesting) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "claimRewards")
	return consumed, err
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_IStakableVesting *IStakableVesting) ClaimRewards0(opts *runOptions, _validator common.Address) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "claimRewards0", _validator)
	return consumed, err
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_IStakableVesting *IStakableVesting) CreateContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_IStakableVesting *IStakableVesting) ReleaseAllLNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "releaseAllLNTN")
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_IStakableVesting *IStakableVesting) ReleaseAllNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "releaseAllNTN")
	return consumed, err
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_IStakableVesting *IStakableVesting) ReleaseFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "releaseFunds")
	return consumed, err
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_IStakableVesting *IStakableVesting) ReleaseLNTN(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "releaseLNTN", _validator, _amount)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_IStakableVesting *IStakableVesting) ReleaseNTN(opts *runOptions, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "releaseNTN", _amount)
	return consumed, err
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_IStakableVesting *IStakableVesting) SetManagerContract(opts *runOptions, _managerContract common.Address) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "setManagerContract", _managerContract)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_IStakableVesting *IStakableVesting) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_IStakableVesting *IStakableVesting) UpdateFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "updateFunds")
	return consumed, err
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakableVesting *IStakableVesting) UpdateFundsAndGetContract(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakableVesting.call(opts, "updateFundsAndGetContract")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IStakableVestingManagerMetaData contains all meta data concerning the IStakableVestingManager contract.
var IStakableVestingManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"stakableVestingLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"75b415b7": "stakableVestingLogicContract()",
	},
}

// IStakableVestingManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakableVestingManagerMetaData.ABI instead.
var IStakableVestingManagerABI = IStakableVestingManagerMetaData.ABI

// Deprecated: Use IStakableVestingManagerMetaData.Sigs instead.
// IStakableVestingManagerFuncSigs maps the 4-byte function signature to its string representation.
var IStakableVestingManagerFuncSigs = IStakableVestingManagerMetaData.Sigs

// IStakableVestingManager is an auto generated Go binding around an Ethereum contract.
type IStakableVestingManager struct {
	*contract
}

// StakableVestingLogicContract is a free data retrieval call binding the contract method 0x75b415b7.
//
// Solidity: function stakableVestingLogicContract() view returns(address)
func (_IStakableVestingManager *IStakableVestingManager) StakableVestingLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IStakableVestingManager.call(opts, "stakableVestingLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ISupplyControlMetaData contains all meta data concerning the ISupplyControl contract.
var ISupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
}

// ISupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use ISupplyControlMetaData.ABI instead.
var ISupplyControlABI = ISupplyControlMetaData.ABI

// Deprecated: Use ISupplyControlMetaData.Sigs instead.
// ISupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var ISupplyControlFuncSigs = ISupplyControlMetaData.Sigs

// ISupplyControl is an auto generated Go binding around an Ethereum contract.
type ISupplyControl struct {
	*contract
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControl) AvailableSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "availableSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControl) Stabilizer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "stabilizer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControl) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x44df8e70.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControl) CallBurn(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "burn")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControl) CallMint(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "mint", recipient, amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControl) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizer is a free data retrieval call for a paid mutator transaction binding the contract method 0xdb7f521a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControl) CallSetStabilizer(r *Runner, opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "setStabilizer", stabilizer_)
	r.revertSnapshot(snap)
	return consumed, err

}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControl) Burn(opts *runOptions) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "burn")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControl) Mint(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "mint", recipient, amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControl) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "setOperator", operator)
	return consumed, err
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControl) SetStabilizer(opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "setStabilizer", stabilizer_)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ISupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the ISupplyControl contract.
		type ISupplyControlBurnIterator struct {
			Event *ISupplyControlBurn // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ISupplyControlBurnIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ISupplyControlBurn)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ISupplyControlBurn)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ISupplyControlBurnIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ISupplyControlBurnIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ISupplyControlBurn represents a Burn event raised by the ISupplyControl contract.
		type ISupplyControlBurn struct {
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
 		func (_ISupplyControl *ISupplyControl) FilterBurn(opts *bind.FilterOpts) (*ISupplyControlBurnIterator, error) {



			logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return &ISupplyControlBurnIterator{contract: _ISupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
 		}

		// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_ISupplyControl *ISupplyControl) WatchBurn(opts *bind.WatchOpts, sink chan<- *ISupplyControlBurn) (event.Subscription, error) {



			logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ISupplyControlBurn)
						if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_ISupplyControl *ISupplyControl) ParseBurn(log types.Log) (*ISupplyControlBurn, error) {
			event := new(ISupplyControlBurn)
			if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ISupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the ISupplyControl contract.
		type ISupplyControlMintIterator struct {
			Event *ISupplyControlMint // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ISupplyControlMintIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ISupplyControlMint)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ISupplyControlMint)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ISupplyControlMintIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ISupplyControlMintIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ISupplyControlMint represents a Mint event raised by the ISupplyControl contract.
		type ISupplyControlMint struct {
			Recipient common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
 		func (_ISupplyControl *ISupplyControl) FilterMint(opts *bind.FilterOpts) (*ISupplyControlMintIterator, error) {




			logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return &ISupplyControlMintIterator{contract: _ISupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
 		}

		// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_ISupplyControl *ISupplyControl) WatchMint(opts *bind.WatchOpts, sink chan<- *ISupplyControlMint) (event.Subscription, error) {




			logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ISupplyControlMint)
						if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_ISupplyControl *ISupplyControl) ParseMint(log types.Log) (*ISupplyControlMint, error) {
			event := new(ISupplyControlMint)
			if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// InflationControllerMetaData contains all meta data concerning the InflationController contract.
var InflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"internalType\":\"structInflationController.Params\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Div_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Div_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Mul_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Mul_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
		"cff0ab96": "params()",
	},
	Bin: "0x608060405234801561001057600080fd5b506040516110c43803806110c483398101604081905261002f9161005c565b805160005560208101516001556040810151600255606081015160035560800151600455426005556100d9565b600060a0828403121561006e57600080fd5b60405160a081016001600160401b038111828210171561009e57634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b610fdc806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806392eff3cd1461003b578063cff0ab9614610061575b600080fd5b61004e610049366004610e97565b6100a3565b6040519081526020015b60405180910390f35b60005460015460025460035460045461007b949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610058565b6000806100bc600554856100b79190610edf565b610150565b905060006100d1600554856100b79190610edf565b60035490915081136100f1576100e88783836101da565b92505050610148565b60035482121561013857600061010d88846000600301546101da565b9050600061012188600060030154856102da565b905061012d8183610ef2565b945050505050610148565b6101438683836102da565b925050505b949350505050565b6000610168670de0b6b3a7640000600160ff1b610f1b565b821215610190576040516399474eeb60e01b8152600481018390526024015b60405180910390fd5b6101a9670de0b6b3a76400006001600160ff1b03610f1b565b8213156101cc57604051639d58109160e01b815260048101839052602401610187565b50670de0b6b3a76400000290565b6000806101f46000600201546101f06000610150565b1490565b156102305760005460015461022991906102249061021c9061021690846102fe565b8861030d565b6003546103d8565b610485565b90506102a2565b600061024461021c6000600201548761030d565b9050600061027c6102666102578461049a565b6102616001610150565b6102fe565b61027761025760006002015461049a565b6103d8565b60005460015491925061029d916102249061029790836102fe565b8461030d565b925050505b60006102c36102b9836102b489610150565b61030d565b6102b486886102fe565b90506102ce816104ef565b925050505b9392505050565b60006101486102f66102ee6102b987610150565b60045461030d565b6104ef565b90565b60006102d36102fb8385610f57565b60008282600160ff1b8214806103265750600160ff1b81145b156103445760405163a6070c2560e01b815260040160405180910390fd5b60008060008412610355578361035a565b836000035b91506000831261036a578261036f565b826000035b9050600061037d8383610503565b90506001600160ff1b038111156103b15760405163120b5b4360e01b81526004810189905260248101889052604401610187565b600019858518136103cb816103c7578260000390565b8290565b9998505050505050505050565b60008282600160ff1b8214806103f15750600160ff1b81145b1561040f576040516309fe2b4560e41b815260040160405180910390fd5b600080600084126104205783610425565b836000035b915060008312610435578261043a565b826000035b9050600061045183670de0b6b3a7640000846105b9565b90506001600160ff1b038111156103b15760405163d49c26b360e01b81526004810189905260248101889052604401610187565b60006102d36102fb8385610f7e565b92915050565b600081680736ea4425c11ac6308113156104ca5760405163ca7ec0c560e01b815260048101849052602401610187565b6714057b7ef767814f81026101486104ea670de0b6b3a7640000835b0590565b61068d565b6000610494670de0b6b3a764000083610f1b565b60008080600019848609848602925082811083820303915050806000036105375750670de0b6b3a764000090049050610494565b670de0b6b3a7640000811061056957604051635173648d60e01b81526004810186905260248101859052604401610187565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b60008080600019858709858702925082811083820303915050806000036105f3578382816105e9576105e9610f05565b04925050506102d3565b83811061062457604051630c740aef60e31b8152600481018790526024810186905260448101859052606401610187565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081818112156106ea5768033dd1780914b97114198112156106b35750600092915050565b6106e36106c66102fb6104ea8460000390565b6ec097ce7bc90715b34b9f1000000000816104e6576104e6610f05565b9150610731565b680a688906bd8affffff81131561071657604051626c1a0560e31b815260048101849052602401610187565b670de0b6b3a7640000604082901b056101486102fb82610737565b50919050565b600160bf1b67ff000000000000008216156108445767800000000000000082161561076b5768016a09e667f3bcc9090260401c5b67400000000000000082161561078a576801306fe0a31b7152df0260401c5b6720000000000000008216156107a9576801172b83c7d517adce0260401c5b6710000000000000008216156107c85768010b5586cf9890f62a0260401c5b6708000000000000008216156107e7576801059b0d31585743ae0260401c5b67040000000000000082161561080657680102c9a3e778060ee70260401c5b6702000000000000008216156108255768010163da9fb33356d80260401c5b67010000000000000082161561084457680100b1afa5abcbed610260401c5b66ff0000000000008216156109435766800000000000008216156108715768010058c86da1c09ea20260401c5b664000000000000082161561088f576801002c605e2e8cec500260401c5b66200000000000008216156108ad57680100162f3904051fa10260401c5b66100000000000008216156108cb576801000b175effdc76ba0260401c5b66080000000000008216156108e957680100058ba01fb9f96d0260401c5b66040000000000008216156109075768010002c5cc37da94920260401c5b6602000000000000821615610925576801000162e525ee05470260401c5b66010000000000008216156109435768010000b17255775c040260401c5b65ff0000000000821615610a39576580000000000082161561096e576801000058b91b5bc9ae0260401c5b6540000000000082161561098b57680100002c5c89d5ec6d0260401c5b652000000000008216156109a85768010000162e43f4f8310260401c5b651000000000008216156109c557680100000b1721bcfc9a0260401c5b650800000000008216156109e25768010000058b90cf1e6e0260401c5b650400000000008216156109ff576801000002c5c863b73f0260401c5b65020000000000821615610a1c57680100000162e430e5a20260401c5b65010000000000821615610a39576801000000b1721835510260401c5b64ff00000000821615610b2657648000000000821615610a6257680100000058b90c0b490260401c5b644000000000821615610a7e5768010000002c5c8601cc0260401c5b642000000000821615610a9a576801000000162e42fff00260401c5b641000000000821615610ab65768010000000b17217fbb0260401c5b640800000000821615610ad2576801000000058b90bfce0260401c5b640400000000821615610aee57680100000002c5c85fe30260401c5b640200000000821615610b0a5768010000000162e42ff10260401c5b640100000000821615610b2657680100000000b17217f80260401c5b63ff000000821615610c0a576380000000821615610b4d5768010000000058b90bfc0260401c5b6340000000821615610b68576801000000002c5c85fe0260401c5b6320000000821615610b8357680100000000162e42ff0260401c5b6310000000821615610b9e576801000000000b17217f0260401c5b6308000000821615610bb957680100000000058b90c00260401c5b6304000000821615610bd45768010000000002c5c8600260401c5b6302000000821615610bef576801000000000162e4300260401c5b6301000000821615610c0a5768010000000000b172180260401c5b62ff0000821615610ce55762800000821615610c2f576801000000000058b90c0260401c5b62400000821615610c4957680100000000002c5c860260401c5b62200000821615610c635768010000000000162e430260401c5b62100000821615610c7d57680100000000000b17210260401c5b62080000821615610c975768010000000000058b910260401c5b62040000821615610cb1576801000000000002c5c80260401c5b62020000821615610ccb57680100000000000162e40260401c5b62010000821615610ce5576801000000000000b1720260401c5b61ff00821615610db757618000821615610d0857680100000000000058b90260401c5b614000821615610d215768010000000000002c5d0260401c5b612000821615610d3a576801000000000000162e0260401c5b611000821615610d535768010000000000000b170260401c5b610800821615610d6c576801000000000000058c0260401c5b610400821615610d8557680100000000000002c60260401c5b610200821615610d9e57680100000000000001630260401c5b610100821615610db757680100000000000000b10260401c5b60ff821615610e80576080821615610dd857680100000000000000590260401c5b6040821615610df0576801000000000000002c0260401c5b6020821615610e0857680100000000000000160260401c5b6010821615610e20576801000000000000000b0260401c5b6008821615610e3857680100000000000000060260401c5b6004821615610e5057680100000000000000030260401c5b6002821615610e6857680100000000000000010260401c5b6001821615610e8057680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b60008060008060808587031215610ead57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561049457610494610ec9565b8082018082111561049457610494610ec9565b634e487b7160e01b600052601260045260246000fd5b600082610f3857634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610f5257610f52610ec9565b500590565b8181036000831280158383131683831282161715610f7757610f77610ec9565b5092915050565b8082018281126000831280158216821582161715610f9e57610f9e610ec9565b50509291505056fea2646970667358221220504f3314895e62f29ab0c4b64de9dfae65546185267645a44e47d1b435d782dc64736f6c63430008150033",
}

// InflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use InflationControllerMetaData.ABI instead.
var InflationControllerABI = InflationControllerMetaData.ABI

// Deprecated: Use InflationControllerMetaData.Sigs instead.
// InflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var InflationControllerFuncSigs = InflationControllerMetaData.Sigs

// InflationControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InflationControllerMetaData.Bin instead.
var InflationControllerBin = InflationControllerMetaData.Bin

// DeployInflationController deploys a new Ethereum contract, binding an instance of InflationController to it.
func (r *Runner) DeployInflationController(opts *runOptions, _params InflationControllerParams) (common.Address, uint64, *InflationController, error) {
	parsed, err := InflationControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(InflationControllerBin), _params)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &InflationController{contract: c}, nil
}

// InflationController is an auto generated Go binding around an Ethereum contract.
type InflationController struct {
	*contract
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationController) CalculateSupplyDelta(opts *runOptions, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _InflationController.call(opts, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationController) Params(opts *runOptions) (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, uint64, error) {
	out, consumed, err := _InflationController.call(opts, "params")

	outstruct := new(struct {
		InflationRateInitial      *big.Int
		InflationRateTransition   *big.Int
		InflationCurveConvexity   *big.Int
		InflationTransitionPeriod *big.Int
		InflationReserveDecayRate *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InflationRateInitial = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.InflationRateTransition = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.InflationCurveConvexity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.InflationTransitionPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.InflationReserveDecayRate = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidLogicMetaData contains all meta data concerning the LiquidLogic contract.
var LiquidLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
	Bin: "",
}

// LiquidLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidLogicMetaData.ABI instead.
var LiquidLogicABI = LiquidLogicMetaData.ABI

// Deprecated: Use LiquidLogicMetaData.Sigs instead.
// LiquidLogicFuncSigs maps the 4-byte function signature to its string representation.
var LiquidLogicFuncSigs = LiquidLogicMetaData.Sigs

// LiquidLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidLogicMetaData.Bin instead.
var LiquidLogicBin = LiquidLogicMetaData.Bin

// DeployLiquidLogic deploys a new Ethereum contract, binding an instance of LiquidLogic to it.
func (r *Runner) DeployLiquidLogic(opts *runOptions) (common.Address, uint64, *LiquidLogic, error) {
	parsed, err := LiquidLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidLogicBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidLogic{contract: c}, nil
}

// LiquidLogic is an auto generated Go binding around an Ethereum contract.
type LiquidLogic struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_LiquidLogic *LiquidLogic) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogic) FEEFACTORUNITRECIP(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogic) Allowance(opts *runOptions, _owner common.Address, _spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "allowance", _owner, _spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) BalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "balanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidLogic *LiquidLogic) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogic) GetCommissionRate(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_LiquidLogic *LiquidLogic) GetTreasury(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getTreasury")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogic) GetTreasuryUnclaimedATN(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_LiquidLogic *LiquidLogic) GetValidator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getValidator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) LockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogic) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogic) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogic) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidLogic *LiquidLogic) UnclaimedRewards(opts *runOptions, _account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "unclaimedRewards", _account)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) UnlockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) CallApprove(r *Runner, opts *runOptions, _spender common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "approve", _spender, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallBurn(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "burn", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogic) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimTreasuryATN is a free data retrieval call for a paid mutator transaction binding the contract method 0xbd96102f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogic) CallClaimTreasuryATN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "claimTreasuryATN")
	r.revertSnapshot(snap)
	return consumed, err

}

// Lock is a free data retrieval call for a paid mutator transaction binding the contract method 0x282d3fdf.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallLock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "lock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallMint(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "mint", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Redistribute is a free data retrieval call for a paid mutator transaction binding the contract method 0xa0ce552d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogic) CallRedistribute(r *Runner, opts *runOptions, _ntnReward *big.Int) (*big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "redistribute", _ntnReward)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SetCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x19fac8fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogic) CallSetCommissionRate(r *Runner, opts *runOptions, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "setCommissionRate", _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogic) CallTransfer(r *Runner, opts *runOptions, _to common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "transfer", _to, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unlock is a free data retrieval call for a paid mutator transaction binding the contract method 0x7eee288d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallUnlock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "unlock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) Approve(opts *runOptions, _spender common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "approve", _spender, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Burn(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "burn", _account, _amount)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogic) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "claimRewards")
	return consumed, err
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogic) ClaimTreasuryATN(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "claimTreasuryATN")
	return consumed, err
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Lock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "lock", _account, _amount)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Mint(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "mint", _account, _amount)
	return consumed, err
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogic) Redistribute(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "redistribute", _ntnReward)
	return consumed, err
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogic) SetCommissionRate(opts *runOptions, _rate *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "setCommissionRate", _rate)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogic) Transfer(opts *runOptions, _to common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "transfer", _to, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Unlock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "unlock", _account, _amount)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogic) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogic) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// LiquidLogicApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LiquidLogic contract.
		type LiquidLogicApprovalIterator struct {
			Event *LiquidLogicApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *LiquidLogicApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(LiquidLogicApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(LiquidLogicApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *LiquidLogicApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *LiquidLogicApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// LiquidLogicApproval represents a Approval event raised by the LiquidLogic contract.
		type LiquidLogicApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_LiquidLogic *LiquidLogic) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LiquidLogicApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &LiquidLogicApprovalIterator{contract: _LiquidLogic.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_LiquidLogic *LiquidLogic) WatchApproval(opts *bind.WatchOpts, sink chan<- *LiquidLogicApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(LiquidLogicApproval)
						if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_LiquidLogic *LiquidLogic) ParseApproval(log types.Log) (*LiquidLogicApproval, error) {
			event := new(LiquidLogicApproval)
			if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// LiquidLogicTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LiquidLogic contract.
		type LiquidLogicTransferIterator struct {
			Event *LiquidLogicTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *LiquidLogicTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(LiquidLogicTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(LiquidLogicTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *LiquidLogicTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *LiquidLogicTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// LiquidLogicTransfer represents a Transfer event raised by the LiquidLogic contract.
		type LiquidLogicTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_LiquidLogic *LiquidLogic) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidLogicTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &LiquidLogicTransferIterator{contract: _LiquidLogic.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_LiquidLogic *LiquidLogic) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LiquidLogicTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(LiquidLogicTransfer)
						if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_LiquidLogic *LiquidLogic) ParseTransfer(log types.Log) (*LiquidLogicTransfer, error) {
			event := new(LiquidLogicTransfer)
			if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// LiquidStateMetaData contains all meta data concerning the LiquidState contract.
var LiquidStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220ed3dd022bc50b6d41fc96c42630ae6240b5c3fe2e3df8709c69d5a0926a5d93e64736f6c63430008150033",
}

// LiquidStateABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateMetaData.ABI instead.
var LiquidStateABI = LiquidStateMetaData.ABI

// LiquidStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateMetaData.Bin instead.
var LiquidStateBin = LiquidStateMetaData.Bin

// DeployLiquidState deploys a new Ethereum contract, binding an instance of LiquidState to it.
func (r *Runner) DeployLiquidState(opts *runOptions, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, uint64, *LiquidState, error) {
	parsed, err := LiquidStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStateBin), _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidState{contract: c}, nil
}

// LiquidState is an auto generated Go binding around an Ethereum contract.
type LiquidState struct {
	*contract
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidState) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidState.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidState *LiquidState) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidState.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidStateTestMetaData contains all meta data concerning the LiquidStateTest contract.
var LiquidStateTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"96f18a32": "liquidLogicContract()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161063738038061063783398101604081905261002f916101b9565b8484848484806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610072573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009691906102a9565b8311156100a257600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e89083906020016102c2565b604051602081830303815290604052600a90816101059190610378565b508160405160200161011791906102c2565b604051602081830303815290604052600b90816101349190610378565b5050601080546001600160a01b0319163317905550610437975050505050505050565b6001600160a01b038116811461016c57600080fd5b50565b805161017a81610157565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101b0578181015183820152602001610198565b50506000910152565b600080600080600060a086880312156101d157600080fd5b85516101dc81610157565b60208701519095506101ed81610157565b6040870151606088015191955093506001600160401b038082111561021157600080fd5b818801915088601f83011261022557600080fd5b8151818111156102375761023761017f565b604051601f8201601f19908116603f0116810190838211818310171561025f5761025f61017f565b816040528281528b602084870101111561027857600080fd5b610289836020830160208801610195565b809650505050505061029d6080870161016f565b90509295509295909350565b6000602082840312156102bb57600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102e2816005850160208701610195565b9190910160050192915050565b600181811c9082168061030357607f821691505b60208210810361032357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561037357600081815260208120601f850160051c810160208610156103505750805b601f850160051c820191505b8181101561036f5782815560010161035c565b5050505b505050565b81516001600160401b038111156103915761039161017f565b6103a58161039f84546102ef565b84610329565b602080601f8311600181146103da57600084156103c25750858301515b600019600386901b1c1916600185901b17855561036f565b600085815260208120601f198616915b82811015610409578886015182559484019460019091019084016103ea565b50858210156104275787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101f1806104466000396000f3fe6080604052600436106100225760003560e01c806396f18a321461004d57610042565b366100425761004061003261007e565b6001600160a01b0316610159565b005b61004061003261007e565b34801561005957600080fd5b5061006261017c565b6040516001600160a01b03909116815260200160405180910390f35b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f8919061018b565b90506001600160a01b0381166101545760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610176573d6000fd5b503d6000f35b600061018661007e565b905090565b60006020828403121561019d57600080fd5b81516001600160a01b03811681146101b457600080fd5b939250505056fea26469706673582212200dda394b378aa9a8077144efebbf9cc4a1863711249397b449919129631a619e64736f6c63430008150033",
}

// LiquidStateTestABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateTestMetaData.ABI instead.
var LiquidStateTestABI = LiquidStateTestMetaData.ABI

// Deprecated: Use LiquidStateTestMetaData.Sigs instead.
// LiquidStateTestFuncSigs maps the 4-byte function signature to its string representation.
var LiquidStateTestFuncSigs = LiquidStateTestMetaData.Sigs

// LiquidStateTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateTestMetaData.Bin instead.
var LiquidStateTestBin = LiquidStateTestMetaData.Bin

// DeployLiquidStateTest deploys a new Ethereum contract, binding an instance of LiquidStateTest to it.
func (r *Runner) DeployLiquidStateTest(opts *runOptions, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, uint64, *LiquidStateTest, error) {
	parsed, err := LiquidStateTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStateTestBin), _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidStateTest{contract: c}, nil
}

// LiquidStateTest is an auto generated Go binding around an Ethereum contract.
type LiquidStateTest struct {
	*contract
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidStateTest *LiquidStateTest) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidStateTest.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidStateTest *LiquidStateTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidStateTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidStateTest *LiquidStateTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidStateTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidStorageMetaData contains all meta data concerning the LiquidStorage contract.
var LiquidStorageMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ac0adc35633a4f95c07329863717c7f6adcada22a643f9064bf5bece0a6635a064736f6c63430008150033",
}

// LiquidStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStorageMetaData.ABI instead.
var LiquidStorageABI = LiquidStorageMetaData.ABI

// LiquidStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStorageMetaData.Bin instead.
var LiquidStorageBin = LiquidStorageMetaData.Bin

// DeployLiquidStorage deploys a new Ethereum contract, binding an instance of LiquidStorage to it.
func (r *Runner) DeployLiquidStorage(opts *runOptions) (common.Address, uint64, *LiquidStorage, error) {
	parsed, err := LiquidStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStorageBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidStorage{contract: c}, nil
}

// LiquidStorage is an auto generated Go binding around an Ethereum contract.
type LiquidStorage struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// NonStakableVestingMetaData contains all meta data concerning the NonStakableVesting contract.
var NonStakableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getExpiredFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getScheduleTracker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unsubscribedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredFromContract\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"structNonStakableVesting.ScheduleTracker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"releaseAllFundsForTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"releaseExpiredFundsForTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"a803c8f4": "getExpiredFunds(address,uint256)",
		"80e53d93": "getScheduleTracker(uint256)",
		"fca78d11": "getUniqueContractID(address,uint256)",
		"bc47a074": "newContract(address,uint256,uint256,uint256)",
		"5558c922": "releaseAllFundsForTreasury(uint256)",
		"3577a8f8": "releaseAllNTN(uint256)",
		"c3aeff1f": "releaseExpiredFundsForTreasury(uint256)",
		"81170628": "releaseNTN(uint256,uint256)",
		"635bf933": "totalContracts(address)",
		"25078446": "vestedFunds(address,uint256)",
		"def25f38": "withdrawableVestedFunds(address,uint256)",
	},
	Bin: "0x608060405234801561001057600080fd5b50604051611ab6380380611ab683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611a23806100936000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a803c8f41161008c578063bc47a07411610066578063bc47a0741461021a578063c3aeff1f1461022d578063def25f3814610240578063fca78d111461025357600080fd5b8063a803c8f4146101d4578063a9f45b62146101e7578063aad55726146101fa57600080fd5b80635558c922116100c85780635558c9221461014e578063635bf9331461016157806380e53d931461018a57806381170628146101c157600080fd5b8063213fe2b7146100ef57806325078446146101185780633577a8f814610139575b600080fd5b6101026100fd366004611692565b610266565b60405161010f91906116af565b60405180910390f35b61012b610126366004611734565b6103a7565b60405190815260200161010f565b61014c610147366004611760565b6103c4565b005b61014c61015c366004611760565b610409565b61012b61016f366004611692565b6001600160a01b031660009081526001602052604090205490565b61019d610198366004611760565b610631565b6040805182518152602080840151908201529181015115159082015260600161010f565b61014c6101cf366004611779565b610695565b61012b6101e2366004611734565b61072b565b61014c6101f536600461179b565b61075c565b61020d610208366004611734565b610838565b60405161010f91906117dd565b61014c610228366004611822565b6108be565b61014c61023b366004611760565b610ccc565b61012b61024e366004611734565b610e64565b61012b610261366004611734565b610e78565b6001600160a01b038116600090815260016020526040812080546060929067ffffffffffffffff81111561029c5761029c61185d565b6040519080825280602002602001820160405280156102d557816020015b6102c26115e2565b8152602001906001900390816102ba5790505b50905060005b825481101561039f5760048382815481106102f8576102f8611873565b90600052602060002001548154811061031357610313611873565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152825183908390811061038157610381611873565b602002602001018190525080806103979061189f565b9150506102db565b509392505050565b60006103bb6103b68484610e78565b610eff565b90505b92915050565b60006103d03383610e78565b9050610404600482815481106103e8576103e8611873565b90600052602060002090600602016103ff83610ffc565b6110c3565b505050565b60008054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e91906118b8565b6001600160a01b0316336001600160a01b0316146104e35760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207472656173757279206163636f756e74000060448201526064015b60405180910390fd5b60008054604051633932626d60e11b8152306004820152602481018490526001600160a01b0390911690637264c4da9060440160a060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055791906118d5565b90508060600151816040015161056d9190611953565b816080015110156105d05760405162461bcd60e51b815260206004820152602760248201527f7363686564756c6520746f74616c206475726174696f6e206e6f7420657870696044820152661c9959081e595d60ca1b60648201526084016104da565b6000828152600360205260409020600281015460ff16610605576106058183600001518155600201805460ff19166001179055565b610622338260010154836000015461061d9190611953565b611151565b60008082556001909101555050565b610657604051806060016040528060008152602001600081526020016000151581525090565b506000908152600360209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b60006106a13384610e78565b90506106ac81610ffc565b8211156106fb5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f75676820756e6c6f636b65642066756e64730000000000000060448201526064016104da565b6107256004828154811061071157610711611873565b9060005260206000209060060201836110c3565b50505050565b600060056107398484610e78565b8154811061074957610749611873565b9060005260206000200154905092915050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906118b8565b6001600160a01b03161461081f5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016104da565b600061082b8484610e78565b905061072584828461120e565b6108406115e2565b600461084c8484610e78565b8154811061085c5761085c611873565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906118b8565b6001600160a01b0316146109815760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016104da565b60008054604051633932626d60e11b8152306004820152602481018590526001600160a01b0390911690637264c4da9060440160a060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f591906118d5565b600084815260036020526040902060028101549192509060ff16610a2e57610a2e8183600001518155600201805460ff19166001179055565b8054851115610aa55760405162461bcd60e51b815260206004820152603860248201527f6e6f7420656e6f7567682066756e647320746f206372656174652061206e657760448201527f20636f6e747261637420756e646572207363686564756c65000000000000000060648201526084016104da565b6000610ab08761139f565b6004549091508114610afa5760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b60448201526064016104da565b6000610b0f84602001518560000151896113e6565b90506000610b3389610b21848b611966565b87604001518989606001516000611405565b6004805460018082018355600092835283517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6006938402908101919091556020808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8301556040808701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d84015560608701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015560808701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f84015560a08701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a0909301805460ff1916931515939093179092556005805493840190557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0909201879055878452919052812089905585549192508991869190610ca1908490611966565b9250508190555081846001016000828254610cbc9190611953565b9091555050505050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4191906118b8565b6001600160a01b0316336001600160a01b031614610da15760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207472656173757279206163636f756e74000060448201526064016104da565b6000818152600360205260409020600281015460ff16610e4b5760008054604051633932626d60e11b8152306004820152602481018590526001600160a01b0390911690637264c4da9060440160a060405180830381865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f91906118d5565b519050610e4982828155600201805460ff19166001179055565b505b610e59338260010154611151565b600060019091015550565b60006103bb610e738484610e78565b610ffc565b6001600160a01b0382166000908152600160205260408120548210610ed55760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b60448201526064016104da565b6001600160a01b038316600090815260016020526040902080548390811061074957610749611873565b6000805482825260066020526040808320549051633932626d60e11b8152306004820152602481019190915282916001600160a01b031690637264c4da9060440160a060405180830381865afa158015610f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8191906118d5565b905060058381548110610f9657610f96611873565b906000526020600020015460048481548110610fb457610fb4611873565b906000526020600020906006020160010154610fe183602001518460000151610fdc88611541565b6113e6565b610feb9190611966565b610ff59190611966565b9392505050565b6000806004838154811061101257611012611873565b9060005260206000209060060201905060008054906101000a90046001600160a01b03166001600160a01b03166389c614b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611979565b816003015482600201546110ab9190611953565b11156110ba5750600092915050565b610ff583610eff565b81546000908211156110f15782546110db9083611966565b90506110ec833385600001546115a3565b611102565b8115611102576111028333846115a3565b6000546001600160a01b0316337feed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb61113a8486611966565b60405190815260200160405180910390a392915050565b6000805460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190611992565b9050806104045760405162461bcd60e51b8152602060048201526013602482015272139513881b9bdd081d1c985b9cd9995c9c9959606a1b60448201526064016104da565b6001600160a01b03831660009081526001602081905260408220805490929161123691611966565b67ffffffffffffffff81111561124e5761124e61185d565b604051908082528060200260200182016040528015611277578160200160208202803683370190505b5090506000805b8354811015611305578584828154811061129a5761129a611873565b906000526020600020015403156112f3578381815481106112bd576112bd611873565b90600052602060002001548383806112d49061189f565b9450815181106112e6576112e6611873565b6020026020010181815250505b806112fd8161189f565b91505061127e565b506001600160a01b0386166000908152600160209081526040909120835161132f9285019061161a565b506001600160a01b03808516600081815260016020818152604080842080549384018155845292200188905551918816917f893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf7389061138f9089815260200190565b60405180910390a3505050505050565b600280546001600160a01b0383166000908152600160208181526040832080549283018155835282200182905582549092836113da8361189f565b90915550909392505050565b6000826113f383866119b4565b6113fd91906119cb565b949350505050565b61140d6115e2565b6001600160a01b03871661146e5760405162461bcd60e51b815260206004820152602260248201527f62656e65666963696172792063616e6e6f74206265207a65726f206164647265604482015261737360f01b60648201526084016104da565b600086116114be5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f7369746976650000000000000060448201526064016104da565b83831161150d5760405162461bcd60e51b815260206004820152601e60248201527f656e64206d7573742062652067726561746572207468616e20636c696666000060448201526064016104da565b506040805160c0810182529586526000602087015285019390935260608401919091526080830152151560a0820152919050565b6000806004838154811061155757611557611873565b906000526020600020906006020190506005838154811061157a5761157a611873565b9060005260206000200154816001015482600001546115999190611953565b610ff59190611953565b808360000160008282546115b79190611966565b92505081905550808360010160008282546115d29190611953565b9091555061040490508282611151565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b828054828255906000526020600020908101928215611655579160200282015b8281111561165557825182559160200191906001019061163a565b50611661929150611665565b5090565b5b808211156116615760008155600101611666565b6001600160a01b038116811461168f57600080fd5b50565b6000602082840312156116a457600080fd5b8135610ff58161167a565b6020808252825182820181905260009190848201906040850190845b8181101561172857611715838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c092909201916001016116cb565b50909695505050505050565b6000806040838503121561174757600080fd5b82356117528161167a565b946020939093013593505050565b60006020828403121561177257600080fd5b5035919050565b6000806040838503121561178c57600080fd5b50508035926020909101359150565b6000806000606084860312156117b057600080fd5b83356117bb8161167a565b92506020840135915060408401356117d28161167a565b809150509250925092565b60c081016103be8284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b6000806000806080858703121561183857600080fd5b84356118438161167a565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016118b1576118b1611889565b5060010190565b6000602082840312156118ca57600080fd5b8151610ff58161167a565b600060a082840312156118e757600080fd5b60405160a0810181811067ffffffffffffffff8211171561191857634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b808201808211156103be576103be611889565b818103818111156103be576103be611889565b60006020828403121561198b57600080fd5b5051919050565b6000602082840312156119a457600080fd5b81518015158114610ff557600080fd5b80820281158282048414176103be576103be611889565b6000826119e857634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212202d103490344bf4561ca606e87039fc7592d8ad17bda599a6c2a4b6650416418f64736f6c63430008150033",
}

// NonStakableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use NonStakableVestingMetaData.ABI instead.
var NonStakableVestingABI = NonStakableVestingMetaData.ABI

// Deprecated: Use NonStakableVestingMetaData.Sigs instead.
// NonStakableVestingFuncSigs maps the 4-byte function signature to its string representation.
var NonStakableVestingFuncSigs = NonStakableVestingMetaData.Sigs

// NonStakableVestingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NonStakableVestingMetaData.Bin instead.
var NonStakableVestingBin = NonStakableVestingMetaData.Bin

// DeployNonStakableVesting deploys a new Ethereum contract, binding an instance of NonStakableVesting to it.
func (r *Runner) DeployNonStakableVesting(opts *runOptions, _autonity common.Address) (common.Address, uint64, *NonStakableVesting, error) {
	parsed, err := NonStakableVestingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(NonStakableVestingBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &NonStakableVesting{contract: c}, nil
}

// NonStakableVesting is an auto generated Go binding around an Ethereum contract.
type NonStakableVesting struct {
	*contract
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakableVesting *NonStakableVesting) GetContract(opts *runOptions, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakableVesting *NonStakableVesting) GetContracts(opts *runOptions, _beneficiary common.Address) ([]ContractBaseContract, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)
	return out0, consumed, err

}

// GetExpiredFunds is a free data retrieval call binding the contract method 0xa803c8f4.
//
// Solidity: function getExpiredFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) GetExpiredFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getExpiredFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetScheduleTracker is a free data retrieval call binding the contract method 0x80e53d93.
//
// Solidity: function getScheduleTracker(uint256 _id) view returns((uint256,uint256,bool))
func (_NonStakableVesting *NonStakableVesting) GetScheduleTracker(opts *runOptions, _id *big.Int) (NonStakableVestingScheduleTracker, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getScheduleTracker", _id)

	if err != nil {
		return *new(NonStakableVestingScheduleTracker), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(NonStakableVestingScheduleTracker)).(*NonStakableVestingScheduleTracker)
	return out0, consumed, err

}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) GetUniqueContractID(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x25078446.
//
// Solidity: function vestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) VestedFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "vestedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0xdef25f38.
//
// Solidity: function withdrawableVestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakableVesting *NonStakableVesting) WithdrawableVestedFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakableVesting.call(opts, "withdrawableVestedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9f45b62.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakableVesting *NonStakableVesting) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// NewContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xbc47a074.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID, uint256 _cliffDuration) returns()
func (_NonStakableVesting *NonStakableVesting) CallNewContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int, _cliffDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "newContract", _beneficiary, _amount, _scheduleID, _cliffDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllFundsForTreasury is a free data retrieval call for a paid mutator transaction binding the contract method 0x5558c922.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVesting) CallReleaseAllFundsForTreasury(r *Runner, opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "releaseAllFundsForTreasury", _scheduleID)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3577a8f8.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_NonStakableVesting *NonStakableVesting) CallReleaseAllNTN(r *Runner, opts *runOptions, _id *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "releaseAllNTN", _id)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseExpiredFundsForTreasury is a free data retrieval call for a paid mutator transaction binding the contract method 0xc3aeff1f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseExpiredFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVesting) CallReleaseExpiredFundsForTreasury(r *Runner, opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "releaseExpiredFundsForTreasury", _scheduleID)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x81170628.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_NonStakableVesting *NonStakableVesting) CallReleaseNTN(r *Runner, opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakableVesting.call(opts, "releaseNTN", _id, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakableVesting *NonStakableVesting) ChangeContractBeneficiary(opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	return consumed, err
}

// NewContract is a paid mutator transaction binding the contract method 0xbc47a074.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID, uint256 _cliffDuration) returns()
func (_NonStakableVesting *NonStakableVesting) NewContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int, _cliffDuration *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "newContract", _beneficiary, _amount, _scheduleID, _cliffDuration)
	return consumed, err
}

// ReleaseAllFundsForTreasury is a paid mutator transaction binding the contract method 0x5558c922.
//
// Solidity: function releaseAllFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVesting) ReleaseAllFundsForTreasury(opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "releaseAllFundsForTreasury", _scheduleID)
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_NonStakableVesting *NonStakableVesting) ReleaseAllNTN(opts *runOptions, _id *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "releaseAllNTN", _id)
	return consumed, err
}

// ReleaseExpiredFundsForTreasury is a paid mutator transaction binding the contract method 0xc3aeff1f.
//
// Solidity: function releaseExpiredFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakableVesting *NonStakableVesting) ReleaseExpiredFundsForTreasury(opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "releaseExpiredFundsForTreasury", _scheduleID)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_NonStakableVesting *NonStakableVesting) ReleaseNTN(opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	_, consumed, err := _NonStakableVesting.call(opts, "releaseNTN", _id, _amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// NonStakableVestingBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the NonStakableVesting contract.
		type NonStakableVestingBeneficiaryChangedIterator struct {
			Event *NonStakableVestingBeneficiaryChanged // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *NonStakableVestingBeneficiaryChangedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(NonStakableVestingBeneficiaryChanged)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(NonStakableVestingBeneficiaryChanged)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *NonStakableVestingBeneficiaryChangedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *NonStakableVestingBeneficiaryChangedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// NonStakableVestingBeneficiaryChanged represents a BeneficiaryChanged event raised by the NonStakableVesting contract.
		type NonStakableVestingBeneficiaryChanged struct {
			NewBeneficiary common.Address;
			OldBeneficiary common.Address;
			ContractID *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
 		func (_NonStakableVesting *NonStakableVesting) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*NonStakableVestingBeneficiaryChangedIterator, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _NonStakableVesting.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return &NonStakableVestingBeneficiaryChangedIterator{contract: _NonStakableVesting.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
 		}

		// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_NonStakableVesting *NonStakableVesting) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *NonStakableVestingBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _NonStakableVesting.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(NonStakableVestingBeneficiaryChanged)
						if err := _NonStakableVesting.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_NonStakableVesting *NonStakableVesting) ParseBeneficiaryChanged(log types.Log) (*NonStakableVestingBeneficiaryChanged, error) {
			event := new(NonStakableVestingBeneficiaryChanged)
			if err := _NonStakableVesting.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// NonStakableVestingFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the NonStakableVesting contract.
		type NonStakableVestingFundsReleasedIterator struct {
			Event *NonStakableVestingFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *NonStakableVestingFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(NonStakableVestingFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(NonStakableVestingFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *NonStakableVestingFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *NonStakableVestingFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// NonStakableVestingFundsReleased represents a FundsReleased event raised by the NonStakableVesting contract.
		type NonStakableVestingFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_NonStakableVesting *NonStakableVesting) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*NonStakableVestingFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _NonStakableVesting.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &NonStakableVestingFundsReleasedIterator{contract: _NonStakableVesting.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_NonStakableVesting *NonStakableVesting) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *NonStakableVestingFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _NonStakableVesting.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(NonStakableVestingFundsReleased)
						if err := _NonStakableVesting.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_NonStakableVesting *NonStakableVesting) ParseFundsReleased(log types.Log) (*NonStakableVestingFundsReleased, error) {
			event := new(NonStakableVestingFundsReleased)
			if err := _NonStakableVesting.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// OracleMetaData contains all meta data concerning the Oracle contract.
var OracleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVoterUpdateRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolUpdatedRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVoter\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"e6a02a28": "lastRoundBlock()",
		"aa2f89b5": "lastVoterUpdateRound()",
		"33f98c77": "latestRoundData(string)",
		"5281b5c6": "newSymbols(uint256)",
		"4c56ea56": "reports(string,address)",
		"146ca531": "round()",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"08f21ff5": "symbolUpdatedRound()",
		"ccce413b": "symbols(uint256)",
		"307de9b6": "vote(uint256,int256[],uint256)",
		"a7813587": "votePeriod()",
		"5412b3ae": "votingInfo(address)",
	},
	Bin: "0x6080604052600160ff1b600755600160ff1b6008553480156200002157600080fd5b5060405162002d3438038062002d34833981016040819052620000449162000639565b600280546001600160a01b038087166001600160a01b03199283161790925560038054928616929091169190911790558151620000899060009060208501906200035f565b5081516200009f9060019060208501906200035f565b5080600981905550620000c485600060018851620000be91906200074e565b62000181565b8451620000d9906004906020880190620003bc565b508451620000ef906005906020880190620003bc565b5060016006819055600d8054909101815560009081525b855181101562000175576001600b60008884815181106200012b576200012b6200076a565b6020908102919091018101516001600160a01b03168252810191909152604001600020600201805460ff1916911515919091179055806200016c8162000780565b91505062000106565b505050505050620009c3565b8082126200018e57505050565b81816000856002620001a185856200079c565b620001ad9190620007c6565b620001b9908762000806565b81518110620001cc57620001cc6200076a565b602002602001015190505b8183136200032b575b806001600160a01b0316868481518110620001ff57620001ff6200076a565b60200260200101516001600160a01b031610156200022c5782620002238162000831565b935050620001e0565b806001600160a01b03168683815181106200024b576200024b6200076a565b60200260200101516001600160a01b031611156200027857816200026f816200084c565b9250506200022c565b81831362000325578582815181106200029557620002956200076a565b6020026020010151868481518110620002b257620002b26200076a565b6020026020010151878581518110620002cf57620002cf6200076a565b60200260200101888581518110620002eb57620002eb6200076a565b6001600160a01b0393841660209182029290920101529116905282620003118162000831565b935050818062000321906200084c565b9250505b620001d7565b8185121562000341576200034186868462000181565b8383121562000357576200035786848662000181565b505050505050565b828054828255906000526020600020908101928215620003aa579160200282015b82811115620003aa5782518290620003999082620008f7565b509160200191906001019062000380565b50620003b892915062000422565b5090565b82805482825590600052602060002090810192821562000414579160200282015b828111156200041457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003dd565b50620003b892915062000443565b80821115620003b85760006200043982826200045a565b5060010162000422565b5b80821115620003b8576000815560010162000444565b50805462000468906200086c565b6000825580601f1062000479575050565b601f01602090049060005260206000209081019062000499919062000443565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620004dd57620004dd6200049c565b604052919050565b60006001600160401b038211156200050157620005016200049c565b5060051b60200190565b80516001600160a01b03811681146200052357600080fd5b919050565b6000601f83818401126200053b57600080fd5b82516020620005546200054e83620004e5565b620004b2565b82815260059290921b850181019181810190878411156200057457600080fd5b8287015b848110156200062d5780516001600160401b03808211156200059a5760008081fd5b818a0191508a603f830112620005b05760008081fd5b8582015181811115620005c757620005c76200049c565b620005da818a01601f19168801620004b2565b915080825260408c81838601011115620005f45760008081fd5b60005b8281101562000614578481018201518482018a01528801620005f7565b5050600090820187015284525091830191830162000578565b50979650505050505050565b600080600080600060a086880312156200065257600080fd5b85516001600160401b03808211156200066a57600080fd5b818801915088601f8301126200067f57600080fd5b81516020620006926200054e83620004e5565b82815260059290921b8401810191818101908c841115620006b257600080fd5b948201945b83861015620006db57620006cb866200050b565b82529482019490820190620006b7565b9950620006ec90508a82016200050b565b97505050620006fe604089016200050b565b945060608801519150808211156200071557600080fd5b50620007248882890162000528565b925050608086015190509295509295909350565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000764576200076462000738565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820162000795576200079562000738565b5060010190565b8181036000831280158383131683831282161715620007bf57620007bf62000738565b5092915050565b600082620007e457634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161562000801576200080162000738565b500590565b808201828112600083128015821682158216171562000829576200082962000738565b505092915050565b60006001600160ff1b01820162000795576200079562000738565b6000600160ff1b820162000864576200086462000738565b506000190190565b600181811c908216806200088157607f821691505b602082108103620008a257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008f257600081815260208120601f850160051c81016020861015620008d15750805b601f850160051c820191505b818110156200035757828155600101620008dd565b505050565b81516001600160401b038111156200091357620009136200049c565b6200092b816200092484546200086c565b84620008a8565b602080601f8311600181146200096357600084156200094a5750858301515b600019600386901b1c1916600185901b17855562000357565b600085815260208120601f198616915b82811015620009945788860151825594840194600190910190840162000973565b5085821015620009b35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61236180620009d36000396000f3fe6080604052600436106101225760003560e01c80638d4f75d2116100a5578063b3ab15fb1161006c578063b3ab15fb1461038c578063b78dec52146103ac578063ccce413b146103c1578063cdd72253146103e1578063df7f710e14610403578063e6a02a281461042557005b80638d4f75d2146103155780639670c0bc146103355780639f8743f71461034b578063a781358714610360578063aa2f89b51461037657005b80634bb278f3116100e95780634bb278f3146101ff5780634c56ea56146102245780635281b5c61461026c5780635412b3ae14610299578063845023f2146102f557005b806308f21ff51461012b578063146ca53114610154578063307de9b61461016a57806333f98c771461018a5780633c8510fd146101df57005b3661012957005b005b34801561013757600080fd5b5061014160085481565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014160065481565b34801561017657600080fd5b5061012961018536600461198c565b61043b565b34801561019657600080fd5b506101aa6101a5366004611ac8565b610682565b60405161014b919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b3480156101eb57600080fd5b506101aa6101fa366004611afd565b61076c565b34801561020b57600080fd5b5061021461082d565b604051901515815260200161014b565b34801561023057600080fd5b5061014161023f366004611b60565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205481565b34801561027857600080fd5b5061028c610287366004611bae565b6109d0565b60405161014b9190611c17565b3480156102a557600080fd5b506102d86102b4366004611c31565b600b6020526000908152604090208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161014b565b34801561030157600080fd5b50610129610310366004611c70565b610a7c565b34801561032157600080fd5b50610129610330366004611d0d565b610b25565b34801561034157600080fd5b5062989680610141565b34801561035757600080fd5b50600654610141565b34801561036c57600080fd5b5061014160095481565b34801561038257600080fd5b5061014160075481565b34801561039857600080fd5b506101296103a7366004611c31565b610c95565b3480156103b857600080fd5b50600954610141565b3480156103cd57600080fd5b5061028c6103dc366004611bae565b610ce1565b3480156103ed57600080fd5b506103f6610cf1565b60405161014b9190611dbe565b34801561040f57600080fd5b50610418610d53565b60405161014b9190611e60565b34801561043157600080fd5b50610141600a5481565b336000908152600b602052604090206002015460ff166104a25760405162461bcd60e51b815260206004820152601960248201527f7265737472696374656420746f206f6e6c7920766f746572730000000000000060448201526064015b60405180910390fd5b600654336000908152600b6020526040902054036104f25760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481d9bdd1959609a1b6044820152606401610499565b336000908152600b602052604081206001810180549087905581546006549092559181900361052257505061067c565b600054841461053257505061067c565b60016006546105419190611e89565b8114158061057e5750848484336040516020016105619493929190611e9c565b6040516020818303038152906040528051906020012060001c8214155b156105fa5760005b6000548110156105f2576001600160ff1b03600c600083815481106105ad576105ad611ee7565b906000526020600020016040516105c49190611f37565b90815260408051602092819003830190203360009081529252902055806105ea81611fad565b915050610586565b50505061067c565b60005b848110156106785785858281811061061757610617611ee7565b90506020020135600c6000838154811061063357610633611ee7565b9060005260206000200160405161064a9190611f37565b908152604080516020928190038301902033600090815292529020558061067081611fad565b9150506105fd565b5050505b50505050565b6106af60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d60016006546106c29190611e89565b815481106106d2576106d2611ee7565b90600052602060002001836040516106ea9190611fc6565b90815260408051918290036020908101832060608401835280548452600180820154928501929092526002015460ff16151583830152815160808101909252600654929350600092829161073d91611e89565b815260200183600001518152602001836020015181526020018360400151151581525090508092505050919050565b61079960405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d84815481106107ae576107ae611ee7565b90600052602060002001836040516107c69190611fc6565b9081526040805191829003602090810183206060808501845281548552600182015485840190815260029092015460ff16151585850190815284516080810186528a8152955193860193909352905192840192909252511515908201529150505b92915050565b6002546000906001600160a01b0316331461085a5760405162461bcd60e51b815260040161049990611fe2565b600954600a5461086a9190612025565b43106109ca5760005b6000548110156108985761088681610f11565b610891600182612025565b9050610873565b50600654600754036109155760005b600554811015610913576001600b6000600584815481106108ca576108ca611ee7565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600201805460ff19169115159190911790558061090b81611fad565b9150506108a7565b505b600654600754610926906001612038565b0361093357610933611218565b43600a8190555060016006600082825461094d9190612025565b9091555050600854610960906002612038565b6006540361097a5760018054610978916000916117de565b505b60065460095460408051928352436020840152429083015260608201527fb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e59060800160405180910390a150600190565b50600090565b600181815481106109e057600080fd5b9060005260206000200160009150905080546109fb90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2790611efd565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b505050505081565b6002546001600160a01b03163314610aa65760405162461bcd60e51b815260040161049990611fe2565b8051600003610aef5760405162461bcd60e51b8152602060048201526015602482015274566f746572732063616e277420626520656d70747960581b6044820152606401610499565b610b0881600060018451610b039190611e89565b6113f5565b8051610b1b906005906020840190611836565b5050600654600755565b6003546001600160a01b03163314610b785760405162461bcd60e51b81526020600482015260166024820152753932b9ba3934b1ba32b2103a379037b832b930ba37b960511b6044820152606401610499565b8051600003610bc25760405162461bcd60e51b815260206004820152601660248201527573796d626f6c732063616e277420626520656d70747960501b6044820152606401610499565b600654600854610bd3906001612038565b14158015610be5575060065460085414155b610c315760405162461bcd60e51b815260206004820152601e60248201527f63616e2774206265207570646174656420696e207468697320726f756e6400006044820152606401610499565b8051610c44906001906020840190611897565b5060065460088190557faa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d908290610c7c906001612025565b604051610c8a929190612060565b60405180910390a150565b6002546001600160a01b03163314610cbf5760405162461bcd60e51b815260040161049990611fe2565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600081815481106109e057600080fd5b60606005805480602002602001604051908101604052809291908181526020018280548015610d4957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d2b575b5050505050905090565b60606006546008546001610d679190612038565b03610e43576001805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610dad90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd990611efd565b8015610e265780601f10610dfb57610100808354040283529160200191610e26565b820191906000526020600020905b815481529060010190602001808311610e0957829003601f168201915b505050505081526020019060010190610d8e565b50505050905090565b6000805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610e8490611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb090611efd565b8015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b505050505081526020019060010190610e65565b6000808281548110610f2557610f25611ee7565b906000526020600020018054610f3a90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6690611efd565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b50505050509050600060048054905067ffffffffffffffff811115610fda57610fda611a11565b604051908082528060200260200182016040528015611003578160200160208202803683370190505b5090506000805b60045481101561111a5760006004828154811061102957611029611ee7565b60009182526020808320909101546006546001600160a01b03909116808452600b90925260409092205490925014158061109d57506001600160ff1b03600c866040516110769190611fc6565b90815260408051602092819003830190206001600160a01b03851660009081529252902054145b156110a85750611108565b600c856040516110b89190611fc6565b90815260408051602092819003830190206001600160a01b0384166000908152925290205484846110e881611fad565b9550815181106110fa576110fa611ee7565b602002602001018181525050505b8061111281611fad565b91505061100a565b506000600d600160065461112e9190611e89565b8154811061113e5761113e611ee7565b90600052602060002001846040516111569190611fc6565b908152604051908190036020019020549050600082156111815761117a84846115a2565b9150600190505b600d80546001018082556000829052604080516060810182528581524260208201528415159181019190915260065490929181106111c1576111c1611ee7565b90600052602060002001866040516111d99190611fc6565b90815260408051602092819003830190208351815591830151600183015591909101516002909101805460ff1916911515919091179055505050505050565b6000805b6004548210801561122e575060055481105b15611373576005818154811061124657611246611ee7565b600091825260209091200154600480546001600160a01b03909216918490811061127257611272611ee7565b6000918252602090912001546001600160a01b0316036112ac578161129681611fad565b92505080806112a490611fad565b91505061121c565b600581815481106112bf576112bf611ee7565b600091825260209091200154600480546001600160a01b0390921691849081106112eb576112eb611ee7565b6000918252602090912001546001600160a01b0316101561136957600b60006004848154811061131d5761131d611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff191690558161136181611fad565b92505061121c565b806112a481611fad565b6004548210156113e057600b60006004848154811061139457611394611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff19169055816113d881611fad565b925050611373565b600580546113f0916004916118dd565b505050565b80821261140157505050565b818160008560026114128585612082565b61141c91906120bf565b6114269087612038565b8151811061143657611436611ee7565b602002602001015190505b818313611574575b806001600160a01b031686848151811061146557611465611ee7565b60200260200101516001600160a01b0316101561148e5782611486816120ed565b935050611449565b806001600160a01b03168683815181106114aa576114aa611ee7565b60200260200101516001600160a01b031611156114d357816114cb81612105565b92505061148e565b81831361156f578582815181106114ec576114ec611ee7565b602002602001015186848151811061150657611506611ee7565b602002602001015187858151811061152057611520611ee7565b6020026020010188858151811061153957611539611ee7565b6001600160a01b039384166020918202929092010152911690528261155d816120ed565b935050818061156b90612105565b9250505b611441565b81851215611587576115878686846113f5565b8383121561159a5761159a8684866113f5565b505050505050565b6000816000036115b457506000610827565b6115ca8360006115c5600186611e89565b611666565b60006115d7600284612122565b90506115e4600284612136565b15611608578381815181106115fb576115fb611ee7565b602002602001015161165e565b600284828151811061161c5761161c611ee7565b6020026020010151856001846116329190611e89565b8151811061164257611642611ee7565b60200260200101516116549190612038565b61165e91906120bf565b949350505050565b8181808203611676575050505050565b60008560026116858787612082565b61168f91906120bf565b6116999087612038565b815181106116a9576116a9611ee7565b602002602001015190505b8183136117b8575b808684815181106116cf576116cf611ee7565b602002602001015112156116ef57826116e7816120ed565b9350506116bc565b85828151811061170157611701611ee7565b6020026020010151811215611722578161171a81612105565b9250506116ef565b8183136117b35785828151811061173b5761173b611ee7565b602002602001015186848151811061175557611755611ee7565b602002602001015187858151811061176f5761176f611ee7565b6020026020010188858151811061178857611788611ee7565b602090810291909101019190915252816117a181612105565b92505082806117af906120ed565b9350505b6116b4565b818512156117cb576117cb868684611666565b8383121561159a5761159a868486611666565b8280548282559060005260206000209081019282156118265760005260206000209182015b8281111561182657816118168482612190565b5091600101919060010190611803565b5061183292915061191d565b5090565b82805482825590600052602060002090810192821561188b579160200282015b8281111561188b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611856565b5061183292915061193a565b828054828255906000526020600020908101928215611826579160200282015b8281111561182657825182906118cd9082612271565b50916020019190600101906118b7565b82805482825590600052602060002090810192821561188b5760005260206000209182015b8281111561188b578254825591600101919060010190611902565b80821115611832576000611931828261194f565b5060010161191d565b5b80821115611832576000815560010161193b565b50805461195b90611efd565b6000825580601f1061196b575050565b601f016020900490600052602060002090810190611989919061193a565b50565b600080600080606085870312156119a257600080fd5b84359350602085013567ffffffffffffffff808211156119c157600080fd5b818701915087601f8301126119d557600080fd5b8135818111156119e457600080fd5b8860208260051b85010111156119f957600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a5057611a50611a11565b604052919050565b600082601f830112611a6957600080fd5b813567ffffffffffffffff811115611a8357611a83611a11565b611a96601f8201601f1916602001611a27565b818152846020838601011115611aab57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ada57600080fd5b813567ffffffffffffffff811115611af157600080fd5b61165e84828501611a58565b60008060408385031215611b1057600080fd5b82359150602083013567ffffffffffffffff811115611b2e57600080fd5b611b3a85828601611a58565b9150509250929050565b80356001600160a01b0381168114611b5b57600080fd5b919050565b60008060408385031215611b7357600080fd5b823567ffffffffffffffff811115611b8a57600080fd5b611b9685828601611a58565b925050611ba560208401611b44565b90509250929050565b600060208284031215611bc057600080fd5b5035919050565b60005b83811015611be2578181015183820152602001611bca565b50506000910152565b60008151808452611c03816020860160208601611bc7565b601f01601f19169290920160200192915050565b602081526000611c2a6020830184611beb565b9392505050565b600060208284031215611c4357600080fd5b611c2a82611b44565b600067ffffffffffffffff821115611c6657611c66611a11565b5060051b60200190565b60006020808385031215611c8357600080fd5b823567ffffffffffffffff811115611c9a57600080fd5b8301601f81018513611cab57600080fd5b8035611cbe611cb982611c4c565b611a27565b81815260059190911b82018301908381019087831115611cdd57600080fd5b928401925b82841015611d0257611cf384611b44565b82529284019290840190611ce2565b979650505050505050565b60006020808385031215611d2057600080fd5b823567ffffffffffffffff80821115611d3857600080fd5b818501915085601f830112611d4c57600080fd5b8135611d5a611cb982611c4c565b81815260059190911b83018401908481019088831115611d7957600080fd5b8585015b83811015611db157803585811115611d955760008081fd5b611da38b89838a0101611a58565b845250918601918601611d7d565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611dff5783516001600160a01b031683529284019291840191600101611dda565b50909695505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611e53578284038952611e41848351611beb565b98850198935090840190600101611e29565b5091979650505050505050565b602081526000611c2a6020830184611e0b565b634e487b7160e01b600052601160045260246000fd5b8181038181111561082757610827611e73565b60008186825b87811015611ec0578135835260209283019290910190600101611ea2565b5050938452505060601b6bffffffffffffffffffffffff1916602082015260340192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f1157607f821691505b602082108103611f3157634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354611f4581611efd565b60018281168015611f5d5760018114611f7257611fa1565b60ff1984168752821515830287019450611fa1565b8760005260208060002060005b85811015611f985781548a820152908401908201611f7f565b50505082870194505b50929695505050505050565b600060018201611fbf57611fbf611e73565b5060010190565b60008251611fd8818460208701611bc7565b9190910192915050565b60208082526023908201527f7265737472696374656420746f20746865206175746f6e69747920636f6e74726040820152621858dd60ea1b606082015260800190565b8082018082111561082757610827611e73565b808201828112600083128015821682158216171561205857612058611e73565b505092915050565b6040815260006120736040830185611e0b565b90508260208301529392505050565b81810360008312801583831316838312821617156120a2576120a2611e73565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826120ce576120ce6120a9565b600160ff1b8214600019841416156120e8576120e8611e73565b500590565b60006001600160ff1b018201611fbf57611fbf611e73565b6000600160ff1b820161211a5761211a611e73565b506000190190565b600082612131576121316120a9565b500490565b600082612145576121456120a9565b500690565b601f8211156113f057600081815260208120601f850160051c810160208610156121715750805b601f850160051c820191505b8181101561159a5782815560010161217d565b81810361219b575050565b6121a58254611efd565b67ffffffffffffffff8111156121bd576121bd611a11565b6121d1816121cb8454611efd565b8461214a565b6000601f82116001811461220557600083156121ed5750848201545b600019600385901b1c1916600184901b17845561226a565b600085815260209020601f19841690600086815260209020845b8381101561223f578286015482556001958601959091019060200161221f565b508583101561225d5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b815167ffffffffffffffff81111561228b5761228b611a11565b612299816121cb8454611efd565b602080601f8311600181146122ce57600084156122b65750858301515b600019600386901b1c1916600185901b17855561159a565b600085815260208120601f198616915b828110156122fd578886015182559484019460019091019084016122de565b508582101561231b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203c20d60b3688c4746f988dc74b8b4238d2ea704a050cfa1eb51d85c8e28d03b264736f6c63430008150033",
}

// OracleABI is the input ABI used to generate the binding from.
// Deprecated: Use OracleMetaData.ABI instead.
var OracleABI = OracleMetaData.ABI

// Deprecated: Use OracleMetaData.Sigs instead.
// OracleFuncSigs maps the 4-byte function signature to its string representation.
var OracleFuncSigs = OracleMetaData.Sigs

// OracleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OracleMetaData.Bin instead.
var OracleBin = OracleMetaData.Bin

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func (r *Runner) DeployOracle(opts *runOptions, _voters []common.Address, _autonity common.Address, _operator common.Address, _symbols []string, _votePeriod *big.Int) (common.Address, uint64, *Oracle, error) {
	parsed, err := OracleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(OracleBin), _voters, _autonity, _operator, _symbols, _votePeriod)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Oracle{contract: c}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	*contract
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() pure returns(uint256)
func (_Oracle *Oracle) GetPrecision(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getPrecision")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *Oracle) GetRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *Oracle) GetRoundData(opts *runOptions, _round *big.Int, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *Oracle) GetSymbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getSymbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *Oracle) GetVotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *Oracle) GetVoters(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getVoters")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *Oracle) LastRoundBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "lastRoundBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastVoterUpdateRound is a free data retrieval call binding the contract method 0xaa2f89b5.
//
// Solidity: function lastVoterUpdateRound() view returns(int256)
func (_Oracle *Oracle) LastVoterUpdateRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "lastVoterUpdateRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *Oracle) LatestRoundData(opts *runOptions, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// NewSymbols is a free data retrieval call binding the contract method 0x5281b5c6.
//
// Solidity: function newSymbols(uint256 ) view returns(string)
func (_Oracle *Oracle) NewSymbols(opts *runOptions, arg0 *big.Int) (string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "newSymbols", arg0)

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(int256)
func (_Oracle *Oracle) Reports(opts *runOptions, arg0 string, arg1 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "reports", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_Oracle *Oracle) Round(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "round")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *Oracle) SymbolUpdatedRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "symbolUpdatedRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Symbols is a free data retrieval call binding the contract method 0xccce413b.
//
// Solidity: function symbols(uint256 ) view returns(string)
func (_Oracle *Oracle) Symbols(opts *runOptions, arg0 *big.Int) (string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "symbols", arg0)

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// VotePeriod is a free data retrieval call binding the contract method 0xa7813587.
//
// Solidity: function votePeriod() view returns(uint256)
func (_Oracle *Oracle) VotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "votePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VotingInfo is a free data retrieval call binding the contract method 0x5412b3ae.
//
// Solidity: function votingInfo(address ) view returns(uint256 round, uint256 commit, bool isVoter)
func (_Oracle *Oracle) VotingInfo(opts *runOptions, arg0 common.Address) (struct {
	Round   *big.Int
	Commit  *big.Int
	IsVoter bool
}, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "votingInfo", arg0)

	outstruct := new(struct {
		Round   *big.Int
		Commit  *big.Int
		IsVoter bool
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Round = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Commit = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsVoter = *abi.ConvertType(out[2], new(bool)).(*bool)
	return *outstruct, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool)
func (_Oracle *Oracle) CallFinalize(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Oracle.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *Oracle) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSymbols is a free data retrieval call for a paid mutator transaction binding the contract method 0x8d4f75d2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *Oracle) CallSetSymbols(r *Runner, opts *runOptions, _symbols []string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setSymbols", _symbols)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetVoters is a free data retrieval call for a paid mutator transaction binding the contract method 0x845023f2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *Oracle) CallSetVoters(r *Runner, opts *runOptions, _newVoters []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setVoters", _newVoters)
	r.revertSnapshot(snap)
	return consumed, err

}

// Vote is a free data retrieval call for a paid mutator transaction binding the contract method 0x307de9b6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *Oracle) CallVote(r *Runner, opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "vote", _commit, _reports, _salt)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *Oracle) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "finalize")
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *Oracle) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setOperator", _operator)
	return consumed, err
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *Oracle) SetSymbols(opts *runOptions, _symbols []string) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setSymbols", _symbols)
	return consumed, err
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *Oracle) SetVoters(opts *runOptions, _newVoters []common.Address) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setVoters", _newVoters)
	return consumed, err
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *Oracle) Vote(opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "vote", _commit, _reports, _salt)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_Oracle *Oracle) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_Oracle *Oracle) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// OracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the Oracle contract.
		type OracleNewRoundIterator struct {
			Event *OracleNewRound // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleNewRoundIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleNewRound)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleNewRound)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleNewRoundIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleNewRoundIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleNewRound represents a NewRound event raised by the Oracle contract.
		type OracleNewRound struct {
			Round *big.Int;
			Height *big.Int;
			Timestamp *big.Int;
			VotePeriod *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
 		func (_Oracle *Oracle) FilterNewRound(opts *bind.FilterOpts) (*OracleNewRoundIterator, error) {






			logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return &OracleNewRoundIterator{contract: _Oracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
 		}

		// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_Oracle *Oracle) WatchNewRound(opts *bind.WatchOpts, sink chan<- *OracleNewRound) (event.Subscription, error) {






			logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleNewRound)
						if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_Oracle *Oracle) ParseNewRound(log types.Log) (*OracleNewRound, error) {
			event := new(OracleNewRound)
			if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// OracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the Oracle contract.
		type OracleNewSymbolsIterator struct {
			Event *OracleNewSymbols // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleNewSymbolsIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleNewSymbols)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleNewSymbols)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleNewSymbolsIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleNewSymbolsIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleNewSymbols represents a NewSymbols event raised by the Oracle contract.
		type OracleNewSymbols struct {
			Symbols []string;
			Round *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
 		func (_Oracle *Oracle) FilterNewSymbols(opts *bind.FilterOpts) (*OracleNewSymbolsIterator, error) {




			logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return &OracleNewSymbolsIterator{contract: _Oracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
 		}

		// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_Oracle *Oracle) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *OracleNewSymbols) (event.Subscription, error) {




			logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleNewSymbols)
						if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_Oracle *Oracle) ParseNewSymbols(log types.Log) (*OracleNewSymbols, error) {
			event := new(OracleNewSymbols)
			if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// OracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Oracle contract.
		type OracleVotedIterator struct {
			Event *OracleVoted // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleVotedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleVoted)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleVoted)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleVotedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleVotedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleVoted represents a Voted event raised by the Oracle contract.
		type OracleVoted struct {
			Voter common.Address;
			Votes []*big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
 		func (_Oracle *Oracle) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*OracleVotedIterator, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _Oracle.contract.FilterLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return &OracleVotedIterator{contract: _Oracle.contract, event: "Voted", logs: logs, sub: sub}, nil
 		}

		// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_Oracle *Oracle) WatchVoted(opts *bind.WatchOpts, sink chan<- *OracleVoted, _voter []common.Address) (event.Subscription, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _Oracle.contract.WatchLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleVoted)
						if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_Oracle *Oracle) ParseVoted(log types.Log) (*OracleVoted, error) {
			event := new(OracleVoted)
			if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// PrecompiledMetaData contains all meta data concerning the Precompiled contract.
var PrecompiledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ACCUSATION_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPUTE_COMMITTEE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENODE_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INNOCENCE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISBEHAVIOUR_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POP_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4dc925d3": "ACCUSATION_CONTRACT()",
		"2090a442": "COMPUTE_COMMITTEE_CONTRACT()",
		"c13974e1": "ENODE_VERIFIER_CONTRACT()",
		"8e153dc3": "INNOCENCE_CONTRACT()",
		"925c5492": "MISBEHAVIOUR_CONTRACT()",
		"50d93720": "POP_VERIFIER_CONTRACT()",
		"d0a6d1a6": "SUCCESS()",
		"a4ad5d91": "UPGRADER_CONTRACT()",
	},
	Bin: "0x61012561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060885760003560e01c8063925c549211605f578063925c54921460c6578063a4ad5d911460cd578063c13974e11460d4578063d0a6d1a61460db57600080fd5b80632090a44214608d5780634dc925d31460b157806350d937201460b85780638e153dc31460bf575b600080fd5b609460fa81565b6040516001600160a01b0390911681526020015b60405180910390f35b609460fc81565b609460fb81565b609460fd81565b609460fe81565b609460f981565b609460ff81565b60e2600181565b60405190815260200160a856fea26469706673582212203bd408e61c65cea168b69bea675577afd74403b751349c8f3fb52cf0fdf4c2de64736f6c63430008150033",
}

// PrecompiledABI is the input ABI used to generate the binding from.
// Deprecated: Use PrecompiledMetaData.ABI instead.
var PrecompiledABI = PrecompiledMetaData.ABI

// Deprecated: Use PrecompiledMetaData.Sigs instead.
// PrecompiledFuncSigs maps the 4-byte function signature to its string representation.
var PrecompiledFuncSigs = PrecompiledMetaData.Sigs

// PrecompiledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrecompiledMetaData.Bin instead.
var PrecompiledBin = PrecompiledMetaData.Bin

// DeployPrecompiled deploys a new Ethereum contract, binding an instance of Precompiled to it.
func (r *Runner) DeployPrecompiled(opts *runOptions) (common.Address, uint64, *Precompiled, error) {
	parsed, err := PrecompiledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(PrecompiledBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Precompiled{contract: c}, nil
}

// Precompiled is an auto generated Go binding around an Ethereum contract.
type Precompiled struct {
	*contract
}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) ACCUSATIONCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "ACCUSATION_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) COMPUTECOMMITTEECONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "COMPUTE_COMMITTEE_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) ENODEVERIFIERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "ENODE_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) INNOCENCECONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "INNOCENCE_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) MISBEHAVIOURCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "MISBEHAVIOUR_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) POPVERIFIERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "POP_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *Precompiled) SUCCESS(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "SUCCESS")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) UPGRADERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "UPGRADER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// QueueLibMetaData contains all meta data concerning the QueueLib contract.
var QueueLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202707a2e67dda883ef73b02e248bdd512ed422db4c77f7af83682602cc488079464736f6c63430008150033",
}

// QueueLibABI is the input ABI used to generate the binding from.
// Deprecated: Use QueueLibMetaData.ABI instead.
var QueueLibABI = QueueLibMetaData.ABI

// QueueLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use QueueLibMetaData.Bin instead.
var QueueLibBin = QueueLibMetaData.Bin

// DeployQueueLib deploys a new Ethereum contract, binding an instance of QueueLib to it.
func (r *Runner) DeployQueueLib(opts *runOptions) (common.Address, uint64, *QueueLib, error) {
	parsed, err := QueueLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(QueueLibBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &QueueLib{contract: c}, nil
}

// QueueLib is an auto generated Go binding around an Ethereum contract.
type QueueLib struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ReentrancyGuardMetaData contains all meta data concerning the ReentrancyGuard contract.
var ReentrancyGuardMetaData = &bind.MetaData{
	ABI: "[]",
}

// ReentrancyGuardABI is the input ABI used to generate the binding from.
// Deprecated: Use ReentrancyGuardMetaData.ABI instead.
var ReentrancyGuardABI = ReentrancyGuardMetaData.ABI

// ReentrancyGuard is an auto generated Go binding around an Ethereum contract.
type ReentrancyGuard struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ScheduleControllerMetaData contains all meta data concerning the ScheduleController contract.
var ScheduleControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
	},
}

// ScheduleControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ScheduleControllerMetaData.ABI instead.
var ScheduleControllerABI = ScheduleControllerMetaData.ABI

// Deprecated: Use ScheduleControllerMetaData.Sigs instead.
// ScheduleControllerFuncSigs maps the 4-byte function signature to its string representation.
var ScheduleControllerFuncSigs = ScheduleControllerMetaData.Sigs

// ScheduleController is an auto generated Go binding around an Ethereum contract.
type ScheduleController struct {
	*contract
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_ScheduleController *ScheduleController) GetSchedule(opts *runOptions, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, uint64, error) {
	out, consumed, err := _ScheduleController.call(opts, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)
	return out0, consumed, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_ScheduleController *ScheduleController) GetTotalSchedules(opts *runOptions, _vault common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ScheduleController.call(opts, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// StabilizationMetaData contains all meta data concerning the Stabilization contract.
var StabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"internalType\":\"structStabilization.Config\",\"name\":\"config_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDue\",\"type\":\"uint256\"}],\"name\":\"interestDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"minimumCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinDebtRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"}],\"name\":\"setSupplyControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"underCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"eced5526": "SCALE()",
		"ce4b5bbe": "SCALE_FACTOR()",
		"5dcc9391": "SECONDS_IN_YEAR()",
		"68cd03f6": "accounts()",
		"c5ebeaec": "borrow(uint256)",
		"83baa174": "borrowLimit(uint256,uint256,uint256,uint256)",
		"840c7e24": "cdps(address)",
		"5891de72": "collateralPrice()",
		"79502c55": "config()",
		"54a9f42c": "debtAmount(address)",
		"50bf06bf": "debtAmount(address,uint256)",
		"b6b55f25": "deposit(uint256)",
		"15184245": "interestDue(uint256,uint256,uint256,uint256)",
		"042e02cf": "isLiquidatable(address)",
		"2f865568": "liquidate(address)",
		"08796696": "minimumCollateral(uint256,uint256,uint256)",
		"402d8883": "repay()",
		"946ce8cd": "setLiquidationRatio(uint256)",
		"7b44646a": "setMinCollateralizationRatio(uint256)",
		"53afe81d": "setMinDebtRequirement(uint256)",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"52e5a050": "setSupplyControl(address)",
		"fbbe6991": "underCollateralized(uint256,uint256,uint256,uint256)",
		"2e1a7d4d": "withdraw(uint256)",
	},
	Bin: "0x60806040523480156200001157600080fd5b506040516200270b3803806200270b83398101604081905262000034916200012e565b8560400151806000036200005b57604051630309cb8760e51b815260040160405180910390fd5b866020015187604001518082106200008657604051630309cb8760e51b815260040160405180910390fd5b5050865160005550602086015160015560408601516002556060860151600355608090950151600455600780546001600160a01b03199081166001600160a01b039687161790915560088054821694861694909417909355600a8054841692851692909217909155600b8054831691841691909117905560098054909116919092161790556200021c565b80516001600160a01b03811681146200012957600080fd5b919050565b6000806000806000808688036101408112156200014a57600080fd5b60a08112156200015957600080fd5b5060405160a081016001600160401b03811182821017156200018b57634e487b7160e01b600052604160045260246000fd5b8060405250875181526020880151602082015260408801516040820152606088015160608201526080880151608082015280965050620001ce60a0880162000111565b9450620001de60c0880162000111565b9350620001ee60e0880162000111565b9250620001ff610100880162000111565b915062000210610120880162000111565b90509295509295509295565b6124df806200022c6000396000f3fe6080604052600436106101665760003560e01c806368cd03f6116100d1578063946ce8cd1161008a578063c5ebeaec11610064578063c5ebeaec1461046b578063ce4b5bbe1461048b578063eced5526146104a0578063fbbe6991146104b557600080fd5b8063946ce8cd1461040b578063b3ab15fb1461042b578063b6b55f251461044b57600080fd5b806368cd03f6146102d857806379502c55146102fa5780637adbf973146103495780637b44646a1461036957806383baa17414610389578063840c7e24146103a957600080fd5b806350bf06bf1161012357806350bf06bf1461022b57806352e5a0501461024b57806353afe81d1461026b57806354a9f42c1461028b5780635891de72146102ab5780635dcc9391146102c057600080fd5b8063042e02cf1461016b57806308796696146101a057806315184245146101ce5780632e1a7d4d146101ee5780632f86556814610210578063402d888314610223575b600080fd5b34801561017757600080fd5b5061018b61018636600461211b565b6104d5565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101c06101bb366004612136565b61051d565b604051908152602001610197565b3480156101da57600080fd5b506101c06101e9366004612162565b610587565b3480156101fa57600080fd5b5061020e610209366004612194565b610617565b005b61020e61021e36600461211b565b6107e5565b61020e610a27565b34801561023757600080fd5b506101c06102463660046121ad565b610bff565b34801561025757600080fd5b5061020e61026636600461211b565b610c6b565b34801561027757600080fd5b5061020e610286366004612194565b610cb7565b34801561029757600080fd5b506101c06102a636600461211b565b610ce6565b3480156102b757600080fd5b506101c0610d5d565b3480156102cc57600080fd5b506101c06301e1338081565b3480156102e457600080fd5b506102ed610ffc565b60405161019791906121d7565b34801561030657600080fd5b50600054600154600254600354600454610321949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610197565b34801561035557600080fd5b5061020e61036436600461211b565b61105e565b34801561037557600080fd5b5061020e610384366004612194565b6110aa565b34801561039557600080fd5b506101c06103a4366004612162565b611122565b3480156103b557600080fd5b506103eb6103c436600461211b565b60056020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610197565b34801561041757600080fd5b5061020e610426366004612194565b611178565b34801561043757600080fd5b5061020e61044636600461211b565b6111ce565b34801561045757600080fd5b5061020e610466366004612194565b61121a565b34801561047757600080fd5b5061020e610486366004612194565b611419565b34801561049757600080fd5b506101c06115e5565b3480156104ac57600080fd5b506101c0601281565b3480156104c157600080fd5b5061018b6104d0366004612162565b6115f4565b6001600160a01b0381166000908152600560205260408120816104f8824261164b565b509050610515826001015461050b610d5d565b60015484906115f4565b949350505050565b600082806000036105405760405162bfc92160e01b815260040160405180910390fd5b83158061054b575082155b1561056957604051630309cb8760e51b815260040160405180910390fd5b83610574848761223a565b61057e9190612267565b95945050505050565b6000818311156105aa57604051630309cb8760e51b815260040160405180910390fd5b848460006105cc6301e133806105c66105c38989612289565b90565b906116c1565b905060006105e26105dd84846116e0565b6116ef565b905060006106096106026105fb6105c36012600a612380565b8490611742565b86906116e0565b9a9950505050505050505050565b80806000036106395760405163162908e360e11b815260040160405180910390fd5b336000908152600560205260409020600181015483111561066d5760405163162908e360e11b815260040160405180910390fd5b6000610679824261164b565b5090506000610686610d5d565b905061069d836001015482846000600101546115f4565b156106bb57604051636229415360e01b815260040160405180910390fd5b6106cf83600201548260006002015461051d565b8584600101546106df9190612289565b10156106fe57604051633a23d82560e01b815260040160405180910390fd5b848360010160008282546107129190612289565b909155505060095460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c919061239c565b6107a9576040516312171d8360e31b815260040160405180910390fd5b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050505050565b3460000361080657604051637c946ed760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600560205260408120600281015490910361084357604051638aa5baf360e01b815260040160405180910390fd5b600080610850834261164b565b9150915061086e8360010154610864610d5d565b60015485906115f4565b61088b57604051636ef5bcdd60e11b815260040160405180910390fd5b60006108978334612289565b905060018401805442865560009182905560028601829055600386019190915560095460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061239c565b610949576040516312171d8360e31b815260040160405180910390fd5b600b546001600160a01b03166344df8e706109648587612289565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505060008211156109e057604051339083156108fc029084906000818181858888f193505050501580156109de573d6000803e3d6000fd5b505b6040513381526001600160a01b038716907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4906020015b60405180910390a2505050505050565b34600003610a4857604051637c946ed760e01b815260040160405180910390fd5b3360009081526005602052604081206002810154909103610a7c57604051638aa5baf360e01b815260040160405180910390fd5b600080610a89834261164b565b915091508134108015610aa65750600354610aa43484612289565b105b15610ac45760405163e6bd447960e01b815260040160405180910390fd5b80836003016000828254610ad891906123b7565b909155505042835560008080610aee8634611751565b92509250925081866002016000828254610b089190612289565b9250508190555082866003016000828254610b239190612289565b90915550508115610b9857600b60009054906101000a90046001600160a01b03166001600160a01b03166344df8e70836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b50505050505b8015610bcd57604051339082156108fc029083906000818181858888f19350505050158015610bcb573d6000803e3d6000fd5b505b60405134815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423190602001610a17565b6001600160a01b0382166000908152600560205260408120805484918491821015610c3d57604051630309cb8760e51b815260040160405180910390fd5b6001600160a01b0386166000908152600560205260409020610c5f818761164b565b50979650505050505050565b6008546001600160a01b03163314610c95576040516282b42960e81b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314610ce1576040516282b42960e81b815260040160405180910390fd5b600355565b6040516350bf06bf60e01b81526001600160a01b038216600482015242602482015260009030906350bf06bf90604401602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5791906123ca565b92915050565b600a546040805180820182526007815266272a2716a0aa2760c91b602082015290516333f98c7760e01b815260009283926001600160a01b03909116916333f98c7791610dac916004016123e3565b608060405180830381865afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612431565b90508060600151610e115760405163cb08be8160e01b815260040160405180910390fd5b6000816020015113610e355760405162bfc92160e01b815260040160405180910390fd5b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eac91906123ca565b610eb86012600a612380565b1115610f6057600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3591906123ca565b610f416012600a612380565b610f4b9190612267565b8160200151610f5a919061223a565b91505090565b610f6c6012600a612380565b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906123ca565b610fed9190612267565b8160200151610f5a9190612267565b6060600680548060200260200160405190810160405280929190818152602001828054801561105457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611036575b5050505050905090565b6007546001600160a01b03163314611088576040516282b42960e81b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b80806000036110cc57604051630309cb8760e51b815260040160405180910390fd5b600154828082106110f057604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b0316331461111a576040516282b42960e81b815260040160405180910390fd5b505050600255565b600083158061112f575081155b1561114d57604051630309cb8760e51b815260040160405180910390fd5b6111596012600a612380565b611163908361223a565b8361116e868861223a565b610574919061223a565b600254819080821061119d57604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b031633146111c7576040516282b42960e81b815260040160405180910390fd5b5050600155565b6007546001600160a01b031633146111f8576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b808060000361123c5760405163162908e360e11b815260040160405180910390fd5b600954604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae91906123ca565b10156112cd576040516313be252b60e01b815260040160405180910390fd5b336000908152600560205260408120805490910361132857600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031916331790555b4281556001810180548491906000906113429084906123b7565b90915550506009546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561139e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c2919061239c565b6113df576040516312171d8360e31b815260040160405180910390fd5b60405183815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2505050565b808060000361143b5760405163162908e360e11b815260040160405180910390fd5b3360009081526005602052604081209080611456834261164b565b909250905061146585836123b7565b60035490925082101561148b5760405163e6bd447960e01b815260040160405180910390fd5b6000611495610d5d565b90506114ac846001015482856000600101546115f4565b156114ca57604051636229415360e01b815260040160405180910390fd5b60006114e6856001015483600060040154600060020154611122565b90508084111561150957604051633a23d82560e01b815260040160405180910390fd5b4285556002850180548891906000906115239084906123b7565b925050819055508285600301600082825461153e91906123b7565b9091555050600b546040516340c10f1960e01b8152336004820152602481018990526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561158f57600080fd5b505af11580156115a3573d6000803e3d6000fd5b50506040518981523392507fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750915060200160405180910390a250505050505050565b6115f16012600a612380565b81565b600083806000036116175760405162bfc92160e01b815260040160405180910390fd5b836000036116285760009150611642565b8284611634878961223a565b61163e9190612267565b1091505b50949350505050565b6000808260000361166f57604051630309cb8760e51b815260040160405180910390fd5b60008460030154856002015461168591906123b7565b8554909150840361169957600091506116ad565b60005485546116aa91839187610587565b91505b6116b782826123b7565b9250509250929050565b60006116d96105c384670de0b6b3a7640000856117c5565b9392505050565b60006116d96105c38484611898565b600081680736ea4425c11ac63081111561172457604051630d7b1d6560e11b8152600481018490526024015b60405180910390fd5b6714057b7ef767814f8102610515670de0b6b3a7640000820461194e565b60006116d96105c38385612289565b6000806000808560030154866002015461176b91906123b7565b905085600301548510611782578560030154611784565b845b93508085106117975785600201546117a1565b6117a18486612289565b92508085116117b15760006117bb565b6117bb8186612289565b9150509250925092565b60008080600019858709858702925082811083820303915050806000036117ff578382816117f5576117f5612251565b04925050506116d9565b83811061183057604051630c740aef60e31b815260048101879052602481018690526044810185905260640161171b565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050806000036118cc5750670de0b6b3a764000090049050610d57565b670de0b6b3a764000081106118fe57604051635173648d60e01b8152600481018690526024810185905260440161171b565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b600081680a688906bd8affffff81111561197e5760405163b3b6ba1f60e01b81526004810184905260240161171b565b6000611996670de0b6b3a7640000604084901b612267565b90506105156105c382600160bf1b67ff00000000000000821615611aac576780000000000000008216156119d35768016a09e667f3bcc9090260401c5b6740000000000000008216156119f2576801306fe0a31b7152df0260401c5b672000000000000000821615611a11576801172b83c7d517adce0260401c5b671000000000000000821615611a305768010b5586cf9890f62a0260401c5b670800000000000000821615611a4f576801059b0d31585743ae0260401c5b670400000000000000821615611a6e57680102c9a3e778060ee70260401c5b670200000000000000821615611a8d5768010163da9fb33356d80260401c5b670100000000000000821615611aac57680100b1afa5abcbed610260401c5b66ff000000000000821615611bab576680000000000000821615611ad95768010058c86da1c09ea20260401c5b6640000000000000821615611af7576801002c605e2e8cec500260401c5b6620000000000000821615611b1557680100162f3904051fa10260401c5b6610000000000000821615611b33576801000b175effdc76ba0260401c5b6608000000000000821615611b5157680100058ba01fb9f96d0260401c5b6604000000000000821615611b6f5768010002c5cc37da94920260401c5b6602000000000000821615611b8d576801000162e525ee05470260401c5b6601000000000000821615611bab5768010000b17255775c040260401c5b65ff0000000000821615611ca15765800000000000821615611bd6576801000058b91b5bc9ae0260401c5b65400000000000821615611bf357680100002c5c89d5ec6d0260401c5b65200000000000821615611c105768010000162e43f4f8310260401c5b65100000000000821615611c2d57680100000b1721bcfc9a0260401c5b65080000000000821615611c4a5768010000058b90cf1e6e0260401c5b65040000000000821615611c67576801000002c5c863b73f0260401c5b65020000000000821615611c8457680100000162e430e5a20260401c5b65010000000000821615611ca1576801000000b1721835510260401c5b64ff00000000821615611d8e57648000000000821615611cca57680100000058b90c0b490260401c5b644000000000821615611ce65768010000002c5c8601cc0260401c5b642000000000821615611d02576801000000162e42fff00260401c5b641000000000821615611d1e5768010000000b17217fbb0260401c5b640800000000821615611d3a576801000000058b90bfce0260401c5b640400000000821615611d5657680100000002c5c85fe30260401c5b640200000000821615611d725768010000000162e42ff10260401c5b640100000000821615611d8e57680100000000b17217f80260401c5b63ff000000821615611e72576380000000821615611db55768010000000058b90bfc0260401c5b6340000000821615611dd0576801000000002c5c85fe0260401c5b6320000000821615611deb57680100000000162e42ff0260401c5b6310000000821615611e06576801000000000b17217f0260401c5b6308000000821615611e2157680100000000058b90c00260401c5b6304000000821615611e3c5768010000000002c5c8600260401c5b6302000000821615611e57576801000000000162e4300260401c5b6301000000821615611e725768010000000000b172180260401c5b62ff0000821615611f4d5762800000821615611e97576801000000000058b90c0260401c5b62400000821615611eb157680100000000002c5c860260401c5b62200000821615611ecb5768010000000000162e430260401c5b62100000821615611ee557680100000000000b17210260401c5b62080000821615611eff5768010000000000058b910260401c5b62040000821615611f19576801000000000002c5c80260401c5b62020000821615611f3357680100000000000162e40260401c5b62010000821615611f4d576801000000000000b1720260401c5b61ff0082161561201f57618000821615611f7057680100000000000058b90260401c5b614000821615611f895768010000000000002c5d0260401c5b612000821615611fa2576801000000000000162e0260401c5b611000821615611fbb5768010000000000000b170260401c5b610800821615611fd4576801000000000000058c0260401c5b610400821615611fed57680100000000000002c60260401c5b61020082161561200657680100000000000001630260401c5b61010082161561201f57680100000000000000b10260401c5b60ff8216156120e857608082161561204057680100000000000000590260401c5b6040821615612058576801000000000000002c0260401c5b602082161561207057680100000000000000160260401c5b6010821615612088576801000000000000000b0260401c5b60088216156120a057680100000000000000060260401c5b60048216156120b857680100000000000000030260401c5b60028216156120d057680100000000000000010260401c5b60018216156120e857680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b80356001600160a01b038116811461211657600080fd5b919050565b60006020828403121561212d57600080fd5b6116d9826120ff565b60008060006060848603121561214b57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561217857600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156121a657600080fd5b5035919050565b600080604083850312156121c057600080fd5b6121c9836120ff565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156122185783516001600160a01b0316835292840192918401916001016121f3565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d5757610d57612224565b634e487b7160e01b600052601260045260246000fd5b60008261228457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610d5757610d57612224565b600181815b808511156122d75781600019048211156122bd576122bd612224565b808516156122ca57918102915b93841c93908002906122a1565b509250929050565b6000826122ee57506001610d57565b816122fb57506000610d57565b8160018114612311576002811461231b57612337565b6001915050610d57565b60ff84111561232c5761232c612224565b50506001821b610d57565b5060208310610133831016604e8410600b841016171561235a575081810a610d57565b612364838361229c565b806000190482111561237857612378612224565b029392505050565b60006116d983836122df565b8051801515811461211657600080fd5b6000602082840312156123ae57600080fd5b6116d98261238c565b80820180821115610d5757610d57612224565b6000602082840312156123dc57600080fd5b5051919050565b600060208083528351808285015260005b81811015612410578581018301518582016040015282016123f4565b506000604082860101526040601f19601f8301168501019250505092915050565b60006080828403121561244357600080fd5b6040516080810181811067ffffffffffffffff8211171561247457634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015261249d6060840161238c565b6060820152939250505056fea26469706673582212205e4bfdf4203cb01af8837cfd66ec92911a19965cd9945a1f62ad7f992027f06c64736f6c63430008150033",
}

// StabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use StabilizationMetaData.ABI instead.
var StabilizationABI = StabilizationMetaData.ABI

// Deprecated: Use StabilizationMetaData.Sigs instead.
// StabilizationFuncSigs maps the 4-byte function signature to its string representation.
var StabilizationFuncSigs = StabilizationMetaData.Sigs

// StabilizationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StabilizationMetaData.Bin instead.
var StabilizationBin = StabilizationMetaData.Bin

// DeployStabilization deploys a new Ethereum contract, binding an instance of Stabilization to it.
func (r *Runner) DeployStabilization(opts *runOptions, config_ StabilizationConfig, autonity common.Address, operator common.Address, oracle common.Address, supplyControl common.Address, collateralToken common.Address) (common.Address, uint64, *Stabilization, error) {
	parsed, err := StabilizationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StabilizationBin), config_, autonity, operator, oracle, supplyControl, collateralToken)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Stabilization{contract: c}, nil
}

// Stabilization is an auto generated Go binding around an Ethereum contract.
type Stabilization struct {
	*contract
}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *Stabilization) SCALE(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SCALE")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *Stabilization) SCALEFACTOR(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *Stabilization) SECONDSINYEAR(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SECONDS_IN_YEAR")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *Stabilization) Accounts(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "accounts")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *Stabilization) BorrowLimit(opts *runOptions, collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "borrowLimit", collateral, price, targetPrice, mcr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *Stabilization) Cdps(opts *runOptions, arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "cdps", arg0)

	outstruct := new(struct {
		Timestamp  *big.Int
		Collateral *big.Int
		Principal  *big.Int
		Interest   *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Collateral = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Principal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Interest = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *Stabilization) CollateralPrice(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "collateralPrice")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *Stabilization) Config(opts *runOptions) (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "config")

	outstruct := new(struct {
		BorrowInterestRate        *big.Int
		LiquidationRatio          *big.Int
		MinCollateralizationRatio *big.Int
		MinDebtRequirement        *big.Int
		TargetPrice               *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.BorrowInterestRate = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LiquidationRatio = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinCollateralizationRatio = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinDebtRequirement = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TargetPrice = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *Stabilization) DebtAmount(opts *runOptions, account common.Address, timestamp *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "debtAmount", account, timestamp)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *Stabilization) DebtAmount0(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "debtAmount0", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *Stabilization) InterestDue(opts *runOptions, debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "interestDue", debt, rate, timeBorrow, timeDue)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *Stabilization) IsLiquidatable(opts *runOptions, account common.Address) (bool, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "isLiquidatable", account)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *Stabilization) MinimumCollateral(opts *runOptions, principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "minimumCollateral", principal, price, mcr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *Stabilization) UnderCollateralized(opts *runOptions, collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "underCollateralized", collateral, price, debt, liquidationRatio)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Borrow is a free data retrieval call for a paid mutator transaction binding the contract method 0xc5ebeaec.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *Stabilization) CallBorrow(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "borrow", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Deposit is a free data retrieval call for a paid mutator transaction binding the contract method 0xb6b55f25.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *Stabilization) CallDeposit(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "deposit", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Liquidate is a free data retrieval call for a paid mutator transaction binding the contract method 0x2f865568.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *Stabilization) CallLiquidate(r *Runner, opts *runOptions, account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "liquidate", account)
	r.revertSnapshot(snap)
	return consumed, err

}

// Repay is a free data retrieval call for a paid mutator transaction binding the contract method 0x402d8883.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function repay() payable returns()
func (_Stabilization *Stabilization) CallRepay(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "repay")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidationRatio is a free data retrieval call for a paid mutator transaction binding the contract method 0x946ce8cd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) CallSetLiquidationRatio(r *Runner, opts *runOptions, ratio *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setLiquidationRatio", ratio)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinCollateralizationRatio is a free data retrieval call for a paid mutator transaction binding the contract method 0x7b44646a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) CallSetMinCollateralizationRatio(r *Runner, opts *runOptions, ratio *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setMinCollateralizationRatio", ratio)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinDebtRequirement is a free data retrieval call for a paid mutator transaction binding the contract method 0x53afe81d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *Stabilization) CallSetMinDebtRequirement(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setMinDebtRequirement", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *Stabilization) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *Stabilization) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControl is a free data retrieval call for a paid mutator transaction binding the contract method 0x52e5a050.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *Stabilization) CallSetSupplyControl(r *Runner, opts *runOptions, supplyControl common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setSupplyControl", supplyControl)
	r.revertSnapshot(snap)
	return consumed, err

}

// Withdraw is a free data retrieval call for a paid mutator transaction binding the contract method 0x2e1a7d4d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *Stabilization) CallWithdraw(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "withdraw", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *Stabilization) Borrow(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "borrow", amount)
	return consumed, err
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *Stabilization) Deposit(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "deposit", amount)
	return consumed, err
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *Stabilization) Liquidate(opts *runOptions, account common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "liquidate", account)
	return consumed, err
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *Stabilization) Repay(opts *runOptions) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "repay")
	return consumed, err
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) SetLiquidationRatio(opts *runOptions, ratio *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setLiquidationRatio", ratio)
	return consumed, err
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) SetMinCollateralizationRatio(opts *runOptions, ratio *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setMinCollateralizationRatio", ratio)
	return consumed, err
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *Stabilization) SetMinDebtRequirement(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setMinDebtRequirement", amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *Stabilization) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *Stabilization) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setOracle", oracle)
	return consumed, err
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *Stabilization) SetSupplyControl(opts *runOptions, supplyControl common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setSupplyControl", supplyControl)
	return consumed, err
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *Stabilization) Withdraw(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "withdraw", amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StabilizationBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the Stabilization contract.
		type StabilizationBorrowIterator struct {
			Event *StabilizationBorrow // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationBorrowIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationBorrow)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationBorrow)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationBorrowIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationBorrowIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationBorrow represents a Borrow event raised by the Stabilization contract.
		type StabilizationBorrow struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBorrow is a free log retrieval operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterBorrow(opts *bind.FilterOpts, account []common.Address) (*StabilizationBorrowIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Borrow", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationBorrowIterator{contract: _Stabilization.contract, event: "Borrow", logs: logs, sub: sub}, nil
 		}

		// WatchBorrow is a free log subscription operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchBorrow(opts *bind.WatchOpts, sink chan<- *StabilizationBorrow, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Borrow", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationBorrow)
						if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBorrow is a log parse operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseBorrow(log types.Log) (*StabilizationBorrow, error) {
			event := new(StabilizationBorrow)
			if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Stabilization contract.
		type StabilizationDepositIterator struct {
			Event *StabilizationDeposit // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationDepositIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationDeposit)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationDeposit)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationDepositIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationDepositIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationDeposit represents a Deposit event raised by the Stabilization contract.
		type StabilizationDeposit struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterDeposit(opts *bind.FilterOpts, account []common.Address) (*StabilizationDepositIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Deposit", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationDepositIterator{contract: _Stabilization.contract, event: "Deposit", logs: logs, sub: sub}, nil
 		}

		// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StabilizationDeposit, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Deposit", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationDeposit)
						if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseDeposit(log types.Log) (*StabilizationDeposit, error) {
			event := new(StabilizationDeposit)
			if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationLiquidateIterator is returned from FilterLiquidate and is used to iterate over the raw logs and unpacked data for Liquidate events raised by the Stabilization contract.
		type StabilizationLiquidateIterator struct {
			Event *StabilizationLiquidate // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationLiquidateIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationLiquidate)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationLiquidate)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationLiquidateIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationLiquidateIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationLiquidate represents a Liquidate event raised by the Stabilization contract.
		type StabilizationLiquidate struct {
			Account common.Address;
			Liquidator common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterLiquidate is a free log retrieval operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
 		func (_Stabilization *Stabilization) FilterLiquidate(opts *bind.FilterOpts, account []common.Address) (*StabilizationLiquidateIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Liquidate", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationLiquidateIterator{contract: _Stabilization.contract, event: "Liquidate", logs: logs, sub: sub}, nil
 		}

		// WatchLiquidate is a free log subscription operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
		func (_Stabilization *Stabilization) WatchLiquidate(opts *bind.WatchOpts, sink chan<- *StabilizationLiquidate, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Liquidate", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationLiquidate)
						if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseLiquidate is a log parse operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
		func (_Stabilization *Stabilization) ParseLiquidate(log types.Log) (*StabilizationLiquidate, error) {
			event := new(StabilizationLiquidate)
			if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the Stabilization contract.
		type StabilizationRepayIterator struct {
			Event *StabilizationRepay // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationRepayIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationRepay)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationRepay)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationRepayIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationRepayIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationRepay represents a Repay event raised by the Stabilization contract.
		type StabilizationRepay struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRepay is a free log retrieval operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterRepay(opts *bind.FilterOpts, account []common.Address) (*StabilizationRepayIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Repay", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationRepayIterator{contract: _Stabilization.contract, event: "Repay", logs: logs, sub: sub}, nil
 		}

		// WatchRepay is a free log subscription operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchRepay(opts *bind.WatchOpts, sink chan<- *StabilizationRepay, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Repay", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationRepay)
						if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRepay is a log parse operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseRepay(log types.Log) (*StabilizationRepay, error) {
			event := new(StabilizationRepay)
			if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Stabilization contract.
		type StabilizationWithdrawIterator struct {
			Event *StabilizationWithdraw // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationWithdrawIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationWithdraw)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationWithdraw)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationWithdrawIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationWithdrawIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationWithdraw represents a Withdraw event raised by the Stabilization contract.
		type StabilizationWithdraw struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterWithdraw(opts *bind.FilterOpts, account []common.Address) (*StabilizationWithdrawIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Withdraw", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationWithdrawIterator{contract: _Stabilization.contract, event: "Withdraw", logs: logs, sub: sub}, nil
 		}

		// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StabilizationWithdraw, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Withdraw", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationWithdraw)
						if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseWithdraw(log types.Log) (*StabilizationWithdraw, error) {
			event := new(StabilizationWithdraw)
			if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakableVestingLogicMetaData contains all meta data concerning the StakableVestingLogic contract.
var StakableVestingLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
	Bin: "",
}

// StakableVestingLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use StakableVestingLogicMetaData.ABI instead.
var StakableVestingLogicABI = StakableVestingLogicMetaData.ABI

// Deprecated: Use StakableVestingLogicMetaData.Sigs instead.
// StakableVestingLogicFuncSigs maps the 4-byte function signature to its string representation.
var StakableVestingLogicFuncSigs = StakableVestingLogicMetaData.Sigs

// StakableVestingLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakableVestingLogicMetaData.Bin instead.
var StakableVestingLogicBin = StakableVestingLogicMetaData.Bin

// DeployStakableVestingLogic deploys a new Ethereum contract, binding an instance of StakableVestingLogic to it.
func (r *Runner) DeployStakableVestingLogic(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakableVestingLogic, error) {
	parsed, err := StakableVestingLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakableVestingLogicBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakableVestingLogic{contract: c}, nil
}

// StakableVestingLogic is an auto generated Go binding around an Ethereum contract.
type StakableVestingLogic struct {
	*contract
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) ContractTotalValue(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakableVestingLogic *StakableVestingLogic) GetBeneficiary(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "getBeneficiary")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVestingLogic *StakableVestingLogic) GetContract(opts *runOptions) (ContractBaseContract, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "getContract")

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakableVestingLogic *StakableVestingLogic) GetLinkedValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakableVestingLogic *StakableVestingLogic) GetManagerContractAddress(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) LiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) LockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVestingLogic *StakableVestingLogic) UnclaimedRewards(opts *runOptions, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "unclaimedRewards", _validator)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVestingLogic *StakableVestingLogic) UnclaimedRewards0(opts *runOptions) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "unclaimedRewards0")

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) UnlockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) VestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "vestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) WithdrawableVestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogic.call(opts, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVestingLogic.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xe2bb8234.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakableVestingLogic *StakableVestingLogic) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "changeContractBeneficiary", _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_StakableVestingLogic *StakableVestingLogic) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards0 is a free data retrieval call for a paid mutator transaction binding the contract method 0xef5cfb8c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(address _validator) returns()
func (_StakableVestingLogic *StakableVestingLogic) CallClaimRewards0(r *Runner, opts *runOptions, _validator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "claimRewards0", _validator)
	r.revertSnapshot(snap)
	return consumed, err

}

// CreateContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae0a609.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVestingLogic *StakableVestingLogic) CallCreateContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x0b52f809.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllLNTN() returns()
func (_StakableVestingLogic *StakableVestingLogic) CallReleaseAllLNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "releaseAllLNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xb693fc09.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN() returns()
func (_StakableVestingLogic *StakableVestingLogic) CallReleaseAllNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "releaseAllNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x69d89575.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFunds() returns()
func (_StakableVestingLogic *StakableVestingLogic) CallReleaseFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "releaseFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3c6f2fa6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakableVestingLogic *StakableVestingLogic) CallReleaseLNTN(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "releaseLNTN", _validator, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xfc028e36.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakableVestingLogic *StakableVestingLogic) CallReleaseNTN(r *Runner, opts *runOptions, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "releaseNTN", _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x57895ca2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakableVestingLogic *StakableVestingLogic) CallSetManagerContract(r *Runner, opts *runOptions, _managerContract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "setManagerContract", _managerContract)
	r.revertSnapshot(snap)
	return consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVestingLogic.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0xd06117ff.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFunds() returns()
func (_StakableVestingLogic *StakableVestingLogic) CallUpdateFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogic.call(opts, "updateFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateFundsAndGetContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x46e1448d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVestingLogic *StakableVestingLogic) CallUpdateFundsAndGetContract(r *Runner, opts *runOptions) (ContractBaseContract, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVestingLogic.call(opts, "updateFundsAndGetContract")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakableVestingLogic *StakableVestingLogic) ChangeContractBeneficiary(opts *runOptions, _recipient common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "changeContractBeneficiary", _recipient)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakableVestingLogic *StakableVestingLogic) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "claimRewards")
	return consumed, err
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakableVestingLogic *StakableVestingLogic) ClaimRewards0(opts *runOptions, _validator common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "claimRewards0", _validator)
	return consumed, err
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVestingLogic *StakableVestingLogic) CreateContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakableVestingLogic *StakableVestingLogic) ReleaseAllLNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "releaseAllLNTN")
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakableVestingLogic *StakableVestingLogic) ReleaseAllNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "releaseAllNTN")
	return consumed, err
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakableVestingLogic *StakableVestingLogic) ReleaseFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "releaseFunds")
	return consumed, err
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakableVestingLogic *StakableVestingLogic) ReleaseLNTN(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "releaseLNTN", _validator, _amount)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakableVestingLogic *StakableVestingLogic) ReleaseNTN(opts *runOptions, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "releaseNTN", _amount)
	return consumed, err
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakableVestingLogic *StakableVestingLogic) SetManagerContract(opts *runOptions, _managerContract common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "setManagerContract", _managerContract)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogic *StakableVestingLogic) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakableVestingLogic *StakableVestingLogic) UpdateFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "updateFunds")
	return consumed, err
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVestingLogic *StakableVestingLogic) UpdateFundsAndGetContract(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "updateFundsAndGetContract")
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_StakableVestingLogic *StakableVestingLogic) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakableVestingLogic *StakableVestingLogic) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogic.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StakableVestingLogicFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the StakableVestingLogic contract.
		type StakableVestingLogicFundsReleasedIterator struct {
			Event *StakableVestingLogicFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StakableVestingLogicFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StakableVestingLogicFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StakableVestingLogicFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StakableVestingLogicFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StakableVestingLogicFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StakableVestingLogicFundsReleased represents a FundsReleased event raised by the StakableVestingLogic contract.
		type StakableVestingLogicFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_StakableVestingLogic *StakableVestingLogic) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*StakableVestingLogicFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakableVestingLogic.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &StakableVestingLogicFundsReleasedIterator{contract: _StakableVestingLogic.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakableVestingLogic *StakableVestingLogic) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *StakableVestingLogicFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakableVestingLogic.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StakableVestingLogicFundsReleased)
						if err := _StakableVestingLogic.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakableVestingLogic *StakableVestingLogic) ParseFundsReleased(log types.Log) (*StakableVestingLogicFundsReleased, error) {
			event := new(StakableVestingLogicFundsReleased)
			if err := _StakableVestingLogic.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakableVestingLogicTestMetaData contains all meta data concerning the StakableVestingLogicTest contract.
var StakableVestingLogicTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"cfae4141": "clearValidators()",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
	Bin: "",
}

// StakableVestingLogicTestABI is the input ABI used to generate the binding from.
// Deprecated: Use StakableVestingLogicTestMetaData.ABI instead.
var StakableVestingLogicTestABI = StakableVestingLogicTestMetaData.ABI

// Deprecated: Use StakableVestingLogicTestMetaData.Sigs instead.
// StakableVestingLogicTestFuncSigs maps the 4-byte function signature to its string representation.
var StakableVestingLogicTestFuncSigs = StakableVestingLogicTestMetaData.Sigs

// StakableVestingLogicTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakableVestingLogicTestMetaData.Bin instead.
var StakableVestingLogicTestBin = StakableVestingLogicTestMetaData.Bin

// DeployStakableVestingLogicTest deploys a new Ethereum contract, binding an instance of StakableVestingLogicTest to it.
func (r *Runner) DeployStakableVestingLogicTest(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakableVestingLogicTest, error) {
	parsed, err := StakableVestingLogicTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakableVestingLogicTestBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakableVestingLogicTest{contract: c}, nil
}

// StakableVestingLogicTest is an auto generated Go binding around an Ethereum contract.
type StakableVestingLogicTest struct {
	*contract
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) ContractTotalValue(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakableVestingLogicTest *StakableVestingLogicTest) GetBeneficiary(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "getBeneficiary")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVestingLogicTest *StakableVestingLogicTest) GetContract(opts *runOptions) (ContractBaseContract, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "getContract")

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakableVestingLogicTest *StakableVestingLogicTest) GetLinkedValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakableVestingLogicTest *StakableVestingLogicTest) GetManagerContractAddress(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) LiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) LockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVestingLogicTest *StakableVestingLogicTest) UnclaimedRewards(opts *runOptions, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "unclaimedRewards", _validator)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakableVestingLogicTest *StakableVestingLogicTest) UnclaimedRewards0(opts *runOptions) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "unclaimedRewards0")

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) UnlockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) VestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "vestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) WithdrawableVestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingLogicTest.call(opts, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVestingLogicTest.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xe2bb8234.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "changeContractBeneficiary", _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards0 is a free data retrieval call for a paid mutator transaction binding the contract method 0xef5cfb8c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(address _validator) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallClaimRewards0(r *Runner, opts *runOptions, _validator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "claimRewards0", _validator)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClearValidators is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfae4141.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function clearValidators() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallClearValidators(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "clearValidators")
	r.revertSnapshot(snap)
	return consumed, err

}

// CreateContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae0a609.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallCreateContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x0b52f809.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllLNTN() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallReleaseAllLNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseAllLNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xb693fc09.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallReleaseAllNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseAllNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x69d89575.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFunds() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallReleaseFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3c6f2fa6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallReleaseLNTN(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseLNTN", _validator, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xfc028e36.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallReleaseNTN(r *Runner, opts *runOptions, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseNTN", _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x57895ca2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallSetManagerContract(r *Runner, opts *runOptions, _managerContract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "setManagerContract", _managerContract)
	r.revertSnapshot(snap)
	return consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVestingLogicTest.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0xd06117ff.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFunds() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallUpdateFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingLogicTest.call(opts, "updateFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateFundsAndGetContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x46e1448d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVestingLogicTest *StakableVestingLogicTest) CallUpdateFundsAndGetContract(r *Runner, opts *runOptions) (ContractBaseContract, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakableVestingLogicTest.call(opts, "updateFundsAndGetContract")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ChangeContractBeneficiary(opts *runOptions, _recipient common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "changeContractBeneficiary", _recipient)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "claimRewards")
	return consumed, err
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ClaimRewards0(opts *runOptions, _validator common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "claimRewards0", _validator)
	return consumed, err
}

// ClearValidators is a paid mutator transaction binding the contract method 0xcfae4141.
//
// Solidity: function clearValidators() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ClearValidators(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "clearValidators")
	return consumed, err
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) CreateContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ReleaseAllLNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseAllLNTN")
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ReleaseAllNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseAllNTN")
	return consumed, err
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ReleaseFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseFunds")
	return consumed, err
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ReleaseLNTN(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseLNTN", _validator, _amount)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) ReleaseNTN(opts *runOptions, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "releaseNTN", _amount)
	return consumed, err
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) SetManagerContract(opts *runOptions, _managerContract common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "setManagerContract", _managerContract)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakableVestingLogicTest *StakableVestingLogicTest) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) UpdateFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "updateFunds")
	return consumed, err
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakableVestingLogicTest *StakableVestingLogicTest) UpdateFundsAndGetContract(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "updateFundsAndGetContract")
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakableVestingLogicTest *StakableVestingLogicTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingLogicTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StakableVestingLogicTestFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the StakableVestingLogicTest contract.
		type StakableVestingLogicTestFundsReleasedIterator struct {
			Event *StakableVestingLogicTestFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StakableVestingLogicTestFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StakableVestingLogicTestFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StakableVestingLogicTestFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StakableVestingLogicTestFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StakableVestingLogicTestFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StakableVestingLogicTestFundsReleased represents a FundsReleased event raised by the StakableVestingLogicTest contract.
		type StakableVestingLogicTestFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_StakableVestingLogicTest *StakableVestingLogicTest) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*StakableVestingLogicTestFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakableVestingLogicTest.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &StakableVestingLogicTestFundsReleasedIterator{contract: _StakableVestingLogicTest.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakableVestingLogicTest *StakableVestingLogicTest) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *StakableVestingLogicTestFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakableVestingLogicTest.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StakableVestingLogicTestFundsReleased)
						if err := _StakableVestingLogicTest.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakableVestingLogicTest *StakableVestingLogicTest) ParseFundsReleased(log types.Log) (*StakableVestingLogicTestFundsReleased, error) {
			event := new(StakableVestingLogicTestFundsReleased)
			if err := _StakableVestingLogicTest.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakableVestingManagerMetaData contains all meta data concerning the StakableVestingManager contract.
var StakableVestingManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniqueContractID\",\"type\":\"uint256\"}],\"name\":\"getContractAccount\",\"outputs\":[{\"internalType\":\"contractIStakableVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContractAccount\",\"outputs\":[{\"internalType\":\"contractIStakableVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContractAccounts\",\"outputs\":[{\"internalType\":\"contractIStakableVesting[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setStakableVestingLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakableVestingLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"a0a8e460": "contractVersion()",
		"5cdc502d": "getContractAccount(address,uint256)",
		"0bdeeda4": "getContractAccount(uint256)",
		"531ffd2f": "getContractAccounts(address)",
		"213fe2b7": "getContracts(address)",
		"fca78d11": "getUniqueContractID(address,uint256)",
		"2d8d17c6": "newContract(address,uint256,uint256,uint256,uint256)",
		"19d7a372": "setStakableVestingLogicContract(address)",
		"75b415b7": "stakableVestingLogicContract()",
		"635bf933": "totalContracts(address)",
	},
	Bin: "",
}

// StakableVestingManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use StakableVestingManagerMetaData.ABI instead.
var StakableVestingManagerABI = StakableVestingManagerMetaData.ABI

// Deprecated: Use StakableVestingManagerMetaData.Sigs instead.
// StakableVestingManagerFuncSigs maps the 4-byte function signature to its string representation.
var StakableVestingManagerFuncSigs = StakableVestingManagerMetaData.Sigs

// StakableVestingManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakableVestingManagerMetaData.Bin instead.
var StakableVestingManagerBin = StakableVestingManagerMetaData.Bin

// DeployStakableVestingManager deploys a new Ethereum contract, binding an instance of StakableVestingManager to it.
func (r *Runner) DeployStakableVestingManager(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakableVestingManager, error) {
	parsed, err := StakableVestingManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakableVestingManagerBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakableVestingManager{contract: c}, nil
}

// StakableVestingManager is an auto generated Go binding around an Ethereum contract.
type StakableVestingManager struct {
	*contract
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakableVestingManager *StakableVestingManager) ContractVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "contractVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetContractAccount is a free data retrieval call binding the contract method 0x0bdeeda4.
//
// Solidity: function getContractAccount(uint256 _uniqueContractID) view returns(address)
func (_StakableVestingManager *StakableVestingManager) GetContractAccount(opts *runOptions, _uniqueContractID *big.Int) (common.Address, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "getContractAccount", _uniqueContractID)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContractAccount0 is a free data retrieval call binding the contract method 0x5cdc502d.
//
// Solidity: function getContractAccount(address _beneficiary, uint256 _id) view returns(address)
func (_StakableVestingManager *StakableVestingManager) GetContractAccount0(opts *runOptions, _beneficiary common.Address, _id *big.Int) (common.Address, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "getContractAccount0", _beneficiary, _id)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContractAccounts is a free data retrieval call binding the contract method 0x531ffd2f.
//
// Solidity: function getContractAccounts(address _beneficiary) view returns(address[])
func (_StakableVestingManager *StakableVestingManager) GetContractAccounts(opts *runOptions, _beneficiary common.Address) ([]common.Address, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "getContractAccounts", _beneficiary)

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakableVestingManager *StakableVestingManager) GetContracts(opts *runOptions, _beneficiary common.Address) ([]ContractBaseContract, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)
	return out0, consumed, err

}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakableVestingManager *StakableVestingManager) GetUniqueContractID(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// StakableVestingLogicContract is a free data retrieval call binding the contract method 0x75b415b7.
//
// Solidity: function stakableVestingLogicContract() view returns(address)
func (_StakableVestingManager *StakableVestingManager) StakableVestingLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "stakableVestingLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakableVestingManager *StakableVestingManager) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakableVestingManager.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9f45b62.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakableVestingManager *StakableVestingManager) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingManager.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// NewContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x2d8d17c6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVestingManager *StakableVestingManager) CallNewContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingManager.call(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStakableVestingLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x19d7a372.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStakableVestingLogicContract(address _contract) returns()
func (_StakableVestingManager *StakableVestingManager) CallSetStakableVestingLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakableVestingManager.call(opts, "setStakableVestingLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakableVestingManager *StakableVestingManager) ChangeContractBeneficiary(opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingManager.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	return consumed, err
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakableVestingManager *StakableVestingManager) NewContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _StakableVestingManager.call(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// SetStakableVestingLogicContract is a paid mutator transaction binding the contract method 0x19d7a372.
//
// Solidity: function setStakableVestingLogicContract(address _contract) returns()
func (_StakableVestingManager *StakableVestingManager) SetStakableVestingLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _StakableVestingManager.call(opts, "setStakableVestingLogicContract", _contract)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakableVestingManager *StakableVestingManager) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingManager.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StakableVestingManagerBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the StakableVestingManager contract.
		type StakableVestingManagerBeneficiaryChangedIterator struct {
			Event *StakableVestingManagerBeneficiaryChanged // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StakableVestingManagerBeneficiaryChangedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StakableVestingManagerBeneficiaryChanged)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StakableVestingManagerBeneficiaryChanged)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StakableVestingManagerBeneficiaryChangedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StakableVestingManagerBeneficiaryChangedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StakableVestingManagerBeneficiaryChanged represents a BeneficiaryChanged event raised by the StakableVestingManager contract.
		type StakableVestingManagerBeneficiaryChanged struct {
			NewBeneficiary common.Address;
			OldBeneficiary common.Address;
			ContractID *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
 		func (_StakableVestingManager *StakableVestingManager) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*StakableVestingManagerBeneficiaryChangedIterator, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _StakableVestingManager.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return &StakableVestingManagerBeneficiaryChangedIterator{contract: _StakableVestingManager.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
 		}

		// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_StakableVestingManager *StakableVestingManager) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *StakableVestingManagerBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _StakableVestingManager.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StakableVestingManagerBeneficiaryChanged)
						if err := _StakableVestingManager.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_StakableVestingManager *StakableVestingManager) ParseBeneficiaryChanged(log types.Log) (*StakableVestingManagerBeneficiaryChanged, error) {
			event := new(StakableVestingManagerBeneficiaryChanged)
			if err := _StakableVestingManager.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakableVestingStateMetaData contains all meta data concerning the StakableVestingState contract.
var StakableVestingStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b5060405161023b38038061023b83398101604081905261002f9161005d565b600080546001600160a01b039092166001600160a01b0319928316179055600580549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b61019f8061009c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610116565b005b6100226100145b600080600560009054906101000a90046001600160a01b03166001600160a01b03166375b415b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610139565b90506001600160a01b0381166101115760405162461bcd60e51b815260206004820152602760248201527f7374616b61626c652076657374696e67206c6f67696320636f6e7472616374206044820152661b9bdd081cd95d60ca1b606482015260840160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610133573d6000fd5b503d6000f35b60006020828403121561014b57600080fd5b81516001600160a01b038116811461016257600080fd5b939250505056fea2646970667358221220c1676f4212a4346f26c5e393d6abc112fc50e284507e55d838b75d2ec31aa5fa64736f6c63430008150033",
}

// StakableVestingStateABI is the input ABI used to generate the binding from.
// Deprecated: Use StakableVestingStateMetaData.ABI instead.
var StakableVestingStateABI = StakableVestingStateMetaData.ABI

// StakableVestingStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakableVestingStateMetaData.Bin instead.
var StakableVestingStateBin = StakableVestingStateMetaData.Bin

// DeployStakableVestingState deploys a new Ethereum contract, binding an instance of StakableVestingState to it.
func (r *Runner) DeployStakableVestingState(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakableVestingState, error) {
	parsed, err := StakableVestingStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakableVestingStateBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakableVestingState{contract: c}, nil
}

// StakableVestingState is an auto generated Go binding around an Ethereum contract.
type StakableVestingState struct {
	*contract
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_StakableVestingState *StakableVestingState) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _StakableVestingState.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakableVestingState *StakableVestingState) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakableVestingState.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// StakableVestingStorageMetaData contains all meta data concerning the StakableVestingStorage contract.
var StakableVestingStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// StakableVestingStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use StakableVestingStorageMetaData.ABI instead.
var StakableVestingStorageABI = StakableVestingStorageMetaData.ABI

// StakableVestingStorage is an auto generated Go binding around an Ethereum contract.
type StakableVestingStorage struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// SupplyControlMetaData contains all meta data concerning the SupplyControl contract.
var SupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
	Bin: "0x6080604052604051610512380380610512833981016040819052610022916100a5565b3460000361004357604051637c946ed760e01b815260040160405180910390fd5b600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560008054919093169116179055346001556100e8565b80516001600160a01b03811681146100a057600080fd5b919050565b6000806000606084860312156100ba57600080fd5b6100c384610089565b92506100d160208501610089565b91506100df60408501610089565b90509250925092565b61041b806100f76000396000f3fe6080604052600436106100705760003560e01c80637e47961c1161004e5780637e47961c146100c85780637ecc2b5614610100578063b3ab15fb14610113578063db7f521a1461013357600080fd5b806318160ddd1461007557806340c10f191461009e57806344df8e70146100c0575b600080fd5b34801561008157600080fd5b5061008b60015481565b6040519081526020015b60405180910390f35b3480156100aa57600080fd5b506100be6100b9366004610399565b610153565b005b6100be610265565b3480156100d457600080fd5b506000546100e8906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b34801561010c57600080fd5b504761008b565b34801561011f57600080fd5b506100be61012e3660046103c3565b6102e5565b34801561013f57600080fd5b506100be61014e3660046103c3565b610331565b6000546001600160a01b0316331461017d576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821615806101a057506000546001600160a01b038381169116145b156101be57604051634e46966960e11b815260040160405180910390fd5b8015806101ca57504781115b156101e85760405163162908e360e11b815260040160405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561021e573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a15050565b3460000361028657604051637c946ed760e01b815260040160405180910390fd5b6000546001600160a01b031633146102b0576040516282b42960e81b815260040160405180910390fd5b6040513481527fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9060200160405180910390a1565b6002546001600160a01b0316331461030f576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461035b576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461039457600080fd5b919050565b600080604083850312156103ac57600080fd5b6103b58361037d565b946020939093013593505050565b6000602082840312156103d557600080fd5b6103de8261037d565b939250505056fea26469706673582212207646b2e6881a2d6269951386532b4fc6a3409fe50e89f6a55b709c4060cd997f64736f6c63430008150033",
}

// SupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use SupplyControlMetaData.ABI instead.
var SupplyControlABI = SupplyControlMetaData.ABI

// Deprecated: Use SupplyControlMetaData.Sigs instead.
// SupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var SupplyControlFuncSigs = SupplyControlMetaData.Sigs

// SupplyControlBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SupplyControlMetaData.Bin instead.
var SupplyControlBin = SupplyControlMetaData.Bin

// DeploySupplyControl deploys a new Ethereum contract, binding an instance of SupplyControl to it.
func (r *Runner) DeploySupplyControl(opts *runOptions, autonity common.Address, operator common.Address, stabilizer_ common.Address) (common.Address, uint64, *SupplyControl, error) {
	parsed, err := SupplyControlMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(SupplyControlBin), autonity, operator, stabilizer_)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &SupplyControl{contract: c}, nil
}

// SupplyControl is an auto generated Go binding around an Ethereum contract.
type SupplyControl struct {
	*contract
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControl) AvailableSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "availableSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControl) Stabilizer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "stabilizer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControl) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x44df8e70.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControl) CallBurn(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "burn")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControl) CallMint(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "mint", recipient, amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControl) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizer is a free data retrieval call for a paid mutator transaction binding the contract method 0xdb7f521a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControl) CallSetStabilizer(r *Runner, opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "setStabilizer", stabilizer_)
	r.revertSnapshot(snap)
	return consumed, err

}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControl) Burn(opts *runOptions) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "burn")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControl) Mint(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "mint", recipient, amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControl) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "setOperator", operator)
	return consumed, err
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControl) SetStabilizer(opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "setStabilizer", stabilizer_)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// SupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the SupplyControl contract.
		type SupplyControlBurnIterator struct {
			Event *SupplyControlBurn // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *SupplyControlBurnIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(SupplyControlBurn)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(SupplyControlBurn)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *SupplyControlBurnIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *SupplyControlBurnIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// SupplyControlBurn represents a Burn event raised by the SupplyControl contract.
		type SupplyControlBurn struct {
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
 		func (_SupplyControl *SupplyControl) FilterBurn(opts *bind.FilterOpts) (*SupplyControlBurnIterator, error) {



			logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return &SupplyControlBurnIterator{contract: _SupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
 		}

		// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_SupplyControl *SupplyControl) WatchBurn(opts *bind.WatchOpts, sink chan<- *SupplyControlBurn) (event.Subscription, error) {



			logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(SupplyControlBurn)
						if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_SupplyControl *SupplyControl) ParseBurn(log types.Log) (*SupplyControlBurn, error) {
			event := new(SupplyControlBurn)
			if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// SupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the SupplyControl contract.
		type SupplyControlMintIterator struct {
			Event *SupplyControlMint // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *SupplyControlMintIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(SupplyControlMint)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(SupplyControlMint)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *SupplyControlMintIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *SupplyControlMintIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// SupplyControlMint represents a Mint event raised by the SupplyControl contract.
		type SupplyControlMint struct {
			Recipient common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
 		func (_SupplyControl *SupplyControl) FilterMint(opts *bind.FilterOpts) (*SupplyControlMintIterator, error) {




			logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return &SupplyControlMintIterator{contract: _SupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
 		}

		// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_SupplyControl *SupplyControl) WatchMint(opts *bind.WatchOpts, sink chan<- *SupplyControlMint) (event.Subscription, error) {




			logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(SupplyControlMint)
						if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_SupplyControl *SupplyControl) ParseMint(log types.Log) (*SupplyControlMint, error) {
			event := new(SupplyControlMint)
			if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// TestBaseMetaData contains all meta data concerning the TestBase contract.
var TestBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"bfb4ebcf": "Foo()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161041238038061041283398101604081905261002f91610058565b600061003b82826101aa565b5050610269565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006b57600080fd5b82516001600160401b038082111561008257600080fd5b818501915085601f83011261009657600080fd5b8151818111156100a8576100a8610042565b604051601f8201601f19908116603f011681019083821181831017156100d0576100d0610042565b8160405282815288868487010111156100e857600080fd5b600093505b8284101561010a57848401860151818501870152928501926100ed565b600086848301015280965050505050505092915050565b600181811c9082168061013557607f821691505b60208210810361015557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101a557600081815260208120601f850160051c810160208610156101825750805b601f850160051c820191505b818110156101a15782815560010161018e565b5050505b505050565b81516001600160401b038111156101c3576101c3610042565b6101d7816101d18454610121565b8461015b565b602080601f83116001811461020c57600084156101f45750858301515b600019600386901b1c1916600185901b1785556101a1565b600085815260208120601f198616915b8281101561023b5788860151825594840194600190910190840161021c565b50858210156102595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806102786000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bfb4ebcf14610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212208a06d2166a41e7ecd80338f714111968967e6860fd03c12f7d848443da83971b64736f6c63430008150033",
}

// TestBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use TestBaseMetaData.ABI instead.
var TestBaseABI = TestBaseMetaData.ABI

// Deprecated: Use TestBaseMetaData.Sigs instead.
// TestBaseFuncSigs maps the 4-byte function signature to its string representation.
var TestBaseFuncSigs = TestBaseMetaData.Sigs

// TestBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestBaseMetaData.Bin instead.
var TestBaseBin = TestBaseMetaData.Bin

// DeployTestBase deploys a new Ethereum contract, binding an instance of TestBase to it.
func (r *Runner) DeployTestBase(opts *runOptions, _foo string) (common.Address, uint64, *TestBase, error) {
	parsed, err := TestBaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(TestBaseBin), _foo)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &TestBase{contract: c}, nil
}

// TestBase is an auto generated Go binding around an Ethereum contract.
type TestBase struct {
	*contract
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBase) Foo(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestBase.call(opts, "Foo")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// TestUpgradedMetaData contains all meta data concerning the TestUpgraded contract.
var TestUpgradedMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Bar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"name\":\"FooBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b0a378b0": "Bar()",
		"bfb4ebcf": "Foo()",
		"1e4f3395": "FooBar(string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161068838038061068883398101604081905261002f9161010e565b80600061003c82826101fa565b506001905061004b83826101fa565b5050506102b9565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261007a57600080fd5b81516001600160401b038082111561009457610094610053565b604051601f8301601f19908116603f011681019082821181831017156100bc576100bc610053565b816040528381526020925086838588010111156100d857600080fd5b600091505b838210156100fa57858201830151818301840152908201906100dd565b600093810190920192909252949350505050565b6000806040838503121561012157600080fd5b82516001600160401b038082111561013857600080fd5b61014486838701610069565b9350602085015191508082111561015a57600080fd5b5061016785828601610069565b9150509250929050565b600181811c9082168061018557607f821691505b6020821081036101a557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101f557600081815260208120601f850160051c810160208610156101d25750805b601f850160051c820191505b818110156101f1578281556001016101de565b5050505b505050565b81516001600160401b0381111561021357610213610053565b610227816102218454610171565b846101ab565b602080601f83116001811461025c57600084156102445750858301515b600019600386901b1c1916600185901b1785556101f1565b600085815260208120601f198616915b8281101561028b5788860151825594840194600190910190840161026c565b50858210156102a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6103c0806102c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e4f339514610046578063b0a378b01461005b578063bfb4ebcf14610079575b600080fd5b610059610054366004610142565b610081565b005b610063610091565b60405161007091906101f3565b60405180910390f35b61006361011f565b600061008d82826102ca565b5050565b6001805461009e90610241565b80601f01602080910402602001604051908101604052809291908181526020018280546100ca90610241565b80156101175780601f106100ec57610100808354040283529160200191610117565b820191906000526020600020905b8154815290600101906020018083116100fa57829003601f168201915b505050505081565b6000805461009e90610241565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561015457600080fd5b813567ffffffffffffffff8082111561016c57600080fd5b818401915084601f83011261018057600080fd5b8135818111156101925761019261012c565b604051601f8201601f19908116603f011681019083821181831017156101ba576101ba61012c565b816040528281528760208487010111156101d357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561022057858101830151858201604001528201610204565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061025557607f821691505b60208210810361027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102c557600081815260208120601f850160051c810160208610156102a25750805b601f850160051c820191505b818110156102c1578281556001016102ae565b5050505b505050565b815167ffffffffffffffff8111156102e4576102e461012c565b6102f8816102f28454610241565b8461027b565b602080601f83116001811461032d57600084156103155750858301515b600019600386901b1c1916600185901b1785556102c1565b600085815260208120601f198616915b8281101561035c5788860151825594840194600190910190840161033d565b508582101561037a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203760a291a85a110ce210df82b608f9bf9aba305a3924f4bb5f14524f892240a664736f6c63430008150033",
}

// TestUpgradedABI is the input ABI used to generate the binding from.
// Deprecated: Use TestUpgradedMetaData.ABI instead.
var TestUpgradedABI = TestUpgradedMetaData.ABI

// Deprecated: Use TestUpgradedMetaData.Sigs instead.
// TestUpgradedFuncSigs maps the 4-byte function signature to its string representation.
var TestUpgradedFuncSigs = TestUpgradedMetaData.Sigs

// TestUpgradedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestUpgradedMetaData.Bin instead.
var TestUpgradedBin = TestUpgradedMetaData.Bin

// DeployTestUpgraded deploys a new Ethereum contract, binding an instance of TestUpgraded to it.
func (r *Runner) DeployTestUpgraded(opts *runOptions, _bar string, _foo string) (common.Address, uint64, *TestUpgraded, error) {
	parsed, err := TestUpgradedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(TestUpgradedBin), _bar, _foo)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &TestUpgraded{contract: c}, nil
}

// TestUpgraded is an auto generated Go binding around an Ethereum contract.
type TestUpgraded struct {
	*contract
}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgraded) Bar(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestUpgraded.call(opts, "Bar")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgraded) Foo(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestUpgraded.call(opts, "Foo")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// FooBar is a free data retrieval call for a paid mutator transaction binding the contract method 0x1e4f3395.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgraded) CallFooBar(r *Runner, opts *runOptions, _foo string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _TestUpgraded.call(opts, "FooBar", _foo)
	r.revertSnapshot(snap)
	return consumed, err

}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgraded) FooBar(opts *runOptions, _foo string) (uint64, error) {
	_, consumed, err := _TestUpgraded.call(opts, "FooBar", _foo)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// UpgradeManagerMetaData contains all meta data concerning the UpgradeManager contract.
var UpgradeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"autonity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"55463ceb": "autonity()",
		"570ca735": "operator()",
		"b3ab15fb": "setOperator(address)",
		"6e3d9ff0": "upgrade(address,string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161044338038061044383398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610385806100be6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355463ceb14610051578063570ca735146100805780636e3d9ff014610093578063b3ab15fb146100a8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610064906001600160a01b031681565b6100a66100a1366004610220565b6100bb565b005b6100a66100b63660046102e2565b610166565b6001546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064015b60405180910390fd5b60405160f9906000906101339085908590602001610304565b6040516020818303038152906040529050600080825160208401855af43d6000803e808015610161573d6000f35b3d6000fd5b6000546001600160a01b031633146101cc5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f7420746865204175746f6e69747920636f6e74726044820152621858dd60ea1b6064820152608401610111565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461020557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561023357600080fd5b61023c836101ee565b9150602083013567ffffffffffffffff8082111561025957600080fd5b818501915085601f83011261026d57600080fd5b81358181111561027f5761027f61020a565b604051601f8201601f19908116603f011681019083821181831017156102a7576102a761020a565b816040528281528860208487010111156102c057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156102f457600080fd5b6102fd826101ee565b9392505050565b6bffffffffffffffffffffffff198360601b1681526000825160005b8181101561033d5760208186018101516014868401015201610320565b5060009201601401918252509291505056fea2646970667358221220f498012ec1f37ae6351d43ebf2452dd5177182b2fba7c87434a1798f72cffba464736f6c63430008150033",
}

// UpgradeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeManagerMetaData.ABI instead.
var UpgradeManagerABI = UpgradeManagerMetaData.ABI

// Deprecated: Use UpgradeManagerMetaData.Sigs instead.
// UpgradeManagerFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeManagerFuncSigs = UpgradeManagerMetaData.Sigs

// UpgradeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UpgradeManagerMetaData.Bin instead.
var UpgradeManagerBin = UpgradeManagerMetaData.Bin

// DeployUpgradeManager deploys a new Ethereum contract, binding an instance of UpgradeManager to it.
func (r *Runner) DeployUpgradeManager(opts *runOptions, _autonity common.Address, _operator common.Address) (common.Address, uint64, *UpgradeManager, error) {
	parsed, err := UpgradeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(UpgradeManagerBin), _autonity, _operator)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &UpgradeManager{contract: c}, nil
}

// UpgradeManager is an auto generated Go binding around an Ethereum contract.
type UpgradeManager struct {
	*contract
}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManager) Autonity(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _UpgradeManager.call(opts, "autonity")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManager) Operator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _UpgradeManager.call(opts, "operator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManager) CallSetOperator(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _UpgradeManager.call(opts, "setOperator", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// Upgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x6e3d9ff0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManager) CallUpgrade(r *Runner, opts *runOptions, _target common.Address, _data string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _UpgradeManager.call(opts, "upgrade", _target, _data)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManager) SetOperator(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _UpgradeManager.call(opts, "setOperator", _account)
	return consumed, err
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManager) Upgrade(opts *runOptions, _target common.Address, _data string) (uint64, error) {
	_, consumed, err := _UpgradeManager.call(opts, "upgrade", _target, _data)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// UpgradeableMetaData contains all meta data concerning the Upgradeable contract.
var UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"872cf059": "completeContractUpgrade()",
		"b66b3e79": "getNewContract()",
		"cf9c5719": "resetContractUpgrade()",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
}

// UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeableMetaData.ABI instead.
var UpgradeableABI = UpgradeableMetaData.ABI

// Deprecated: Use UpgradeableMetaData.Sigs instead.
// UpgradeableFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeableFuncSigs = UpgradeableMetaData.Sigs

// Upgradeable is an auto generated Go binding around an Ethereum contract.
type Upgradeable struct {
	*contract
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *Upgradeable) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _Upgradeable.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *Upgradeable) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *Upgradeable) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "resetContractUpgrade")
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *Upgradeable) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ValidatorManagerMetaData contains all meta data concerning the ValidatorManager contract.
var ValidatorManagerMetaData = &bind.MetaData{
	ABI: "[]",
}

// ValidatorManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerMetaData.ABI instead.
var ValidatorManagerABI = ValidatorManagerMetaData.ABI

// ValidatorManager is an auto generated Go binding around an Ethereum contract.
type ValidatorManager struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ValidatorManagerStorageMetaData contains all meta data concerning the ValidatorManagerStorage contract.
var ValidatorManagerStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// ValidatorManagerStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerStorageMetaData.ABI instead.
var ValidatorManagerStorageABI = ValidatorManagerStorageMetaData.ABI

// ValidatorManagerStorage is an auto generated Go binding around an Ethereum contract.
type ValidatorManagerStorage struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */
