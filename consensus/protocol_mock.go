// Code generated by MockGen. DO NOT EDIT.
// Source: consensus/protocol.go

package consensus

import (
	common "github.com/clearmatics/autonity/common"
	types "github.com/clearmatics/autonity/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBroadcaster is a mock of Broadcaster interface
type MockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterMockRecorder
}

// MockBroadcasterMockRecorder is the mock recorder for MockBroadcaster
type MockBroadcasterMockRecorder struct {
	mock *MockBroadcaster
}

// NewMockBroadcaster creates a new mock instance
func NewMockBroadcaster(ctrl *gomock.Controller) *MockBroadcaster {
	mock := &MockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockBroadcaster) EXPECT() *MockBroadcasterMockRecorder {
	return _m.recorder
}

// Enqueue mocks base method
func (_m *MockBroadcaster) Enqueue(id string, block *types.Block) {
	_m.ctrl.Call(_m, "Enqueue", id, block)
}

// Enqueue indicates an expected call of Enqueue
func (_mr *MockBroadcasterMockRecorder) Enqueue(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Enqueue", reflect.TypeOf((*MockBroadcaster)(nil).Enqueue), arg0, arg1)
}

// FindPeers mocks base method
func (_m *MockBroadcaster) FindPeers(_param0 map[common.Address]struct{}) map[common.Address]Peer {
	ret := _m.ctrl.Call(_m, "FindPeers", _param0)
	ret0, _ := ret[0].(map[common.Address]Peer)
	return ret0
}

// FindPeers indicates an expected call of FindPeers
func (_mr *MockBroadcasterMockRecorder) FindPeers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindPeers", reflect.TypeOf((*MockBroadcaster)(nil).FindPeers), arg0)
}

// IsTrustedPeer mocks base method
func (_m *MockBroadcaster) IsTrustedPeer(peer common.Address) bool {
	ret := _m.ctrl.Call(_m, "IsTrustedPeer", peer)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTrustedPeer indicates an expected call of IsTrustedPeer
func (_mr *MockBroadcasterMockRecorder) IsTrustedPeer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsTrustedPeer", reflect.TypeOf((*MockBroadcaster)(nil).IsTrustedPeer), arg0)
}

// MockPeer is a mock of Peer interface
type MockPeer struct {
	ctrl     *gomock.Controller
	recorder *MockPeerMockRecorder
}

// MockPeerMockRecorder is the mock recorder for MockPeer
type MockPeerMockRecorder struct {
	mock *MockPeer
}

// NewMockPeer creates a new mock instance
func NewMockPeer(ctrl *gomock.Controller) *MockPeer {
	mock := &MockPeer{ctrl: ctrl}
	mock.recorder = &MockPeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPeer) EXPECT() *MockPeerMockRecorder {
	return _m.recorder
}

// Send mocks base method
func (_m *MockPeer) Send(msgcode uint64, data interface{}) error {
	ret := _m.ctrl.Call(_m, "Send", msgcode, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockPeerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Send", reflect.TypeOf((*MockPeer)(nil).Send), arg0, arg1)
}
