// Code generated by MockGen. DO NOT EDIT.
// Source: consensus/tendermint/validator.go

// Package tendermint is a generated GoMock package.
package validator

import (
	"reflect"

	"github.com/clearmatics/autonity/common"
	"github.com/clearmatics/autonity/consensus/tendermint/config"
	"github.com/golang/mock/gomock"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockValidator) Address() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockValidatorMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockValidator)(nil).Address))
}

// String mocks base method
func (m *MockValidator) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockValidatorMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockValidator)(nil).String))
}

// MockValidatorSet is a mock of Set interface
type MockValidatorSet struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSetMockRecorder
}

// MockValidatorSetMockRecorder is the mock recorder for MockValidatorSet
type MockValidatorSetMockRecorder struct {
	mock *MockValidatorSet
}

// NewMockValidatorSet creates a new mock instance
func NewMockValidatorSet(ctrl *gomock.Controller) *MockValidatorSet {
	mock := &MockValidatorSet{ctrl: ctrl}
	mock.recorder = &MockValidatorSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSet) EXPECT() *MockValidatorSetMockRecorder {
	return m.recorder
}

// CalcProposer mocks base method
func (m *MockValidatorSet) CalcProposer(lastProposer common.Address, round uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CalcProposer", lastProposer, round)
}

// CalcProposer indicates an expected call of CalcProposer
func (mr *MockValidatorSetMockRecorder) CalcProposer(lastProposer, round interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcProposer", reflect.TypeOf((*MockValidatorSet)(nil).CalcProposer), lastProposer, round)
}

// Size mocks base method
func (m *MockValidatorSet) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockValidatorSetMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockValidatorSet)(nil).Size))
}

// List mocks base method
func (m *MockValidatorSet) List() []Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]Validator)
	return ret0
}

// List indicates an expected call of List
func (mr *MockValidatorSetMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockValidatorSet)(nil).List))
}

// GetByIndex mocks base method
func (m *MockValidatorSet) GetByIndex(i uint64) Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", i)
	ret0, _ := ret[0].(Validator)
	return ret0
}

// GetByIndex indicates an expected call of GetByIndex
func (mr *MockValidatorSetMockRecorder) GetByIndex(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockValidatorSet)(nil).GetByIndex), i)
}

// GetByAddress mocks base method
func (m *MockValidatorSet) GetByAddress(addr common.Address) (int, Validator) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(Validator)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress
func (mr *MockValidatorSetMockRecorder) GetByAddress(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockValidatorSet)(nil).GetByAddress), addr)
}

// GetProposer mocks base method
func (m *MockValidatorSet) GetProposer() Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer")
	ret0, _ := ret[0].(Validator)
	return ret0
}

// GetProposer indicates an expected call of GetProposer
func (mr *MockValidatorSetMockRecorder) GetProposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockValidatorSet)(nil).GetProposer))
}

// IsProposer mocks base method
func (m *MockValidatorSet) IsProposer(address common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProposer", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProposer indicates an expected call of IsProposer
func (mr *MockValidatorSetMockRecorder) IsProposer(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProposer", reflect.TypeOf((*MockValidatorSet)(nil).IsProposer), address)
}

// AddValidator mocks base method
func (m *MockValidatorSet) AddValidator(address common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddValidator", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddValidator indicates an expected call of AddValidator
func (mr *MockValidatorSetMockRecorder) AddValidator(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValidator", reflect.TypeOf((*MockValidatorSet)(nil).AddValidator), address)
}

// RemoveValidator mocks base method
func (m *MockValidatorSet) RemoveValidator(address common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveValidator", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveValidator indicates an expected call of RemoveValidator
func (mr *MockValidatorSetMockRecorder) RemoveValidator(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveValidator", reflect.TypeOf((*MockValidatorSet)(nil).RemoveValidator), address)
}

// Copy mocks base method
func (m *MockValidatorSet) Copy() Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(Set)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockValidatorSetMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockValidatorSet)(nil).Copy))
}

// F mocks base method
func (m *MockValidatorSet) F() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "F")
	ret0, _ := ret[0].(int)
	return ret0
}

// F indicates an expected call of F
func (mr *MockValidatorSetMockRecorder) F() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "F", reflect.TypeOf((*MockValidatorSet)(nil).F))
}

// Policy mocks base method
func (m *MockValidatorSet) Policy() config.ProposerPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policy")
	ret0, _ := ret[0].(config.ProposerPolicy)
	return ret0
}

// Policy indicates an expected call of Policy
func (mr *MockValidatorSetMockRecorder) Policy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policy", reflect.TypeOf((*MockValidatorSet)(nil).Policy))
}
