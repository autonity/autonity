// Code generated by MockGen. DO NOT EDIT.
// Source: consensus/tendermint/committee/committee_interface.go

// Package committee is a generated GoMock package.
package committee

import (
	common "github.com/clearmatics/autonity/common"
	types "github.com/clearmatics/autonity/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSet is a mock of Set interface
type MockSet struct {
	ctrl     *gomock.Controller
	recorder *MockSetMockRecorder
}

// MockSetMockRecorder is the mock recorder for MockSet
type MockSetMockRecorder struct {
	mock *MockSet
}

// NewMockSet creates a new mock instance
func NewMockSet(ctrl *gomock.Controller) *MockSet {
	mock := &MockSet{ctrl: ctrl}
	mock.recorder = &MockSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSet) EXPECT() *MockSetMockRecorder {
	return m.recorder
}

// Size mocks base method
func (m *MockSet) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockSetMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockSet)(nil).Size))
}

// Committee mocks base method
func (m *MockSet) Committee() types.Committee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committee")
	ret0, _ := ret[0].(types.Committee)
	return ret0
}

// Committee indicates an expected call of Committee
func (mr *MockSetMockRecorder) Committee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committee", reflect.TypeOf((*MockSet)(nil).Committee))
}

// GetByIndex mocks base method
func (m *MockSet) GetByIndex(i int) (types.CommitteeMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", i)
	ret0, _ := ret[0].(types.CommitteeMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex
func (mr *MockSetMockRecorder) GetByIndex(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockSet)(nil).GetByIndex), i)
}

// GetByAddress mocks base method
func (m *MockSet) GetByAddress(addr common.Address) (int, types.CommitteeMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(types.CommitteeMember)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByAddress indicates an expected call of GetByAddress
func (mr *MockSetMockRecorder) GetByAddress(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockSet)(nil).GetByAddress), addr)
}

// GetProposer mocks base method
func (m *MockSet) GetProposer(round int64) types.CommitteeMember {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer", round)
	ret0, _ := ret[0].(types.CommitteeMember)
	return ret0
}

// GetProposer indicates an expected call of GetProposer
func (mr *MockSetMockRecorder) GetProposer(round interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockSet)(nil).GetProposer), round)
}

// IsProposer mocks base method
func (m *MockSet) IsProposer(round int64, address common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProposer", round, address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProposer indicates an expected call of IsProposer
func (mr *MockSetMockRecorder) IsProposer(round, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProposer", reflect.TypeOf((*MockSet)(nil).IsProposer), round, address)
}

// Copy mocks base method
func (m *MockSet) Copy() Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(Set)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockSetMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockSet)(nil).Copy))
}

// F mocks base method
func (m *MockSet) F() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "F")
	ret0, _ := ret[0].(int)
	return ret0
}

// F indicates an expected call of F
func (mr *MockSetMockRecorder) F() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "F", reflect.TypeOf((*MockSet)(nil).F))
}

// Quorum mocks base method
func (m *MockSet) Quorum() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quorum")
	ret0, _ := ret[0].(int)
	return ret0
}

// Quorum indicates an expected call of Quorum
func (mr *MockSetMockRecorder) Quorum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quorum", reflect.TypeOf((*MockSet)(nil).Quorum))
}
