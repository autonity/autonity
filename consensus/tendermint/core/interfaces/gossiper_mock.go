// Code generated by MockGen. DO NOT EDIT.
// Source: consensus/tendermint/core/interfaces/gossiper.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	reflect "reflect"

	consensus "github.com/autonity/autonity/consensus"
	types "github.com/autonity/autonity/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockGossiper is a mock of Gossiper interface.
type MockGossiper struct {
	ctrl     *gomock.Controller
	recorder *MockGossiperMockRecorder
}

// MockGossiperMockRecorder is the mock recorder for MockGossiper.
type MockGossiperMockRecorder struct {
	mock *MockGossiper
}

// NewMockGossiper creates a new mock instance.
func NewMockGossiper(ctrl *gomock.Controller) *MockGossiper {
	mock := &MockGossiper{ctrl: ctrl}
	mock.recorder = &MockGossiperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGossiper) EXPECT() *MockGossiperMockRecorder {
	return m.recorder
}

// Gossip mocks base method.
func (m *MockGossiper) Gossip(committee types.Committee, payload []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Gossip", committee, payload)
}

// Gossip indicates an expected call of Gossip.
func (mr *MockGossiperMockRecorder) Gossip(committee, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gossip", reflect.TypeOf((*MockGossiper)(nil).Gossip), committee, payload)
}

// SetBroadcaster mocks base method.
func (m *MockGossiper) SetBroadcaster(broadcaster consensus.Broadcaster) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBroadcaster", broadcaster)
}

// SetBroadcaster indicates an expected call of SetBroadcaster.
func (mr *MockGossiperMockRecorder) SetBroadcaster(broadcaster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcaster", reflect.TypeOf((*MockGossiper)(nil).SetBroadcaster), broadcaster)
}
