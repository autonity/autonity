// Code generated by MockGen. DO NOT EDIT.
// Source: broadcaster.go

// Package broadcaster is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	"github.com/autonity/autonity/consensus/tendermint/core/message"
	gomock "github.com/golang/mock/gomock"
)

// MockBroadcaster is a mock of Broadcaster interface.
type MockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterMockRecorder
}

// MockBroadcasterMockRecorder is the mock recorder for MockBroadcaster.
type MockBroadcasterMockRecorder struct {
	mock *MockBroadcaster
}

// NewMockBroadcaster creates a new mock instance.
func NewMockBroadcaster(ctrl *gomock.Controller) *MockBroadcaster {
	mock := &MockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcaster) EXPECT() *MockBroadcasterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockBroadcaster) SignAndBroadcast(ctx context.Context, msg *message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignAndBroadcast", ctx, msg)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockBroadcasterMockRecorder) Broadcast(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignAndBroadcast", reflect.TypeOf((*MockBroadcaster)(nil).SignAndBroadcast), ctx, msg)
}
