// Code generated by MockGen. DO NOT EDIT.
// Source: consensus/tendermint/core/interfaces/tendermint.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	autonity "github.com/autonity/autonity/autonity"
	message "github.com/autonity/autonity/consensus/tendermint/core/message"
	types "github.com/autonity/autonity/consensus/tendermint/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTendermint is a mock of Tendermint interface.
type MockTendermint struct {
	ctrl     *gomock.Controller
	recorder *MockTendermintMockRecorder
}

// MockTendermintMockRecorder is the mock recorder for MockTendermint.
type MockTendermintMockRecorder struct {
	mock *MockTendermint
}

// NewMockTendermint creates a new mock instance.
func NewMockTendermint(ctrl *gomock.Controller) *MockTendermint {
	mock := &MockTendermint{ctrl: ctrl}
	mock.recorder = &MockTendermintMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTendermint) EXPECT() *MockTendermintMockRecorder {
	return m.recorder
}

// Br mocks base method.
func (m *MockTendermint) Br() Broadcaster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Br")
	ret0, _ := ret[0].(Broadcaster)
	return ret0
}

// Br indicates an expected call of Br.
func (mr *MockTendermintMockRecorder) Br() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Br", reflect.TypeOf((*MockTendermint)(nil).Br))
}

// CoreState mocks base method.
func (m *MockTendermint) CoreState() types.TendermintState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoreState")
	ret0, _ := ret[0].(types.TendermintState)
	return ret0
}

// CoreState indicates an expected call of CoreState.
func (mr *MockTendermintMockRecorder) CoreState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoreState", reflect.TypeOf((*MockTendermint)(nil).CoreState))
}

// CurrentHeightMessages mocks base method.
func (m *MockTendermint) CurrentHeightMessages() []*message.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeightMessages")
	ret0, _ := ret[0].([]*message.Message)
	return ret0
}

// CurrentHeightMessages indicates an expected call of CurrentHeightMessages.
func (mr *MockTendermintMockRecorder) CurrentHeightMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeightMessages", reflect.TypeOf((*MockTendermint)(nil).CurrentHeightMessages))
}

// Precommiter mocks base method.
func (m *MockTendermint) Precommiter() Precommiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precommiter")
	ret0, _ := ret[0].(Precommiter)
	return ret0
}

// Precommiter indicates an expected call of Precommiter.
func (mr *MockTendermintMockRecorder) Precommiter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precommiter", reflect.TypeOf((*MockTendermint)(nil).Precommiter))
}

// Prevoter mocks base method.
func (m *MockTendermint) Prevoter() Prevoter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prevoter")
	ret0, _ := ret[0].(Prevoter)
	return ret0
}

// Prevoter indicates an expected call of Prevoter.
func (mr *MockTendermintMockRecorder) Prevoter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prevoter", reflect.TypeOf((*MockTendermint)(nil).Prevoter))
}

// Proposer mocks base method.
func (m *MockTendermint) Proposer() Proposer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposer")
	ret0, _ := ret[0].(Proposer)
	return ret0
}

// Proposer indicates an expected call of Proposer.
func (mr *MockTendermintMockRecorder) Proposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposer", reflect.TypeOf((*MockTendermint)(nil).Proposer))
}

// Start mocks base method.
func (m *MockTendermint) Start(ctx context.Context, contract *autonity.ProtocolContracts) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx, contract)
}

// Start indicates an expected call of Start.
func (mr *MockTendermintMockRecorder) Start(ctx, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTendermint)(nil).Start), ctx, contract)
}

// Stop mocks base method.
func (m *MockTendermint) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTendermintMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTendermint)(nil).Stop))
}
