// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package test

import (
	"math/big"
	"strings"

	ethereum "github.com/clearmatics/autonity"
	"github.com/clearmatics/autonity/accounts/abi"
	"github.com/clearmatics/autonity/accounts/abi/bind"
	"github.com/clearmatics/autonity/common"
	"github.com/clearmatics/autonity/core/types"
	"github.com/clearmatics/autonity/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AutonityCommitteeMember is an auto generated low-level Go binding around an user-defined struct.
type AutonityCommitteeMember struct {
	Addr        common.Address
	VotingPower *big.Int
}

// AutonityEconomicMetrics is an auto generated low-level Go binding around an user-defined struct.
type AutonityEconomicMetrics struct {
	Accounts    []common.Address
	Usertypes   []uint8
	Stakes      []*big.Int
	Mingasprice *big.Int
	Stakesupply *big.Int
}

// AutonityUser is an auto generated low-level Go binding around an user-defined struct.
type AutonityUser struct {
	Addr     common.Address
	UserType uint8
	Stake    *big.Int
	Enode    string
}

// AutonityABI is the input ABI used to generate the binding from.
const AutonityABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participantAddress\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_participantEnode\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_participantType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_participantStake\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contractVersion\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumAutonity.UserType\",\"name\":\"_oldType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enumAutonity.UserType\",\"name\":\"_newType\",\"type\":\"uint8\"}],\"name\":\"ChangedUserType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"ContractUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumGasPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumAutonity.UserType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"RemovedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumAutonity.UserType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"enumAutonity.UserType\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enumAutonity.UserType\",\"name\":\"newUserType\",\"type\":\"uint8\"}],\"name\":\"changeUserType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committeeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dumpEconomicMetrics\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"enumAutonity.UserType[]\",\"name\":\"usertypes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"mingasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakesupply\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EconomicMetrics\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getProposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeholders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_enode\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stake\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contractVersion\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enumAutonity.UserType\",\"name\":\"userType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"}],\"internalType\":\"structAutonity.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMinimumGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bytecode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// AutonityFuncSigs maps the 4-byte function signature to its string representation.
var AutonityFuncSigs = map[string]string{
	"4102efb1": "addUser(address,uint256,string,uint8)",
	"dd62ed3e": "allowance(address,address)",
	"095ea7b3": "approve(address,uint256)",
	"70a08231": "balanceOf(address)",
	"9dc29fac": "burn(address,uint256)",
	"766f1fa6": "changeUserType(address,uint8)",
	"9cf4364b": "committeeSize()",
	"ae1f5fa0": "computeCommittee()",
	"a0a8e460": "contractVersion()",
	"d5f39488": "deployer()",
	"ace954cf": "dumpEconomicMetrics()",
	"05261aea": "finalize(uint256)",
	"ab8f6ffe": "getCommittee()",
	"819b6463": "getMaxCommitteeSize()",
	"f918379a": "getMinimumGasPrice()",
	"b66b3e79": "getNewContract()",
	"5f7d3949": "getProposer(uint256,uint256)",
	"b6992247": "getStakeholders()",
	"1865c57d": "getState()",
	"6f77926b": "getUser(address)",
	"b7ab4db5": "getValidators()",
	"0d8e6e2c": "getVersion()",
	"d01f63f5": "getWhitelist()",
	"40c10f19": "mint(address,uint256)",
	"06fdde03": "name()",
	"2801643d": "operatorAccount()",
	"98575188": "removeUser(address)",
	"8bac7dad": "setCommitteeSize(uint256)",
	"d249b31c": "setMinimumGasPrice(uint256)",
	"95d89b41": "symbol()",
	"18160ddd": "totalSupply()",
	"a9059cbb": "transfer(address,uint256)",
	"23b872dd": "transferFrom(address,address,uint256)",
	"f072929d": "upgradeContract(string,string,string)",
}

// AutonityBin is the compiled bytecode used for deploying new contracts.
var AutonityBin = "0x60806040523480156200001157600080fd5b5060405162004eb838038062004eb883398101604081905262000034916200085f565b8651885114801562000047575085518851145b801562000055575084518851145b6200007d5760405162461bcd60e51b8152600401620000749062000997565b60405180910390fd5b60005b8851811015620001595760006001600160a01b0316898281518110620000a257fe5b60200260200101516001600160a01b03161415620000d45760405162461bcd60e51b8152600401620000749062000960565b6000878281518110620000e357fe5b60200260200101516002811115620000f757fe5b905060008a83815181106200010857fe5b602002602001015190506200014e818b85815181106200012457fe5b6020026020010151848b87815181106200013a57fe5b6020026020010151620001b360201b60201c565b505060010162000080565b50600380546001600160a01b0319166001600160a01b038616179055600483905580516200018f90600690602084019062000583565b50506005555050600c80546001600160a01b031916331790555062000ab392505050565b6001600160a01b038416620001dc5760405162461bcd60e51b8152600401620000749062000960565b620001f283620004fe60201b62001edf1760201c565b51620002125760405162461bcd60e51b81526004016200007490620009ce565b6200021c62000618565b6040518060800160405280866001600160a01b031681526020018460028111156200024357fe5b81526020808201859052604091820187905282516001600160a01b0390811660009081526002909252919020549192501615620002945760405162461bcd60e51b81526004016200007490620009f3565b8051600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b039384166001600160a01b031991821617909155835183168252600260208181526040909320855181549516949092169390931780825591840151849391929091839160ff60a01b191690600160a01b9084908111156200032b57fe5b021790555060408201516001820155606082015180516200035791600284019160209091019062000583565b5060019150620003649050565b816020015160028111156200037557fe5b1415620003c25780516009805460018101825560009190915260008051602062004e988339815191520180546001600160a01b0319166001600160a01b0390921691909117905562000480565b600281602001516002811115620003d557fe5b141562000480576040810151620004005760405162461bcd60e51b8152600401620000749062000a2a565b8051600880546001818101835560009283527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390910180546001600160a01b039485166001600160a01b031991821617909155845160098054938401815590935260008051602062004e9883398151915290910180549290931691161790555b6200049c82600a546200052160201b62001efa1790919060201c565b600a5560608101515115620004f75760608101516001805480820182556000919091528151620004f5927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909201916020019062000583565b505b5050505050565b6200050862000641565b60408160c08460ff5afa6200051c57600080fd5b919050565b6000828201838110156200057c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620005bb576000855562000606565b82601f10620005d657805160ff191683800117855562000606565b8280016001018555821562000606579182015b8281111562000606578251825591602001919060010190620005e9565b50620006149291506200065f565b5090565b604080516080810190915260008082526020820190815260200160008152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b5b8082111562000614576000815560010162000660565b80516001600160a01b03811681146200051c57600080fd5b600082601f8301126200069f578081fd5b8151620006b6620006b08262000a95565b62000a71565b818152915060208083019084810181840286018201871015620006d857600080fd5b60005b848110156200070257620006ef8262000676565b84529282019290820190600101620006db565b505050505092915050565b600082601f8301126200071e578081fd5b81516200072f620006b08262000a95565b818152915060208083019084810160005b8481101562000702576200075a888484518a0101620007d2565b8452928201929082019060010162000740565b600082601f8301126200077e578081fd5b81516200078f620006b08262000a95565b818152915060208083019084810181840286018201871015620007b157600080fd5b60005b848110156200070257815184529282019290820190600101620007b4565b600082601f830112620007e3578081fd5b81516001600160401b03811115620007f757fe5b60206200080d601f8301601f1916820162000a71565b925081835284818386010111156200082457600080fd5b60005b828110156200084457848101820151848201830152810162000827565b82811115620008565760008284860101525b50505092915050565b600080600080600080600080610100898b0312156200087c578384fd5b88516001600160401b038082111562000893578586fd5b620008a18c838d016200068e565b995060208b0151915080821115620008b7578586fd5b620008c58c838d016200070d565b985060408b0151915080821115620008db578586fd5b620008e98c838d016200076d565b975060608b0151915080821115620008ff578586fd5b6200090d8c838d016200076d565b96506200091d60808c0162000676565b955060a08b0151945060c08b0151935060e08b015191508082111562000941578283fd5b50620009508b828c01620007d2565b9150509295985092959890939650565b60208082526019908201527f416464726573736573206d75737420626520646566696e656400000000000000604082015260600190565b6020808252601c908201527f496e636f727265637420636f6e7374727563746f7220706172616d7300000000604082015260600190565b6020808252600b908201526a32b737b2329032b93937b960a91b604082015260600190565b6020808252601a908201527f616c726561647920726567697374657265642061646472657373000000000000604082015260600190565b60208082526027908201527f76616c696461746f7220776974682030207374616b65206973206e6f742070656040820152661c9b5a5d1d195960ca1b606082015260800190565b6040518181016001600160401b038111828210171562000a8d57fe5b604052919050565b60006001600160401b0382111562000aa957fe5b5060209081020190565b6143d58062000ac36000396000f3fe6080604052600436106101fd5760003560e01c8063985751881161010d578063b66b3e79116100a0578063d249b31c1161006f578063d249b31c146105a4578063d5f39488146105c4578063dd62ed3e146105d9578063f072929d146105f9578063f918379a1461061957610204565b8063b66b3e7914610528578063b69922471461054b578063b7ab4db51461056d578063d01f63f51461058257610204565b8063a9059cbb116100dc578063a9059cbb146104af578063ab8f6ffe146104cf578063ace954cf146104f1578063ae1f5fa01461051357610204565b806398575188146104455780639cf4364b146104655780639dc29fac1461047a578063a0a8e4601461049a57610204565b806340c10f191161019057806370a082311161015f57806370a08231146103bb578063766f1fa6146103db578063819b6463146103fb5780638bac7dad1461041057806395d89b411461043057610204565b806340c10f191461032e5780634102efb11461034e5780635f7d39491461036e5780636f77926b1461038e57610204565b806318160ddd116101cc57806318160ddd146102a15780631865c57d146102c357806323b872dd146102ec5780632801643d1461030c57610204565b806305261aea1461020657806306fdde031461023d578063095ea7b31461025f5780630d8e6e2c1461028c57610204565b3661020457005b005b34801561021257600080fd5b506102266102213660046138a3565b61062e565b604051610234929190613c05565b60405180910390f35b34801561024957600080fd5b5061025261070f565b6040516102349190613c20565b34801561026b57600080fd5b5061027f61027a3660046137f4565b61072f565b6040516102349190613bfa565b34801561029857600080fd5b50610252610746565b3480156102ad57600080fd5b506102b66107dc565b6040516102349190613a81565b3480156102cf57600080fd5b506102d86107e2565b604051610234989796959493929190613b44565b3480156102f857600080fd5b5061027f610307366004613780565b610bda565b34801561031857600080fd5b50610321610c44565b6040516102349190613a8a565b34801561033a57600080fd5b506102046103493660046137f4565b610c53565b34801561035a57600080fd5b506102046103693660046136e0565b610df8565b34801561037a57600080fd5b506103216103893660046138bb565b610eaa565b34801561039a57600080fd5b506103ae6103a93660046136c4565b610fdc565b6040516102349190614298565b3480156103c757600080fd5b506102b66103d63660046136c4565b6110ef565b3480156103e757600080fd5b506102046103f63660046137c0565b61110d565b34801561040757600080fd5b506102b6611148565b34801561041c57600080fd5b5061020461042b3660046138a3565b61114e565b34801561043c57600080fd5b50610252611180565b34801561045157600080fd5b506102046104603660046136c4565b61119d565b34801561047157600080fd5b506102b66111d6565b34801561048657600080fd5b506102046104953660046137f4565b6111dc565b3480156104a657600080fd5b50610252611395565b3480156104bb57600080fd5b5061027f6104ca3660046137f4565b611423565b3480156104db57600080fd5b506104e4611430565b6040516102349190613be7565b3480156104fd57600080fd5b506105066114a5565b60405161023491906141ef565b34801561051f57600080fd5b506102046116fe565b34801561053457600080fd5b5061053d611ac5565b604051610234929190613c33565b34801561055757600080fd5b50610560611bf4565b6040516102349190613b31565b34801561057957600080fd5b50610560611c55565b34801561058e57600080fd5b50610597611cb5565b6040516102349190613bd4565b3480156105b057600080fd5b506102046105bf3660046138a3565b611d84565b3480156105d057600080fd5b50610321611df1565b3480156105e557600080fd5b506102b66105f4366004613748565b611e00565b34801561060557600080fd5b5061027f61061436600461381f565b611e2b565b34801561062557600080fd5b506102b6611ed9565b600c5460009060609033906001600160a01b031681146106695760405162461bcd60e51b815260040161066090613cea565b60405180910390fd5b61067284611f54565b600d546002600019610100600184161502019091160415156106926116fe565b80600b80805480602002602001604051908101604052809291908181526020016000905b828210156106fe576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016106b6565b505050509050935093505050915091565b6040805180820190915260068152652732bbba37b760d11b602082015290565b600061073c338484612081565b5060015b92915050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b600a5490565b6060806060806000806000606060008054905067ffffffffffffffff8111801561080b57600080fd5b50604051908082528060200260200182016040528015610835578160200160208202803683370190505b5060005490985067ffffffffffffffff8111801561085257600080fd5b5060405190808252806020026020018201604052801561087c578160200160208202803683370190505b5060005490965067ffffffffffffffff8111801561089957600080fd5b506040519080825280602002602001820160405280156108c3578160200160208202803683370190505b5060005490955067ffffffffffffffff811180156108e057600080fd5b5060405190808252806020026020018201604052801561091457816020015b60608152602001906001900390816108ff5790505b50965060005b600054811015610b26576002600080838154811061093457fe5b60009182526020808320909101546001600160a01b0390811684529083019390935260409091019020548a519116908a908390811061096f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506002600080838154811061099f57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff600160a01b9091041660028111156109da57fe5b8782815181106109e657fe5b60200260200101818152505060026000808381548110610a0257fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020600101548651879083908110610a3857fe5b60200260200101818152505060026000808381548110610a5457fe5b60009182526020808320909101546001600160a01b031683528281019390935260409182019020600290810180548351601f60001960018416156101000201909216939093049081018590048502830185019093528282529092909190830182828015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b5050505050888281518110610b1357fe5b602090810291909101015260010161091a565b5060035460045460055460068054604080516020601f600260001960018716156101000201909516949094049384018190048102820181019092528281526001600160a01b03909616995093975091955091830182828015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b505050505090509091929394959697565b6000610be784848461221d565b610c398433610c3485604051806060016040528060288152602001614378602891396001600160a01b038a16600090815260076020908152604080832033845290915290205491906124f5565b612081565b5060015b9392505050565b6003546001600160a01b031681565b60035433906001600160a01b03168114610c7f5760405162461bcd60e51b815260040161066090613f58565b826001600160a01b038116610ca65760405162461bcd60e51b81526004016106609061407e565b60016001600160a01b038216600090815260026020819052604090912054600160a01b900460ff1690811115610cd857fe5b1480610d13575060026001600160a01b038216600090815260026020819052604090912054600160a01b900460ff1690811115610d1157fe5b145b610d2f5760405162461bcd60e51b815260040161066090614106565b6001600160a01b0381811660009081526002602052604090205416610d665760405162461bcd60e51b81526004016106609061407e565b6001600160a01b038416600090815260026020526040902060010154610d8c9084611efa565b6001600160a01b038516600090815260026020526040902060010155600a54610db59084611efa565b600a556040517f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf90610dea9086908690613afb565b60405180910390a150505050565b60035433906001600160a01b03168114610e245760405162461bcd60e51b815260040161066090613f58565b6000826002811115610e3257fe5b148015610e3f5750600084115b15610e5c5760405162461bcd60e51b815260040161066090613fc6565b610e688584848761258c565b7ff35addd78a9e6921f9cec55fd935989f180980597c8bd0c05bba14c56dbb4fb7858386604051610e9b93929190613ad0565b60405180910390a15050505050565b600080805b600b54811015610ef457610eea600b8281548110610ec957fe5b90600052602060002090600202016001015483611efa90919063ffffffff16565b9150600101610eaf565b5080610f125760405162461bcd60e51b815260040161066090614047565b6000610f1e8585611efa565b9050600081604051602001610f339190613a81565b6040516020818303038152906040528051906020012060001c90506000838281610f5957fe5b0690506000805b600b54811015610fc357610f7a600b8281548110610ec957fe5b9150600182038311610fbb57600b8181548110610f9357fe5b60009182526020909120600290910201546001600160a01b0316965061074095505050505050565b600101610f60565b5060405162461bcd60e51b815260040161066090613eae565b610fe46133ff565b6001600160a01b0382811660009081526002602081815260409283902083516080810190945280549485168452929390840191600160a01b90910460ff169081111561102c57fe5b600281111561103757fe5b815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110de5780601f106110b3576101008083540402835291602001916110de565b820191906000526020600020905b8154815290600101906020018083116110c157829003601f168201915b50505050508152505090505b919050565b6001600160a01b031660009081526002602052604090206001015490565b60035433906001600160a01b031681146111395760405162461bcd60e51b815260040161066090613f58565b61114383836128c0565b505050565b60055490565b60035433906001600160a01b0316811461117a5760405162461bcd60e51b815260040161066090613f58565b50600555565b6040805180820190915260038152624e455760e81b602082015290565b60035433906001600160a01b031681146111c95760405162461bcd60e51b815260040161066090613f58565b6111d282612b1b565b5050565b60055481565b60035433906001600160a01b031681146112085760405162461bcd60e51b815260040161066090613f58565b826001600160a01b03811661122f5760405162461bcd60e51b81526004016106609061407e565b60016001600160a01b038216600090815260026020819052604090912054600160a01b900460ff169081111561126157fe5b148061129c575060026001600160a01b038216600090815260026020819052604090912054600160a01b900460ff169081111561129a57fe5b145b6112b85760405162461bcd60e51b815260040161066090614106565b6001600160a01b03818116600090815260026020526040902054166112ef5760405162461bcd60e51b81526004016106609061407e565b61132f83604051806060016040528060238152602001614334602391396001600160a01b03871660009081526002602052604090206001015491906124f5565b6001600160a01b038516600090815260026020526040902060010155600a546113589084612ed3565b600a5561136484612f15565b7f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a38484604051610dea929190613afb565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561141b5780601f106113f05761010080835404028352916020019161141b565b820191906000526020600020905b8154815290600101906020018083116113fe57829003601f168201915b505050505081565b600061073c33848461221d565b6060600b805480602002602001604051908101604052809291908181526020016000905b8282101561149c576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611454565b50505050905090565b6114ad613428565b60005460608167ffffffffffffffff811180156114c957600080fd5b506040519080825280602002602001820160405280156114f3578160200160208202803683370190505b50905060608267ffffffffffffffff8111801561150f57600080fd5b50604051908082528060200260200182016040528015611539578160200160208202803683370190505b50905060608367ffffffffffffffff8111801561155557600080fd5b5060405190808252806020026020018201604052801561157f578160200160208202803683370190505b50905060005b848110156116c5576002600080838154811061159d57fe5b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205485519116908590839081106115d857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506002600080838154811061160857fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020548351600160a01b90910460ff169084908390811061164857fe5b6020026020010190600281111561165b57fe5b9081600281111561166857fe5b815250506002600080838154811061167c57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015482518390839081106116b257fe5b6020908102919091010152600101611585565b506116ce613428565b506040805160a0810182529384526020840192909252908201526004546060820152600a54608082015291505090565b600c5433906001600160a01b0316811461172a5760405162461bcd60e51b815260040161066090613cea565b6008546117495760405162461bcd60e51b815260040161066090613f8f565b6008546005548181106117595750805b60608267ffffffffffffffff8111801561177257600080fd5b506040519080825280602002602001820160405280156117ac57816020015b6117996133ff565b8152602001906001900390816117915790505b50905060608267ffffffffffffffff811180156117c857600080fd5b5060405190808252806020026020018201604052801561180257816020015b6117ef6133ff565b8152602001906001900390816117e75790505b50905060005b60085481101561195f5761181a6133ff565b600260006008848154811061182b57fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251608081019093528054938416835291929083019060ff600160a01b90910416600281111561188157fe5b600281111561188c57fe5b815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119335780601f1061190857610100808354040283529160200191611933565b820191906000526020600020905b81548152906001019060200180831161191657829003601f168201915b50505050508152505090508084838151811061194b57fe5b602090810291909101015250600101611808565b50600554825111156119ba5761197482613083565b60005b6005548110156119b45782818151811061198d57fe5b60200260200101518282815181106119a157fe5b6020908102919091010152600101611977565b506119bd565b50805b6119c9600b6000613457565b60005b83811015611abd576119dc613478565b60405180604001604052808484815181106119f357fe5b6020026020010151600001516001600160a01b03168152602001848481518110611a1957fe5b60209081029190910181015160400151909152600b80546001808201835560009290925283517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9600290920291820180546001600160a01b0319166001600160a01b0390921691909117905592909101517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba909201919091559190910190506119cc565b505050505050565b600d8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609384939092600e92918491830182828015611b575780601f10611b2c57610100808354040283529160200191611b57565b820191906000526020600020905b815481529060010190602001808311611b3a57829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015611be55780601f10611bba57610100808354040283529160200191611be5565b820191906000526020600020905b815481529060010190602001808311611bc857829003601f168201915b50505050509050915091509091565b606060098054806020026020016040519081016040528092919081815260200182805480156107d257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c2e575050505050905090565b606060088054806020026020016040519081016040528092919081815260200182805480156107d2576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611c2e575050505050905090565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561149c5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611d705780601f10611d4557610100808354040283529160200191611d70565b820191906000526020600020905b815481529060010190602001808311611d5357829003601f168201915b505050505081526020019060010190611cd9565b60035433906001600160a01b03168114611db05760405162461bcd60e51b815260040161066090613f58565b60048290556040517f58841da31675d02939f5efa0add356e7af0a24703fe398e1eba9ea4ea4db253a90611de5908490613a81565b60405180910390a15050565b600c546001600160a01b031681565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b60035460009033906001600160a01b03168114611e5a5760405162461bcd60e51b815260040161066090613f58565b8451611e6d90600d90602088019061348f565b508351611e8190600e90602087019061348f565b508251611e9590600690602086019061348f565b507fb8751b0dd53b85bff7c80c820320c0c7993e4af340a036b112cb9b5714106a616006604051611ec69190613c61565b60405180910390a1506001949350505050565b60045490565b611ee761351b565b60408160c08460ff5afa6110ea57600080fd5b600082820183811015610c3d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b80471015611f745760405162461bcd60e51b815260040161066090613ffd565b600954611f935760405162461bcd60e51b815260040161066090613d2d565b60005b6009548110156111d25760006002600060098481548110611fb357fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120600a546001820154919350611ff691611ff09087613093565b906130ec565b82546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015612030573d6000803e3d6000fd5b5081546040517fb3b7a071186534c03b40695710096f289fd4ed6c1a374aff0bb648955e4fe5639161206f916001600160a01b03909116908490613afb565b60405180910390a15050600101611f96565b816001600160a01b0381166120a85760405162461bcd60e51b81526004016106609061407e565b60016001600160a01b038216600090815260026020819052604090912054600160a01b900460ff16908111156120da57fe5b1480612115575060026001600160a01b038216600090815260026020819052604090912054600160a01b900460ff169081111561211357fe5b145b6121315760405162461bcd60e51b815260040161066090614106565b6001600160a01b03818116600090815260026020526040902054166121685760405162461bcd60e51b81526004016106609061407e565b6001600160a01b03841661218e5760405162461bcd60e51b8152600401610660906141ab565b6001600160a01b0383166121b45760405162461bcd60e51b815260040161066090613d9b565b6001600160a01b0380851660008181526007602090815260408083209488168084529490915290819020859055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061220f908690613a81565b60405180910390a350505050565b826001600160a01b0381166122445760405162461bcd60e51b81526004016106609061407e565b60016001600160a01b038216600090815260026020819052604090912054600160a01b900460ff169081111561227657fe5b14806122b1575060026001600160a01b038216600090815260026020819052604090912054600160a01b900460ff16908111156122af57fe5b145b6122cd5760405162461bcd60e51b815260040161066090614106565b6001600160a01b03818116600090815260026020526040902054166123045760405162461bcd60e51b81526004016106609061407e565b826001600160a01b03811661232b5760405162461bcd60e51b81526004016106609061407e565b60016001600160a01b038216600090815260026020819052604090912054600160a01b900460ff169081111561235d57fe5b1480612398575060026001600160a01b038216600090815260026020819052604090912054600160a01b900460ff169081111561239657fe5b145b6123b45760405162461bcd60e51b815260040161066090614106565b6001600160a01b03818116600090815260026020526040902054166123eb5760405162461bcd60e51b81526004016106609061407e565b604080518082018252601f81527f5472616e7366657220616d6f756e7420657863656564732062616c616e6365006020808301919091526001600160a01b0388166000908152600290915291909120600101546124499185906124f5565b6001600160a01b03808716600090815260026020526040808220600190810194909455918716815220015461247e9084611efa565b6001600160a01b0385166000908152600260205260409020600101556124a385612f15565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516124e69190613a81565b60405180910390a35050505050565b600081848411156125845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612549578181015183820152602001612531565b50505050905090810190601f1680156125765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0384166125b25760405162461bcd60e51b815260040161066090613d64565b6125bb83611edf565b516125d85760405162461bcd60e51b815260040161066090613e89565b6125e06133ff565b6040518060800160405280866001600160a01b0316815260200184600281111561260657fe5b81526020808201859052604091820187905282516001600160a01b03908116600090815260029092529190205491925016156126545760405162461bcd60e51b815260040161066090613f21565b8051600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b039384166001600160a01b031991821617909155835183168252600260208181526040909320855181549516949092169390931780825591840151849391929091839160ff60a01b191690600160a01b9084908111156126ea57fe5b0217905550604082015160018201556060820151805161271491600284019160209091019061348f565b50600191506127209050565b8160200151600281111561273057fe5b141561278c578051600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b03909216919091179055612856565b60028160200151600281111561279e57fe5b14156128565760408101516127c55760405162461bcd60e51b81526004016106609061413b565b8051600880546001818101835560009283527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390910180546001600160a01b039485166001600160a01b03199182161790915584516009805493840181559093527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180549290931691161790555b600a546128639083611efa565b600a55606081015151156128b95760608101516001805480820182556000919091528151611abd927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909201916020019061348f565b5050505050565b6001600160a01b0382166128e65760405162461bcd60e51b81526004016106609061407e565b6001600160a01b038281166000908152600260205260409020541661291d5760405162461bcd60e51b815260040161066090614182565b80600281111561292957fe5b6001600160a01b038316600090815260026020819052604090912054600160a01b900460ff169081111561295957fe5b14156129775760405162461bcd60e51b815260040161066090613ddd565b61297f6133ff565b6001600160a01b0383811660009081526002602081815260409283902083516080810190945280549485168452929390840191600160a01b90910460ff16908111156129c757fe5b60028111156129d257fe5b815260200160018201548152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a795780601f10612a4e57610100808354040283529160200191612a79565b820191906000526020600020905b815481529060010190602001808311612a5c57829003601f168201915b505050505081525050905060006002811115612a9157fe5b826002811115612a9d57fe5b1415612ab257604081015115612ab257600080fd5b8051612abd90612b1b565b612ad58160000151826060015184846040015161258c565b805160208201516040517fef4bc6ae70fb99fbbe8c762bf255267bd89ee3ecf96d846a57a13e6a701a6a6992612b0e9290918690613a9e565b60405180910390a1505050565b6001600160a01b038116612b415760405162461bcd60e51b81526004016106609061407e565b6001600160a01b0381811660009081526002602052604090205416612b785760405162461bcd60e51b815260040161066090613ef7565b6001600160a01b0381166000908152600260208190526040909120908154600160a01b900460ff166002811115612bab57fe5b1480612bcd575060018154600160a01b900460ff166002811115612bcb57fe5b145b15612be8578054612be8906001600160a01b0316600961312e565b60028154600160a01b900460ff166002811115612c0157fe5b1415612c3f57600854600110612c295760405162461bcd60e51b8152600401610660906140b5565b8054612c3f906001600160a01b0316600861312e565b60028082015460001961010060018316150201160415612e2d5760005b600154811015612e2b57612d9d60018281548110612c7657fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612d045780601f10612cd957610100808354040283529160200191612d04565b820191906000526020600020905b815481529060010190602001808311612ce757829003601f168201915b50505060028087018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152945090925090830182828015612d935780601f10612d6857610100808354040283529160200191612d93565b820191906000526020600020905b815481529060010190602001808311612d7657829003601f168201915b5050505050613219565b15612e2357600180546000198101908110612db457fe5b9060005260206000200160018281548110612dcb57fe5b906000526020600020019080546001816001161561010002031660029004612df4929190613539565b506001805480612e0057fe5b600190038181906000526020600020016000612e1c91906135bc565b9055612e2b565b600101612c5c565b505b6001810154600a54612e3e91612ed3565b600a558054612e57906001600160a01b0316600061312e565b6001600160a01b0382166000908152600260208190526040822080546001600160a81b0319168155600181018390559190612e94908301826135bc565b505080546040517f4646e2253e66f30baa225c41db8d98e72402d5fab9e17d8b891a474e1d60ce1c91611de5918591600160a01b900460ff1690613b14565b6000610c3d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124f5565b612f1d6133ff565b6001600160a01b0382811660009081526002602081815260409283902083516080810190945280549485168452929390840191600160a01b90910460ff1690811115612f6557fe5b6002811115612f7057fe5b815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130175780601f10612fec57610100808354040283529160200191613017565b820191906000526020600020905b815481529060010190602001808311612ffa57829003601f168201915b505050505081525050905080604001516000141580613046575060028160200151600281111561304357fe5b14155b156130515750613080565b6008546001106130735760405162461bcd60e51b815260040161066090613e1e565b80516111d29060016128c0565b50565b6130808160006001845103613272565b6000826130a257506000610740565b828202828482816130af57fe5b0414610c3d5760405162461bcd60e51b81526004018080602001828103825260218152602001806143576021913960400191505060405180910390fd5b6000610c3d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061339a565b805461313957600080fd5b60005b815481101561114357826001600160a01b031682828154811061315b57fe5b6000918252602090912001546001600160a01b031614156132115781548290600019810190811061318857fe5b9060005260206000200160009054906101000a90046001600160a01b03168282815481106131b257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818054806131ea57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055611143565b60010161313c565b60008160405160200161322c9190613a65565b60405160208183030381529060405280519060200120836040516020016132539190613a65565b6040516020818303038152906040528051906020012014905092915050565b818180821415613283575050611143565b60008560028686030586018151811061329857fe5b60200260200101516040015190505b818313613374575b808684815181106132bc57fe5b60200260200101516040015111156132d9576001909201916132af565b8582815181106132e557fe5b60200260200101516040015181111561330457600019909101906132d9565b81831361336f5785828151811061331757fe5b602002602001015186848151811061332b57fe5b602002602001015187858151811061333f57fe5b6020026020010188858151811061335257fe5b602090810291909101019190915252600190920191600019909101905b6132a7565b8185121561338757613387868684613272565b83831215611abd57611abd868486613272565b600081836133e95760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612549578181015183820152602001612531565b5060008385816133f557fe5b0495945050505050565b604080516080810190915260008082526020820190815260200160008152602001606081525090565b6040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b50805460008255600202906000526020600020908101906130809190613600565b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826134c5576000855561350b565b82601f106134de57805160ff191683800117855561350b565b8280016001018555821561350b579182015b8281111561350b5782518255916020019190600101906134f0565b50613517929150613626565b5090565b60405180604001604052806002906020820280368337509192915050565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261356f576000855561350b565b82601f10613580578054855561350b565b8280016001018555821561350b57600052602060002091601f016020900482015b8281111561350b5782548255916001019190600101906135a1565b50805460018160011615610100020316600290046000825580601f106135e25750613080565b601f0160209004906000526020600020908101906130809190613626565b5b808211156135175780546001600160a01b031916815560006001820155600201613601565b5b808211156135175760008155600101613627565b8035600381106110ea57600080fd5b600082601f83011261365a578081fd5b813567ffffffffffffffff8082111561366f57fe5b604051601f8301601f19168101602001828111828210171561368d57fe5b6040528281529250828483016020018610156136a857600080fd5b8260208601602083013760006020848301015250505092915050565b6000602082840312156136d5578081fd5b8135610c3d8161431e565b600080600080608085870312156136f5578283fd5b84356137008161431e565b935060208501359250604085013567ffffffffffffffff811115613722578283fd5b61372e8782880161364a565b92505061373d6060860161363b565b905092959194509250565b6000806040838503121561375a578182fd5b82356137658161431e565b915060208301356137758161431e565b809150509250929050565b600080600060608486031215613794578283fd5b833561379f8161431e565b925060208401356137af8161431e565b929592945050506040919091013590565b600080604083850312156137d2578182fd5b82356137dd8161431e565b91506137eb6020840161363b565b90509250929050565b60008060408385031215613806578182fd5b82356138118161431e565b946020939093013593505050565b600080600060608486031215613833578283fd5b833567ffffffffffffffff8082111561384a578485fd5b6138568783880161364a565b9450602086013591508082111561386b578384fd5b6138778783880161364a565b9350604086013591508082111561388c578283fd5b506138998682870161364a565b9150509250925092565b6000602082840312156138b4578081fd5b5035919050565b600080604083850312156138cd578182fd5b50508035926020909101359150565b6001600160a01b0316815260200190565b6000815180845260208085019450808401835b838110156139255781516001600160a01b031687529582019590820190600101613900565b509495945050505050565b6000815180845260208085019450808401835b8381101561392557613956878351613a2b565b9582019590820190600101613943565b6000815180845260208085018081965082840281019150828601855b858110156139ac57828403895261399a848351613a39565b98850198935090840190600101613982565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561392557815180516001600160a01b0316885283015183880152604090960195908201906001016139cc565b6000815180845260208085019450808401835b8381101561392557815187529582019590820190600101613a0f565b60038110613a3557fe5b9052565b60008151808452613a518160208601602086016142ee565b601f01601f19169290920160200192915050565b60008251613a778184602087016142ee565b9190910192915050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b038416815260608101613abb6020830185613a2b565b613ac86040830184613a2b565b949350505050565b6001600160a01b038416815260608101613aed6020830185613a2b565b826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038316815260408101610c3d6020830184613a2b565b600060208252610c3d60208301846138ed565b6000610100808352613b588184018c6138ed565b90508281036020840152613b6c818b613966565b90508281036040840152613b80818a6139fc565b90508281036060840152613b9481896139fc565b6001600160a01b038816608085015260a0840187905260c0840186905283810360e08501529050613bc58185613a39565b9b9a5050505050505050505050565b600060208252610c3d6020830184613966565b600060208252610c3d60208301846139b9565b901515815260200190565b6000831515825260406020830152613ac860408301846139b9565b600060208252610c3d6020830184613a39565b600060408252613c466040830185613a39565b8281036020840152613c588185613a39565b95945050505050565b60006020808301818452828554600180821660008114613c885760018114613ca6576139ac565b60028304607f16855260ff19831660408901526060880193506139ac565b60028304808652613cb68a6142e2565b885b82811015613cd45781548b820160400152908401908801613cb8565b8a01604001955050505091979650505050505050565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b6020808252601b908201527f7468657265206d757374206265207374616b6520686f6c646572730000000000604082015260600190565b60208082526019908201527f416464726573736573206d75737420626520646566696e656400000000000000604082015260600190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526021908201527f546865207573657220697320616c7265616479206f66207468697320747970656040820152601760f91b606082015260800190565b60208082526045908201527f446f776e67726164652075736572206661696c65642064756520746f206b656560408201527f70206174206c6561737420312076616c696461746f7220696e20746865206e6560608201526474776f726b60d81b608082015260a00190565b6020808252600b908201526a32b737b2329032b93937b960a91b604082015260600190565b60208082526029908201527f5468657265206973206e6f2076616c696461746f72206c65667420696e20746860408201526865206e6574776f726b60b81b606082015260800190565b60208082526010908201526f75736572206d7573742065786973747360801b604082015260600190565b6020808252601a908201527f616c726561647920726567697374657265642061646472657373000000000000604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526018908201527f5468657265206d7573742062652076616c696461746f72730000000000000000604082015260600190565b6020808252601c908201527f7061727469636970616e742063616e27742068617665207374616b6500000000604082015260600190565b6020808252602a908201527f6e6f7420656e6f7567682066756e647320746f20706572666f726d207265646960408201526939ba3934b13aba34b7b760b11b606082015260800190565b6020808252601c908201527f54686520636f6d6d6974746565206973206e6f74207374616b696e6700000000604082015260600190565b60208082526017908201527f61646472657373206d75737420626520646566696e6564000000000000000000604082015260600190565b60208082526031908201527f5468657265206d757374206265206174206c6561737420312076616c696461746040820152706f7220696e20746865206e6574776f726b60781b606082015260800190565b6020808252818101527f61646472657373206e6f7420616c6c6f77656420746f20757365207374616b65604082015260600190565b60208082526027908201527f76616c696461746f7220776974682030207374616b65206973206e6f742070656040820152661c9b5a5d1d195960ca1b606082015260800190565b6020808252600f908201526e1d5cd95c881b5d5cdd08195e1a5cdd608a1b604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252825160a083830152805160c0840181905260009291820190839060e08601905b80831015614239576142278285516138dc565b91508484019350600183019250614214565b50838701519350601f199250828682030160408701526142598185613930565b9350505060408501518185840301606086015261427683826139fc565b9250505060608401516080840152608084015160a08401528091505092915050565b602080825282516001600160a01b0316828201528201516000906142bf6040840182613a2b565b50604083015160608301526060830151608080840152613ac860a0840182613a39565b60009081526020902090565b60005b838110156143095781810151838201526020016142f1565b83811115614318576000848401525b50505050565b6001600160a01b038116811461308057600080fdfe52656465656d207374616b6520616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220c303388fb03767d39ffe903318056398752843cc98b03db4169f8769d9dea2c064736f6c634300070400336e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af"

// DeployAutonity deploys a new Ethereum contract, binding an instance of Autonity to it.
func DeployAutonity(auth *bind.TransactOpts, backend bind.ContractBackend, _participantAddress []common.Address, _participantEnode []string, _participantType []*big.Int, _participantStake []*big.Int, _operatorAccount common.Address, _minGasPrice *big.Int, _committeeSize *big.Int, _contractVersion string) (common.Address, *types.Transaction, *Autonity, error) {
	parsed, err := abi.JSON(strings.NewReader(AutonityABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AutonityBin), backend, _participantAddress, _participantEnode, _participantType, _participantStake, _operatorAccount, _minGasPrice, _committeeSize, _contractVersion)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Autonity{AutonityCaller: AutonityCaller{contract: contract}, AutonityTransactor: AutonityTransactor{contract: contract}, AutonityFilterer: AutonityFilterer{contract: contract}}, nil
}

// Autonity is an auto generated Go binding around an Ethereum contract.
type Autonity struct {
	AutonityCaller     // Read-only binding to the contract
	AutonityTransactor // Write-only binding to the contract
	AutonityFilterer   // Log filterer for contract events
}

// AutonityCaller is an auto generated read-only Go binding around an Ethereum contract.
type AutonityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AutonityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AutonityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AutonitySession struct {
	Contract     *Autonity         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AutonityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AutonityCallerSession struct {
	Contract *AutonityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// AutonityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AutonityTransactorSession struct {
	Contract     *AutonityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// AutonityRaw is an auto generated low-level Go binding around an Ethereum contract.
type AutonityRaw struct {
	Contract *Autonity // Generic contract binding to access the raw methods on
}

// AutonityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AutonityCallerRaw struct {
	Contract *AutonityCaller // Generic read-only contract binding to access the raw methods on
}

// AutonityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AutonityTransactorRaw struct {
	Contract *AutonityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAutonity creates a new instance of Autonity, bound to a specific deployed contract.
func NewAutonity(address common.Address, backend bind.ContractBackend) (*Autonity, error) {
	contract, err := bindAutonity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Autonity{AutonityCaller: AutonityCaller{contract: contract}, AutonityTransactor: AutonityTransactor{contract: contract}, AutonityFilterer: AutonityFilterer{contract: contract}}, nil
}

// NewAutonityCaller creates a new read-only instance of Autonity, bound to a specific deployed contract.
func NewAutonityCaller(address common.Address, caller bind.ContractCaller) (*AutonityCaller, error) {
	contract, err := bindAutonity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityCaller{contract: contract}, nil
}

// NewAutonityTransactor creates a new write-only instance of Autonity, bound to a specific deployed contract.
func NewAutonityTransactor(address common.Address, transactor bind.ContractTransactor) (*AutonityTransactor, error) {
	contract, err := bindAutonity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityTransactor{contract: contract}, nil
}

// NewAutonityFilterer creates a new log filterer instance of Autonity, bound to a specific deployed contract.
func NewAutonityFilterer(address common.Address, filterer bind.ContractFilterer) (*AutonityFilterer, error) {
	contract, err := bindAutonity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AutonityFilterer{contract: contract}, nil
}

// bindAutonity binds a generic wrapper to an already deployed contract.
func bindAutonity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AutonityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Autonity *AutonityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Autonity.Contract.AutonityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Autonity *AutonityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.Contract.AutonityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Autonity *AutonityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Autonity.Contract.AutonityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Autonity *AutonityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Autonity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Autonity *AutonityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Autonity *AutonityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Autonity.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonityCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonitySession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Autonity.Contract.Allowance(&_Autonity.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonityCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Autonity.Contract.Allowance(&_Autonity.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _account) view returns(uint256)
func (_Autonity *AutonityCaller) BalanceOf(opts *bind.CallOpts, _account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "balanceOf", _account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _account) view returns(uint256)
func (_Autonity *AutonitySession) BalanceOf(_account common.Address) (*big.Int, error) {
	return _Autonity.Contract.BalanceOf(&_Autonity.CallOpts, _account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _account) view returns(uint256)
func (_Autonity *AutonityCallerSession) BalanceOf(_account common.Address) (*big.Int, error) {
	return _Autonity.Contract.BalanceOf(&_Autonity.CallOpts, _account)
}

// CommitteeSize is a free data retrieval call binding the contract method 0x9cf4364b.
//
// Solidity: function committeeSize() view returns(uint256)
func (_Autonity *AutonityCaller) CommitteeSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "committeeSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitteeSize is a free data retrieval call binding the contract method 0x9cf4364b.
//
// Solidity: function committeeSize() view returns(uint256)
func (_Autonity *AutonitySession) CommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.CommitteeSize(&_Autonity.CallOpts)
}

// CommitteeSize is a free data retrieval call binding the contract method 0x9cf4364b.
//
// Solidity: function committeeSize() view returns(uint256)
func (_Autonity *AutonityCallerSession) CommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.CommitteeSize(&_Autonity.CallOpts)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(string)
func (_Autonity *AutonityCaller) ContractVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "contractVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(string)
func (_Autonity *AutonitySession) ContractVersion() (string, error) {
	return _Autonity.Contract.ContractVersion(&_Autonity.CallOpts)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(string)
func (_Autonity *AutonityCallerSession) ContractVersion() (string, error) {
	return _Autonity.Contract.ContractVersion(&_Autonity.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonityCaller) Deployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "deployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonitySession) Deployer() (common.Address, error) {
	return _Autonity.Contract.Deployer(&_Autonity.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonityCallerSession) Deployer() (common.Address, error) {
	return _Autonity.Contract.Deployer(&_Autonity.CallOpts)
}

// DumpEconomicMetrics is a free data retrieval call binding the contract method 0xace954cf.
//
// Solidity: function dumpEconomicMetrics() view returns((address[],uint8[],uint256[],uint256,uint256))
func (_Autonity *AutonityCaller) DumpEconomicMetrics(opts *bind.CallOpts) (AutonityEconomicMetrics, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "dumpEconomicMetrics")

	if err != nil {
		return *new(AutonityEconomicMetrics), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEconomicMetrics)).(*AutonityEconomicMetrics)

	return out0, err

}

// DumpEconomicMetrics is a free data retrieval call binding the contract method 0xace954cf.
//
// Solidity: function dumpEconomicMetrics() view returns((address[],uint8[],uint256[],uint256,uint256))
func (_Autonity *AutonitySession) DumpEconomicMetrics() (AutonityEconomicMetrics, error) {
	return _Autonity.Contract.DumpEconomicMetrics(&_Autonity.CallOpts)
}

// DumpEconomicMetrics is a free data retrieval call binding the contract method 0xace954cf.
//
// Solidity: function dumpEconomicMetrics() view returns((address[],uint8[],uint256[],uint256,uint256))
func (_Autonity *AutonityCallerSession) DumpEconomicMetrics() (AutonityEconomicMetrics, error) {
	return _Autonity.Contract.DumpEconomicMetrics(&_Autonity.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256)[])
func (_Autonity *AutonityCaller) GetCommittee(opts *bind.CallOpts) ([]AutonityCommitteeMember, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)

	return out0, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256)[])
func (_Autonity *AutonitySession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _Autonity.Contract.GetCommittee(&_Autonity.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256)[])
func (_Autonity *AutonityCallerSession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _Autonity.Contract.GetCommittee(&_Autonity.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonityCaller) GetMaxCommitteeSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonitySession) GetMaxCommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.GetMaxCommitteeSize(&_Autonity.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetMaxCommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.GetMaxCommitteeSize(&_Autonity.CallOpts)
}

// GetMinimumGasPrice is a free data retrieval call binding the contract method 0xf918379a.
//
// Solidity: function getMinimumGasPrice() view returns(uint256)
func (_Autonity *AutonityCaller) GetMinimumGasPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getMinimumGasPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumGasPrice is a free data retrieval call binding the contract method 0xf918379a.
//
// Solidity: function getMinimumGasPrice() view returns(uint256)
func (_Autonity *AutonitySession) GetMinimumGasPrice() (*big.Int, error) {
	return _Autonity.Contract.GetMinimumGasPrice(&_Autonity.CallOpts)
}

// GetMinimumGasPrice is a free data retrieval call binding the contract method 0xf918379a.
//
// Solidity: function getMinimumGasPrice() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetMinimumGasPrice() (*big.Int, error) {
	return _Autonity.Contract.GetMinimumGasPrice(&_Autonity.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(string, string)
func (_Autonity *AutonityCaller) GetNewContract(opts *bind.CallOpts) (string, string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(string, string)
func (_Autonity *AutonitySession) GetNewContract() (string, string, error) {
	return _Autonity.Contract.GetNewContract(&_Autonity.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(string, string)
func (_Autonity *AutonityCallerSession) GetNewContract() (string, string, error) {
	return _Autonity.Contract.GetNewContract(&_Autonity.CallOpts)
}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_Autonity *AutonityCaller) GetProposer(opts *bind.CallOpts, height *big.Int, round *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getProposer", height, round)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_Autonity *AutonitySession) GetProposer(height *big.Int, round *big.Int) (common.Address, error) {
	return _Autonity.Contract.GetProposer(&_Autonity.CallOpts, height, round)
}

// GetProposer is a free data retrieval call binding the contract method 0x5f7d3949.
//
// Solidity: function getProposer(uint256 height, uint256 round) view returns(address)
func (_Autonity *AutonityCallerSession) GetProposer(height *big.Int, round *big.Int) (common.Address, error) {
	return _Autonity.Contract.GetProposer(&_Autonity.CallOpts, height, round)
}

// GetStakeholders is a free data retrieval call binding the contract method 0xb6992247.
//
// Solidity: function getStakeholders() view returns(address[])
func (_Autonity *AutonityCaller) GetStakeholders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getStakeholders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetStakeholders is a free data retrieval call binding the contract method 0xb6992247.
//
// Solidity: function getStakeholders() view returns(address[])
func (_Autonity *AutonitySession) GetStakeholders() ([]common.Address, error) {
	return _Autonity.Contract.GetStakeholders(&_Autonity.CallOpts)
}

// GetStakeholders is a free data retrieval call binding the contract method 0xb6992247.
//
// Solidity: function getStakeholders() view returns(address[])
func (_Autonity *AutonityCallerSession) GetStakeholders() ([]common.Address, error) {
	return _Autonity.Contract.GetStakeholders(&_Autonity.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[] _addr, string[] _enode, uint256[] _userType, uint256[] _stake, address _operatorAccount, uint256 _minGasPrice, uint256 _committeeSize, string _contractVersion)
func (_Autonity *AutonityCaller) GetState(opts *bind.CallOpts) (struct {
	Addr            []common.Address
	Enode           []string
	UserType        []*big.Int
	Stake           []*big.Int
	OperatorAccount common.Address
	MinGasPrice     *big.Int
	CommitteeSize   *big.Int
	ContractVersion string
}, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getState")

	outstruct := new(struct {
		Addr            []common.Address
		Enode           []string
		UserType        []*big.Int
		Stake           []*big.Int
		OperatorAccount common.Address
		MinGasPrice     *big.Int
		CommitteeSize   *big.Int
		ContractVersion string
	})

	outstruct.Addr = out[0].([]common.Address)
	outstruct.Enode = out[1].([]string)
	outstruct.UserType = out[2].([]*big.Int)
	outstruct.Stake = out[3].([]*big.Int)
	outstruct.OperatorAccount = out[4].(common.Address)
	outstruct.MinGasPrice = out[5].(*big.Int)
	outstruct.CommitteeSize = out[6].(*big.Int)
	outstruct.ContractVersion = out[7].(string)

	return *outstruct, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[] _addr, string[] _enode, uint256[] _userType, uint256[] _stake, address _operatorAccount, uint256 _minGasPrice, uint256 _committeeSize, string _contractVersion)
func (_Autonity *AutonitySession) GetState() (struct {
	Addr            []common.Address
	Enode           []string
	UserType        []*big.Int
	Stake           []*big.Int
	OperatorAccount common.Address
	MinGasPrice     *big.Int
	CommitteeSize   *big.Int
	ContractVersion string
}, error) {
	return _Autonity.Contract.GetState(&_Autonity.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[] _addr, string[] _enode, uint256[] _userType, uint256[] _stake, address _operatorAccount, uint256 _minGasPrice, uint256 _committeeSize, string _contractVersion)
func (_Autonity *AutonityCallerSession) GetState() (struct {
	Addr            []common.Address
	Enode           []string
	UserType        []*big.Int
	Stake           []*big.Int
	OperatorAccount common.Address
	MinGasPrice     *big.Int
	CommitteeSize   *big.Int
	ContractVersion string
}, error) {
	return _Autonity.Contract.GetState(&_Autonity.CallOpts)
}

// GetUser is a free data retrieval call binding the contract method 0x6f77926b.
//
// Solidity: function getUser(address _account) view returns((address,uint8,uint256,string))
func (_Autonity *AutonityCaller) GetUser(opts *bind.CallOpts, _account common.Address) (AutonityUser, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getUser", _account)

	if err != nil {
		return *new(AutonityUser), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityUser)).(*AutonityUser)

	return out0, err

}

// GetUser is a free data retrieval call binding the contract method 0x6f77926b.
//
// Solidity: function getUser(address _account) view returns((address,uint8,uint256,string))
func (_Autonity *AutonitySession) GetUser(_account common.Address) (AutonityUser, error) {
	return _Autonity.Contract.GetUser(&_Autonity.CallOpts, _account)
}

// GetUser is a free data retrieval call binding the contract method 0x6f77926b.
//
// Solidity: function getUser(address _account) view returns((address,uint8,uint256,string))
func (_Autonity *AutonityCallerSession) GetUser(_account common.Address) (AutonityUser, error) {
	return _Autonity.Contract.GetUser(&_Autonity.CallOpts, _account)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonityCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonitySession) GetValidators() ([]common.Address, error) {
	return _Autonity.Contract.GetValidators(&_Autonity.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonityCallerSession) GetValidators() ([]common.Address, error) {
	return _Autonity.Contract.GetValidators(&_Autonity.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(string)
func (_Autonity *AutonityCaller) GetVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(string)
func (_Autonity *AutonitySession) GetVersion() (string, error) {
	return _Autonity.Contract.GetVersion(&_Autonity.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(string)
func (_Autonity *AutonityCallerSession) GetVersion() (string, error) {
	return _Autonity.Contract.GetVersion(&_Autonity.CallOpts)
}

// GetWhitelist is a free data retrieval call binding the contract method 0xd01f63f5.
//
// Solidity: function getWhitelist() view returns(string[])
func (_Autonity *AutonityCaller) GetWhitelist(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getWhitelist")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetWhitelist is a free data retrieval call binding the contract method 0xd01f63f5.
//
// Solidity: function getWhitelist() view returns(string[])
func (_Autonity *AutonitySession) GetWhitelist() ([]string, error) {
	return _Autonity.Contract.GetWhitelist(&_Autonity.CallOpts)
}

// GetWhitelist is a free data retrieval call binding the contract method 0xd01f63f5.
//
// Solidity: function getWhitelist() view returns(string[])
func (_Autonity *AutonityCallerSession) GetWhitelist() ([]string, error) {
	return _Autonity.Contract.GetWhitelist(&_Autonity.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonityCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonitySession) Name() (string, error) {
	return _Autonity.Contract.Name(&_Autonity.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonityCallerSession) Name() (string, error) {
	return _Autonity.Contract.Name(&_Autonity.CallOpts)
}

// OperatorAccount is a free data retrieval call binding the contract method 0x2801643d.
//
// Solidity: function operatorAccount() view returns(address)
func (_Autonity *AutonityCaller) OperatorAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "operatorAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OperatorAccount is a free data retrieval call binding the contract method 0x2801643d.
//
// Solidity: function operatorAccount() view returns(address)
func (_Autonity *AutonitySession) OperatorAccount() (common.Address, error) {
	return _Autonity.Contract.OperatorAccount(&_Autonity.CallOpts)
}

// OperatorAccount is a free data retrieval call binding the contract method 0x2801643d.
//
// Solidity: function operatorAccount() view returns(address)
func (_Autonity *AutonityCallerSession) OperatorAccount() (common.Address, error) {
	return _Autonity.Contract.OperatorAccount(&_Autonity.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonityCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonitySession) Symbol() (string, error) {
	return _Autonity.Contract.Symbol(&_Autonity.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonityCallerSession) Symbol() (string, error) {
	return _Autonity.Contract.Symbol(&_Autonity.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonityCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonitySession) TotalSupply() (*big.Int, error) {
	return _Autonity.Contract.TotalSupply(&_Autonity.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonityCallerSession) TotalSupply() (*big.Int, error) {
	return _Autonity.Contract.TotalSupply(&_Autonity.CallOpts)
}

// AddUser is a paid mutator transaction binding the contract method 0x4102efb1.
//
// Solidity: function addUser(address _address, uint256 _stake, string _enode, uint8 _role) returns()
func (_Autonity *AutonityTransactor) AddUser(opts *bind.TransactOpts, _address common.Address, _stake *big.Int, _enode string, _role uint8) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "addUser", _address, _stake, _enode, _role)
}

// AddUser is a paid mutator transaction binding the contract method 0x4102efb1.
//
// Solidity: function addUser(address _address, uint256 _stake, string _enode, uint8 _role) returns()
func (_Autonity *AutonitySession) AddUser(_address common.Address, _stake *big.Int, _enode string, _role uint8) (*types.Transaction, error) {
	return _Autonity.Contract.AddUser(&_Autonity.TransactOpts, _address, _stake, _enode, _role)
}

// AddUser is a paid mutator transaction binding the contract method 0x4102efb1.
//
// Solidity: function addUser(address _address, uint256 _stake, string _enode, uint8 _role) returns()
func (_Autonity *AutonityTransactorSession) AddUser(_address common.Address, _stake *big.Int, _enode string, _role uint8) (*types.Transaction, error) {
	return _Autonity.Contract.AddUser(&_Autonity.TransactOpts, _address, _stake, _enode, _role)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonitySession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Approve(&_Autonity.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Approve(&_Autonity.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_Autonity *AutonityTransactor) Burn(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "burn", _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_Autonity *AutonitySession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Burn(&_Autonity.TransactOpts, _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_Autonity *AutonityTransactorSession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Burn(&_Autonity.TransactOpts, _account, _amount)
}

// ChangeUserType is a paid mutator transaction binding the contract method 0x766f1fa6.
//
// Solidity: function changeUserType(address _address, uint8 newUserType) returns()
func (_Autonity *AutonityTransactor) ChangeUserType(opts *bind.TransactOpts, _address common.Address, newUserType uint8) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "changeUserType", _address, newUserType)
}

// ChangeUserType is a paid mutator transaction binding the contract method 0x766f1fa6.
//
// Solidity: function changeUserType(address _address, uint8 newUserType) returns()
func (_Autonity *AutonitySession) ChangeUserType(_address common.Address, newUserType uint8) (*types.Transaction, error) {
	return _Autonity.Contract.ChangeUserType(&_Autonity.TransactOpts, _address, newUserType)
}

// ChangeUserType is a paid mutator transaction binding the contract method 0x766f1fa6.
//
// Solidity: function changeUserType(address _address, uint8 newUserType) returns()
func (_Autonity *AutonityTransactorSession) ChangeUserType(_address common.Address, newUserType uint8) (*types.Transaction, error) {
	return _Autonity.Contract.ChangeUserType(&_Autonity.TransactOpts, _address, newUserType)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns()
func (_Autonity *AutonityTransactor) ComputeCommittee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "computeCommittee")
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns()
func (_Autonity *AutonitySession) ComputeCommittee() (*types.Transaction, error) {
	return _Autonity.Contract.ComputeCommittee(&_Autonity.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns()
func (_Autonity *AutonityTransactorSession) ComputeCommittee() (*types.Transaction, error) {
	return _Autonity.Contract.ComputeCommittee(&_Autonity.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x05261aea.
//
// Solidity: function finalize(uint256 amount) returns(bool, (address,uint256)[])
func (_Autonity *AutonityTransactor) Finalize(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "finalize", amount)
}

// Finalize is a paid mutator transaction binding the contract method 0x05261aea.
//
// Solidity: function finalize(uint256 amount) returns(bool, (address,uint256)[])
func (_Autonity *AutonitySession) Finalize(amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Finalize(&_Autonity.TransactOpts, amount)
}

// Finalize is a paid mutator transaction binding the contract method 0x05261aea.
//
// Solidity: function finalize(uint256 amount) returns(bool, (address,uint256)[])
func (_Autonity *AutonityTransactorSession) Finalize(amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Finalize(&_Autonity.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_Autonity *AutonityTransactor) Mint(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "mint", _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_Autonity *AutonitySession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Mint(&_Autonity.TransactOpts, _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_Autonity *AutonityTransactorSession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Mint(&_Autonity.TransactOpts, _account, _amount)
}

// RemoveUser is a paid mutator transaction binding the contract method 0x98575188.
//
// Solidity: function removeUser(address account) returns()
func (_Autonity *AutonityTransactor) RemoveUser(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "removeUser", account)
}

// RemoveUser is a paid mutator transaction binding the contract method 0x98575188.
//
// Solidity: function removeUser(address account) returns()
func (_Autonity *AutonitySession) RemoveUser(account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.RemoveUser(&_Autonity.TransactOpts, account)
}

// RemoveUser is a paid mutator transaction binding the contract method 0x98575188.
//
// Solidity: function removeUser(address account) returns()
func (_Autonity *AutonityTransactorSession) RemoveUser(account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.RemoveUser(&_Autonity.TransactOpts, account)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 size) returns()
func (_Autonity *AutonityTransactor) SetCommitteeSize(opts *bind.TransactOpts, size *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setCommitteeSize", size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 size) returns()
func (_Autonity *AutonitySession) SetCommitteeSize(size *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetCommitteeSize(&_Autonity.TransactOpts, size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 size) returns()
func (_Autonity *AutonityTransactorSession) SetCommitteeSize(size *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetCommitteeSize(&_Autonity.TransactOpts, size)
}

// SetMinimumGasPrice is a paid mutator transaction binding the contract method 0xd249b31c.
//
// Solidity: function setMinimumGasPrice(uint256 price) returns()
func (_Autonity *AutonityTransactor) SetMinimumGasPrice(opts *bind.TransactOpts, price *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMinimumGasPrice", price)
}

// SetMinimumGasPrice is a paid mutator transaction binding the contract method 0xd249b31c.
//
// Solidity: function setMinimumGasPrice(uint256 price) returns()
func (_Autonity *AutonitySession) SetMinimumGasPrice(price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMinimumGasPrice(&_Autonity.TransactOpts, price)
}

// SetMinimumGasPrice is a paid mutator transaction binding the contract method 0xd249b31c.
//
// Solidity: function setMinimumGasPrice(uint256 price) returns()
func (_Autonity *AutonityTransactorSession) SetMinimumGasPrice(price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMinimumGasPrice(&_Autonity.TransactOpts, price)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactor) Transfer(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "transfer", _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonitySession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Transfer(&_Autonity.TransactOpts, _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactorSession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Transfer(&_Autonity.TransactOpts, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Autonity *AutonitySession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.TransferFrom(&_Autonity.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.TransferFrom(&_Autonity.TransactOpts, sender, recipient, amount)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xf072929d.
//
// Solidity: function upgradeContract(string _bytecode, string _abi, string _version) returns(bool)
func (_Autonity *AutonityTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode string, _abi string, _version string) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "upgradeContract", _bytecode, _abi, _version)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xf072929d.
//
// Solidity: function upgradeContract(string _bytecode, string _abi, string _version) returns(bool)
func (_Autonity *AutonitySession) UpgradeContract(_bytecode string, _abi string, _version string) (*types.Transaction, error) {
	return _Autonity.Contract.UpgradeContract(&_Autonity.TransactOpts, _bytecode, _abi, _version)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xf072929d.
//
// Solidity: function upgradeContract(string _bytecode, string _abi, string _version) returns(bool)
func (_Autonity *AutonityTransactorSession) UpgradeContract(_bytecode string, _abi string, _version string) (*types.Transaction, error) {
	return _Autonity.Contract.UpgradeContract(&_Autonity.TransactOpts, _bytecode, _abi, _version)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonityTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Autonity.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonitySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Autonity.Contract.Fallback(&_Autonity.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonityTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Autonity.Contract.Fallback(&_Autonity.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonityTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonitySession) Receive() (*types.Transaction, error) {
	return _Autonity.Contract.Receive(&_Autonity.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonityTransactorSession) Receive() (*types.Transaction, error) {
	return _Autonity.Contract.Receive(&_Autonity.TransactOpts)
}

// AutonityApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Autonity contract.
type AutonityApprovalIterator struct {
	Event *AutonityApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityApproval represents a Approval event raised by the Autonity contract.
type AutonityApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &AutonityApprovalIterator{contract: _Autonity.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityApproval)
				if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) ParseApproval(log types.Log) (*AutonityApproval, error) {
	event := new(AutonityApproval)
	if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the Autonity contract.
type AutonityBurnedStakeIterator struct {
	Event *AutonityBurnedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityBurnedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityBurnedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityBurnedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityBurnedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityBurnedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityBurnedStake represents a BurnedStake event raised by the Autonity contract.
type AutonityBurnedStake struct {
	Address common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) FilterBurnedStake(opts *bind.FilterOpts) (*AutonityBurnedStakeIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "BurnedStake")
	if err != nil {
		return nil, err
	}
	return &AutonityBurnedStakeIterator{contract: _Autonity.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
}

// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityBurnedStake) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "BurnedStake")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityBurnedStake)
				if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) ParseBurnedStake(log types.Log) (*AutonityBurnedStake, error) {
	event := new(AutonityBurnedStake)
	if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityChangedUserTypeIterator is returned from FilterChangedUserType and is used to iterate over the raw logs and unpacked data for ChangedUserType events raised by the Autonity contract.
type AutonityChangedUserTypeIterator struct {
	Event *AutonityChangedUserType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityChangedUserTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityChangedUserType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityChangedUserType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityChangedUserTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityChangedUserTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityChangedUserType represents a ChangedUserType event raised by the Autonity contract.
type AutonityChangedUserType struct {
	Address common.Address
	OldType uint8
	NewType uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterChangedUserType is a free log retrieval operation binding the contract event 0xef4bc6ae70fb99fbbe8c762bf255267bd89ee3ecf96d846a57a13e6a701a6a69.
//
// Solidity: event ChangedUserType(address _address, uint8 _oldType, uint8 _newType)
func (_Autonity *AutonityFilterer) FilterChangedUserType(opts *bind.FilterOpts) (*AutonityChangedUserTypeIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "ChangedUserType")
	if err != nil {
		return nil, err
	}
	return &AutonityChangedUserTypeIterator{contract: _Autonity.contract, event: "ChangedUserType", logs: logs, sub: sub}, nil
}

// WatchChangedUserType is a free log subscription operation binding the contract event 0xef4bc6ae70fb99fbbe8c762bf255267bd89ee3ecf96d846a57a13e6a701a6a69.
//
// Solidity: event ChangedUserType(address _address, uint8 _oldType, uint8 _newType)
func (_Autonity *AutonityFilterer) WatchChangedUserType(opts *bind.WatchOpts, sink chan<- *AutonityChangedUserType) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "ChangedUserType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityChangedUserType)
				if err := _Autonity.contract.UnpackLog(event, "ChangedUserType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedUserType is a log parse operation binding the contract event 0xef4bc6ae70fb99fbbe8c762bf255267bd89ee3ecf96d846a57a13e6a701a6a69.
//
// Solidity: event ChangedUserType(address _address, uint8 _oldType, uint8 _newType)
func (_Autonity *AutonityFilterer) ParseChangedUserType(log types.Log) (*AutonityChangedUserType, error) {
	event := new(AutonityChangedUserType)
	if err := _Autonity.contract.UnpackLog(event, "ChangedUserType", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityContractUpgradedIterator is returned from FilterContractUpgraded and is used to iterate over the raw logs and unpacked data for ContractUpgraded events raised by the Autonity contract.
type AutonityContractUpgradedIterator struct {
	Event *AutonityContractUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityContractUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityContractUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityContractUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityContractUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityContractUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityContractUpgraded represents a ContractUpgraded event raised by the Autonity contract.
type AutonityContractUpgraded struct {
	Version string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterContractUpgraded is a free log retrieval operation binding the contract event 0xb8751b0dd53b85bff7c80c820320c0c7993e4af340a036b112cb9b5714106a61.
//
// Solidity: event ContractUpgraded(string version)
func (_Autonity *AutonityFilterer) FilterContractUpgraded(opts *bind.FilterOpts) (*AutonityContractUpgradedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "ContractUpgraded")
	if err != nil {
		return nil, err
	}
	return &AutonityContractUpgradedIterator{contract: _Autonity.contract, event: "ContractUpgraded", logs: logs, sub: sub}, nil
}

// WatchContractUpgraded is a free log subscription operation binding the contract event 0xb8751b0dd53b85bff7c80c820320c0c7993e4af340a036b112cb9b5714106a61.
//
// Solidity: event ContractUpgraded(string version)
func (_Autonity *AutonityFilterer) WatchContractUpgraded(opts *bind.WatchOpts, sink chan<- *AutonityContractUpgraded) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "ContractUpgraded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityContractUpgraded)
				if err := _Autonity.contract.UnpackLog(event, "ContractUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractUpgraded is a log parse operation binding the contract event 0xb8751b0dd53b85bff7c80c820320c0c7993e4af340a036b112cb9b5714106a61.
//
// Solidity: event ContractUpgraded(string version)
func (_Autonity *AutonityFilterer) ParseContractUpgraded(log types.Log) (*AutonityContractUpgraded, error) {
	event := new(AutonityContractUpgraded)
	if err := _Autonity.contract.UnpackLog(event, "ContractUpgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityMinimumGasPriceUpdatedIterator is returned from FilterMinimumGasPriceUpdated and is used to iterate over the raw logs and unpacked data for MinimumGasPriceUpdated events raised by the Autonity contract.
type AutonityMinimumGasPriceUpdatedIterator struct {
	Event *AutonityMinimumGasPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityMinimumGasPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityMinimumGasPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityMinimumGasPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityMinimumGasPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityMinimumGasPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityMinimumGasPriceUpdated represents a MinimumGasPriceUpdated event raised by the Autonity contract.
type AutonityMinimumGasPriceUpdated struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMinimumGasPriceUpdated is a free log retrieval operation binding the contract event 0x58841da31675d02939f5efa0add356e7af0a24703fe398e1eba9ea4ea4db253a.
//
// Solidity: event MinimumGasPriceUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) FilterMinimumGasPriceUpdated(opts *bind.FilterOpts) (*AutonityMinimumGasPriceUpdatedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "MinimumGasPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityMinimumGasPriceUpdatedIterator{contract: _Autonity.contract, event: "MinimumGasPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumGasPriceUpdated is a free log subscription operation binding the contract event 0x58841da31675d02939f5efa0add356e7af0a24703fe398e1eba9ea4ea4db253a.
//
// Solidity: event MinimumGasPriceUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) WatchMinimumGasPriceUpdated(opts *bind.WatchOpts, sink chan<- *AutonityMinimumGasPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "MinimumGasPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityMinimumGasPriceUpdated)
				if err := _Autonity.contract.UnpackLog(event, "MinimumGasPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumGasPriceUpdated is a log parse operation binding the contract event 0x58841da31675d02939f5efa0add356e7af0a24703fe398e1eba9ea4ea4db253a.
//
// Solidity: event MinimumGasPriceUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) ParseMinimumGasPriceUpdated(log types.Log) (*AutonityMinimumGasPriceUpdated, error) {
	event := new(AutonityMinimumGasPriceUpdated)
	if err := _Autonity.contract.UnpackLog(event, "MinimumGasPriceUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the Autonity contract.
type AutonityMintedStakeIterator struct {
	Event *AutonityMintedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityMintedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityMintedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityMintedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityMintedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityMintedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityMintedStake represents a MintedStake event raised by the Autonity contract.
type AutonityMintedStake struct {
	Address common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) FilterMintedStake(opts *bind.FilterOpts) (*AutonityMintedStakeIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "MintedStake")
	if err != nil {
		return nil, err
	}
	return &AutonityMintedStakeIterator{contract: _Autonity.contract, event: "MintedStake", logs: logs, sub: sub}, nil
}

// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityMintedStake) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "MintedStake")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityMintedStake)
				if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) ParseMintedStake(log types.Log) (*AutonityMintedStake, error) {
	event := new(AutonityMintedStake)
	if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityRemovedUserIterator is returned from FilterRemovedUser and is used to iterate over the raw logs and unpacked data for RemovedUser events raised by the Autonity contract.
type AutonityRemovedUserIterator struct {
	Event *AutonityRemovedUser // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityRemovedUserIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityRemovedUser)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityRemovedUser)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityRemovedUserIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityRemovedUserIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityRemovedUser represents a RemovedUser event raised by the Autonity contract.
type AutonityRemovedUser struct {
	Address common.Address
	Type    uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRemovedUser is a free log retrieval operation binding the contract event 0x4646e2253e66f30baa225c41db8d98e72402d5fab9e17d8b891a474e1d60ce1c.
//
// Solidity: event RemovedUser(address _address, uint8 _type)
func (_Autonity *AutonityFilterer) FilterRemovedUser(opts *bind.FilterOpts) (*AutonityRemovedUserIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "RemovedUser")
	if err != nil {
		return nil, err
	}
	return &AutonityRemovedUserIterator{contract: _Autonity.contract, event: "RemovedUser", logs: logs, sub: sub}, nil
}

// WatchRemovedUser is a free log subscription operation binding the contract event 0x4646e2253e66f30baa225c41db8d98e72402d5fab9e17d8b891a474e1d60ce1c.
//
// Solidity: event RemovedUser(address _address, uint8 _type)
func (_Autonity *AutonityFilterer) WatchRemovedUser(opts *bind.WatchOpts, sink chan<- *AutonityRemovedUser) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "RemovedUser")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityRemovedUser)
				if err := _Autonity.contract.UnpackLog(event, "RemovedUser", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedUser is a log parse operation binding the contract event 0x4646e2253e66f30baa225c41db8d98e72402d5fab9e17d8b891a474e1d60ce1c.
//
// Solidity: event RemovedUser(address _address, uint8 _type)
func (_Autonity *AutonityFilterer) ParseRemovedUser(log types.Log) (*AutonityRemovedUser, error) {
	event := new(AutonityRemovedUser)
	if err := _Autonity.contract.UnpackLog(event, "RemovedUser", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the Autonity contract.
type AutonityRewardedIterator struct {
	Event *AutonityRewarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityRewardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityRewarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityRewarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityRewardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityRewardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityRewarded represents a Rewarded event raised by the Autonity contract.
type AutonityRewarded struct {
	Address common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRewarded is a free log retrieval operation binding the contract event 0xb3b7a071186534c03b40695710096f289fd4ed6c1a374aff0bb648955e4fe563.
//
// Solidity: event Rewarded(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) FilterRewarded(opts *bind.FilterOpts) (*AutonityRewardedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Rewarded")
	if err != nil {
		return nil, err
	}
	return &AutonityRewardedIterator{contract: _Autonity.contract, event: "Rewarded", logs: logs, sub: sub}, nil
}

// WatchRewarded is a free log subscription operation binding the contract event 0xb3b7a071186534c03b40695710096f289fd4ed6c1a374aff0bb648955e4fe563.
//
// Solidity: event Rewarded(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityRewarded) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Rewarded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityRewarded)
				if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewarded is a log parse operation binding the contract event 0xb3b7a071186534c03b40695710096f289fd4ed6c1a374aff0bb648955e4fe563.
//
// Solidity: event Rewarded(address _address, uint256 _amount)
func (_Autonity *AutonityFilterer) ParseRewarded(log types.Log) (*AutonityRewarded, error) {
	event := new(AutonityRewarded)
	if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Autonity contract.
type AutonityTransferIterator struct {
	Event *AutonityTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityTransfer represents a Transfer event raised by the Autonity contract.
type AutonityTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AutonityTransferIterator{contract: _Autonity.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityTransfer)
				if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) ParseTransfer(log types.Log) (*AutonityTransfer, error) {
	event := new(AutonityTransfer)
	if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AutonityUserAddedIterator is returned from FilterUserAdded and is used to iterate over the raw logs and unpacked data for UserAdded events raised by the Autonity contract.
type AutonityUserAddedIterator struct {
	Event *AutonityUserAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUserAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUserAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUserAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUserAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUserAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUserAdded represents a UserAdded event raised by the Autonity contract.
type AutonityUserAdded struct {
	Address common.Address
	Type    uint8
	Stake   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUserAdded is a free log retrieval operation binding the contract event 0xf35addd78a9e6921f9cec55fd935989f180980597c8bd0c05bba14c56dbb4fb7.
//
// Solidity: event UserAdded(address _address, uint8 _type, uint256 _stake)
func (_Autonity *AutonityFilterer) FilterUserAdded(opts *bind.FilterOpts) (*AutonityUserAddedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "UserAdded")
	if err != nil {
		return nil, err
	}
	return &AutonityUserAddedIterator{contract: _Autonity.contract, event: "UserAdded", logs: logs, sub: sub}, nil
}

// WatchUserAdded is a free log subscription operation binding the contract event 0xf35addd78a9e6921f9cec55fd935989f180980597c8bd0c05bba14c56dbb4fb7.
//
// Solidity: event UserAdded(address _address, uint8 _type, uint256 _stake)
func (_Autonity *AutonityFilterer) WatchUserAdded(opts *bind.WatchOpts, sink chan<- *AutonityUserAdded) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "UserAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUserAdded)
				if err := _Autonity.contract.UnpackLog(event, "UserAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserAdded is a log parse operation binding the contract event 0xf35addd78a9e6921f9cec55fd935989f180980597c8bd0c05bba14c56dbb4fb7.
//
// Solidity: event UserAdded(address _address, uint8 _type, uint256 _stake)
func (_Autonity *AutonityFilterer) ParseUserAdded(log types.Log) (*AutonityUserAdded, error) {
	event := new(AutonityUserAdded)
	if err := _Autonity.contract.UnpackLog(event, "UserAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IERC20ABI is the input ABI used to generate the binding from.
const IERC20ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = map[string]string{
	"dd62ed3e": "allowance(address,address)",
	"095ea7b3": "approve(address,uint256)",
	"70a08231": "balanceOf(address)",
	"18160ddd": "totalSupply()",
	"a9059cbb": "transfer(address,uint256)",
	"23b872dd": "transferFrom(address,address,uint256)",
}

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PrecompiledABI is the input ABI used to generate the binding from.
const PrecompiledABI = "[]"

// PrecompiledBin is the compiled bytecode used for deploying new contracts.
var PrecompiledBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df5bc10abcb0126b8dda968538a56a74d5960a5f9ffffb8115dde8b5eb608f7064736f6c63430007040033"

// DeployPrecompiled deploys a new Ethereum contract, binding an instance of Precompiled to it.
func DeployPrecompiled(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompiled, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompiledABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrecompiledBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompiled{PrecompiledCaller: PrecompiledCaller{contract: contract}, PrecompiledTransactor: PrecompiledTransactor{contract: contract}, PrecompiledFilterer: PrecompiledFilterer{contract: contract}}, nil
}

// Precompiled is an auto generated Go binding around an Ethereum contract.
type Precompiled struct {
	PrecompiledCaller     // Read-only binding to the contract
	PrecompiledTransactor // Write-only binding to the contract
	PrecompiledFilterer   // Log filterer for contract events
}

// PrecompiledCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompiledCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompiledTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompiledFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompiledSession struct {
	Contract     *Precompiled      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompiledCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompiledCallerSession struct {
	Contract *PrecompiledCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PrecompiledTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompiledTransactorSession struct {
	Contract     *PrecompiledTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PrecompiledRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompiledRaw struct {
	Contract *Precompiled // Generic contract binding to access the raw methods on
}

// PrecompiledCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompiledCallerRaw struct {
	Contract *PrecompiledCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompiledTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompiledTransactorRaw struct {
	Contract *PrecompiledTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompiled creates a new instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiled(address common.Address, backend bind.ContractBackend) (*Precompiled, error) {
	contract, err := bindPrecompiled(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompiled{PrecompiledCaller: PrecompiledCaller{contract: contract}, PrecompiledTransactor: PrecompiledTransactor{contract: contract}, PrecompiledFilterer: PrecompiledFilterer{contract: contract}}, nil
}

// NewPrecompiledCaller creates a new read-only instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledCaller(address common.Address, caller bind.ContractCaller) (*PrecompiledCaller, error) {
	contract, err := bindPrecompiled(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompiledCaller{contract: contract}, nil
}

// NewPrecompiledTransactor creates a new write-only instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompiledTransactor, error) {
	contract, err := bindPrecompiled(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompiledTransactor{contract: contract}, nil
}

// NewPrecompiledFilterer creates a new log filterer instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompiledFilterer, error) {
	contract, err := bindPrecompiled(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompiledFilterer{contract: contract}, nil
}

// bindPrecompiled binds a generic wrapper to an already deployed contract.
func bindPrecompiled(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompiledABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiled *PrecompiledRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiled.Contract.PrecompiledCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiled *PrecompiledRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiled.Contract.PrecompiledTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiled *PrecompiledRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiled.Contract.PrecompiledTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiled *PrecompiledCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiled.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiled *PrecompiledTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiled.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiled *PrecompiledTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiled.Contract.contract.Transact(opts, method, params...)
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
var SafeMathBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122021748327f80146988a5a99670d3fd278ea815571773151c70e1a7b08d8222a9764736f6c63430007040033"

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}
