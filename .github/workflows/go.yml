name: Go
on:
  # workflow_dispatch adds a manual trigger button in the github UI that allows
  # you to trigger builds on specific branches when you are in the page for
  # this workflow.
  workflow_dispatch:
  # pull_request triggers this workflow on both internal and forked pull
  # requests.
  pull_request:
    types:
      - opened            # default
      - synchronize       # default
      - reopened          # default
      - ready_for_review  # added, makes it so that when a PR gets marked as rfr, contract tests execute

env:
  # We don't have access to the HOME environment variable here since we are not
  # inside a runner at this point, so we just have to hardcode '/home/runner',
  # if we instead defined these environment variables when we did have access
  # to HOME we would need to define them for each job, which would defeat the
  # purpose of defining them here.
  GO_CACHE: /home/runner/.cache/go-build # This is the location of the go build cache.
  GO_MODULES_CACHE: /home/runner/go/pkg # This is where module source code is stored.
  GO_VERSION: "1.20" # 1.15 seems to cause tests to fail

jobs:

  # prepare-cache fills the gocache with the source code for all modules and
  # attempts to fill the build cache with as much as possible intermediately
  # compiled source. Most other jobs depend on this job and so this serves to
  # speed up all other jobs. Since the cache only changes when the go modules
  # change, actually filling the cache happens quite infrequently. So most runs
  # should not be impacted by the time taken to fill the cache.
  prepare-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3

      - name: Go cache
        uses: actions/cache@v2
        id: gocache
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

        # We want to make sure that we download all the modules and compile
        # everything that may be needed so that they fill the go modules cache
        # and go-build dir.
      - name: Fill cache
        if: steps.gocache.outputs.cache-hit != 'true'
        run: |
          go mod download -x
          make autonity
          go build ./...
          go test -c ./consensus/test
          go test -c ./eth

  # tests runs most of the tests for the project, we use a matrix to run multiple configurations.
  tests:
    needs: prepare-cache
    runs-on: ubuntu-latest
    env:
      # helps prevent '[failed to restore the stack]' messages when race detected.
      GORACE: "history_size=7"
    strategy:
      matrix:
        # Here we set up a matrix to control our tests, we use go list and
        # negative grep to get most of the test packages for the main tests
        # excluding packages of particular interest. The excluded package are
        # those that are slow to test, our e2e tests and tendermint core.
        tests: [ [ main-tests, $(go list ./... | grep -E -v "/les|/p2p|/eth|/consensus/tendermint|/consensus/test|/core$|/e2e_test") ],
                 [ slow-tests, $(go list ./p2p/... ./eth/... | grep -E -v "/p2p/simulations") -timeout 30m ],
                 [ problematic-tests, -p 1 ./p2p/simulations/... ./core ],
                 [ tendermint-tests, ./consensus/tendermint/... -timeout 15m -race ],
                 [ integration-tests, ./consensus/test/... -v -timeout 60m ],
                 [ byzantine-tests, ./e2e_test/byzantine/... -v -timeout 40m],
                 [ new-e2e-tests, ./e2e_test -v -race ]
        ]

    name: ${{ matrix.tests[0] }}

    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run tests
        run: go test ${{ matrix.tests[1] }}

  # tendermint-coverage runs the tendermint tests and collects the coverage, it
  # can't be part of the matrix tests since we need to use the codecov action,
  # which we do not want to use for the rest of the codebase.
  tendermint-tests-coverage:
    needs: prepare-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run coverage
        run: |
          go test ./consensus/tendermint/... -timeout 15m -cover -covermode=atomic -test.coverprofile=coverage_tendermint_ut.out
          go test ./e2e_test -p 1 -timeout 15m -cover -covermode=atomic -coverpkg=./consensus/tendermint/... -test.coverprofile=coverage_tendermint_integration.out


      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_upload }}
          files: coverage_tendermint_ut.out,coverage_tendermint_integration.out
          yml: codecov.yml

  # lint does linting.
  lint:
    needs: prepare-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: '2'
      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run linting
        run: make lint-ci
        shell: bash

  # contract-tests runs:
  # - the asm tests using the APE framework
  # - truffle tests against an autonity node (slow, run only when PR is not draft)
  contract-tests:
    if: '! github.event.pull_request.draft'
    runs-on: ubuntu-latest
    needs: prepare-cache
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: '18.12.1'

      - uses: actions/checkout@v3

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run contract tests
        run: make test-contracts
  
  # contract-tests-fast runs:
  # - the asm tests using the APE framework
  # - truffle tests against a ganache node
  contract-tests-fast:
    runs-on: ubuntu-latest
    needs: prepare-cache
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: '18.12.1'

      - uses: actions/checkout@v3

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run contract tests
        run: make test-contracts-fast

  # These are the end to end tests run with a block time of 1 second, they are
  # only run on merges to develop.
  slow-e2e-tests:
    needs: prepare-cache
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go

      - uses: actions/checkout@v3

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

      - name: slow-e2e-tests
        run: go test ./consensus/test/... -v -blockperiod=1 -timeout=1h

  # docker-e2e-test runs the docker e2e test, it only runs on merges to the
  # develop branch because it takes hours to complete and so is not feasible to
  # run during normal development.
  docker-e2e-tests:
    needs: prepare-cache
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go

      - uses: actions/checkout@v3

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ env.GO_VERSION }}${{ hashFiles('go.mod', 'go.sum') }}

      - name: Build
        run: make all

      - name: Run docker e2e tests
        run: cd docker_e2e_test && make install-prerequisites-linux && make docker-e2e-tests
