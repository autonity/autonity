name: Go
on:
  push:
  pull_request:
jobs:
  bootstrap-checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

  tests:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: unit tests
        run: go test -p 1 -timeout 30m -short $(go list ./... | grep -v /consensus/tendermint)

  tests-tendermint:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: tendermint_tests
        run: go test -v ./consensus/tendermint/... -timeout 30m -cover -covermode=atomic -test.coverprofile=coverage_tendermint.out

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_upload }}
          file: coverage_tendermint.out
          yml: codecov.yml

  tests-conformance:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache git modules
        uses: actions/cache@v1
        id: cache-git-modules
        env:
          cache-name: cache-git-modules
        with:
          path: /home/runner/work/autonity/autonity/tests/testdata
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ hashFiles('**/.gitmodules') }}

      - name: get conformance tests
        if: steps.cache-git-modules.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive

      - name: unit tests
        run: go test -timeout 30m ./tests/...

  build:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Build
        run: make autonity

      - name: Cache binary
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-bin
        with:
          path: /home/runner/work/autonity/autonity/build/bin
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - name: Install
        run: go run build/ci.go install

  linters:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'
      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Linters
        run: |
          git fetch -fu --no-tags --depth=2 origin develop:develop
          make lint-ci
        shell: bash

  tendermint_e2e_tests:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    strategy:
      matrix:
        e2e: [TestCheckFeeRedirectionAndRedistribution,
              TestCheckBlockWithSmallFee,
              TestRewardDistribution,
              TestStakeManagement,
              TestMemberManagement,
              TestRemoveFromValidatorsList,
              TestContractUpgrade_Success,
              TestContractUpgradeSeveralUpgrades,
              TestContractUpgradeSeveralUpgradesOnBusTopology,
              TestContractUpgradeSeveralUpgradesOnStarTopology,
              TestTendermintSuccess,
              TestTendermintSlowConnections,
              TestTendermintMemoryLeak,
              TestTendermintLongRun,
              TestTendermintOneMalicious,
              TestTendermintNoQuorum,
              TestTendermintStopUpToFNodes,
              TestTendermintStartStopSingleNode,
              TestTendermintStartStopFNodes,
              TestTendermintStartStopFPlusOneNodes,
              TestTendermintStartStopFPlusTwoNodes,
              TestTendermintStartStopAllNodes,
              TestResolve,
              TestTendermintStarSuccess,
              TestTendermintStarOverParticipantSuccess,
              TestTendermintBusSuccess,
              TestTendermintChangeTopologyFromBusToStarSuccess,
              TestTendermintChangeTopologyFromStarToBusSuccess,
              TestTendermintAddConnectionToTopologySuccess,
              TestTendermintAddValidatorsToTopologySuccess,
              TestTendermintAddParticipantsToTopologySuccess,
              TestTendermintAddStakeholdersToTopologySuccess,
              TestTendermintExternalUser,
              TestTendermintStarOverParticipantSuccessWithExternalUser,
              TestTendermintBusSuccessWithExternalUser,
              TestTendermintChangeTopologyFromBusToStarSuccessWithExternalUser,
              TestTendermintChangeTopologyFromStarToBusSuccessWithExternalUser,
              TestTendermintAddConnectionToTopologySuccessWithExternalUser,
              TestTendermintAddValidatorsToTopologySuccessWithExternalUser,
              TestTendermintAddParticipantsToTopologySuccessWithExternalUser,
              TestTendermintAddStakeholdersToTopologySuccessWithExternalUser,
              TestTendermintMajorityExternalUsers,
              TestTendermintMajorityExternalUsersFullyConnected,
              TestAddStakeholderWithCorruptedEnodeToList,
              TestAddIncorrectStakeholdersToList
        ]

    name: Tendermint ${{ matrix.e2e }} test

    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Test
        run: go test ./consensus/test/... -v -run='${{ matrix.e2e }}' -timeout 40m

  race_tests:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    env:
      GORACE: "history_size=7"
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: unit
        run: go test -race -v ./consensus/tendermint/... -timeout 30m

  contract_tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache binary
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-bin
        with:
          path: /home/runner/work/autonity/autonity/build/bin
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - name: Build Autonity
        if:  steps.cache-autonity-bin.outputs.cache-hit != 'true'
        run: make autonity

      - name: test contract
        run: make test-contracts

  docker_e2e_test:
    needs: bootstrap-checkout
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v1
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'


      - name: Build
        run: make all


      - name: docker_e2e_test
        run: cd docker_e2e_test && make install-prerequisites-linux && make docker-e2e-tests

  # Tests the hello-world example, this indirectly ensures that the autonity
  # docker image can be built since the hello-world example uses it.  We don't want to
  # use any cache here since we want a clean checkout before any code
  # generation has taken place.
  helloworld_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: helloworld
    steps:
      - uses: actions/checkout@v2

      - name: Build and start helloworld
        run: docker-compose up -d

      - name: Test helloworld console access
        run: |
          set -e && \
          for x in 11 12 13 14 15; do \
            docker run \
            --network helloworld_chainnet \
            --rm \
            autonity attach http://172.25.0.$x:8545 \
            --exec '[eth.coinbase, eth.getBlock("latest").number, eth.getBlock("latest").hash, eth.mining]'; \
          done

      - name: Stop helloworld
        run: docker-compose down
