package params

import (
	"errors"
	"fmt"
	"github.com/clearmatics/autonity/common"
	"github.com/clearmatics/autonity/p2p/enode"
	"reflect"
)

const (


//participant: Authorized to operate a full node, is able to join the network, is not authorized to own stake.
	UserParticipant UserType = "participant"
	//member: Authorized to operate a full node, is able to join the network, authorized to own stake.
	UserStakeHolder UserType = "stakeholder"
	//validator: Authorized to operate a full node, is able to join the network, authorized to own stake, participate in consensus.
	UserValidator UserType = "validator"

	// Glienicke Default config
	AutonityDefaultABI      = `[{"constant":false,"inputs":[{"name":"_enode","type":"string"}],"name":"RemoveEnode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"enodes","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_enode","type":"string"}],"name":"AddEnode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getWhitelist","outputs":[{"name":"","type":"string[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"s1","type":"string"},{"name":"s2","type":"string"}],"name":"compareStringsbyBytes","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"inputs":[{"name":"_genesisEnodes","type":"string[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]`
	AutonityDefaultBytecode = "60806040523480156200001157600080fd5b5060405162000c8738038062000c87833981018060405262000037919081019062000209565b60005b81518110156200009157600082828151811015156200005557fe5b6020908102909101810151825460018101808555600094855293839020825162000086949190920192019062000099565b50506001016200003a565b5050620002ec565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000dc57805160ff19168380011785556200010c565b828001600101855582156200010c579182015b828111156200010c578251825591602001919060010190620000ef565b506200011a9291506200011e565b5090565b6200013b91905b808211156200011a576000815560010162000125565b90565b6000601f820183136200015057600080fd5b815162000167620001618262000270565b62000249565b81815260209384019390925082018360005b83811015620001a95781518601620001928882620001b3565b845250602092830192919091019060010162000179565b5050505092915050565b6000601f82018313620001c557600080fd5b8151620001d6620001618262000291565b91508082526020830160208301858383011115620001f357600080fd5b62000200838284620002b9565b50505092915050565b6000602082840312156200021c57600080fd5b81516001604060020a038111156200023357600080fd5b62000241848285016200013e565b949350505050565b6040518181016001604060020a03811182821017156200026857600080fd5b604052919050565b60006001604060020a038211156200028757600080fd5b5060209081020190565b60006001604060020a03821115620002a857600080fd5b506020601f91909101601f19160190565b60005b83811015620002d6578181015183820152602001620002bc565b83811115620002e6576000848401525b50505050565b61098b80620002fc6000396000f30060806040526004361061006c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663189da37281146100715780639890b32914610093578063ba1de5da146100c9578063d01f63f5146100e9578063e9a734ff1461010b575b600080fd5b34801561007d57600080fd5b5061009161008c36600461070e565b610138565b005b34801561009f57600080fd5b506100b36100ae3660046107b4565b610280565b6040516100c0919061089c565b60405180910390f35b3480156100d557600080fd5b506100916100e436600461070e565b610327565b3480156100f557600080fd5b506100fe61036d565b6040516100c0919061087d565b34801561011757600080fd5b5061012b61012636600461074b565b610446565b6040516100c0919061088e565b6000805460011061014857600080fd5b5060005b60005481101561027c5761020160008281548110151561016857fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156101f65780601f106101cb576101008083540402835291602001916101f6565b820191906000526020600020905b8154815290600101906020018083116101d957829003601f168201915b505050505083610446565b156102745760008054600019810190811061021857fe5b9060005260206000200160008281548110151561023157fe5b90600052602060002001908054600181600116156101000203166002900461025a92919061050c565b50600080549061026e906000198301610591565b5061027c565b60010161014c565b5050565b600080548290811061028e57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561031f5780601f106102f45761010080835404028352916020019161031f565b820191906000526020600020905b81548152906001019060200180831161030257829003601f168201915b505050505081565b60008054600181018083559180528251610368917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019060208501906105b5565b505050565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561043c5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b505050505081526020019060010190610391565b5050505090505b90565b6000816040518082805190602001908083835b602083106104785780518252601f199092019160209182019101610459565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b602083106104d15780518252601f1990920191602091820191016104b2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161490505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105455780548555610581565b8280016001018555821561058157600052602060002091601f016020900482015b82811115610581578254825591600101919060010190610566565b5061058d929150610623565b5090565b8154818355818111156103685760008381526020902061036891810190830161063d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105f657805160ff1916838001178555610581565b82800160010185558215610581579182015b82811115610581578251825591602001919060010190610608565b61044391905b8082111561058d5760008155600101610629565b61044391905b8082111561058d5760006106578282610660565b50600101610643565b50805460018160011615610100020316600290046000825580601f1061068657506106a4565b601f0160209004906000526020600020908101906106a49190610623565b50565b6000601f820183136106b857600080fd5b81356106cb6106c6826108d4565b6108ad565b915080825260208301602083018583830111156106e757600080fd5b6106f283828461090b565b50505092915050565b60006107078235610443565b9392505050565b60006020828403121561072057600080fd5b813567ffffffffffffffff81111561073757600080fd5b610743848285016106a7565b949350505050565b6000806040838503121561075e57600080fd5b823567ffffffffffffffff81111561077557600080fd5b610781858286016106a7565b925050602083013567ffffffffffffffff81111561079e57600080fd5b6107aa858286016106a7565b9150509250929050565b6000602082840312156107c657600080fd5b600061074384846106fb565b60006107dd82610902565b808452602084019350836020820285016107f6856108fc565b60005b8481101561082d578383038852610811838351610848565b925061081c826108fc565b6020989098019791506001016107f9565b50909695505050505050565b61084281610906565b82525050565b600061085382610902565b808452610867816020860160208601610917565b61087081610947565b9093016020019392505050565b6020808252810161070781846107d2565b602081016105068284610839565b602080825281016107078184610848565b60405181810167ffffffffffffffff811182821017156108cc57600080fd5b604052919050565b600067ffffffffffffffff8211156108eb57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b151590565b82818337506000910152565b60005b8381101561093257818101518382015260200161091a565b83811115610941576000848401525b50505050565b601f01601f1916905600a265627a7a72305820964f5cc22f1190ee37bff2da4fb93a5ec323c47cf5f68a08c1483c225b9fb26d6c6578706572696d656e74616cf50037"
)

var AutonityDefaultDeployer = common.BytesToAddress([]byte{13, 37})

type UserType string

func (ut UserType) Uint() uint64 {
	if ut == UserParticipant {
		return 0
	}
	if ut == UserStakeHolder {
		return 1
	}
	if ut == UserValidator {
		return 2
	}
	return -1
}

func (ut UserType) IsValid() bool {
	if ut == UserStakeHolder || ut == UserValidator || ut == UserParticipant {
		return true
	}
	return false
}

// Autonity contract config. It'is used for deployment.
type AutonityContract struct {
	// Address of the validator who deploys contract stored in bytecode
	Deployer common.Address `json:"deployer" toml:",omitempty"`
	// Bytecode of validators contract // would like this type to be []byte but the unmarshalling is not working
	Bytecode string `json:"bytecode" toml:",omitempty"`
	// Json ABI of the contract
	ABI         string         `json:"abi "toml:",omitempty"`
	MinGasPrice uint64         `json:"minGasPrice" toml:",omitempty"`
	Operator    common.Address `json:"operator" toml:",omitempty"`
	Users       []User         `json:"users" "toml:",omitempty"`
}

func (ac *AutonityContract) Validate() error {
	if len(ac.Bytecode) == 0 || len(ac.ABI) == 0 {
		return errors.New("autonity contract is empty")
	}
	if reflect.DeepEqual(ac.Deployer, common.Address{}) {
		return errors.New("deployer is empty")
	}
	if reflect.DeepEqual(ac.Operator, common.Address{}) {
		return errors.New("governance operator is empty")
	}
	for i := range ac.Users {
		if err := ac.Users[i].Validate(); err != nil {
			return err
		}
	}
	return nil
}

//User - is used to put predefined accounts to genesis
type User struct {
	Address common.Address
	Enode   string
	Type    UserType
	Stake   uint64
}

func (u *User) Validate() error {
	if !u.Type.IsValid() {
		return errors.New("incorrect user type")
	}

	if reflect.DeepEqual(u.Address, common.Address{}) && len(u.Enode) == 0 {
		return errors.New("user.enode or user.address must be defined")
	}

	if u.Type == UserParticipant && u.Stake > 0 {
		return errors.New("user.stake must be nil or equal to 0 for users of type participant")
	}

	if u.Type == UserValidator && len(u.Enode) == 0 {
		return errors.New("if user.type is validator then user.enode must be defined")
	}
	if len(u.Enode) > 0 {
		n, err := enode.ParseV4WithResolve(u.Enode)
		if err != nil {
			return fmt.Errorf("fail to parse enode for account %v, error:%v", u.Address, err)
		}

		addrFromEnode := EnodeToAddress(n)
		if reflect.DeepEqual(u.Address, common.Address{}) {
			u.Address = addrFromEnode
		} else if !reflect.DeepEqual(u.Address, addrFromEnode) {
			return errors.New("if both user.enode and user.address are defined, then the derived address from user.enode must be equal to user.address")
		}
	}

	return nil
}

//GetParticipantUsers - returns list of participants
func (ac *AutonityContract) GetValidatorUsers() []User {
	var users []User
	for i := range ac.Users {
		if ac.Users[i].Type == UserValidator {
			users = append(users, ac.Users[i])
		}
	}
	return users
}

func EnodeToAddress(n *enode.Node) common.Address {
	addrByte := n.ID().Bytes()[12:]
	return common.BytesToAddress(addrByte)
}
