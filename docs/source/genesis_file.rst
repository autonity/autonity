Genesis File
============

The genesis file is a JSON_ formatted file that is the source of all network
level configuration for Autonity.  We can think of a genesis file as defining a
network, and any entity that wishes to join the network must obtain a copy of
the genesis file and initialise their Autonity client with it in order to join
the network.

.. _JSON: https://www.json.org/json-en.html

Generating a genesis file
-------------------------

To generate a genesis file you can use the following commands run from the root
of the repository.

First ensure the gengen tool is built:

.. code-block:: bash

   make all

Then generate a genesis file with the following command:

.. code-block:: bash

   ./build/bin/gengen --min-gas-price 10 --user 1e12,v,1,:6789 --user 1e12,v,1,:6799 --user-keys userkeys --out-file genesis.json

This builds a genesis file with a network of 2 users that are validators, the
private keys for the users will be stored in the file ``userkeys`` in the order
that users are specified on the commandline.

The tool has comprehensive built-in help, that can be viewed by running:

.. code-block:: bash

   ./build/bin/gengen --help

If you look at the genesis file generated by gengen you will see some fields
whose values were not provided to gengen. This is because there are many fields
that are not actually made use of by the Autonity project but are, nonetheless,
required in order for the ethereum virtual machine to function properly and so
need to remain as part of the genesis file. Also, depending on the way the
JSON_ encoding is specified, fields that are unset can appear with zero values
in the genesis file. Additionally there are fields that are used by Autonity
but which either have only one reasonable value or need a randomised value.
These fields are set automatically.

Genesis file detailed description
---------------------------------


A full description of all the fields in the genesis file is provided below.
Fields are filled with zero values to give an idea of the type of data that
each field holds. Comments have been added in the file here for clarity, but
please note that comments are not permitted in valid JSON_.

..
 We set the highlight to text here since this is not valid json.

 The comment blocks were formatted by writing the comment without the preceding
 '// ' and then line wrapping to 80 chars and then prepending each line with
 '// '

 TODO link enode description to documentation - https://github.com/clearmatics/autonity/issues/528

.. code-block:: text

   {

     // config was originally intended by the geth team to hold config for the
     // ethereum client that did not impact the contents of block 0 (the genesis
     // block), for the most part it still does, except that the committee field
     // in block 0 is derived from the Autonity users specified inside
     // autonityContract (see below).

     "config": {

       // chainId acts as a chain discriminator that is incorporated into
       // transaction signatures to prevent a single transaction being used across
       // multiple chains. It was added after the creation of ethereum classic, so
       // that users could control which chain their transactions should be
       // executed on. The gengen tool sets it to a random 256 bit value to negate
       // the chance that transactions from one private network could be reused on
       // another.

       "chainId": 0,

       // Each of the following "block" fields relates to some protocol changes
       // that have been made to ethereum, the number defines the block at which
       // the protocol changes become active. The blocks immediately below are all
       // the protocol changes that Autonity makes use of. Since we are starting a
       // new network from scratch the block number should be set to 0 in all
       // cases so that the modifications are available from the point of
       // initialisation. The gengen tool sets all these blocks to zero.

       "homesteadBlock": 0,
       "eip150Block": 0,
       "eip150Hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
       "eip155Block": 0,
       "eip158Block": 0,
       "byzantiumBlock": 0,
       "constantinopleBlock": 0,
       "petersburgBlock": 0,

       // The following blocks and daoForkSupport are protocol modifications that
       // are not used by Autonity, they should not be set. The gengen tool does
       // not set the following blocks or daoForkSupport.

       "daoForkBlock": 0,
       "daoForkSupport": 0,
       "istanbulBlock": 0,
       "muirGlacierBlock": 0,
       "ewasmBlock": 0,

       // ethash defines config  for the normal ethereum POW consensus protocol,
       // which is not used by Autonity and should not be set. The gengen tool
       // does not set this.

       "ethash": {},

       // tendermint defines configuration for the tendermint consensus protocol
       // used by Autonity, and must be set. The gengen tool will set this.

       "tendermint": {

         // block-period defines the minimum time in seconds between blocks.
         // Without this property limiting the speed at which blocks can be
         // processed, node APIs can become unresponsive while the node consumes
         // all resources processing blocks. The gengen tool sets this to 1 which
         // gives the best performance without nodes becoming unresponsive.

         "block-period": 0,

       },

       // autonityContract defines the configuration for the Autonity contract
       // that manages who can participate in the network and controls the
       // minGasPrice. It must be set. The gengen tool will set it based on the
       // parameters it was provided.

       "autonityContract": {

         // deployer is a special address used as a mechanism to restrict certain
         // function calls in the Autonity contract to be called only by the
         // autonity client. The Autonity contract only accepts calls to the
         // restricted functions if they come from the deployer address.
         // Internally the client executes these functions by calling the EVM
         // directly, bypassing any code that processes transactions and verifies
         // transaction signatures, when it makes these calls it uses the deployer
         // address as the sender address. It is important that no participants
         // know the private key belonging to the deployer address, there is
         // future work to ensure that participants cannot use the deployer
         // address. The gengen tool randomly genereates the deployer address.

         "deployer": "0x0000000000000000000000000000000000000000",

         // The bytecode of the Autonity contract, if left unset the Autonity
         // client will use the embedded contract bytecode. It is advisable to
         // leave this blank since the embedded contract bytecode should be in
         // sync with the Autonity client code. The gengen tool leaves this blank.
         // If this is set then the abi field should be set with an ABI generated
         // from the same contract source.

         "bytecode": "",

         // The ABI (Application Binary Interface) of the Autonity contract, if
         // left unset the Autonity client will use the embedded contract ABI. It
         // is advisable to leave this blank since the embedded contract ABI
         // should be in sync with the Autonity client code. The gengen tool
         // leaves this blank. If this is set then the bytecode field should be
         // set with bytecode generated from the same contract source.

         "abi": "",

         // minGasPrice sets the minimum gas price for submitting transactions to
         // the network. Transactions submitted with a gas price lower than this
         // will be ignored. This is what will determine the minimum cost for
         // users to interact with the network. And consequently how much gas
         // validators will receive for running the network. Depending on how
         // gasLimit is set there may or may not be an incentive to submit
         // transactions with higher gas prices than the minimum. The value is set
         // in Wei (1 ETH is 10^18 Wei). It is left to the network creator to
         // choose a value for minGasPrice. The gengen tool will set according to
         // its min gas price flag.

         "minGasPrice": 0,

         // operator is the address of the network operator. This is the account
         // that can control who participates in the network, what their role is,
         // how much stake they have and what is the minimumGasPrice. It must be
         // an account address of one of the users (defined below). It is left to
         // the network creator to choose who will be the operator. If using
         // gengen it will take care of filling out operator with the address of
         // the chosen user.

         "operator": "0x0000000000000000000000000000000000000000",

         // users specifies the initial set of members of the system. It is left
         // to the network creator to define the users. The gengen tool will
         // generate users from the parameters it is provided.

         "users": [
           {

             // address is the account address for this user, if enode is
             // specified, then the account address does not need to be specified.
             // The gengen tool will not set address.

             "address": "0x0000000000000000000000000000000000000000",

             // The enode defines a url that identifies a node in the Autonity
             // system. It has the following format:
             // 'enode://<hex_encoded_ecdsa_secp256k1_public_key>@<ip>:<port>[?discport=<udp_discovery_port>]'

             // The discport query parameter is optional and defines the udp
             // discovery port for a node in the case that it differs from
             // '<port>'.

             // Note that account addresses are derived from a node's public key,
             // as such either can be used as an identifier of a node, but they
             // are not the same.

             // If using gengen, it will generate valid enodes for the parameters
             // it is provided.

             // If address is specified, then the enode does not need to be
             // specified.

             "enode": "",

             // type defines the role that a user has, it must be one of
             // 'participant', 'stakeholder' or 'validator'. Participants are able
             // to connect to the network, receive traffic and send transactions,
             // but they have no control over transaction processing. Stakeholders
             // can do everything participants do but also receive transaction
             // fees, proportional to the amount of stake they hold in the system.
             // Validators can do everything stakeholders can do but they also
             // participate in the decision about what transactions are processed
             // in each block. The gengen tool will set this based on the
             // parameters it is provided.

             "type": "",

             // stake is a token managed by the Autonity contract this sets the
             // starting amount of stake for a user. The total starting stake will
             // be the sum of stake allocated to each user. The total amount of
             // stake cannot be more than (2^256)-1. Users of type 'participant'
             // must have stake set to zero. The gengen tool will set this based
             // on the parameters it is provided.

             "stake": 0
           }
         ]
       }
     },


     // nonce is unused by Autonity but is required to be part of the block header
     // for the virtual machine to function correctly. The gengen tool leaves this
     // unset.

     "nonce": "0x0",

     // timestamp defines the time of the first block. In general block timestamps
     // are the unix time in seconds. The gengen tool sets this to the unix
     // timestamp in seconds at the point at which the genesis is created.

     "timestamp": "0x0",

     // extraData is unused by Autonity but is required to be part of the block
     // header for the virtual machine to function correctly. The gengen tool
     // leaves this unset.

     "extraData": "0x",

     // gasLimit is a 64 bit value that defines the amount of gas that can be
     // expended while processing transactions for a block. It essentially limits
     // the number of transactions that can fit in a single block. The gengen tool
     // sets this to (2^64)-1 to allow for the maximum possible amount of
     // transactions to be able to fit in a block.

     "gasLimit": "0x0",

     // difficulty is unused by Autonity but is required to be part of the block
     // header for the virtual machine to function correctly. The gengen tool
     // leaves this unset.

     "difficulty": "0x0",

     // mixHash was used in geth to improve the performance of invalid block
     // detection performance, in the Autonity project we set it to a sentinel
     // value. The gengen tool sets this sentinel value.

     "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",

     The coinbase address field of the genesis file is unused by Autonity, but
     Autonity does use the coinbase field in blocks from block 1 onward to hold
     the address of the block proposer. It is also required to be part of the
     block header for the virtual machine to function correctly. The gengen
     tool leaves this unset.

     "coinbase": "0x0000000000000000000000000000000000000000",

     // This is a mapping from address to amount of initial eth to assign to that
     // address. It is left to the network creator to define the mapping. The
     // addresses must correspond to the users defined within autonityContract.
     // The gengen tool sets this based on the parameters it is provided.

     "alloc": {},

     // The following fields are used only in testing and so should not be set.
     // The gengen tool leaves these unset.

     "number": "0x0",
     "gasUsed": "0x0",
     "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
   }


